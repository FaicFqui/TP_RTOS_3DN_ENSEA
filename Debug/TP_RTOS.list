
TP_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000878c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800895c  0800895c  0000995c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a4c  08008a4c  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  08008a4c  08008a4c  00009a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a54  08008a54  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a54  08008a54  00009a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a58  08008a58  00009a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008a5c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e2c  20000074  08008ad0  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ea0  08008ad0  0000aea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2ae  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee9  00000000  00000000  00026352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0002a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000113b  00000000  00000000  0002b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005204  00000000  00000000  0002c9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c98f  00000000  00000000  00031bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe007  00000000  00000000  0004e54e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c555  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006440  00000000  00000000  0014c598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001529d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008944 	.word	0x08008944

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08008944 	.word	0x08008944

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b090      	sub	sp, #64	@ 0x40
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c6:	4bad      	ldr	r3, [pc, #692]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4aac      	ldr	r2, [pc, #688]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80005cc:	f043 0310 	orr.w	r3, r3, #16
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4baa      	ldr	r3, [pc, #680]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0310 	and.w	r3, r3, #16
 80005da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80005dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005de:	4ba7      	ldr	r3, [pc, #668]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4aa6      	ldr	r2, [pc, #664]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80005e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4ba4      	ldr	r3, [pc, #656]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80005f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4ba1      	ldr	r3, [pc, #644]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4aa0      	ldr	r2, [pc, #640]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b9e      	ldr	r3, [pc, #632]	@ (800087c <MX_GPIO_Init+0x2cc>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	623b      	str	r3, [r7, #32]
 800060c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	4b9b      	ldr	r3, [pc, #620]	@ (800087c <MX_GPIO_Init+0x2cc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a9a      	ldr	r2, [pc, #616]	@ (800087c <MX_GPIO_Init+0x2cc>)
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b98      	ldr	r3, [pc, #608]	@ (800087c <MX_GPIO_Init+0x2cc>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0308 	and.w	r3, r3, #8
 8000622:	61fb      	str	r3, [r7, #28]
 8000624:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b95      	ldr	r3, [pc, #596]	@ (800087c <MX_GPIO_Init+0x2cc>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a94      	ldr	r2, [pc, #592]	@ (800087c <MX_GPIO_Init+0x2cc>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b92      	ldr	r3, [pc, #584]	@ (800087c <MX_GPIO_Init+0x2cc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	61bb      	str	r3, [r7, #24]
 800063c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b8f      	ldr	r3, [pc, #572]	@ (800087c <MX_GPIO_Init+0x2cc>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a8e      	ldr	r2, [pc, #568]	@ (800087c <MX_GPIO_Init+0x2cc>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b8c      	ldr	r3, [pc, #560]	@ (800087c <MX_GPIO_Init+0x2cc>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000656:	4b89      	ldr	r3, [pc, #548]	@ (800087c <MX_GPIO_Init+0x2cc>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a88      	ldr	r2, [pc, #544]	@ (800087c <MX_GPIO_Init+0x2cc>)
 800065c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b86      	ldr	r3, [pc, #536]	@ (800087c <MX_GPIO_Init+0x2cc>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800066e:	4b83      	ldr	r3, [pc, #524]	@ (800087c <MX_GPIO_Init+0x2cc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a82      	ldr	r2, [pc, #520]	@ (800087c <MX_GPIO_Init+0x2cc>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b80      	ldr	r3, [pc, #512]	@ (800087c <MX_GPIO_Init+0x2cc>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000686:	4b7d      	ldr	r3, [pc, #500]	@ (800087c <MX_GPIO_Init+0x2cc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a7c      	ldr	r2, [pc, #496]	@ (800087c <MX_GPIO_Init+0x2cc>)
 800068c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b7a      	ldr	r3, [pc, #488]	@ (800087c <MX_GPIO_Init+0x2cc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069e:	4b77      	ldr	r3, [pc, #476]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a76      	ldr	r2, [pc, #472]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80006a4:	f043 0320 	orr.w	r3, r3, #32
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b74      	ldr	r3, [pc, #464]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0320 	and.w	r3, r3, #32
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	4b71      	ldr	r3, [pc, #452]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a70      	ldr	r2, [pc, #448]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b6e      	ldr	r3, [pc, #440]	@ (800087c <MX_GPIO_Init+0x2cc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f241 010e 	movw	r1, #4110	@ 0x100e
 80006d4:	486a      	ldr	r0, [pc, #424]	@ (8000880 <MX_GPIO_Init+0x2d0>)
 80006d6:	f001 fa3b 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2108      	movs	r1, #8
 80006de:	4869      	ldr	r0, [pc, #420]	@ (8000884 <MX_GPIO_Init+0x2d4>)
 80006e0:	f001 fa36 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ea:	4867      	ldr	r0, [pc, #412]	@ (8000888 <MX_GPIO_Init+0x2d8>)
 80006ec:	f001 fa30 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	21c8      	movs	r1, #200	@ 0xc8
 80006f4:	4865      	ldr	r0, [pc, #404]	@ (800088c <MX_GPIO_Init+0x2dc>)
 80006f6:	f001 fa2b 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80006fa:	2310      	movs	r3, #16
 80006fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fe:	2302      	movs	r3, #2
 8000700:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800070a:	230e      	movs	r3, #14
 800070c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000712:	4619      	mov	r1, r3
 8000714:	485e      	ldr	r0, [pc, #376]	@ (8000890 <MX_GPIO_Init+0x2e0>)
 8000716:	f001 f86f 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800071a:	2308      	movs	r3, #8
 800071c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800072a:	4619      	mov	r1, r3
 800072c:	4858      	ldr	r0, [pc, #352]	@ (8000890 <MX_GPIO_Init+0x2e0>)
 800072e:	f001 f863 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000732:	2304      	movs	r3, #4
 8000734:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000742:	2309      	movs	r3, #9
 8000744:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800074a:	4619      	mov	r1, r3
 800074c:	4850      	ldr	r0, [pc, #320]	@ (8000890 <MX_GPIO_Init+0x2e0>)
 800074e:	f001 f853 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000752:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000764:	230b      	movs	r3, #11
 8000766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000768:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800076c:	4619      	mov	r1, r3
 800076e:	4847      	ldr	r0, [pc, #284]	@ (800088c <MX_GPIO_Init+0x2dc>)
 8000770:	f001 f842 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000774:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000778:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000786:	230c      	movs	r3, #12
 8000788:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800078a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800078e:	4619      	mov	r1, r3
 8000790:	483f      	ldr	r0, [pc, #252]	@ (8000890 <MX_GPIO_Init+0x2e0>)
 8000792:	f001 f831 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000796:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079c:	2312      	movs	r3, #18
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007a8:	2304      	movs	r3, #4
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007b0:	4619      	mov	r1, r3
 80007b2:	4838      	ldr	r0, [pc, #224]	@ (8000894 <MX_GPIO_Init+0x2e4>)
 80007b4:	f001 f820 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80007b8:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80007bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c6:	2303      	movs	r3, #3
 80007c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80007ca:	230a      	movs	r3, #10
 80007cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007d2:	4619      	mov	r1, r3
 80007d4:	482f      	ldr	r0, [pc, #188]	@ (8000894 <MX_GPIO_Init+0x2e4>)
 80007d6:	f001 f80f 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80007da:	2310      	movs	r3, #16
 80007dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007ea:	2302      	movs	r3, #2
 80007ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007f2:	4619      	mov	r1, r3
 80007f4:	4827      	ldr	r0, [pc, #156]	@ (8000894 <MX_GPIO_Init+0x2e4>)
 80007f6:	f000 ffff 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80007fa:	2380      	movs	r3, #128	@ 0x80
 80007fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800080a:	2308      	movs	r3, #8
 800080c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000812:	4619      	mov	r1, r3
 8000814:	4820      	ldr	r0, [pc, #128]	@ (8000898 <MX_GPIO_Init+0x2e8>)
 8000816:	f000 ffef 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800081a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800081e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800082c:	230c      	movs	r3, #12
 800082e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000834:	4619      	mov	r1, r3
 8000836:	4819      	ldr	r0, [pc, #100]	@ (800089c <MX_GPIO_Init+0x2ec>)
 8000838:	f000 ffde 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800083c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800084e:	2301      	movs	r3, #1
 8000850:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000856:	4619      	mov	r1, r3
 8000858:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <MX_GPIO_Init+0x2f0>)
 800085a:	f000 ffcd 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800085e:	2360      	movs	r3, #96	@ 0x60
 8000860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800086e:	230d      	movs	r3, #13
 8000870:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000872:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000876:	4619      	mov	r1, r3
 8000878:	e014      	b.n	80008a4 <MX_GPIO_Init+0x2f4>
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40022000 	.word	0x40022000
 8000884:	40022800 	.word	0x40022800
 8000888:	40021c00 	.word	0x40021c00
 800088c:	40021800 	.word	0x40021800
 8000890:	40021000 	.word	0x40021000
 8000894:	40020400 	.word	0x40020400
 8000898:	40020c00 	.word	0x40020c00
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	48bb      	ldr	r0, [pc, #748]	@ (8000b94 <MX_GPIO_Init+0x5e4>)
 80008a6:	f000 ffa7 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80008aa:	2340      	movs	r3, #64	@ 0x40
 80008ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008ba:	230a      	movs	r3, #10
 80008bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008c2:	4619      	mov	r1, r3
 80008c4:	48b4      	ldr	r0, [pc, #720]	@ (8000b98 <MX_GPIO_Init+0x5e8>)
 80008c6:	f000 ff97 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80008ca:	f248 1333 	movw	r3, #33075	@ 0x8133
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008dc:	230c      	movs	r3, #12
 80008de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008e4:	4619      	mov	r1, r3
 80008e6:	48ad      	ldr	r0, [pc, #692]	@ (8000b9c <MX_GPIO_Init+0x5ec>)
 80008e8:	f000 ff86 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80008ec:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008fe:	230e      	movs	r3, #14
 8000900:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000902:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000906:	4619      	mov	r1, r3
 8000908:	48a5      	ldr	r0, [pc, #660]	@ (8000ba0 <MX_GPIO_Init+0x5f0>)
 800090a:	f000 ff75 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800090e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000920:	230c      	movs	r3, #12
 8000922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000924:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000928:	4619      	mov	r1, r3
 800092a:	489e      	ldr	r0, [pc, #632]	@ (8000ba4 <MX_GPIO_Init+0x5f4>)
 800092c:	f000 ff64 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8000930:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000942:	230a      	movs	r3, #10
 8000944:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800094a:	4619      	mov	r1, r3
 800094c:	4896      	ldr	r0, [pc, #600]	@ (8000ba8 <MX_GPIO_Init+0x5f8>)
 800094e:	f000 ff53 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000952:	23f0      	movs	r3, #240	@ 0xf0
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000962:	230a      	movs	r3, #10
 8000964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000966:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800096a:	4619      	mov	r1, r3
 800096c:	488f      	ldr	r0, [pc, #572]	@ (8000bac <MX_GPIO_Init+0x5fc>)
 800096e:	f000 ff43 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000972:	23f7      	movs	r3, #247	@ 0xf7
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000982:	230e      	movs	r3, #14
 8000984:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800098a:	4619      	mov	r1, r3
 800098c:	4888      	ldr	r0, [pc, #544]	@ (8000bb0 <MX_GPIO_Init+0x600>)
 800098e:	f000 ff33 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000992:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009a4:	2309      	movs	r3, #9
 80009a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ac:	4619      	mov	r1, r3
 80009ae:	487b      	ldr	r0, [pc, #492]	@ (8000b9c <MX_GPIO_Init+0x5ec>)
 80009b0:	f000 ff22 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80009b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009c6:	230a      	movs	r3, #10
 80009c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ce:	4619      	mov	r1, r3
 80009d0:	4872      	ldr	r0, [pc, #456]	@ (8000b9c <MX_GPIO_Init+0x5ec>)
 80009d2:	f000 ff11 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009d6:	2320      	movs	r3, #32
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e6:	2307      	movs	r3, #7
 80009e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ee:	4619      	mov	r1, r3
 80009f0:	486c      	ldr	r0, [pc, #432]	@ (8000ba4 <MX_GPIO_Init+0x5f4>)
 80009f2:	f000 ff01 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80009f6:	2308      	movs	r3, #8
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a06:	230d      	movs	r3, #13
 8000a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4864      	ldr	r0, [pc, #400]	@ (8000ba4 <MX_GPIO_Init+0x5f4>)
 8000a12:	f000 fef1 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000a16:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	485f      	ldr	r0, [pc, #380]	@ (8000bac <MX_GPIO_Init+0x5fc>)
 8000a30:	f000 fee2 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a46:	4619      	mov	r1, r3
 8000a48:	485a      	ldr	r0, [pc, #360]	@ (8000bb4 <MX_GPIO_Init+0x604>)
 8000a4a:	f000 fed5 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a4e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a60:	230c      	movs	r3, #12
 8000a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4853      	ldr	r0, [pc, #332]	@ (8000bb8 <MX_GPIO_Init+0x608>)
 8000a6c:	f000 fec4 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a70:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a82:	230e      	movs	r3, #14
 8000a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4847      	ldr	r0, [pc, #284]	@ (8000bac <MX_GPIO_Init+0x5fc>)
 8000a8e:	f000 feb3 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a92:	2308      	movs	r3, #8
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4841      	ldr	r0, [pc, #260]	@ (8000bb0 <MX_GPIO_Init+0x600>)
 8000aaa:	f000 fea5 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000aae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ac0:	230d      	movs	r3, #13
 8000ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4834      	ldr	r0, [pc, #208]	@ (8000b9c <MX_GPIO_Init+0x5ec>)
 8000acc:	f000 fe94 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4830      	ldr	r0, [pc, #192]	@ (8000ba4 <MX_GPIO_Init+0x5f4>)
 8000ae4:	f000 fe88 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000af8:	230c      	movs	r3, #12
 8000afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b00:	4619      	mov	r1, r3
 8000b02:	4828      	ldr	r0, [pc, #160]	@ (8000ba4 <MX_GPIO_Init+0x5f4>)
 8000b04:	f000 fe78 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b08:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4827      	ldr	r0, [pc, #156]	@ (8000bbc <MX_GPIO_Init+0x60c>)
 8000b1e:	f000 fe6b 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4820      	ldr	r0, [pc, #128]	@ (8000bbc <MX_GPIO_Init+0x60c>)
 8000b3c:	f000 fe5c 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b40:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b52:	230d      	movs	r3, #13
 8000b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4817      	ldr	r0, [pc, #92]	@ (8000bbc <MX_GPIO_Init+0x60c>)
 8000b5e:	f000 fe4b 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000b62:	2301      	movs	r3, #1
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000b72:	2302      	movs	r3, #2
 8000b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480b      	ldr	r0, [pc, #44]	@ (8000bac <MX_GPIO_Init+0x5fc>)
 8000b7e:	f000 fe3b 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000b82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	e015      	b.n	8000bc0 <MX_GPIO_Init+0x610>
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	40021800 	.word	0x40021800
 8000ba0:	40022400 	.word	0x40022400
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40022000 	.word	0x40022000
 8000bb0:	40022800 	.word	0x40022800
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40021400 	.word	0x40021400
 8000bbc:	40021c00 	.word	0x40021c00
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4895      	ldr	r0, [pc, #596]	@ (8000e24 <MX_GPIO_Init+0x874>)
 8000bce:	f000 fe13 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000bd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bd8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be6:	4619      	mov	r1, r3
 8000be8:	488f      	ldr	r0, [pc, #572]	@ (8000e28 <MX_GPIO_Init+0x878>)
 8000bea:	f000 fe05 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000bee:	23c0      	movs	r3, #192	@ 0xc0
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000bfe:	2308      	movs	r3, #8
 8000c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c06:	4619      	mov	r1, r3
 8000c08:	4888      	ldr	r0, [pc, #544]	@ (8000e2c <MX_GPIO_Init+0x87c>)
 8000c0a:	f000 fdf5 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c0e:	2310      	movs	r3, #16
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c1e:	230a      	movs	r3, #10
 8000c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c26:	4619      	mov	r1, r3
 8000c28:	4881      	ldr	r0, [pc, #516]	@ (8000e30 <MX_GPIO_Init+0x880>)
 8000c2a:	f000 fde5 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c2e:	2328      	movs	r3, #40	@ 0x28
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c46:	4619      	mov	r1, r3
 8000c48:	4879      	ldr	r0, [pc, #484]	@ (8000e30 <MX_GPIO_Init+0x880>)
 8000c4a:	f000 fdd5 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000c4e:	23c8      	movs	r3, #200	@ 0xc8
 8000c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c62:	4619      	mov	r1, r3
 8000c64:	4873      	ldr	r0, [pc, #460]	@ (8000e34 <MX_GPIO_Init+0x884>)
 8000c66:	f000 fdc7 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c6a:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c70:	2303      	movs	r3, #3
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	486e      	ldr	r0, [pc, #440]	@ (8000e38 <MX_GPIO_Init+0x888>)
 8000c80:	f000 fdba 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c84:	2308      	movs	r3, #8
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c94:	230c      	movs	r3, #12
 8000c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4863      	ldr	r0, [pc, #396]	@ (8000e2c <MX_GPIO_Init+0x87c>)
 8000ca0:	f000 fdaa 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cb4:	230a      	movs	r3, #10
 8000cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	485b      	ldr	r0, [pc, #364]	@ (8000e2c <MX_GPIO_Init+0x87c>)
 8000cc0:	f000 fd9a 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cc4:	2332      	movs	r3, #50	@ 0x32
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd4:	230b      	movs	r3, #11
 8000cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4853      	ldr	r0, [pc, #332]	@ (8000e2c <MX_GPIO_Init+0x87c>)
 8000ce0:	f000 fd8a 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cf4:	2309      	movs	r3, #9
 8000cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	484f      	ldr	r0, [pc, #316]	@ (8000e3c <MX_GPIO_Init+0x88c>)
 8000d00:	f000 fd7a 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d04:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d16:	2309      	movs	r3, #9
 8000d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4847      	ldr	r0, [pc, #284]	@ (8000e40 <MX_GPIO_Init+0x890>)
 8000d22:	f000 fd69 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d26:	2304      	movs	r3, #4
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d36:	4619      	mov	r1, r3
 8000d38:	483e      	ldr	r0, [pc, #248]	@ (8000e34 <MX_GPIO_Init+0x884>)
 8000d3a:	f000 fd5d 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000d3e:	2382      	movs	r3, #130	@ 0x82
 8000d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d4e:	230b      	movs	r3, #11
 8000d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d56:	4619      	mov	r1, r3
 8000d58:	4832      	ldr	r0, [pc, #200]	@ (8000e24 <MX_GPIO_Init+0x874>)
 8000d5a:	f000 fd4d 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d62:	2303      	movs	r3, #3
 8000d64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6e:	4619      	mov	r1, r3
 8000d70:	482c      	ldr	r0, [pc, #176]	@ (8000e24 <MX_GPIO_Init+0x874>)
 8000d72:	f000 fd41 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000d76:	2310      	movs	r3, #16
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d86:	230d      	movs	r3, #13
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4824      	ldr	r0, [pc, #144]	@ (8000e24 <MX_GPIO_Init+0x874>)
 8000d92:	f000 fd31 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000d96:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000da8:	2304      	movs	r3, #4
 8000daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db0:	4619      	mov	r1, r3
 8000db2:	481f      	ldr	r0, [pc, #124]	@ (8000e30 <MX_GPIO_Init+0x880>)
 8000db4:	f000 fd20 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_CLK_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin;
 8000db8:	2320      	movs	r3, #32
 8000dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dc8:	230a      	movs	r3, #10
 8000dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4814      	ldr	r0, [pc, #80]	@ (8000e24 <MX_GPIO_Init+0x874>)
 8000dd4:	f000 fd10 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000dd8:	2340      	movs	r3, #64	@ 0x40
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000de8:	2309      	movs	r3, #9
 8000dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df0:	4619      	mov	r1, r3
 8000df2:	480f      	ldr	r0, [pc, #60]	@ (8000e30 <MX_GPIO_Init+0x880>)
 8000df4:	f000 fd00 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000df8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e12:	4619      	mov	r1, r3
 8000e14:	4809      	ldr	r0, [pc, #36]	@ (8000e3c <MX_GPIO_Init+0x88c>)
 8000e16:	f000 fcef 	bl	80017f8 <HAL_GPIO_Init>

}
 8000e1a:	bf00      	nop
 8000e1c:	3740      	adds	r7, #64	@ 0x40
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40022000 	.word	0x40022000
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40021c00 	.word	0x40021c00
 8000e34:	40021800 	.word	0x40021800
 8000e38:	40021400 	.word	0x40021400
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	40020c00 	.word	0x40020c00

08000e44 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e4c:	1d39      	adds	r1, r7, #4
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	2201      	movs	r2, #1
 8000e54:	4803      	ldr	r0, [pc, #12]	@ (8000e64 <__io_putchar+0x20>)
 8000e56:	f002 fab3 	bl	80033c0 <HAL_UART_Transmit>
return ch;
 8000e5a:	687b      	ldr	r3, [r7, #4]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200000e0 	.word	0x200000e0

08000e68 <fonction>:





int fonction(int argc, char **argv) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	printf("Une fonction inutile\r\n");
 8000e72:	4804      	ldr	r0, [pc, #16]	@ (8000e84 <fonction+0x1c>)
 8000e74:	f006 fe04 	bl	8007a80 <puts>
	return 0;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	0800895c 	.word	0x0800895c

08000e88 <ShellTask>:

void ShellTask(void *argument) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	drv_uart_set_task_handle(xTaskGetCurrentTaskHandle());
 8000e90:	f005 f974 	bl	800617c <xTaskGetCurrentTaskHandle>
 8000e94:	4603      	mov	r3, r0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f006 fae0 	bl	800745c <drv_uart_set_task_handle>
	HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_rx_char, 1);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4908      	ldr	r1, [pc, #32]	@ (8000ec0 <ShellTask+0x38>)
 8000ea0:	4808      	ldr	r0, [pc, #32]	@ (8000ec4 <ShellTask+0x3c>)
 8000ea2:	f002 fb16 	bl	80034d2 <HAL_UART_Receive_IT>

	shell_init();
 8000ea6:	f006 fbab 	bl	8007600 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 8000eaa:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <ShellTask+0x40>)
 8000eac:	4907      	ldr	r1, [pc, #28]	@ (8000ecc <ShellTask+0x44>)
 8000eae:	2066      	movs	r0, #102	@ 0x66
 8000eb0:	f006 fbcc 	bl	800764c <shell_add>

	shell_run();  // Boucle bloquante
 8000eb4:	f006 fc76 	bl	80077a4 <shell_run>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20004b4c 	.word	0x20004b4c
 8000ec4:	200000e0 	.word	0x200000e0
 8000ec8:	08008974 	.word	0x08008974
 8000ecc:	08000e69 	.word	0x08000e69

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed6:	f000 faee 	bl	80014b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eda:	f000 f817 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ede:	f7ff fb67 	bl	80005b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ee2:	f000 fa21 	bl	8001328 <MX_USART1_UART_Init>
  ret = xTaskCreate(task_bug, "Tache 2", STACK_SIZE, (void *) TASK2_DELAY, TASK2_PRIORITY, NULL);
  configASSERT(pdPASS == ret);*/



  xTaskCreate(ShellTask, "Shell", 512, NULL, tskIDLE_PRIORITY + 1, NULL);
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	2301      	movs	r3, #1
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ef4:	4903      	ldr	r1, [pc, #12]	@ (8000f04 <main+0x34>)
 8000ef6:	4804      	ldr	r0, [pc, #16]	@ (8000f08 <main+0x38>)
 8000ef8:	f004 fb66 	bl	80055c8 <xTaskCreate>

  	  /* Lancement du scheduler */
  	  vTaskStartScheduler();
 8000efc:	f004 fcc4 	bl	8005888 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <main+0x30>
 8000f04:	0800898c 	.word	0x0800898c
 8000f08:	08000e89 	.word	0x08000e89

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	@ 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	2230      	movs	r2, #48	@ 0x30
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f006 fec4 	bl	8007ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <SystemClock_Config+0xd4>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f34:	4a2a      	ldr	r2, [pc, #168]	@ (8000fe0 <SystemClock_Config+0xd4>)
 8000f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3c:	4b28      	ldr	r3, [pc, #160]	@ (8000fe0 <SystemClock_Config+0xd4>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f48:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <SystemClock_Config+0xd8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a25      	ldr	r2, [pc, #148]	@ (8000fe4 <SystemClock_Config+0xd8>)
 8000f4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <SystemClock_Config+0xd8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f74:	2319      	movs	r3, #25
 8000f76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000f78:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000f7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fe4a 	bl	8001c24 <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f96:	f000 f839 	bl	800100c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f9a:	f000 fdf3 	bl	8001b84 <HAL_PWREx_EnableOverDrive>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000fa4:	f000 f832 	bl	800100c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa8:	230f      	movs	r3, #15
 8000faa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fac:	2302      	movs	r3, #2
 8000fae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fb4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2107      	movs	r1, #7
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 f8d0 	bl	800216c <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000fd2:	f000 f81b 	bl	800100c <Error_Handler>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3750      	adds	r7, #80	@ 0x50
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a04      	ldr	r2, [pc, #16]	@ (8001008 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ffa:	f000 fa69 	bl	80014d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40001000 	.word	0x40001000

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <Error_Handler+0x8>

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <HAL_MspInit+0x4c>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	4a10      	ldr	r2, [pc, #64]	@ (8001064 <HAL_MspInit+0x4c>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001028:	6413      	str	r3, [r2, #64]	@ 0x40
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <HAL_MspInit+0x4c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <HAL_MspInit+0x4c>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <HAL_MspInit+0x4c>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001040:	6453      	str	r3, [r2, #68]	@ 0x44
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <HAL_MspInit+0x4c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	210f      	movs	r1, #15
 8001052:	f06f 0001 	mvn.w	r0, #1
 8001056:	f000 fb13 	bl	8001680 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800

08001068 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	@ 0x38
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001074:	2300      	movs	r3, #0
 8001076:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001078:	4b33      	ldr	r3, [pc, #204]	@ (8001148 <HAL_InitTick+0xe0>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	4a32      	ldr	r2, [pc, #200]	@ (8001148 <HAL_InitTick+0xe0>)
 800107e:	f043 0310 	orr.w	r3, r3, #16
 8001082:	6413      	str	r3, [r2, #64]	@ 0x40
 8001084:	4b30      	ldr	r3, [pc, #192]	@ (8001148 <HAL_InitTick+0xe0>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001090:	f107 0210 	add.w	r2, r7, #16
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f001 fa4c 	bl	8002538 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d103      	bne.n	80010b2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010aa:	f001 fa1d 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 80010ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80010b0:	e004      	b.n	80010bc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010b2:	f001 fa19 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 80010b6:	4603      	mov	r3, r0
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010be:	4a23      	ldr	r2, [pc, #140]	@ (800114c <HAL_InitTick+0xe4>)
 80010c0:	fba2 2303 	umull	r2, r3, r2, r3
 80010c4:	0c9b      	lsrs	r3, r3, #18
 80010c6:	3b01      	subs	r3, #1
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_InitTick+0xe8>)
 80010cc:	4a21      	ldr	r2, [pc, #132]	@ (8001154 <HAL_InitTick+0xec>)
 80010ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <HAL_InitTick+0xe8>)
 80010d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001150 <HAL_InitTick+0xe8>)
 80010da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <HAL_InitTick+0xe8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <HAL_InitTick+0xe8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <HAL_InitTick+0xe8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010f0:	4817      	ldr	r0, [pc, #92]	@ (8001150 <HAL_InitTick+0xe8>)
 80010f2:	f001 fe43 	bl	8002d7c <HAL_TIM_Base_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001100:	2b00      	cmp	r3, #0
 8001102:	d11b      	bne.n	800113c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001104:	4812      	ldr	r0, [pc, #72]	@ (8001150 <HAL_InitTick+0xe8>)
 8001106:	f001 fe9b 	bl	8002e40 <HAL_TIM_Base_Start_IT>
 800110a:	4603      	mov	r3, r0
 800110c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001110:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001114:	2b00      	cmp	r3, #0
 8001116:	d111      	bne.n	800113c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001118:	2036      	movs	r0, #54	@ 0x36
 800111a:	f000 facd 	bl	80016b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d808      	bhi.n	8001136 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	2036      	movs	r0, #54	@ 0x36
 800112a:	f000 faa9 	bl	8001680 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <HAL_InitTick+0xf0>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	e002      	b.n	800113c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800113c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001140:	4618      	mov	r0, r3
 8001142:	3738      	adds	r7, #56	@ 0x38
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	431bde83 	.word	0x431bde83
 8001150:	20000090 	.word	0x20000090
 8001154:	40001000 	.word	0x40001000
 8001158:	20000004 	.word	0x20000004

0800115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <NMI_Handler+0x4>

08001164 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <MemManage_Handler+0x4>

08001174 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <UsageFault_Handler+0x4>

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <USART1_IRQHandler>:
  */



void USART1_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */

  HAL_UART_IRQHandler(&huart1);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <USART1_IRQHandler+0x10>)
 800119a:	f002 f9df 	bl	800355c <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200000e0 	.word	0x200000e0

080011a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <TIM6_DAC_IRQHandler+0x10>)
 80011ae:	f001 febf 	bl	8002f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000090 	.word	0x20000090

080011bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	e00a      	b.n	80011e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ce:	f3af 8000 	nop.w
 80011d2:	4601      	mov	r1, r0
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	60ba      	str	r2, [r7, #8]
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbf0      	blt.n	80011ce <_read+0x12>
  }

  return len;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	e009      	b.n	800121c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	60ba      	str	r2, [r7, #8]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fe17 	bl	8000e44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbf1      	blt.n	8001208 <_write+0x12>
  }
  return len;
 8001224:	687b      	ldr	r3, [r7, #4]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <_close>:

int _close(int file)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001256:	605a      	str	r2, [r3, #4]
  return 0;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <_isatty>:

int _isatty(int file)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a0:	4a14      	ldr	r2, [pc, #80]	@ (80012f4 <_sbrk+0x5c>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <_sbrk+0x60>)
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <_sbrk+0x64>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	@ (8001300 <_sbrk+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d207      	bcs.n	80012d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c8:	f006 fd92 	bl	8007df0 <__errno>
 80012cc:	4603      	mov	r3, r0
 80012ce:	220c      	movs	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e009      	b.n	80012ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012de:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a05      	ldr	r2, [pc, #20]	@ (80012fc <_sbrk+0x64>)
 80012e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20050000 	.word	0x20050000
 80012f8:	00000400 	.word	0x00000400
 80012fc:	200000dc 	.word	0x200000dc
 8001300:	20004ea0 	.word	0x20004ea0

08001304 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <SystemInit+0x20>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800130e:	4a05      	ldr	r2, [pc, #20]	@ (8001324 <SystemInit+0x20>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800132c:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <MX_USART1_UART_Init+0x68>)
 800132e:	4a19      	ldr	r2, [pc, #100]	@ (8001394 <MX_USART1_UART_Init+0x6c>)
 8001330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <MX_USART1_UART_Init+0x68>)
 8001334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <MX_USART1_UART_Init+0x68>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <MX_USART1_UART_Init+0x68>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <MX_USART1_UART_Init+0x68>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800134c:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <MX_USART1_UART_Init+0x68>)
 800134e:	220c      	movs	r2, #12
 8001350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <MX_USART1_UART_Init+0x68>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <MX_USART1_UART_Init+0x68>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <MX_USART1_UART_Init+0x68>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001364:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <MX_USART1_UART_Init+0x68>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800136a:	4809      	ldr	r0, [pc, #36]	@ (8001390 <MX_USART1_UART_Init+0x68>)
 800136c:	f001 ffda 	bl	8003324 <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001376:	f7ff fe49 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2105      	movs	r1, #5
 800137e:	2025      	movs	r0, #37	@ 0x25
 8001380:	f000 f97e 	bl	8001680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001384:	2025      	movs	r0, #37	@ 0x25
 8001386:	f000 f997 	bl	80016b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200000e0 	.word	0x200000e0
 8001394:	40011000 	.word	0x40011000

08001398 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0aa      	sub	sp, #168	@ 0xa8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	2284      	movs	r2, #132	@ 0x84
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f006 fc75 	bl	8007ca8 <memset>
  if(uartHandle->Instance==USART1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a25      	ldr	r2, [pc, #148]	@ (8001458 <HAL_UART_MspInit+0xc0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d143      	bne.n	8001450 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013c8:	2340      	movs	r3, #64	@ 0x40
 80013ca:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013cc:	2300      	movs	r3, #0
 80013ce:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4618      	mov	r0, r3
 80013d6:	f001 f8e1 	bl	800259c <HAL_RCCEx_PeriphCLKConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013e0:	f7ff fe14 	bl	800100c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013e4:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <HAL_UART_MspInit+0xc4>)
 80013e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e8:	4a1c      	ldr	r2, [pc, #112]	@ (800145c <HAL_UART_MspInit+0xc4>)
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f0:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <HAL_UART_MspInit+0xc4>)
 80013f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f4:	f003 0310 	and.w	r3, r3, #16
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b17      	ldr	r3, [pc, #92]	@ (800145c <HAL_UART_MspInit+0xc4>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	4a16      	ldr	r2, [pc, #88]	@ (800145c <HAL_UART_MspInit+0xc4>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6313      	str	r3, [r2, #48]	@ 0x30
 8001408:	4b14      	ldr	r3, [pc, #80]	@ (800145c <HAL_UART_MspInit+0xc4>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001414:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001418:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800142e:	2307      	movs	r3, #7
 8001430:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001438:	4619      	mov	r1, r3
 800143a:	4809      	ldr	r0, [pc, #36]	@ (8001460 <HAL_UART_MspInit+0xc8>)
 800143c:	f000 f9dc 	bl	80017f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2105      	movs	r1, #5
 8001444:	2025      	movs	r0, #37	@ 0x25
 8001446:	f000 f91b 	bl	8001680 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800144a:	2025      	movs	r0, #37	@ 0x25
 800144c:	f000 f934 	bl	80016b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001450:	bf00      	nop
 8001452:	37a8      	adds	r7, #168	@ 0xa8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40011000 	.word	0x40011000
 800145c:	40023800 	.word	0x40023800
 8001460:	40020000 	.word	0x40020000

08001464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001464:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800149c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001468:	f7ff ff4c 	bl	8001304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	@ (80014a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	@ (80014b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001492:	f006 fcb3 	bl	8007dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001496:	f7ff fd1b 	bl	8000ed0 <main>
  bx  lr    
 800149a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800149c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014a8:	08008a5c 	.word	0x08008a5c
  ldr r2, =_sbss
 80014ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014b0:	20004ea0 	.word	0x20004ea0

080014b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC_IRQHandler>

080014b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ba:	2003      	movs	r0, #3
 80014bc:	f000 f8d5 	bl	800166a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff fdd1 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c6:	f7ff fda7 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000168 	.word	0x20000168

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000168 	.word	0x20000168

08001510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001520:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <__NVIC_SetPriorityGrouping+0x40>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800152c:	4013      	ands	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	4313      	orrs	r3, r2
 800153c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153e:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <__NVIC_SetPriorityGrouping+0x40>)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	60d3      	str	r3, [r2, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00
 8001554:	05fa0000 	.word	0x05fa0000

08001558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800155c:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <__NVIC_GetPriorityGrouping+0x18>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	f003 0307 	and.w	r3, r3, #7
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db0b      	blt.n	800159e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	f003 021f 	and.w	r2, r3, #31
 800158c:	4907      	ldr	r1, [pc, #28]	@ (80015ac <__NVIC_EnableIRQ+0x38>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	2001      	movs	r0, #1
 8001596:	fa00 f202 	lsl.w	r2, r0, r2
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e100 	.word	0xe000e100

080015b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db0a      	blt.n	80015da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	490c      	ldr	r1, [pc, #48]	@ (80015fc <__NVIC_SetPriority+0x4c>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d8:	e00a      	b.n	80015f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4908      	ldr	r1, [pc, #32]	@ (8001600 <__NVIC_SetPriority+0x50>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3b04      	subs	r3, #4
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	761a      	strb	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	@ 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	2b04      	cmp	r3, #4
 8001620:	bf28      	it	cs
 8001622:	2304      	movcs	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3304      	adds	r3, #4
 800162a:	2b06      	cmp	r3, #6
 800162c:	d902      	bls.n	8001634 <NVIC_EncodePriority+0x30>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3b03      	subs	r3, #3
 8001632:	e000      	b.n	8001636 <NVIC_EncodePriority+0x32>
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	f04f 32ff 	mov.w	r2, #4294967295
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43d9      	mvns	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	4313      	orrs	r3, r2
         );
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	@ 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ff4c 	bl	8001510 <__NVIC_SetPriorityGrouping>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001692:	f7ff ff61 	bl	8001558 <__NVIC_GetPriorityGrouping>
 8001696:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	6978      	ldr	r0, [r7, #20]
 800169e:	f7ff ffb1 	bl	8001604 <NVIC_EncodePriority>
 80016a2:	4602      	mov	r2, r0
 80016a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff80 	bl	80015b0 <__NVIC_SetPriority>
}
 80016b0:	bf00      	nop
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff54 	bl	8001574 <__NVIC_EnableIRQ>
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016e2:	f7ff ff09 	bl	80014f8 <HAL_GetTick>
 80016e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d008      	beq.n	8001706 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2280      	movs	r2, #128	@ 0x80
 80016f8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e052      	b.n	80017ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0216 	bic.w	r2, r2, #22
 8001714:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001724:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	2b00      	cmp	r3, #0
 800172c:	d103      	bne.n	8001736 <HAL_DMA_Abort+0x62>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0208 	bic.w	r2, r2, #8
 8001744:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001756:	e013      	b.n	8001780 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001758:	f7ff fece 	bl	80014f8 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b05      	cmp	r3, #5
 8001764:	d90c      	bls.n	8001780 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2220      	movs	r2, #32
 800176a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2203      	movs	r2, #3
 8001770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e015      	b.n	80017ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1e4      	bne.n	8001758 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001792:	223f      	movs	r2, #63	@ 0x3f
 8001794:	409a      	lsls	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d004      	beq.n	80017d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2280      	movs	r2, #128	@ 0x80
 80017cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00c      	b.n	80017ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2205      	movs	r2, #5
 80017d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0201 	bic.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	@ 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	e175      	b.n	8001b04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001818:	2201      	movs	r2, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8164 	bne.w	8001afe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d005      	beq.n	800184e <HAL_GPIO_Init+0x56>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d130      	bne.n	80018b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	f003 0201 	and.w	r2, r3, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d017      	beq.n	80018ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d123      	bne.n	8001940 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	69b9      	ldr	r1, [r7, #24]
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80be 	beq.w	8001afe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	4b66      	ldr	r3, [pc, #408]	@ (8001b1c <HAL_GPIO_Init+0x324>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	4a65      	ldr	r2, [pc, #404]	@ (8001b1c <HAL_GPIO_Init+0x324>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800198c:	6453      	str	r3, [r2, #68]	@ 0x44
 800198e:	4b63      	ldr	r3, [pc, #396]	@ (8001b1c <HAL_GPIO_Init+0x324>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800199a:	4a61      	ldr	r2, [pc, #388]	@ (8001b20 <HAL_GPIO_Init+0x328>)
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	3302      	adds	r3, #2
 80019a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	220f      	movs	r2, #15
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a58      	ldr	r2, [pc, #352]	@ (8001b24 <HAL_GPIO_Init+0x32c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d037      	beq.n	8001a36 <HAL_GPIO_Init+0x23e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a57      	ldr	r2, [pc, #348]	@ (8001b28 <HAL_GPIO_Init+0x330>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d031      	beq.n	8001a32 <HAL_GPIO_Init+0x23a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a56      	ldr	r2, [pc, #344]	@ (8001b2c <HAL_GPIO_Init+0x334>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d02b      	beq.n	8001a2e <HAL_GPIO_Init+0x236>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a55      	ldr	r2, [pc, #340]	@ (8001b30 <HAL_GPIO_Init+0x338>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d025      	beq.n	8001a2a <HAL_GPIO_Init+0x232>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a54      	ldr	r2, [pc, #336]	@ (8001b34 <HAL_GPIO_Init+0x33c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d01f      	beq.n	8001a26 <HAL_GPIO_Init+0x22e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a53      	ldr	r2, [pc, #332]	@ (8001b38 <HAL_GPIO_Init+0x340>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d019      	beq.n	8001a22 <HAL_GPIO_Init+0x22a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a52      	ldr	r2, [pc, #328]	@ (8001b3c <HAL_GPIO_Init+0x344>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x226>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a51      	ldr	r2, [pc, #324]	@ (8001b40 <HAL_GPIO_Init+0x348>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_GPIO_Init+0x222>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a50      	ldr	r2, [pc, #320]	@ (8001b44 <HAL_GPIO_Init+0x34c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <HAL_GPIO_Init+0x21e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4f      	ldr	r2, [pc, #316]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_GPIO_Init+0x21a>
 8001a0e:	2309      	movs	r3, #9
 8001a10:	e012      	b.n	8001a38 <HAL_GPIO_Init+0x240>
 8001a12:	230a      	movs	r3, #10
 8001a14:	e010      	b.n	8001a38 <HAL_GPIO_Init+0x240>
 8001a16:	2308      	movs	r3, #8
 8001a18:	e00e      	b.n	8001a38 <HAL_GPIO_Init+0x240>
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	e00c      	b.n	8001a38 <HAL_GPIO_Init+0x240>
 8001a1e:	2306      	movs	r3, #6
 8001a20:	e00a      	b.n	8001a38 <HAL_GPIO_Init+0x240>
 8001a22:	2305      	movs	r3, #5
 8001a24:	e008      	b.n	8001a38 <HAL_GPIO_Init+0x240>
 8001a26:	2304      	movs	r3, #4
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x240>
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e004      	b.n	8001a38 <HAL_GPIO_Init+0x240>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e002      	b.n	8001a38 <HAL_GPIO_Init+0x240>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_GPIO_Init+0x240>
 8001a36:	2300      	movs	r3, #0
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	f002 0203 	and.w	r2, r2, #3
 8001a3e:	0092      	lsls	r2, r2, #2
 8001a40:	4093      	lsls	r3, r2
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a48:	4935      	ldr	r1, [pc, #212]	@ (8001b20 <HAL_GPIO_Init+0x328>)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	3302      	adds	r3, #2
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a56:	4b3d      	ldr	r3, [pc, #244]	@ (8001b4c <HAL_GPIO_Init+0x354>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a7a:	4a34      	ldr	r2, [pc, #208]	@ (8001b4c <HAL_GPIO_Init+0x354>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a80:	4b32      	ldr	r3, [pc, #200]	@ (8001b4c <HAL_GPIO_Init+0x354>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aa4:	4a29      	ldr	r2, [pc, #164]	@ (8001b4c <HAL_GPIO_Init+0x354>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aaa:	4b28      	ldr	r3, [pc, #160]	@ (8001b4c <HAL_GPIO_Init+0x354>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ace:	4a1f      	ldr	r2, [pc, #124]	@ (8001b4c <HAL_GPIO_Init+0x354>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <HAL_GPIO_Init+0x354>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001af8:	4a14      	ldr	r2, [pc, #80]	@ (8001b4c <HAL_GPIO_Init+0x354>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3301      	adds	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2b0f      	cmp	r3, #15
 8001b08:	f67f ae86 	bls.w	8001818 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3724      	adds	r7, #36	@ 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40013800 	.word	0x40013800
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40021400 	.word	0x40021400
 8001b3c:	40021800 	.word	0x40021800
 8001b40:	40021c00 	.word	0x40021c00
 8001b44:	40022000 	.word	0x40022000
 8001b48:	40022400 	.word	0x40022400
 8001b4c:	40013c00 	.word	0x40013c00

08001b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b6c:	e003      	b.n	8001b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	041a      	lsls	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b23      	ldr	r3, [pc, #140]	@ (8001c1c <HAL_PWREx_EnableOverDrive+0x98>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	4a22      	ldr	r2, [pc, #136]	@ (8001c1c <HAL_PWREx_EnableOverDrive+0x98>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <HAL_PWREx_EnableOverDrive+0x98>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1d      	ldr	r2, [pc, #116]	@ (8001c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb2:	f7ff fca1 	bl	80014f8 <HAL_GetTick>
 8001bb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bb8:	e009      	b.n	8001bce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bba:	f7ff fc9d 	bl	80014f8 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bc8:	d901      	bls.n	8001bce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e022      	b.n	8001c14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bce:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bda:	d1ee      	bne.n	8001bba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001bdc:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001be2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be8:	f7ff fc86 	bl	80014f8 <HAL_GetTick>
 8001bec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bee:	e009      	b.n	8001c04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bf0:	f7ff fc82 	bl	80014f8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bfe:	d901      	bls.n	8001c04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e007      	b.n	8001c14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c10:	d1ee      	bne.n	8001bf0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40007000 	.word	0x40007000

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e291      	b.n	800215e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8087 	beq.w	8001d56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c48:	4b96      	ldr	r3, [pc, #600]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d00c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c54:	4b93      	ldr	r3, [pc, #588]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d112      	bne.n	8001c86 <HAL_RCC_OscConfig+0x62>
 8001c60:	4b90      	ldr	r3, [pc, #576]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c6c:	d10b      	bne.n	8001c86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d06c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x130>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d168      	bne.n	8001d54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e26b      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x7a>
 8001c90:	4b84      	ldr	r3, [pc, #528]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a83      	ldr	r2, [pc, #524]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e02e      	b.n	8001cfc <HAL_RCC_OscConfig+0xd8>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x9c>
 8001ca6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7b      	ldr	r2, [pc, #492]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001cb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e01d      	b.n	8001cfc <HAL_RCC_OscConfig+0xd8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xc0>
 8001cca:	4b76      	ldr	r3, [pc, #472]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a75      	ldr	r2, [pc, #468]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	4b73      	ldr	r3, [pc, #460]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a72      	ldr	r2, [pc, #456]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0xd8>
 8001ce4:	4b6f      	ldr	r3, [pc, #444]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a6e      	ldr	r2, [pc, #440]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b6c      	ldr	r3, [pc, #432]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a6b      	ldr	r2, [pc, #428]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff fbf8 	bl	80014f8 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fbf4 	bl	80014f8 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	@ 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e21f      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	4b61      	ldr	r3, [pc, #388]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0xe8>
 8001d2a:	e014      	b.n	8001d56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fbe4 	bl	80014f8 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fbe0 	bl	80014f8 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	@ 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e20b      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d46:	4b57      	ldr	r3, [pc, #348]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x110>
 8001d52:	e000      	b.n	8001d56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d069      	beq.n	8001e36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d62:	4b50      	ldr	r3, [pc, #320]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d11c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x190>
 8001d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d116      	bne.n	8001db4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d86:	4b47      	ldr	r3, [pc, #284]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_RCC_OscConfig+0x17a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e1df      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9e:	4b41      	ldr	r3, [pc, #260]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	493d      	ldr	r1, [pc, #244]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db2:	e040      	b.n	8001e36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d023      	beq.n	8001e04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dbc:	4b39      	ldr	r3, [pc, #228]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a38      	ldr	r2, [pc, #224]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fb96 	bl	80014f8 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fb92 	bl	80014f8 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1bd      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de2:	4b30      	ldr	r3, [pc, #192]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b2d      	ldr	r3, [pc, #180]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4929      	ldr	r1, [pc, #164]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
 8001e02:	e018      	b.n	8001e36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e04:	4b27      	ldr	r3, [pc, #156]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a26      	ldr	r2, [pc, #152]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff fb72 	bl	80014f8 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e18:	f7ff fb6e 	bl	80014f8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e199      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d038      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d019      	beq.n	8001e7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e4e:	4a15      	ldr	r2, [pc, #84]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e56:	f7ff fb4f 	bl	80014f8 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5e:	f7ff fb4b 	bl	80014f8 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e176      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x23a>
 8001e7c:	e01a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e82:	4a08      	ldr	r2, [pc, #32]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8a:	f7ff fb35 	bl	80014f8 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e92:	f7ff fb31 	bl	80014f8 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d903      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e15c      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
 8001ea4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea8:	4b91      	ldr	r3, [pc, #580]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ee      	bne.n	8001e92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80a4 	beq.w	800200a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10d      	bne.n	8001eea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b88      	ldr	r3, [pc, #544]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	4a87      	ldr	r2, [pc, #540]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eda:	4b85      	ldr	r3, [pc, #532]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eea:	4b82      	ldr	r3, [pc, #520]	@ (80020f4 <HAL_RCC_OscConfig+0x4d0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d118      	bne.n	8001f28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80020f4 <HAL_RCC_OscConfig+0x4d0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7e      	ldr	r2, [pc, #504]	@ (80020f4 <HAL_RCC_OscConfig+0x4d0>)
 8001efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f02:	f7ff faf9 	bl	80014f8 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0a:	f7ff faf5 	bl	80014f8 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b64      	cmp	r3, #100	@ 0x64
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e120      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f1c:	4b75      	ldr	r3, [pc, #468]	@ (80020f4 <HAL_RCC_OscConfig+0x4d0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x31a>
 8001f30:	4b6f      	ldr	r3, [pc, #444]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f34:	4a6e      	ldr	r2, [pc, #440]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f3c:	e02d      	b.n	8001f9a <HAL_RCC_OscConfig+0x376>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x33c>
 8001f46:	4b6a      	ldr	r3, [pc, #424]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4a:	4a69      	ldr	r2, [pc, #420]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f52:	4b67      	ldr	r3, [pc, #412]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f56:	4a66      	ldr	r2, [pc, #408]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f5e:	e01c      	b.n	8001f9a <HAL_RCC_OscConfig+0x376>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x35e>
 8001f68:	4b61      	ldr	r3, [pc, #388]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6c:	4a60      	ldr	r2, [pc, #384]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f74:	4b5e      	ldr	r3, [pc, #376]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f78:	4a5d      	ldr	r2, [pc, #372]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f80:	e00b      	b.n	8001f9a <HAL_RCC_OscConfig+0x376>
 8001f82:	4b5b      	ldr	r3, [pc, #364]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f86:	4a5a      	ldr	r2, [pc, #360]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f8e:	4b58      	ldr	r3, [pc, #352]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f92:	4a57      	ldr	r2, [pc, #348]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d015      	beq.n	8001fce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa2:	f7ff faa9 	bl	80014f8 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7ff faa5 	bl	80014f8 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e0ce      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ee      	beq.n	8001faa <HAL_RCC_OscConfig+0x386>
 8001fcc:	e014      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7ff fa93 	bl	80014f8 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7ff fa8f 	bl	80014f8 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0b8      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fec:	4b40      	ldr	r3, [pc, #256]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ee      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d105      	bne.n	800200a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	4a3b      	ldr	r2, [pc, #236]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8002004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002008:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80a4 	beq.w	800215c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002014:	4b36      	ldr	r3, [pc, #216]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	d06b      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d149      	bne.n	80020bc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002028:	4b31      	ldr	r3, [pc, #196]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a30      	ldr	r2, [pc, #192]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 800202e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7ff fa60 	bl	80014f8 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff fa5c 	bl	80014f8 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e087      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	4b28      	ldr	r3, [pc, #160]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69da      	ldr	r2, [r3, #28]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002068:	019b      	lsls	r3, r3, #6
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002070:	085b      	lsrs	r3, r3, #1
 8002072:	3b01      	subs	r3, #1
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	4313      	orrs	r3, r2
 8002080:	4a1b      	ldr	r2, [pc, #108]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 8002082:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002086:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002088:	4b19      	ldr	r3, [pc, #100]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a18      	ldr	r2, [pc, #96]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 800208e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff fa30 	bl	80014f8 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff fa2c 	bl	80014f8 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e057      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	4b10      	ldr	r3, [pc, #64]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x478>
 80020ba:	e04f      	b.n	800215c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0b      	ldr	r2, [pc, #44]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 80020c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7ff fa16 	bl	80014f8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d0:	f7ff fa12 	bl	80014f8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e03d      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e2:	4b03      	ldr	r3, [pc, #12]	@ (80020f0 <HAL_RCC_OscConfig+0x4cc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4ac>
 80020ee:	e035      	b.n	800215c <HAL_RCC_OscConfig+0x538>
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <HAL_RCC_OscConfig+0x544>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d028      	beq.n	8002158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d121      	bne.n	8002158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d11a      	bne.n	8002158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800212e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002130:	4293      	cmp	r3, r2
 8002132:	d111      	bne.n	8002158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	3b01      	subs	r3, #1
 8002142:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d107      	bne.n	8002158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002152:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800

0800216c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0d0      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b6a      	ldr	r3, [pc, #424]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d910      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b67      	ldr	r3, [pc, #412]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 020f 	bic.w	r2, r3, #15
 800219a:	4965      	ldr	r1, [pc, #404]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b63      	ldr	r3, [pc, #396]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0b8      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4b59      	ldr	r3, [pc, #356]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a58      	ldr	r2, [pc, #352]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 80021d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e4:	4b53      	ldr	r3, [pc, #332]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a52      	ldr	r2, [pc, #328]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 80021ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b50      	ldr	r3, [pc, #320]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	494d      	ldr	r1, [pc, #308]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d040      	beq.n	8002290 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b47      	ldr	r3, [pc, #284]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e07f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222e:	4b41      	ldr	r3, [pc, #260]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e073      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223e:	4b3d      	ldr	r3, [pc, #244]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e06b      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224e:	4b39      	ldr	r3, [pc, #228]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f023 0203 	bic.w	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4936      	ldr	r1, [pc, #216]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	4313      	orrs	r3, r2
 800225e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002260:	f7ff f94a 	bl	80014f8 <HAL_GetTick>
 8002264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	e00a      	b.n	800227e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002268:	f7ff f946 	bl	80014f8 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e053      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	4b2d      	ldr	r3, [pc, #180]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 020c 	and.w	r2, r3, #12
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	429a      	cmp	r2, r3
 800228e:	d1eb      	bne.n	8002268 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002290:	4b27      	ldr	r3, [pc, #156]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d210      	bcs.n	80022c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b24      	ldr	r3, [pc, #144]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 020f 	bic.w	r2, r3, #15
 80022a6:	4922      	ldr	r1, [pc, #136]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b20      	ldr	r3, [pc, #128]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e032      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022cc:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4916      	ldr	r1, [pc, #88]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ea:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	490e      	ldr	r1, [pc, #56]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fe:	f000 f821 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8002302:	4602      	mov	r2, r0
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	490a      	ldr	r1, [pc, #40]	@ (8002338 <HAL_RCC_ClockConfig+0x1cc>)
 8002310:	5ccb      	ldrb	r3, [r1, r3]
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	4a09      	ldr	r2, [pc, #36]	@ (800233c <HAL_RCC_ClockConfig+0x1d0>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_RCC_ClockConfig+0x1d4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fea2 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023c00 	.word	0x40023c00
 8002334:	40023800 	.word	0x40023800
 8002338:	08008a00 	.word	0x08008a00
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002348:	b090      	sub	sp, #64	@ 0x40
 800234a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002350:	2300      	movs	r3, #0
 8002352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002354:	2300      	movs	r3, #0
 8002356:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800235c:	4b59      	ldr	r3, [pc, #356]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d00d      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x40>
 8002368:	2b08      	cmp	r3, #8
 800236a:	f200 80a1 	bhi.w	80024b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x34>
 8002372:	2b04      	cmp	r3, #4
 8002374:	d003      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x3a>
 8002376:	e09b      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b53      	ldr	r3, [pc, #332]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800237a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800237c:	e09b      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800237e:	4b53      	ldr	r3, [pc, #332]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002380:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002382:	e098      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002384:	4b4f      	ldr	r3, [pc, #316]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800238c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800238e:	4b4d      	ldr	r3, [pc, #308]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d028      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800239a:	4b4a      	ldr	r3, [pc, #296]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	2200      	movs	r2, #0
 80023a2:	623b      	str	r3, [r7, #32]
 80023a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023ac:	2100      	movs	r1, #0
 80023ae:	4b47      	ldr	r3, [pc, #284]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x188>)
 80023b0:	fb03 f201 	mul.w	r2, r3, r1
 80023b4:	2300      	movs	r3, #0
 80023b6:	fb00 f303 	mul.w	r3, r0, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	4a43      	ldr	r2, [pc, #268]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x188>)
 80023be:	fba0 1202 	umull	r1, r2, r0, r2
 80023c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023c4:	460a      	mov	r2, r1
 80023c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80023c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ca:	4413      	add	r3, r2
 80023cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d0:	2200      	movs	r2, #0
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	61fa      	str	r2, [r7, #28]
 80023d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80023de:	f7fd ff6f 	bl	80002c0 <__aeabi_uldivmod>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4613      	mov	r3, r2
 80023e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023ea:	e053      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ec:	4b35      	ldr	r3, [pc, #212]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	2200      	movs	r2, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	617a      	str	r2, [r7, #20]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023fe:	f04f 0b00 	mov.w	fp, #0
 8002402:	4652      	mov	r2, sl
 8002404:	465b      	mov	r3, fp
 8002406:	f04f 0000 	mov.w	r0, #0
 800240a:	f04f 0100 	mov.w	r1, #0
 800240e:	0159      	lsls	r1, r3, #5
 8002410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002414:	0150      	lsls	r0, r2, #5
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	ebb2 080a 	subs.w	r8, r2, sl
 800241e:	eb63 090b 	sbc.w	r9, r3, fp
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800242e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002432:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002436:	ebb2 0408 	subs.w	r4, r2, r8
 800243a:	eb63 0509 	sbc.w	r5, r3, r9
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	00eb      	lsls	r3, r5, #3
 8002448:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800244c:	00e2      	lsls	r2, r4, #3
 800244e:	4614      	mov	r4, r2
 8002450:	461d      	mov	r5, r3
 8002452:	eb14 030a 	adds.w	r3, r4, sl
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	eb45 030b 	adc.w	r3, r5, fp
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800246a:	4629      	mov	r1, r5
 800246c:	028b      	lsls	r3, r1, #10
 800246e:	4621      	mov	r1, r4
 8002470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002474:	4621      	mov	r1, r4
 8002476:	028a      	lsls	r2, r1, #10
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800247e:	2200      	movs	r2, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	60fa      	str	r2, [r7, #12]
 8002484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002488:	f7fd ff1a 	bl	80002c0 <__aeabi_uldivmod>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4613      	mov	r3, r2
 8002492:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002494:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	3301      	adds	r3, #1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80024a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024ae:	e002      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80024b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3740      	adds	r7, #64	@ 0x40
 80024bc:	46bd      	mov	sp, r7
 80024be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	00f42400 	.word	0x00f42400
 80024cc:	017d7840 	.word	0x017d7840

080024d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000000 	.word	0x20000000

080024e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024ec:	f7ff fff0 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0a9b      	lsrs	r3, r3, #10
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4903      	ldr	r1, [pc, #12]	@ (800250c <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	08008a10 	.word	0x08008a10

08002510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002514:	f7ff ffdc 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	0b5b      	lsrs	r3, r3, #13
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	4903      	ldr	r1, [pc, #12]	@ (8002534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	08008a10 	.word	0x08008a10

08002538 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	220f      	movs	r2, #15
 8002546:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002548:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <HAL_RCC_GetClockConfig+0x5c>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002554:	4b0f      	ldr	r3, [pc, #60]	@ (8002594 <HAL_RCC_GetClockConfig+0x5c>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002560:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <HAL_RCC_GetClockConfig+0x5c>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800256c:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <HAL_RCC_GetClockConfig+0x5c>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800257a:	4b07      	ldr	r3, [pc, #28]	@ (8002598 <HAL_RCC_GetClockConfig+0x60>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 020f 	and.w	r2, r3, #15
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	601a      	str	r2, [r3, #0]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	40023c00 	.word	0x40023c00

0800259c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d012      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025c4:	4b69      	ldr	r3, [pc, #420]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a68      	ldr	r2, [pc, #416]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80025ce:	6093      	str	r3, [r2, #8]
 80025d0:	4b66      	ldr	r3, [pc, #408]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d8:	4964      	ldr	r1, [pc, #400]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80025e6:	2301      	movs	r3, #1
 80025e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d017      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025f6:	4b5d      	ldr	r3, [pc, #372]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002604:	4959      	ldr	r1, [pc, #356]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002610:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002614:	d101      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002622:	2301      	movs	r3, #1
 8002624:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d017      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002632:	4b4e      	ldr	r3, [pc, #312]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002638:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	494a      	ldr	r1, [pc, #296]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002650:	d101      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800265e:	2301      	movs	r3, #1
 8002660:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800266e:	2301      	movs	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 808b 	beq.w	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002680:	4b3a      	ldr	r3, [pc, #232]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	4a39      	ldr	r2, [pc, #228]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800268a:	6413      	str	r3, [r2, #64]	@ 0x40
 800268c:	4b37      	ldr	r3, [pc, #220]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002698:	4b35      	ldr	r3, [pc, #212]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a34      	ldr	r2, [pc, #208]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a4:	f7fe ff28 	bl	80014f8 <HAL_GetTick>
 80026a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7fe ff24 	bl	80014f8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	@ 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e357      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026be:	4b2c      	ldr	r3, [pc, #176]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026ca:	4b28      	ldr	r3, [pc, #160]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d035      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d02e      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026e8:	4b20      	ldr	r3, [pc, #128]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026f2:	4b1e      	ldr	r3, [pc, #120]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f6:	4a1d      	ldr	r2, [pc, #116]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026fe:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002702:	4a1a      	ldr	r2, [pc, #104]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002704:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002708:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800270a:	4a18      	ldr	r2, [pc, #96]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002710:	4b16      	ldr	r3, [pc, #88]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d114      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe feec 	bl	80014f8 <HAL_GetTick>
 8002720:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	e00a      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002724:	f7fe fee8 	bl	80014f8 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e319      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273a:	4b0c      	ldr	r3, [pc, #48]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ee      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800274e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002752:	d111      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002760:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002762:	400b      	ands	r3, r1
 8002764:	4901      	ldr	r1, [pc, #4]	@ (800276c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
 800276a:	e00b      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800276c:	40023800 	.word	0x40023800
 8002770:	40007000 	.word	0x40007000
 8002774:	0ffffcff 	.word	0x0ffffcff
 8002778:	4baa      	ldr	r3, [pc, #680]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4aa9      	ldr	r2, [pc, #676]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002782:	6093      	str	r3, [r2, #8]
 8002784:	4ba7      	ldr	r3, [pc, #668]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002786:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002790:	49a4      	ldr	r1, [pc, #656]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002792:	4313      	orrs	r3, r2
 8002794:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d010      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027a2:	4ba0      	ldr	r3, [pc, #640]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027a8:	4a9e      	ldr	r2, [pc, #632]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027b2:	4b9c      	ldr	r3, [pc, #624]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027bc:	4999      	ldr	r1, [pc, #612]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027d0:	4b94      	ldr	r3, [pc, #592]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027de:	4991      	ldr	r1, [pc, #580]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027f2:	4b8c      	ldr	r3, [pc, #560]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002800:	4988      	ldr	r1, [pc, #544]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002814:	4b83      	ldr	r3, [pc, #524]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002822:	4980      	ldr	r1, [pc, #512]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002836:	4b7b      	ldr	r3, [pc, #492]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002844:	4977      	ldr	r1, [pc, #476]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002858:	4b72      	ldr	r3, [pc, #456]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800285e:	f023 0203 	bic.w	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	496f      	ldr	r1, [pc, #444]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800287a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002880:	f023 020c 	bic.w	r2, r3, #12
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002888:	4966      	ldr	r1, [pc, #408]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800289c:	4b61      	ldr	r3, [pc, #388]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	495e      	ldr	r1, [pc, #376]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028be:	4b59      	ldr	r3, [pc, #356]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028cc:	4955      	ldr	r1, [pc, #340]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028e0:	4b50      	ldr	r3, [pc, #320]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ee:	494d      	ldr	r1, [pc, #308]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002902:	4b48      	ldr	r3, [pc, #288]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002908:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002910:	4944      	ldr	r1, [pc, #272]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002924:	4b3f      	ldr	r3, [pc, #252]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002932:	493c      	ldr	r1, [pc, #240]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002946:	4b37      	ldr	r3, [pc, #220]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002954:	4933      	ldr	r1, [pc, #204]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002968:	4b2e      	ldr	r3, [pc, #184]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002976:	492b      	ldr	r1, [pc, #172]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d011      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800298a:	4b26      	ldr	r3, [pc, #152]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002990:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002998:	4922      	ldr	r1, [pc, #136]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029a8:	d101      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ca:	4b16      	ldr	r3, [pc, #88]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d8:	4912      	ldr	r1, [pc, #72]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00b      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029fc:	4909      	ldr	r1, [pc, #36]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d006      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80d9 	beq.w	8002bca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a18:	4b02      	ldr	r3, [pc, #8]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a01      	ldr	r2, [pc, #4]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a22:	e001      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002a24:	40023800 	.word	0x40023800
 8002a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2a:	f7fe fd65 	bl	80014f8 <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a32:	f7fe fd61 	bl	80014f8 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b64      	cmp	r3, #100	@ 0x64
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e194      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a44:	4b6c      	ldr	r3, [pc, #432]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d021      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d11d      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a64:	4b64      	ldr	r3, [pc, #400]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a6a:	0c1b      	lsrs	r3, r3, #16
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a72:	4b61      	ldr	r3, [pc, #388]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a78:	0e1b      	lsrs	r3, r3, #24
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	019a      	lsls	r2, r3, #6
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	041b      	lsls	r3, r3, #16
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	061b      	lsls	r3, r3, #24
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	071b      	lsls	r3, r3, #28
 8002a98:	4957      	ldr	r1, [pc, #348]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d02e      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aca:	d129      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002acc:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ad2:	0c1b      	lsrs	r3, r3, #16
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ada:	4b47      	ldr	r3, [pc, #284]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae0:	0f1b      	lsrs	r3, r3, #28
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	019a      	lsls	r2, r3, #6
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	041b      	lsls	r3, r3, #16
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	061b      	lsls	r3, r3, #24
 8002afa:	431a      	orrs	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	071b      	lsls	r3, r3, #28
 8002b00:	493d      	ldr	r1, [pc, #244]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b08:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b0e:	f023 021f 	bic.w	r2, r3, #31
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	3b01      	subs	r3, #1
 8002b18:	4937      	ldr	r1, [pc, #220]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01d      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b2c:	4b32      	ldr	r3, [pc, #200]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b32:	0e1b      	lsrs	r3, r3, #24
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b40:	0f1b      	lsrs	r3, r3, #28
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	019a      	lsls	r2, r3, #6
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	431a      	orrs	r2, r3
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	061b      	lsls	r3, r3, #24
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	071b      	lsls	r3, r3, #28
 8002b60:	4925      	ldr	r1, [pc, #148]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d011      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	019a      	lsls	r2, r3, #6
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	041b      	lsls	r3, r3, #16
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	061b      	lsls	r3, r3, #24
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	071b      	lsls	r3, r3, #28
 8002b90:	4919      	ldr	r1, [pc, #100]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b98:	4b17      	ldr	r3, [pc, #92]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a16      	ldr	r2, [pc, #88]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba4:	f7fe fca8 	bl	80014f8 <HAL_GetTick>
 8002ba8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bac:	f7fe fca4 	bl	80014f8 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	@ 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0d7      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	f040 80cd 	bne.w	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002bd2:	4b09      	ldr	r3, [pc, #36]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a08      	ldr	r2, [pc, #32]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bde:	f7fe fc8b 	bl	80014f8 <HAL_GetTick>
 8002be2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002be6:	f7fe fc87 	bl	80014f8 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b64      	cmp	r3, #100	@ 0x64
 8002bf2:	d903      	bls.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0ba      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002bf8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bfc:	4b5e      	ldr	r3, [pc, #376]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c08:	d0ed      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d02e      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d12a      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c32:	4b51      	ldr	r3, [pc, #324]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c38:	0c1b      	lsrs	r3, r3, #16
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c40:	4b4d      	ldr	r3, [pc, #308]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c46:	0f1b      	lsrs	r3, r3, #28
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	019a      	lsls	r2, r3, #6
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	041b      	lsls	r3, r3, #16
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	061b      	lsls	r3, r3, #24
 8002c60:	431a      	orrs	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	071b      	lsls	r3, r3, #28
 8002c66:	4944      	ldr	r1, [pc, #272]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c6e:	4b42      	ldr	r3, [pc, #264]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c74:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	493d      	ldr	r1, [pc, #244]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d022      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c9c:	d11d      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c9e:	4b36      	ldr	r3, [pc, #216]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca4:	0e1b      	lsrs	r3, r3, #24
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cac:	4b32      	ldr	r3, [pc, #200]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb2:	0f1b      	lsrs	r3, r3, #28
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	019a      	lsls	r2, r3, #6
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	041b      	lsls	r3, r3, #16
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	061b      	lsls	r3, r3, #24
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	071b      	lsls	r3, r3, #28
 8002cd2:	4929      	ldr	r1, [pc, #164]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d028      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ce6:	4b24      	ldr	r3, [pc, #144]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cec:	0e1b      	lsrs	r3, r3, #24
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cf4:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfa:	0c1b      	lsrs	r3, r3, #16
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	019a      	lsls	r2, r3, #6
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	041b      	lsls	r3, r3, #16
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	071b      	lsls	r3, r3, #28
 8002d1a:	4917      	ldr	r1, [pc, #92]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d22:	4b15      	ldr	r3, [pc, #84]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	4911      	ldr	r1, [pc, #68]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d38:	4b0f      	ldr	r3, [pc, #60]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d44:	f7fe fbd8 	bl	80014f8 <HAL_GetTick>
 8002d48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d4c:	f7fe fbd4 	bl	80014f8 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	@ 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e007      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d6a:	d1ef      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800

08002d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e049      	b.n	8002e22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f841 	bl	8002e2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	4619      	mov	r1, r3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	f000 f9e8 	bl	8003190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d001      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e054      	b.n	8002f02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a26      	ldr	r2, [pc, #152]	@ (8002f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d022      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x80>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e82:	d01d      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x80>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a22      	ldr	r2, [pc, #136]	@ (8002f14 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d018      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x80>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a21      	ldr	r2, [pc, #132]	@ (8002f18 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x80>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002f1c <HAL_TIM_Base_Start_IT+0xdc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00e      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x80>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f20 <HAL_TIM_Base_Start_IT+0xe0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x80>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f24 <HAL_TIM_Base_Start_IT+0xe4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d004      	beq.n	8002ec0 <HAL_TIM_Base_Start_IT+0x80>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1b      	ldr	r2, [pc, #108]	@ (8002f28 <HAL_TIM_Base_Start_IT+0xe8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d115      	bne.n	8002eec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <HAL_TIM_Base_Start_IT+0xec>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d015      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0xbe>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed8:	d011      	beq.n	8002efe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eea:	e008      	b.n	8002efe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e000      	b.n	8002f00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40010000 	.word	0x40010000
 8002f14:	40000400 	.word	0x40000400
 8002f18:	40000800 	.word	0x40000800
 8002f1c:	40000c00 	.word	0x40000c00
 8002f20:	40010400 	.word	0x40010400
 8002f24:	40014000 	.word	0x40014000
 8002f28:	40001800 	.word	0x40001800
 8002f2c:	00010007 	.word	0x00010007

08002f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d020      	beq.n	8002f94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01b      	beq.n	8002f94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0202 	mvn.w	r2, #2
 8002f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f8e9 	bl	8003152 <HAL_TIM_IC_CaptureCallback>
 8002f80:	e005      	b.n	8002f8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f8db 	bl	800313e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f8ec 	bl	8003166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d020      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01b      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0204 	mvn.w	r2, #4
 8002fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f8c3 	bl	8003152 <HAL_TIM_IC_CaptureCallback>
 8002fcc:	e005      	b.n	8002fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8b5 	bl	800313e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f8c6 	bl	8003166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d020      	beq.n	800302c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01b      	beq.n	800302c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0208 	mvn.w	r2, #8
 8002ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2204      	movs	r2, #4
 8003002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f89d 	bl	8003152 <HAL_TIM_IC_CaptureCallback>
 8003018:	e005      	b.n	8003026 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f88f 	bl	800313e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f8a0 	bl	8003166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b00      	cmp	r3, #0
 8003034:	d020      	beq.n	8003078 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01b      	beq.n	8003078 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0210 	mvn.w	r2, #16
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2208      	movs	r2, #8
 800304e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f877 	bl	8003152 <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f869 	bl	800313e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f87a 	bl	8003166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00c      	beq.n	800309c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0201 	mvn.w	r2, #1
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd ffa6 	bl	8000fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d104      	bne.n	80030b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00c      	beq.n	80030ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80030c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f919 	bl	80032fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00c      	beq.n	80030ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80030e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f911 	bl	8003310 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00c      	beq.n	8003112 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800310a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f834 	bl	800317a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00c      	beq.n	8003136 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f06f 0220 	mvn.w	r2, #32
 800312e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f8d9 	bl	80032e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a46      	ldr	r2, [pc, #280]	@ (80032bc <TIM_Base_SetConfig+0x12c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d013      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ae:	d00f      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a43      	ldr	r2, [pc, #268]	@ (80032c0 <TIM_Base_SetConfig+0x130>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00b      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a42      	ldr	r2, [pc, #264]	@ (80032c4 <TIM_Base_SetConfig+0x134>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d007      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a41      	ldr	r2, [pc, #260]	@ (80032c8 <TIM_Base_SetConfig+0x138>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d003      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a40      	ldr	r2, [pc, #256]	@ (80032cc <TIM_Base_SetConfig+0x13c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d108      	bne.n	80031e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a35      	ldr	r2, [pc, #212]	@ (80032bc <TIM_Base_SetConfig+0x12c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d02b      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f0:	d027      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a32      	ldr	r2, [pc, #200]	@ (80032c0 <TIM_Base_SetConfig+0x130>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d023      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a31      	ldr	r2, [pc, #196]	@ (80032c4 <TIM_Base_SetConfig+0x134>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01f      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a30      	ldr	r2, [pc, #192]	@ (80032c8 <TIM_Base_SetConfig+0x138>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01b      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a2f      	ldr	r2, [pc, #188]	@ (80032cc <TIM_Base_SetConfig+0x13c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d017      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2e      	ldr	r2, [pc, #184]	@ (80032d0 <TIM_Base_SetConfig+0x140>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a2d      	ldr	r2, [pc, #180]	@ (80032d4 <TIM_Base_SetConfig+0x144>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00f      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a2c      	ldr	r2, [pc, #176]	@ (80032d8 <TIM_Base_SetConfig+0x148>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00b      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a2b      	ldr	r2, [pc, #172]	@ (80032dc <TIM_Base_SetConfig+0x14c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a2a      	ldr	r2, [pc, #168]	@ (80032e0 <TIM_Base_SetConfig+0x150>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d003      	beq.n	8003242 <TIM_Base_SetConfig+0xb2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a29      	ldr	r2, [pc, #164]	@ (80032e4 <TIM_Base_SetConfig+0x154>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d108      	bne.n	8003254 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a10      	ldr	r2, [pc, #64]	@ (80032bc <TIM_Base_SetConfig+0x12c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_Base_SetConfig+0xf8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a12      	ldr	r2, [pc, #72]	@ (80032cc <TIM_Base_SetConfig+0x13c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d103      	bne.n	8003290 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f023 0201 	bic.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	611a      	str	r2, [r3, #16]
  }
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40010000 	.word	0x40010000
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800
 80032c8:	40000c00 	.word	0x40000c00
 80032cc:	40010400 	.word	0x40010400
 80032d0:	40014000 	.word	0x40014000
 80032d4:	40014400 	.word	0x40014400
 80032d8:	40014800 	.word	0x40014800
 80032dc:	40001800 	.word	0x40001800
 80032e0:	40001c00 	.word	0x40001c00
 80032e4:	40002000 	.word	0x40002000

080032e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e040      	b.n	80033b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fe f826 	bl	8001398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	@ 0x24
 8003350:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fe4c 	bl	8004008 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fbe5 	bl	8003b40 <UART_SetConfig>
 8003376:	4603      	mov	r3, r0
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e01b      	b.n	80033b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800338e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800339e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fecb 	bl	800414c <UART_CheckIdleState>
 80033b6:	4603      	mov	r3, r0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	@ 0x28
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d177      	bne.n	80034c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_UART_Transmit+0x24>
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e070      	b.n	80034ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2221      	movs	r2, #33	@ 0x21
 80033f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033f6:	f7fe f87f 	bl	80014f8 <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003414:	d108      	bne.n	8003428 <HAL_UART_Transmit+0x68>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	e003      	b.n	8003430 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003430:	e02f      	b.n	8003492 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	2180      	movs	r1, #128	@ 0x80
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fedc 	bl	80041fa <UART_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d004      	beq.n	8003452 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e03b      	b.n	80034ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003466:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	3302      	adds	r3, #2
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	e007      	b.n	8003480 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	781a      	ldrb	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3301      	adds	r3, #1
 800347e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1c9      	bne.n	8003432 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2140      	movs	r1, #64	@ 0x40
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 fea6 	bl	80041fa <UART_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e005      	b.n	80034ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	e000      	b.n	80034ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80034c8:	2302      	movs	r3, #2
  }
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b08a      	sub	sp, #40	@ 0x28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	4613      	mov	r3, r2
 80034de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d132      	bne.n	8003550 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_UART_Receive_IT+0x24>
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e02b      	b.n	8003552 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d018      	beq.n	8003540 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	613b      	str	r3, [r7, #16]
   return(result);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	623b      	str	r3, [r7, #32]
 800352e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	69f9      	ldr	r1, [r7, #28]
 8003532:	6a3a      	ldr	r2, [r7, #32]
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	61bb      	str	r3, [r7, #24]
   return(result);
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e6      	bne.n	800350e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	461a      	mov	r2, r3
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fec4 	bl	80042d4 <UART_Start_Receive_IT>
 800354c:	4603      	mov	r3, r0
 800354e:	e000      	b.n	8003552 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003550:	2302      	movs	r3, #2
  }
}
 8003552:	4618      	mov	r0, r3
 8003554:	3728      	adds	r7, #40	@ 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b0ba      	sub	sp, #232	@ 0xe8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003582:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003586:	f640 030f 	movw	r3, #2063	@ 0x80f
 800358a:	4013      	ands	r3, r2
 800358c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d115      	bne.n	80035c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00f      	beq.n	80035c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d009      	beq.n	80035c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8297 	beq.w	8003ae8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
      }
      return;
 80035c2:	e291      	b.n	8003ae8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8117 	beq.w	80037fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80035de:	4b85      	ldr	r3, [pc, #532]	@ (80037f4 <HAL_UART_IRQHandler+0x298>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 810a 	beq.w	80037fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d011      	beq.n	8003618 <HAL_UART_IRQHandler+0xbc>
 80035f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00b      	beq.n	8003618 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2201      	movs	r2, #1
 8003606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800360e:	f043 0201 	orr.w	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d011      	beq.n	8003648 <HAL_UART_IRQHandler+0xec>
 8003624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00b      	beq.n	8003648 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2202      	movs	r2, #2
 8003636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800363e:	f043 0204 	orr.w	r2, r3, #4
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d011      	beq.n	8003678 <HAL_UART_IRQHandler+0x11c>
 8003654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2204      	movs	r2, #4
 8003666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800366e:	f043 0202 	orr.w	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d017      	beq.n	80036b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003694:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2208      	movs	r2, #8
 80036a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036aa:	f043 0208 	orr.w	r2, r3, #8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d012      	beq.n	80036e6 <HAL_UART_IRQHandler+0x18a>
 80036c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00c      	beq.n	80036e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 81fd 	beq.w	8003aec <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80036f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00d      	beq.n	800371a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003720:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372e:	2b40      	cmp	r3, #64	@ 0x40
 8003730:	d005      	beq.n	800373e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003736:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800373a:	2b00      	cmp	r3, #0
 800373c:	d04f      	beq.n	80037de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fe8e 	bl	8004460 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374e:	2b40      	cmp	r3, #64	@ 0x40
 8003750:	d141      	bne.n	80037d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3308      	adds	r3, #8
 8003758:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003768:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800376c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3308      	adds	r3, #8
 800377a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800377e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003782:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800378a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1d9      	bne.n	8003752 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d013      	beq.n	80037ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037aa:	4a13      	ldr	r2, [pc, #76]	@ (80037f8 <HAL_UART_IRQHandler+0x29c>)
 80037ac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fd fffe 	bl	80017b4 <HAL_DMA_Abort_IT>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d017      	beq.n	80037ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037c8:	4610      	mov	r0, r2
 80037ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037cc:	e00f      	b.n	80037ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f9a0 	bl	8003b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	e00b      	b.n	80037ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f99c 	bl	8003b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	e007      	b.n	80037ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f998 	bl	8003b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80037ec:	e17e      	b.n	8003aec <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ee:	bf00      	nop
    return;
 80037f0:	e17c      	b.n	8003aec <HAL_UART_IRQHandler+0x590>
 80037f2:	bf00      	nop
 80037f4:	04000120 	.word	0x04000120
 80037f8:	08004529 	.word	0x08004529

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003800:	2b01      	cmp	r3, #1
 8003802:	f040 814c 	bne.w	8003a9e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 8145 	beq.w	8003a9e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 813e 	beq.w	8003a9e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2210      	movs	r2, #16
 8003828:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003834:	2b40      	cmp	r3, #64	@ 0x40
 8003836:	f040 80b6 	bne.w	80039a6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003846:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8150 	beq.w	8003af0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800385a:	429a      	cmp	r2, r3
 800385c:	f080 8148 	bcs.w	8003af0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003866:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003874:	f000 8086 	beq.w	8003984 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800388c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003894:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1da      	bne.n	8003878 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3308      	adds	r3, #8
 80038c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80038ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80038ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e1      	bne.n	80038c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3308      	adds	r3, #8
 8003904:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800390e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3308      	adds	r3, #8
 800391e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003922:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003924:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003928:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003930:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e3      	bne.n	80038fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003954:	f023 0310 	bic.w	r3, r3, #16
 8003958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003966:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003968:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800396c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e4      	bne.n	8003944 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd fea8 	bl	80016d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003996:	b29b      	uxth	r3, r3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	b29b      	uxth	r3, r3
 800399c:	4619      	mov	r1, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f8c2 	bl	8003b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039a4:	e0a4      	b.n	8003af0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8096 	beq.w	8003af4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80039c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 8091 	beq.w	8003af4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e4      	bne.n	80039d2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	623b      	str	r3, [r7, #32]
   return(result);
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3308      	adds	r3, #8
 8003a28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e3      	bne.n	8003a08 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f023 0310 	bic.w	r3, r3, #16
 8003a68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a76:	61fb      	str	r3, [r7, #28]
 8003a78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	69b9      	ldr	r1, [r7, #24]
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	617b      	str	r3, [r7, #20]
   return(result);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e4      	bne.n	8003a54 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a94:	4619      	mov	r1, r3
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f846 	bl	8003b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a9c:	e02a      	b.n	8003af4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00e      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01c      	beq.n	8003af8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	4798      	blx	r3
    }
    return;
 8003ac6:	e017      	b.n	8003af8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d012      	beq.n	8003afa <HAL_UART_IRQHandler+0x59e>
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00c      	beq.n	8003afa <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fd37 	bl	8004554 <UART_EndTransmit_IT>
    return;
 8003ae6:	e008      	b.n	8003afa <HAL_UART_IRQHandler+0x59e>
      return;
 8003ae8:	bf00      	nop
 8003aea:	e006      	b.n	8003afa <HAL_UART_IRQHandler+0x59e>
    return;
 8003aec:	bf00      	nop
 8003aee:	e004      	b.n	8003afa <HAL_UART_IRQHandler+0x59e>
      return;
 8003af0:	bf00      	nop
 8003af2:	e002      	b.n	8003afa <HAL_UART_IRQHandler+0x59e>
      return;
 8003af4:	bf00      	nop
 8003af6:	e000      	b.n	8003afa <HAL_UART_IRQHandler+0x59e>
    return;
 8003af8:	bf00      	nop
  }

}
 8003afa:	37e8      	adds	r7, #232	@ 0xe8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4ba6      	ldr	r3, [pc, #664]	@ (8003e04 <UART_SetConfig+0x2c4>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	6979      	ldr	r1, [r7, #20]
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a94      	ldr	r2, [pc, #592]	@ (8003e08 <UART_SetConfig+0x2c8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d120      	bne.n	8003bfe <UART_SetConfig+0xbe>
 8003bbc:	4b93      	ldr	r3, [pc, #588]	@ (8003e0c <UART_SetConfig+0x2cc>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d816      	bhi.n	8003bf8 <UART_SetConfig+0xb8>
 8003bca:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd0 <UART_SetConfig+0x90>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003be1 	.word	0x08003be1
 8003bd4:	08003bed 	.word	0x08003bed
 8003bd8:	08003be7 	.word	0x08003be7
 8003bdc:	08003bf3 	.word	0x08003bf3
 8003be0:	2301      	movs	r3, #1
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e150      	b.n	8003e88 <UART_SetConfig+0x348>
 8003be6:	2302      	movs	r3, #2
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e14d      	b.n	8003e88 <UART_SetConfig+0x348>
 8003bec:	2304      	movs	r3, #4
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e14a      	b.n	8003e88 <UART_SetConfig+0x348>
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e147      	b.n	8003e88 <UART_SetConfig+0x348>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e144      	b.n	8003e88 <UART_SetConfig+0x348>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a83      	ldr	r2, [pc, #524]	@ (8003e10 <UART_SetConfig+0x2d0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d132      	bne.n	8003c6e <UART_SetConfig+0x12e>
 8003c08:	4b80      	ldr	r3, [pc, #512]	@ (8003e0c <UART_SetConfig+0x2cc>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d828      	bhi.n	8003c68 <UART_SetConfig+0x128>
 8003c16:	a201      	add	r2, pc, #4	@ (adr r2, 8003c1c <UART_SetConfig+0xdc>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003c51 	.word	0x08003c51
 8003c20:	08003c69 	.word	0x08003c69
 8003c24:	08003c69 	.word	0x08003c69
 8003c28:	08003c69 	.word	0x08003c69
 8003c2c:	08003c5d 	.word	0x08003c5d
 8003c30:	08003c69 	.word	0x08003c69
 8003c34:	08003c69 	.word	0x08003c69
 8003c38:	08003c69 	.word	0x08003c69
 8003c3c:	08003c57 	.word	0x08003c57
 8003c40:	08003c69 	.word	0x08003c69
 8003c44:	08003c69 	.word	0x08003c69
 8003c48:	08003c69 	.word	0x08003c69
 8003c4c:	08003c63 	.word	0x08003c63
 8003c50:	2300      	movs	r3, #0
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e118      	b.n	8003e88 <UART_SetConfig+0x348>
 8003c56:	2302      	movs	r3, #2
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e115      	b.n	8003e88 <UART_SetConfig+0x348>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e112      	b.n	8003e88 <UART_SetConfig+0x348>
 8003c62:	2308      	movs	r3, #8
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e10f      	b.n	8003e88 <UART_SetConfig+0x348>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e10c      	b.n	8003e88 <UART_SetConfig+0x348>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a68      	ldr	r2, [pc, #416]	@ (8003e14 <UART_SetConfig+0x2d4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d120      	bne.n	8003cba <UART_SetConfig+0x17a>
 8003c78:	4b64      	ldr	r3, [pc, #400]	@ (8003e0c <UART_SetConfig+0x2cc>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c82:	2b30      	cmp	r3, #48	@ 0x30
 8003c84:	d013      	beq.n	8003cae <UART_SetConfig+0x16e>
 8003c86:	2b30      	cmp	r3, #48	@ 0x30
 8003c88:	d814      	bhi.n	8003cb4 <UART_SetConfig+0x174>
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d009      	beq.n	8003ca2 <UART_SetConfig+0x162>
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d810      	bhi.n	8003cb4 <UART_SetConfig+0x174>
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <UART_SetConfig+0x15c>
 8003c96:	2b10      	cmp	r3, #16
 8003c98:	d006      	beq.n	8003ca8 <UART_SetConfig+0x168>
 8003c9a:	e00b      	b.n	8003cb4 <UART_SetConfig+0x174>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e0f2      	b.n	8003e88 <UART_SetConfig+0x348>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e0ef      	b.n	8003e88 <UART_SetConfig+0x348>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e0ec      	b.n	8003e88 <UART_SetConfig+0x348>
 8003cae:	2308      	movs	r3, #8
 8003cb0:	77fb      	strb	r3, [r7, #31]
 8003cb2:	e0e9      	b.n	8003e88 <UART_SetConfig+0x348>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	e0e6      	b.n	8003e88 <UART_SetConfig+0x348>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a56      	ldr	r2, [pc, #344]	@ (8003e18 <UART_SetConfig+0x2d8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d120      	bne.n	8003d06 <UART_SetConfig+0x1c6>
 8003cc4:	4b51      	ldr	r3, [pc, #324]	@ (8003e0c <UART_SetConfig+0x2cc>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003cce:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cd0:	d013      	beq.n	8003cfa <UART_SetConfig+0x1ba>
 8003cd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003cd4:	d814      	bhi.n	8003d00 <UART_SetConfig+0x1c0>
 8003cd6:	2b80      	cmp	r3, #128	@ 0x80
 8003cd8:	d009      	beq.n	8003cee <UART_SetConfig+0x1ae>
 8003cda:	2b80      	cmp	r3, #128	@ 0x80
 8003cdc:	d810      	bhi.n	8003d00 <UART_SetConfig+0x1c0>
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <UART_SetConfig+0x1a8>
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d006      	beq.n	8003cf4 <UART_SetConfig+0x1b4>
 8003ce6:	e00b      	b.n	8003d00 <UART_SetConfig+0x1c0>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e0cc      	b.n	8003e88 <UART_SetConfig+0x348>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	77fb      	strb	r3, [r7, #31]
 8003cf2:	e0c9      	b.n	8003e88 <UART_SetConfig+0x348>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	77fb      	strb	r3, [r7, #31]
 8003cf8:	e0c6      	b.n	8003e88 <UART_SetConfig+0x348>
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	77fb      	strb	r3, [r7, #31]
 8003cfe:	e0c3      	b.n	8003e88 <UART_SetConfig+0x348>
 8003d00:	2310      	movs	r3, #16
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e0c0      	b.n	8003e88 <UART_SetConfig+0x348>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a44      	ldr	r2, [pc, #272]	@ (8003e1c <UART_SetConfig+0x2dc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d125      	bne.n	8003d5c <UART_SetConfig+0x21c>
 8003d10:	4b3e      	ldr	r3, [pc, #248]	@ (8003e0c <UART_SetConfig+0x2cc>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d1e:	d017      	beq.n	8003d50 <UART_SetConfig+0x210>
 8003d20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d24:	d817      	bhi.n	8003d56 <UART_SetConfig+0x216>
 8003d26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d2a:	d00b      	beq.n	8003d44 <UART_SetConfig+0x204>
 8003d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d30:	d811      	bhi.n	8003d56 <UART_SetConfig+0x216>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <UART_SetConfig+0x1fe>
 8003d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d3a:	d006      	beq.n	8003d4a <UART_SetConfig+0x20a>
 8003d3c:	e00b      	b.n	8003d56 <UART_SetConfig+0x216>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e0a1      	b.n	8003e88 <UART_SetConfig+0x348>
 8003d44:	2302      	movs	r3, #2
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e09e      	b.n	8003e88 <UART_SetConfig+0x348>
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	77fb      	strb	r3, [r7, #31]
 8003d4e:	e09b      	b.n	8003e88 <UART_SetConfig+0x348>
 8003d50:	2308      	movs	r3, #8
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e098      	b.n	8003e88 <UART_SetConfig+0x348>
 8003d56:	2310      	movs	r3, #16
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e095      	b.n	8003e88 <UART_SetConfig+0x348>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2f      	ldr	r2, [pc, #188]	@ (8003e20 <UART_SetConfig+0x2e0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d125      	bne.n	8003db2 <UART_SetConfig+0x272>
 8003d66:	4b29      	ldr	r3, [pc, #164]	@ (8003e0c <UART_SetConfig+0x2cc>)
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d74:	d017      	beq.n	8003da6 <UART_SetConfig+0x266>
 8003d76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d7a:	d817      	bhi.n	8003dac <UART_SetConfig+0x26c>
 8003d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d80:	d00b      	beq.n	8003d9a <UART_SetConfig+0x25a>
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d86:	d811      	bhi.n	8003dac <UART_SetConfig+0x26c>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <UART_SetConfig+0x254>
 8003d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d90:	d006      	beq.n	8003da0 <UART_SetConfig+0x260>
 8003d92:	e00b      	b.n	8003dac <UART_SetConfig+0x26c>
 8003d94:	2301      	movs	r3, #1
 8003d96:	77fb      	strb	r3, [r7, #31]
 8003d98:	e076      	b.n	8003e88 <UART_SetConfig+0x348>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	77fb      	strb	r3, [r7, #31]
 8003d9e:	e073      	b.n	8003e88 <UART_SetConfig+0x348>
 8003da0:	2304      	movs	r3, #4
 8003da2:	77fb      	strb	r3, [r7, #31]
 8003da4:	e070      	b.n	8003e88 <UART_SetConfig+0x348>
 8003da6:	2308      	movs	r3, #8
 8003da8:	77fb      	strb	r3, [r7, #31]
 8003daa:	e06d      	b.n	8003e88 <UART_SetConfig+0x348>
 8003dac:	2310      	movs	r3, #16
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e06a      	b.n	8003e88 <UART_SetConfig+0x348>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e24 <UART_SetConfig+0x2e4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d138      	bne.n	8003e2e <UART_SetConfig+0x2ee>
 8003dbc:	4b13      	ldr	r3, [pc, #76]	@ (8003e0c <UART_SetConfig+0x2cc>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003dc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dca:	d017      	beq.n	8003dfc <UART_SetConfig+0x2bc>
 8003dcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dd0:	d82a      	bhi.n	8003e28 <UART_SetConfig+0x2e8>
 8003dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dd6:	d00b      	beq.n	8003df0 <UART_SetConfig+0x2b0>
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ddc:	d824      	bhi.n	8003e28 <UART_SetConfig+0x2e8>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <UART_SetConfig+0x2aa>
 8003de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003de6:	d006      	beq.n	8003df6 <UART_SetConfig+0x2b6>
 8003de8:	e01e      	b.n	8003e28 <UART_SetConfig+0x2e8>
 8003dea:	2300      	movs	r3, #0
 8003dec:	77fb      	strb	r3, [r7, #31]
 8003dee:	e04b      	b.n	8003e88 <UART_SetConfig+0x348>
 8003df0:	2302      	movs	r3, #2
 8003df2:	77fb      	strb	r3, [r7, #31]
 8003df4:	e048      	b.n	8003e88 <UART_SetConfig+0x348>
 8003df6:	2304      	movs	r3, #4
 8003df8:	77fb      	strb	r3, [r7, #31]
 8003dfa:	e045      	b.n	8003e88 <UART_SetConfig+0x348>
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e042      	b.n	8003e88 <UART_SetConfig+0x348>
 8003e02:	bf00      	nop
 8003e04:	efff69f3 	.word	0xefff69f3
 8003e08:	40011000 	.word	0x40011000
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40004400 	.word	0x40004400
 8003e14:	40004800 	.word	0x40004800
 8003e18:	40004c00 	.word	0x40004c00
 8003e1c:	40005000 	.word	0x40005000
 8003e20:	40011400 	.word	0x40011400
 8003e24:	40007800 	.word	0x40007800
 8003e28:	2310      	movs	r3, #16
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e02c      	b.n	8003e88 <UART_SetConfig+0x348>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a72      	ldr	r2, [pc, #456]	@ (8003ffc <UART_SetConfig+0x4bc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d125      	bne.n	8003e84 <UART_SetConfig+0x344>
 8003e38:	4b71      	ldr	r3, [pc, #452]	@ (8004000 <UART_SetConfig+0x4c0>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003e42:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e46:	d017      	beq.n	8003e78 <UART_SetConfig+0x338>
 8003e48:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003e4c:	d817      	bhi.n	8003e7e <UART_SetConfig+0x33e>
 8003e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e52:	d00b      	beq.n	8003e6c <UART_SetConfig+0x32c>
 8003e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e58:	d811      	bhi.n	8003e7e <UART_SetConfig+0x33e>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <UART_SetConfig+0x326>
 8003e5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e62:	d006      	beq.n	8003e72 <UART_SetConfig+0x332>
 8003e64:	e00b      	b.n	8003e7e <UART_SetConfig+0x33e>
 8003e66:	2300      	movs	r3, #0
 8003e68:	77fb      	strb	r3, [r7, #31]
 8003e6a:	e00d      	b.n	8003e88 <UART_SetConfig+0x348>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e00a      	b.n	8003e88 <UART_SetConfig+0x348>
 8003e72:	2304      	movs	r3, #4
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e007      	b.n	8003e88 <UART_SetConfig+0x348>
 8003e78:	2308      	movs	r3, #8
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e004      	b.n	8003e88 <UART_SetConfig+0x348>
 8003e7e:	2310      	movs	r3, #16
 8003e80:	77fb      	strb	r3, [r7, #31]
 8003e82:	e001      	b.n	8003e88 <UART_SetConfig+0x348>
 8003e84:	2310      	movs	r3, #16
 8003e86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e90:	d15b      	bne.n	8003f4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e92:	7ffb      	ldrb	r3, [r7, #31]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d828      	bhi.n	8003eea <UART_SetConfig+0x3aa>
 8003e98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea0 <UART_SetConfig+0x360>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003ec5 	.word	0x08003ec5
 8003ea4:	08003ecd 	.word	0x08003ecd
 8003ea8:	08003ed5 	.word	0x08003ed5
 8003eac:	08003eeb 	.word	0x08003eeb
 8003eb0:	08003edb 	.word	0x08003edb
 8003eb4:	08003eeb 	.word	0x08003eeb
 8003eb8:	08003eeb 	.word	0x08003eeb
 8003ebc:	08003eeb 	.word	0x08003eeb
 8003ec0:	08003ee3 	.word	0x08003ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec4:	f7fe fb10 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8003ec8:	61b8      	str	r0, [r7, #24]
        break;
 8003eca:	e013      	b.n	8003ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ecc:	f7fe fb20 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 8003ed0:	61b8      	str	r0, [r7, #24]
        break;
 8003ed2:	e00f      	b.n	8003ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8004004 <UART_SetConfig+0x4c4>)
 8003ed6:	61bb      	str	r3, [r7, #24]
        break;
 8003ed8:	e00c      	b.n	8003ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eda:	f7fe fa33 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8003ede:	61b8      	str	r0, [r7, #24]
        break;
 8003ee0:	e008      	b.n	8003ef4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ee6:	61bb      	str	r3, [r7, #24]
        break;
 8003ee8:	e004      	b.n	8003ef4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ef2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d074      	beq.n	8003fe4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	005a      	lsls	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	085b      	lsrs	r3, r3, #1
 8003f04:	441a      	add	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	2b0f      	cmp	r3, #15
 8003f14:	d916      	bls.n	8003f44 <UART_SetConfig+0x404>
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f1c:	d212      	bcs.n	8003f44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f023 030f 	bic.w	r3, r3, #15
 8003f26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	89fb      	ldrh	r3, [r7, #14]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	89fa      	ldrh	r2, [r7, #14]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	e04f      	b.n	8003fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	77bb      	strb	r3, [r7, #30]
 8003f48:	e04c      	b.n	8003fe4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f4a:	7ffb      	ldrb	r3, [r7, #31]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d828      	bhi.n	8003fa2 <UART_SetConfig+0x462>
 8003f50:	a201      	add	r2, pc, #4	@ (adr r2, 8003f58 <UART_SetConfig+0x418>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	08003f85 	.word	0x08003f85
 8003f60:	08003f8d 	.word	0x08003f8d
 8003f64:	08003fa3 	.word	0x08003fa3
 8003f68:	08003f93 	.word	0x08003f93
 8003f6c:	08003fa3 	.word	0x08003fa3
 8003f70:	08003fa3 	.word	0x08003fa3
 8003f74:	08003fa3 	.word	0x08003fa3
 8003f78:	08003f9b 	.word	0x08003f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f7c:	f7fe fab4 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8003f80:	61b8      	str	r0, [r7, #24]
        break;
 8003f82:	e013      	b.n	8003fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f84:	f7fe fac4 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 8003f88:	61b8      	str	r0, [r7, #24]
        break;
 8003f8a:	e00f      	b.n	8003fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004004 <UART_SetConfig+0x4c4>)
 8003f8e:	61bb      	str	r3, [r7, #24]
        break;
 8003f90:	e00c      	b.n	8003fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f92:	f7fe f9d7 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8003f96:	61b8      	str	r0, [r7, #24]
        break;
 8003f98:	e008      	b.n	8003fac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f9e:	61bb      	str	r3, [r7, #24]
        break;
 8003fa0:	e004      	b.n	8003fac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	77bb      	strb	r3, [r7, #30]
        break;
 8003faa:	bf00      	nop
    }

    if (pclk != 0U)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d018      	beq.n	8003fe4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	085a      	lsrs	r2, r3, #1
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	441a      	add	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b0f      	cmp	r3, #15
 8003fca:	d909      	bls.n	8003fe0 <UART_SetConfig+0x4a0>
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd2:	d205      	bcs.n	8003fe0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	e001      	b.n	8003fe4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ff0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3720      	adds	r7, #32
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40007c00 	.word	0x40007c00
 8004000:	40023800 	.word	0x40023800
 8004004:	00f42400 	.word	0x00f42400

08004008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d01a      	beq.n	800411e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004106:	d10a      	bne.n	800411e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  }
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08c      	sub	sp, #48	@ 0x30
 8004150:	af02      	add	r7, sp, #8
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800415c:	f7fd f9cc 	bl	80014f8 <HAL_GetTick>
 8004160:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b08      	cmp	r3, #8
 800416e:	d12e      	bne.n	80041ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004170:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	2200      	movs	r2, #0
 800417a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f83b 	bl	80041fa <UART_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d021      	beq.n	80041ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	60fb      	str	r3, [r7, #12]
   return(result);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800419e:	623b      	str	r3, [r7, #32]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	69b9      	ldr	r1, [r7, #24]
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	617b      	str	r3, [r7, #20]
   return(result);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e6      	bne.n	800418a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e011      	b.n	80041f2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3728      	adds	r7, #40	@ 0x28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	4613      	mov	r3, r2
 8004208:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800420a:	e04f      	b.n	80042ac <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d04b      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004214:	f7fd f970 	bl	80014f8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	429a      	cmp	r2, r3
 8004222:	d302      	bcc.n	800422a <UART_WaitOnFlagUntilTimeout+0x30>
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e04e      	b.n	80042cc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d037      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0xb2>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b80      	cmp	r3, #128	@ 0x80
 8004240:	d034      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0xb2>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b40      	cmp	r3, #64	@ 0x40
 8004246:	d031      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b08      	cmp	r3, #8
 8004254:	d110      	bne.n	8004278 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2208      	movs	r2, #8
 800425c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f8fe 	bl	8004460 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2208      	movs	r2, #8
 8004268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e029      	b.n	80042cc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004282:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004286:	d111      	bne.n	80042ac <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004290:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f8e4 	bl	8004460 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e00f      	b.n	80042cc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d0a0      	beq.n	800420c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b097      	sub	sp, #92	@ 0x5c
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	88fa      	ldrh	r2, [r7, #6]
 80042ec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	88fa      	ldrh	r2, [r7, #6]
 80042f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004306:	d10e      	bne.n	8004326 <UART_Start_Receive_IT+0x52>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d105      	bne.n	800431c <UART_Start_Receive_IT+0x48>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004316:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800431a:	e02d      	b.n	8004378 <UART_Start_Receive_IT+0xa4>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	22ff      	movs	r2, #255	@ 0xff
 8004320:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004324:	e028      	b.n	8004378 <UART_Start_Receive_IT+0xa4>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10d      	bne.n	800434a <UART_Start_Receive_IT+0x76>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <UART_Start_Receive_IT+0x6c>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	22ff      	movs	r2, #255	@ 0xff
 800433a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800433e:	e01b      	b.n	8004378 <UART_Start_Receive_IT+0xa4>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	227f      	movs	r2, #127	@ 0x7f
 8004344:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004348:	e016      	b.n	8004378 <UART_Start_Receive_IT+0xa4>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004352:	d10d      	bne.n	8004370 <UART_Start_Receive_IT+0x9c>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <UART_Start_Receive_IT+0x92>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	227f      	movs	r2, #127	@ 0x7f
 8004360:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004364:	e008      	b.n	8004378 <UART_Start_Receive_IT+0xa4>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	223f      	movs	r2, #63	@ 0x3f
 800436a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800436e:	e003      	b.n	8004378 <UART_Start_Receive_IT+0xa4>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2222      	movs	r2, #34	@ 0x22
 8004384:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3308      	adds	r3, #8
 800438e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	657b      	str	r3, [r7, #84]	@ 0x54
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3308      	adds	r3, #8
 80043a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80043a8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80043aa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80043ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80043b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e5      	bne.n	8004388 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043c4:	d107      	bne.n	80043d6 <UART_Start_Receive_IT+0x102>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d103      	bne.n	80043d6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4a21      	ldr	r2, [pc, #132]	@ (8004458 <UART_Start_Receive_IT+0x184>)
 80043d2:	669a      	str	r2, [r3, #104]	@ 0x68
 80043d4:	e002      	b.n	80043dc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a20      	ldr	r2, [pc, #128]	@ (800445c <UART_Start_Receive_IT+0x188>)
 80043da:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d019      	beq.n	8004418 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80043f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004402:	637b      	str	r3, [r7, #52]	@ 0x34
 8004404:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004408:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e6      	bne.n	80043e4 <UART_Start_Receive_IT+0x110>
 8004416:	e018      	b.n	800444a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	613b      	str	r3, [r7, #16]
   return(result);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f043 0320 	orr.w	r3, r3, #32
 800442c:	653b      	str	r3, [r7, #80]	@ 0x50
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004436:	623b      	str	r3, [r7, #32]
 8004438:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	69f9      	ldr	r1, [r7, #28]
 800443c:	6a3a      	ldr	r2, [r7, #32]
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	61bb      	str	r3, [r7, #24]
   return(result);
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e6      	bne.n	8004418 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	375c      	adds	r7, #92	@ 0x5c
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	08004751 	.word	0x08004751
 800445c:	080045a9 	.word	0x080045a9

08004460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b095      	sub	sp, #84	@ 0x54
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004478:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800447c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004486:	643b      	str	r3, [r7, #64]	@ 0x40
 8004488:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800448c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e6      	bne.n	8004468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3308      	adds	r3, #8
 80044a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3308      	adds	r3, #8
 80044b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d118      	bne.n	8004508 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f023 0310 	bic.w	r3, r3, #16
 80044ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6979      	ldr	r1, [r7, #20]
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	613b      	str	r3, [r7, #16]
   return(result);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e6      	bne.n	80044d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800451c:	bf00      	nop
 800451e:	3754      	adds	r7, #84	@ 0x54
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004534:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7ff fae4 	bl	8003b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	60bb      	str	r3, [r7, #8]
   return(result);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004570:	61fb      	str	r3, [r7, #28]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	6979      	ldr	r1, [r7, #20]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	613b      	str	r3, [r7, #16]
   return(result);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e6      	bne.n	800455c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff fab0 	bl	8003b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045a0:	bf00      	nop
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b09c      	sub	sp, #112	@ 0x70
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80045b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045c0:	2b22      	cmp	r3, #34	@ 0x22
 80045c2:	f040 80b9 	bne.w	8004738 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045d4:	b2d9      	uxtb	r1, r3
 80045d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e0:	400a      	ands	r2, r1
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 809c 	bne.w	8004748 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800461e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004620:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004624:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800462e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004630:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004634:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800463c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e6      	bne.n	8004610 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3308      	adds	r3, #8
 8004648:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	667b      	str	r3, [r7, #100]	@ 0x64
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3308      	adds	r3, #8
 8004660:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004662:	647a      	str	r2, [r7, #68]	@ 0x44
 8004664:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004668:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e5      	bne.n	8004642 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d018      	beq.n	80046ca <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	623b      	str	r3, [r7, #32]
   return(result);
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80046b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e6      	bne.n	8004698 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d12e      	bne.n	8004730 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f023 0310 	bic.w	r3, r3, #16
 80046ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	69b9      	ldr	r1, [r7, #24]
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	617b      	str	r3, [r7, #20]
   return(result);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e6      	bne.n	80046d8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b10      	cmp	r3, #16
 8004716:	d103      	bne.n	8004720 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2210      	movs	r2, #16
 800471e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff f9fd 	bl	8003b28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800472e:	e00b      	b.n	8004748 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f002 fed3 	bl	80074dc <HAL_UART_RxCpltCallback>
}
 8004736:	e007      	b.n	8004748 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0208 	orr.w	r2, r2, #8
 8004746:	619a      	str	r2, [r3, #24]
}
 8004748:	bf00      	nop
 800474a:	3770      	adds	r7, #112	@ 0x70
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b09c      	sub	sp, #112	@ 0x70
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800475e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004768:	2b22      	cmp	r3, #34	@ 0x22
 800476a:	f040 80b9 	bne.w	80048e0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004774:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800477c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800477e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004782:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004786:	4013      	ands	r3, r2
 8004788:	b29a      	uxth	r2, r3
 800478a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800478c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004792:	1c9a      	adds	r2, r3, #2
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f040 809c 	bne.w	80048f0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80047c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80047d8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80047dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80047e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1e6      	bne.n	80047b8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3308      	adds	r3, #8
 80047f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	663b      	str	r3, [r7, #96]	@ 0x60
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3308      	adds	r3, #8
 8004808:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800480a:	643a      	str	r2, [r7, #64]	@ 0x40
 800480c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004810:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e5      	bne.n	80047ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d018      	beq.n	8004872 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	61fb      	str	r3, [r7, #28]
   return(result);
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004854:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800485e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004860:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e6      	bne.n	8004840 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004876:	2b01      	cmp	r3, #1
 8004878:	d12e      	bne.n	80048d8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	60bb      	str	r3, [r7, #8]
   return(result);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f023 0310 	bic.w	r3, r3, #16
 8004894:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800489e:	61bb      	str	r3, [r7, #24]
 80048a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6979      	ldr	r1, [r7, #20]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	613b      	str	r3, [r7, #16]
   return(result);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e6      	bne.n	8004880 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b10      	cmp	r3, #16
 80048be:	d103      	bne.n	80048c8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2210      	movs	r2, #16
 80048c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80048ce:	4619      	mov	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff f929 	bl	8003b28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048d6:	e00b      	b.n	80048f0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f002 fdff 	bl	80074dc <HAL_UART_RxCpltCallback>
}
 80048de:	e007      	b.n	80048f0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0208 	orr.w	r2, r2, #8
 80048ee:	619a      	str	r2, [r3, #24]
}
 80048f0:	bf00      	nop
 80048f2:	3770      	adds	r7, #112	@ 0x70
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a07      	ldr	r2, [pc, #28]	@ (8004924 <vApplicationGetIdleTaskMemory+0x2c>)
 8004908:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4a06      	ldr	r2, [pc, #24]	@ (8004928 <vApplicationGetIdleTaskMemory+0x30>)
 800490e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2280      	movs	r2, #128	@ 0x80
 8004914:	601a      	str	r2, [r3, #0]
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	2000016c 	.word	0x2000016c
 8004928:	20000214 	.word	0x20000214

0800492c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4a07      	ldr	r2, [pc, #28]	@ (8004958 <vApplicationGetTimerTaskMemory+0x2c>)
 800493c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4a06      	ldr	r2, [pc, #24]	@ (800495c <vApplicationGetTimerTaskMemory+0x30>)
 8004942:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800494a:	601a      	str	r2, [r3, #0]
}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	20000414 	.word	0x20000414
 800495c:	200004bc 	.word	0x200004bc

08004960 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f103 0208 	add.w	r2, r3, #8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f04f 32ff 	mov.w	r2, #4294967295
 8004978:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f103 0208 	add.w	r2, r3, #8
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f103 0208 	add.w	r2, r3, #8
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	601a      	str	r2, [r3, #0]
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d103      	bne.n	8004a22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	e00c      	b.n	8004a3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3308      	adds	r3, #8
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	e002      	b.n	8004a30 <vListInsert+0x2e>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d2f6      	bcs.n	8004a2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	601a      	str	r2, [r3, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6892      	ldr	r2, [r2, #8]
 8004a8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6852      	ldr	r2, [r2, #4]
 8004a94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d103      	bne.n	8004aa8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	1e5a      	subs	r2, r3, #1
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10d      	bne.n	8004af8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae0:	b672      	cpsid	i
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	b662      	cpsie	i
 8004af0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	e7fd      	b.n	8004af4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004af8:	f002 f998 	bl	8006e2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b04:	68f9      	ldr	r1, [r7, #12]
 8004b06:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	441a      	add	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b2e:	fb01 f303 	mul.w	r3, r1, r3
 8004b32:	441a      	add	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	22ff      	movs	r2, #255	@ 0xff
 8004b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	22ff      	movs	r2, #255	@ 0xff
 8004b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d114      	bne.n	8004b78 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01a      	beq.n	8004b8c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	3310      	adds	r3, #16
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 f940 	bl	8005de0 <xTaskRemoveFromEventList>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d012      	beq.n	8004b8c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b66:	4b0d      	ldr	r3, [pc, #52]	@ (8004b9c <xQueueGenericReset+0xd4>)
 8004b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	e009      	b.n	8004b8c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3310      	adds	r3, #16
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff feef 	bl	8004960 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3324      	adds	r3, #36	@ 0x24
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff feea 	bl	8004960 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b8c:	f002 f984 	bl	8006e98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b90:	2301      	movs	r3, #1
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	e000ed04 	.word	0xe000ed04

08004ba0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08e      	sub	sp, #56	@ 0x38
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10d      	bne.n	8004bd0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb8:	b672      	cpsid	i
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	b662      	cpsie	i
 8004bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bca:	bf00      	nop
 8004bcc:	bf00      	nop
 8004bce:	e7fd      	b.n	8004bcc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10d      	bne.n	8004bf2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bda:	b672      	cpsid	i
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	b662      	cpsie	i
 8004bea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <xQueueGenericCreateStatic+0x5e>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <xQueueGenericCreateStatic+0x62>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <xQueueGenericCreateStatic+0x64>
 8004c02:	2300      	movs	r3, #0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10d      	bne.n	8004c24 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0c:	b672      	cpsid	i
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	b662      	cpsie	i
 8004c1c:	623b      	str	r3, [r7, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	bf00      	nop
 8004c22:	e7fd      	b.n	8004c20 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d102      	bne.n	8004c30 <xQueueGenericCreateStatic+0x90>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <xQueueGenericCreateStatic+0x94>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <xQueueGenericCreateStatic+0x96>
 8004c34:	2300      	movs	r3, #0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10d      	bne.n	8004c56 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3e:	b672      	cpsid	i
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	b662      	cpsie	i
 8004c4e:	61fb      	str	r3, [r7, #28]
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	e7fd      	b.n	8004c52 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c56:	2350      	movs	r3, #80	@ 0x50
 8004c58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b50      	cmp	r3, #80	@ 0x50
 8004c5e:	d00d      	beq.n	8004c7c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c64:	b672      	cpsid	i
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	b662      	cpsie	i
 8004c74:	61bb      	str	r3, [r7, #24]
}
 8004c76:	bf00      	nop
 8004c78:	bf00      	nop
 8004c7a:	e7fd      	b.n	8004c78 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c7c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00d      	beq.n	8004ca4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c90:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f805 	bl	8004cae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3730      	adds	r7, #48	@ 0x30
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
 8004cba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	e002      	b.n	8004cd0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cdc:	2101      	movs	r1, #1
 8004cde:	69b8      	ldr	r0, [r7, #24]
 8004ce0:	f7ff fef2 	bl	8004ac8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08e      	sub	sp, #56	@ 0x38
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d02:	2300      	movs	r3, #0
 8004d04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10d      	bne.n	8004d2c <xQueueGenericSend+0x38>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d14:	b672      	cpsid	i
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	b662      	cpsie	i
 8004d24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <xQueueGenericSend+0x46>
 8004d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <xQueueGenericSend+0x4a>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <xQueueGenericSend+0x4c>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10d      	bne.n	8004d60 <xQueueGenericSend+0x6c>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d48:	b672      	cpsid	i
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	b662      	cpsie	i
 8004d58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	e7fd      	b.n	8004d5c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d103      	bne.n	8004d6e <xQueueGenericSend+0x7a>
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <xQueueGenericSend+0x7e>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <xQueueGenericSend+0x80>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10d      	bne.n	8004d94 <xQueueGenericSend+0xa0>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7c:	b672      	cpsid	i
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	b662      	cpsie	i
 8004d8c:	623b      	str	r3, [r7, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	bf00      	nop
 8004d92:	e7fd      	b.n	8004d90 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d94:	f001 fa02 	bl	800619c <xTaskGetSchedulerState>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <xQueueGenericSend+0xb0>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <xQueueGenericSend+0xb4>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <xQueueGenericSend+0xb6>
 8004da8:	2300      	movs	r3, #0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10d      	bne.n	8004dca <xQueueGenericSend+0xd6>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db2:	b672      	cpsid	i
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	b662      	cpsie	i
 8004dc2:	61fb      	str	r3, [r7, #28]
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	e7fd      	b.n	8004dc6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dca:	f002 f82f 	bl	8006e2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d302      	bcc.n	8004de0 <xQueueGenericSend+0xec>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d129      	bne.n	8004e34 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004de6:	f000 fa1b 	bl	8005220 <prvCopyDataToQueue>
 8004dea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df6:	3324      	adds	r3, #36	@ 0x24
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fff1 	bl	8005de0 <xTaskRemoveFromEventList>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d013      	beq.n	8004e2c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e04:	4b3f      	ldr	r3, [pc, #252]	@ (8004f04 <xQueueGenericSend+0x210>)
 8004e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	e00a      	b.n	8004e2c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e1c:	4b39      	ldr	r3, [pc, #228]	@ (8004f04 <xQueueGenericSend+0x210>)
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e2c:	f002 f834 	bl	8006e98 <vPortExitCritical>
				return pdPASS;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e063      	b.n	8004efc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d103      	bne.n	8004e42 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e3a:	f002 f82d 	bl	8006e98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e05c      	b.n	8004efc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e48:	f107 0314 	add.w	r3, r7, #20
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f001 f82d 	bl	8005eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e52:	2301      	movs	r3, #1
 8004e54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e56:	f002 f81f 	bl	8006e98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e5a:	f000 fd89 	bl	8005970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e5e:	f001 ffe5 	bl	8006e2c <vPortEnterCritical>
 8004e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e68:	b25b      	sxtb	r3, r3
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6e:	d103      	bne.n	8004e78 <xQueueGenericSend+0x184>
 8004e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e7e:	b25b      	sxtb	r3, r3
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d103      	bne.n	8004e8e <xQueueGenericSend+0x19a>
 8004e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e8e:	f002 f803 	bl	8006e98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e92:	1d3a      	adds	r2, r7, #4
 8004e94:	f107 0314 	add.w	r3, r7, #20
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f001 f81c 	bl	8005ed8 <xTaskCheckForTimeOut>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d124      	bne.n	8004ef0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ea6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ea8:	f000 fab2 	bl	8005410 <prvIsQueueFull>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d018      	beq.n	8004ee4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb4:	3310      	adds	r3, #16
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	4611      	mov	r1, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 ff3a 	bl	8005d34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ec2:	f000 fa3d 	bl	8005340 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ec6:	f000 fd61 	bl	800598c <xTaskResumeAll>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f47f af7c 	bne.w	8004dca <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f04 <xQueueGenericSend+0x210>)
 8004ed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	e772      	b.n	8004dca <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ee4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ee6:	f000 fa2b 	bl	8005340 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004eea:	f000 fd4f 	bl	800598c <xTaskResumeAll>
 8004eee:	e76c      	b.n	8004dca <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ef0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ef2:	f000 fa25 	bl	8005340 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ef6:	f000 fd49 	bl	800598c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004efa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3738      	adds	r7, #56	@ 0x38
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08e      	sub	sp, #56	@ 0x38
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10d      	bne.n	8004f3c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f24:	b672      	cpsid	i
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	b662      	cpsie	i
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f36:	bf00      	nop
 8004f38:	bf00      	nop
 8004f3a:	e7fd      	b.n	8004f38 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <xQueueGenericSendFromISR+0x42>
 8004f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <xQueueGenericSendFromISR+0x46>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <xQueueGenericSendFromISR+0x48>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10d      	bne.n	8004f70 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f58:	b672      	cpsid	i
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	b662      	cpsie	i
 8004f68:	623b      	str	r3, [r7, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	bf00      	nop
 8004f6e:	e7fd      	b.n	8004f6c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d103      	bne.n	8004f7e <xQueueGenericSendFromISR+0x76>
 8004f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <xQueueGenericSendFromISR+0x7a>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <xQueueGenericSendFromISR+0x7c>
 8004f82:	2300      	movs	r3, #0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10d      	bne.n	8004fa4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8c:	b672      	cpsid	i
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	b662      	cpsie	i
 8004f9c:	61fb      	str	r3, [r7, #28]
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fa4:	f002 f82a 	bl	8006ffc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004fa8:	f3ef 8211 	mrs	r2, BASEPRI
 8004fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb0:	b672      	cpsid	i
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	b662      	cpsie	i
 8004fc0:	61ba      	str	r2, [r7, #24]
 8004fc2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004fc4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d302      	bcc.n	8004fda <xQueueGenericSendFromISR+0xd2>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d12c      	bne.n	8005034 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fea:	f000 f919 	bl	8005220 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fee:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff6:	d112      	bne.n	800501e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d016      	beq.n	800502e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005002:	3324      	adds	r3, #36	@ 0x24
 8005004:	4618      	mov	r0, r3
 8005006:	f000 feeb 	bl	8005de0 <xTaskRemoveFromEventList>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00e      	beq.n	800502e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00b      	beq.n	800502e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e007      	b.n	800502e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800501e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005022:	3301      	adds	r3, #1
 8005024:	b2db      	uxtb	r3, r3
 8005026:	b25a      	sxtb	r2, r3
 8005028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800502e:	2301      	movs	r3, #1
 8005030:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005032:	e001      	b.n	8005038 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005034:	2300      	movs	r3, #0
 8005036:	637b      	str	r3, [r7, #52]	@ 0x34
 8005038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005042:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005046:	4618      	mov	r0, r3
 8005048:	3738      	adds	r7, #56	@ 0x38
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08c      	sub	sp, #48	@ 0x30
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800505c:	2300      	movs	r3, #0
 800505e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10d      	bne.n	8005086 <xQueueReceive+0x36>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506e:	b672      	cpsid	i
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	b662      	cpsie	i
 800507e:	623b      	str	r3, [r7, #32]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d103      	bne.n	8005094 <xQueueReceive+0x44>
 800508c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <xQueueReceive+0x48>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <xQueueReceive+0x4a>
 8005098:	2300      	movs	r3, #0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10d      	bne.n	80050ba <xQueueReceive+0x6a>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	b672      	cpsid	i
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	b662      	cpsie	i
 80050b2:	61fb      	str	r3, [r7, #28]
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop
 80050b8:	e7fd      	b.n	80050b6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050ba:	f001 f86f 	bl	800619c <xTaskGetSchedulerState>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d102      	bne.n	80050ca <xQueueReceive+0x7a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <xQueueReceive+0x7e>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <xQueueReceive+0x80>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10d      	bne.n	80050f0 <xQueueReceive+0xa0>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d8:	b672      	cpsid	i
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	b662      	cpsie	i
 80050e8:	61bb      	str	r3, [r7, #24]
}
 80050ea:	bf00      	nop
 80050ec:	bf00      	nop
 80050ee:	e7fd      	b.n	80050ec <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050f0:	f001 fe9c 	bl	8006e2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01f      	beq.n	8005140 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005104:	f000 f8f6 	bl	80052f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	1e5a      	subs	r2, r3, #1
 800510c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00f      	beq.n	8005138 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511a:	3310      	adds	r3, #16
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fe5f 	bl	8005de0 <xTaskRemoveFromEventList>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005128:	4b3c      	ldr	r3, [pc, #240]	@ (800521c <xQueueReceive+0x1cc>)
 800512a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005138:	f001 feae 	bl	8006e98 <vPortExitCritical>
				return pdPASS;
 800513c:	2301      	movs	r3, #1
 800513e:	e069      	b.n	8005214 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d103      	bne.n	800514e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005146:	f001 fea7 	bl	8006e98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800514a:	2300      	movs	r3, #0
 800514c:	e062      	b.n	8005214 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800514e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d106      	bne.n	8005162 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005154:	f107 0310 	add.w	r3, r7, #16
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fea7 	bl	8005eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800515e:	2301      	movs	r3, #1
 8005160:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005162:	f001 fe99 	bl	8006e98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005166:	f000 fc03 	bl	8005970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800516a:	f001 fe5f 	bl	8006e2c <vPortEnterCritical>
 800516e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005170:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005174:	b25b      	sxtb	r3, r3
 8005176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517a:	d103      	bne.n	8005184 <xQueueReceive+0x134>
 800517c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005186:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800518a:	b25b      	sxtb	r3, r3
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d103      	bne.n	800519a <xQueueReceive+0x14a>
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800519a:	f001 fe7d 	bl	8006e98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800519e:	1d3a      	adds	r2, r7, #4
 80051a0:	f107 0310 	add.w	r3, r7, #16
 80051a4:	4611      	mov	r1, r2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fe96 	bl	8005ed8 <xTaskCheckForTimeOut>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d123      	bne.n	80051fa <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051b4:	f000 f916 	bl	80053e4 <prvIsQueueEmpty>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d017      	beq.n	80051ee <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c0:	3324      	adds	r3, #36	@ 0x24
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	4611      	mov	r1, r2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fdb4 	bl	8005d34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051ce:	f000 f8b7 	bl	8005340 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051d2:	f000 fbdb 	bl	800598c <xTaskResumeAll>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d189      	bne.n	80050f0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80051dc:	4b0f      	ldr	r3, [pc, #60]	@ (800521c <xQueueReceive+0x1cc>)
 80051de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	e780      	b.n	80050f0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80051ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051f0:	f000 f8a6 	bl	8005340 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051f4:	f000 fbca 	bl	800598c <xTaskResumeAll>
 80051f8:	e77a      	b.n	80050f0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80051fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051fc:	f000 f8a0 	bl	8005340 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005200:	f000 fbc4 	bl	800598c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005204:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005206:	f000 f8ed 	bl	80053e4 <prvIsQueueEmpty>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	f43f af6f 	beq.w	80050f0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005212:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005214:	4618      	mov	r0, r3
 8005216:	3730      	adds	r7, #48	@ 0x30
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	e000ed04 	.word	0xe000ed04

08005220 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005234:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10d      	bne.n	800525a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d14d      	bne.n	80052e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 ffc4 	bl	80061d8 <xTaskPriorityDisinherit>
 8005250:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	609a      	str	r2, [r3, #8]
 8005258:	e043      	b.n	80052e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d119      	bne.n	8005294 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6858      	ldr	r0, [r3, #4]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005268:	461a      	mov	r2, r3
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	f002 fded 	bl	8007e4a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005278:	441a      	add	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	429a      	cmp	r2, r3
 8005288:	d32b      	bcc.n	80052e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	e026      	b.n	80052e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	68d8      	ldr	r0, [r3, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529c:	461a      	mov	r2, r3
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	f002 fdd3 	bl	8007e4a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	425b      	negs	r3, r3
 80052ae:	441a      	add	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d207      	bcs.n	80052d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c8:	425b      	negs	r3, r3
 80052ca:	441a      	add	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d105      	bne.n	80052e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	3b01      	subs	r3, #1
 80052e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80052ea:	697b      	ldr	r3, [r7, #20]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d018      	beq.n	8005338 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	441a      	add	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	429a      	cmp	r2, r3
 800531e:	d303      	bcc.n	8005328 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68d9      	ldr	r1, [r3, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005330:	461a      	mov	r2, r3
 8005332:	6838      	ldr	r0, [r7, #0]
 8005334:	f002 fd89 	bl	8007e4a <memcpy>
	}
}
 8005338:	bf00      	nop
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005348:	f001 fd70 	bl	8006e2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005352:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005354:	e011      	b.n	800537a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535a:	2b00      	cmp	r3, #0
 800535c:	d012      	beq.n	8005384 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3324      	adds	r3, #36	@ 0x24
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fd3c 	bl	8005de0 <xTaskRemoveFromEventList>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800536e:	f000 fe1b 	bl	8005fa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	3b01      	subs	r3, #1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800537a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800537e:	2b00      	cmp	r3, #0
 8005380:	dce9      	bgt.n	8005356 <prvUnlockQueue+0x16>
 8005382:	e000      	b.n	8005386 <prvUnlockQueue+0x46>
					break;
 8005384:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	22ff      	movs	r2, #255	@ 0xff
 800538a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800538e:	f001 fd83 	bl	8006e98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005392:	f001 fd4b 	bl	8006e2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800539c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800539e:	e011      	b.n	80053c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d012      	beq.n	80053ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3310      	adds	r3, #16
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fd17 	bl	8005de0 <xTaskRemoveFromEventList>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053b8:	f000 fdf6 	bl	8005fa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80053bc:	7bbb      	ldrb	r3, [r7, #14]
 80053be:	3b01      	subs	r3, #1
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	dce9      	bgt.n	80053a0 <prvUnlockQueue+0x60>
 80053cc:	e000      	b.n	80053d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80053ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	22ff      	movs	r2, #255	@ 0xff
 80053d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80053d8:	f001 fd5e 	bl	8006e98 <vPortExitCritical>
}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053ec:	f001 fd1e 	bl	8006e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80053f8:	2301      	movs	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e001      	b.n	8005402 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005402:	f001 fd49 	bl	8006e98 <vPortExitCritical>

	return xReturn;
 8005406:	68fb      	ldr	r3, [r7, #12]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005418:	f001 fd08 	bl	8006e2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005424:	429a      	cmp	r2, r3
 8005426:	d102      	bne.n	800542e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005428:	2301      	movs	r3, #1
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e001      	b.n	8005432 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005432:	f001 fd31 	bl	8006e98 <vPortExitCritical>

	return xReturn;
 8005436:	68fb      	ldr	r3, [r7, #12]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	e014      	b.n	800547a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005450:	4a0f      	ldr	r2, [pc, #60]	@ (8005490 <vQueueAddToRegistry+0x50>)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10b      	bne.n	8005474 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800545c:	490c      	ldr	r1, [pc, #48]	@ (8005490 <vQueueAddToRegistry+0x50>)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005466:	4a0a      	ldr	r2, [pc, #40]	@ (8005490 <vQueueAddToRegistry+0x50>)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	4413      	add	r3, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005472:	e006      	b.n	8005482 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b07      	cmp	r3, #7
 800547e:	d9e7      	bls.n	8005450 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	200008bc 	.word	0x200008bc

08005494 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80054a4:	f001 fcc2 	bl	8006e2c <vPortEnterCritical>
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054ae:	b25b      	sxtb	r3, r3
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d103      	bne.n	80054be <vQueueWaitForMessageRestricted+0x2a>
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054c4:	b25b      	sxtb	r3, r3
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ca:	d103      	bne.n	80054d4 <vQueueWaitForMessageRestricted+0x40>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054d4:	f001 fce0 	bl	8006e98 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d106      	bne.n	80054ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	3324      	adds	r3, #36	@ 0x24
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fc4b 	bl	8005d84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054ee:	6978      	ldr	r0, [r7, #20]
 80054f0:	f7ff ff26 	bl	8005340 <prvUnlockQueue>
	}
 80054f4:	bf00      	nop
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08e      	sub	sp, #56	@ 0x38
 8005500:	af04      	add	r7, sp, #16
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800550a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10d      	bne.n	800552c <xTaskCreateStatic+0x30>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005514:	b672      	cpsid	i
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	b662      	cpsie	i
 8005524:	623b      	str	r3, [r7, #32]
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800552c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10d      	bne.n	800554e <xTaskCreateStatic+0x52>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005536:	b672      	cpsid	i
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	b662      	cpsie	i
 8005546:	61fb      	str	r3, [r7, #28]
}
 8005548:	bf00      	nop
 800554a:	bf00      	nop
 800554c:	e7fd      	b.n	800554a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800554e:	23a8      	movs	r3, #168	@ 0xa8
 8005550:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2ba8      	cmp	r3, #168	@ 0xa8
 8005556:	d00d      	beq.n	8005574 <xTaskCreateStatic+0x78>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555c:	b672      	cpsid	i
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	b662      	cpsie	i
 800556c:	61bb      	str	r3, [r7, #24]
}
 800556e:	bf00      	nop
 8005570:	bf00      	nop
 8005572:	e7fd      	b.n	8005570 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005574:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01e      	beq.n	80055ba <xTaskCreateStatic+0xbe>
 800557c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557e:	2b00      	cmp	r3, #0
 8005580:	d01b      	beq.n	80055ba <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800558a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	2202      	movs	r2, #2
 8005590:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005594:	2300      	movs	r3, #0
 8005596:	9303      	str	r3, [sp, #12]
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	9302      	str	r3, [sp, #8]
 800559c:	f107 0314 	add.w	r3, r7, #20
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f851 	bl	8005654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055b4:	f000 f8f8 	bl	80057a8 <prvAddNewTaskToReadyList>
 80055b8:	e001      	b.n	80055be <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055be:	697b      	ldr	r3, [r7, #20]
	}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3728      	adds	r7, #40	@ 0x28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08c      	sub	sp, #48	@ 0x30
 80055cc:	af04      	add	r7, sp, #16
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4613      	mov	r3, r2
 80055d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055d8:	88fb      	ldrh	r3, [r7, #6]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4618      	mov	r0, r3
 80055de:	f001 fd53 	bl	8007088 <pvPortMalloc>
 80055e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00e      	beq.n	8005608 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055ea:	20a8      	movs	r0, #168	@ 0xa8
 80055ec:	f001 fd4c 	bl	8007088 <pvPortMalloc>
 80055f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80055fe:	e005      	b.n	800560c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005600:	6978      	ldr	r0, [r7, #20]
 8005602:	f001 fe0f 	bl	8007224 <vPortFree>
 8005606:	e001      	b.n	800560c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005608:	2300      	movs	r3, #0
 800560a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d017      	beq.n	8005642 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800561a:	88fa      	ldrh	r2, [r7, #6]
 800561c:	2300      	movs	r3, #0
 800561e:	9303      	str	r3, [sp, #12]
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	9302      	str	r3, [sp, #8]
 8005624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f80f 	bl	8005654 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005636:	69f8      	ldr	r0, [r7, #28]
 8005638:	f000 f8b6 	bl	80057a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800563c:	2301      	movs	r3, #1
 800563e:	61bb      	str	r3, [r7, #24]
 8005640:	e002      	b.n	8005648 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005642:	f04f 33ff 	mov.w	r3, #4294967295
 8005646:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005648:	69bb      	ldr	r3, [r7, #24]
	}
 800564a:	4618      	mov	r0, r3
 800564c:	3720      	adds	r7, #32
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005664:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	461a      	mov	r2, r3
 800566c:	21a5      	movs	r1, #165	@ 0xa5
 800566e:	f002 fb1b 	bl	8007ca8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800567c:	440b      	add	r3, r1
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f023 0307 	bic.w	r3, r3, #7
 800568a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00d      	beq.n	80056b2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569a:	b672      	cpsid	i
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	b662      	cpsie	i
 80056aa:	617b      	str	r3, [r7, #20]
}
 80056ac:	bf00      	nop
 80056ae:	bf00      	nop
 80056b0:	e7fd      	b.n	80056ae <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01f      	beq.n	80056f8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056b8:	2300      	movs	r3, #0
 80056ba:	61fb      	str	r3, [r7, #28]
 80056bc:	e012      	b.n	80056e4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	4413      	add	r3, r2
 80056c4:	7819      	ldrb	r1, [r3, #0]
 80056c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	3334      	adds	r3, #52	@ 0x34
 80056ce:	460a      	mov	r2, r1
 80056d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d006      	beq.n	80056ec <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	3301      	adds	r3, #1
 80056e2:	61fb      	str	r3, [r7, #28]
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	2b0f      	cmp	r3, #15
 80056e8:	d9e9      	bls.n	80056be <prvInitialiseNewTask+0x6a>
 80056ea:	e000      	b.n	80056ee <prvInitialiseNewTask+0x9a>
			{
				break;
 80056ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056f6:	e003      	b.n	8005700 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005702:	2b37      	cmp	r3, #55	@ 0x37
 8005704:	d901      	bls.n	800570a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005706:	2337      	movs	r3, #55	@ 0x37
 8005708:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800570e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005712:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005714:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005718:	2200      	movs	r2, #0
 800571a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800571c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571e:	3304      	adds	r3, #4
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff f93d 	bl	80049a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005728:	3318      	adds	r3, #24
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff f938 	bl	80049a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005734:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005738:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800573c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005744:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005748:	2200      	movs	r2, #0
 800574a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800574e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005750:	2200      	movs	r2, #0
 8005752:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005758:	3354      	adds	r3, #84	@ 0x54
 800575a:	224c      	movs	r2, #76	@ 0x4c
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f002 faa2 	bl	8007ca8 <memset>
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	4a0d      	ldr	r2, [pc, #52]	@ (800579c <prvInitialiseNewTask+0x148>)
 8005768:	659a      	str	r2, [r3, #88]	@ 0x58
 800576a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576c:	4a0c      	ldr	r2, [pc, #48]	@ (80057a0 <prvInitialiseNewTask+0x14c>)
 800576e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005772:	4a0c      	ldr	r2, [pc, #48]	@ (80057a4 <prvInitialiseNewTask+0x150>)
 8005774:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	68f9      	ldr	r1, [r7, #12]
 800577a:	69b8      	ldr	r0, [r7, #24]
 800577c:	f001 fa44 	bl	8006c08 <pxPortInitialiseStack>
 8005780:	4602      	mov	r2, r0
 8005782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005784:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800578c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005792:	bf00      	nop
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20004d54 	.word	0x20004d54
 80057a0:	20004dbc 	.word	0x20004dbc
 80057a4:	20004e24 	.word	0x20004e24

080057a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057b0:	f001 fb3c 	bl	8006e2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057b4:	4b2d      	ldr	r3, [pc, #180]	@ (800586c <prvAddNewTaskToReadyList+0xc4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	4a2c      	ldr	r2, [pc, #176]	@ (800586c <prvAddNewTaskToReadyList+0xc4>)
 80057bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057be:	4b2c      	ldr	r3, [pc, #176]	@ (8005870 <prvAddNewTaskToReadyList+0xc8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005870 <prvAddNewTaskToReadyList+0xc8>)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057cc:	4b27      	ldr	r3, [pc, #156]	@ (800586c <prvAddNewTaskToReadyList+0xc4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d110      	bne.n	80057f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057d4:	f000 fc0c 	bl	8005ff0 <prvInitialiseTaskLists>
 80057d8:	e00d      	b.n	80057f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057da:	4b26      	ldr	r3, [pc, #152]	@ (8005874 <prvAddNewTaskToReadyList+0xcc>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057e2:	4b23      	ldr	r3, [pc, #140]	@ (8005870 <prvAddNewTaskToReadyList+0xc8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d802      	bhi.n	80057f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005870 <prvAddNewTaskToReadyList+0xc8>)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057f6:	4b20      	ldr	r3, [pc, #128]	@ (8005878 <prvAddNewTaskToReadyList+0xd0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3301      	adds	r3, #1
 80057fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005878 <prvAddNewTaskToReadyList+0xd0>)
 80057fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005800:	4b1d      	ldr	r3, [pc, #116]	@ (8005878 <prvAddNewTaskToReadyList+0xd0>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800580c:	4b1b      	ldr	r3, [pc, #108]	@ (800587c <prvAddNewTaskToReadyList+0xd4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d903      	bls.n	800581c <prvAddNewTaskToReadyList+0x74>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	4a18      	ldr	r2, [pc, #96]	@ (800587c <prvAddNewTaskToReadyList+0xd4>)
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4a15      	ldr	r2, [pc, #84]	@ (8005880 <prvAddNewTaskToReadyList+0xd8>)
 800582a:	441a      	add	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3304      	adds	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f7ff f8c1 	bl	80049ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005838:	f001 fb2e 	bl	8006e98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800583c:	4b0d      	ldr	r3, [pc, #52]	@ (8005874 <prvAddNewTaskToReadyList+0xcc>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00e      	beq.n	8005862 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005844:	4b0a      	ldr	r3, [pc, #40]	@ (8005870 <prvAddNewTaskToReadyList+0xc8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584e:	429a      	cmp	r2, r3
 8005850:	d207      	bcs.n	8005862 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005852:	4b0c      	ldr	r3, [pc, #48]	@ (8005884 <prvAddNewTaskToReadyList+0xdc>)
 8005854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005862:	bf00      	nop
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000dd0 	.word	0x20000dd0
 8005870:	200008fc 	.word	0x200008fc
 8005874:	20000ddc 	.word	0x20000ddc
 8005878:	20000dec 	.word	0x20000dec
 800587c:	20000dd8 	.word	0x20000dd8
 8005880:	20000900 	.word	0x20000900
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	@ 0x28
 800588c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005896:	463a      	mov	r2, r7
 8005898:	1d39      	adds	r1, r7, #4
 800589a:	f107 0308 	add.w	r3, r7, #8
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff f82a 	bl	80048f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	9202      	str	r2, [sp, #8]
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	2300      	movs	r3, #0
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	2300      	movs	r3, #0
 80058b4:	460a      	mov	r2, r1
 80058b6:	4926      	ldr	r1, [pc, #152]	@ (8005950 <vTaskStartScheduler+0xc8>)
 80058b8:	4826      	ldr	r0, [pc, #152]	@ (8005954 <vTaskStartScheduler+0xcc>)
 80058ba:	f7ff fe1f 	bl	80054fc <xTaskCreateStatic>
 80058be:	4603      	mov	r3, r0
 80058c0:	4a25      	ldr	r2, [pc, #148]	@ (8005958 <vTaskStartScheduler+0xd0>)
 80058c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058c4:	4b24      	ldr	r3, [pc, #144]	@ (8005958 <vTaskStartScheduler+0xd0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058cc:	2301      	movs	r3, #1
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	e001      	b.n	80058d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d102      	bne.n	80058e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058dc:	f000 fe2c 	bl	8006538 <xTimerCreateTimerTask>
 80058e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d11d      	bne.n	8005924 <vTaskStartScheduler+0x9c>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ec:	b672      	cpsid	i
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	b662      	cpsie	i
 80058fc:	613b      	str	r3, [r7, #16]
}
 80058fe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005900:	4b16      	ldr	r3, [pc, #88]	@ (800595c <vTaskStartScheduler+0xd4>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3354      	adds	r3, #84	@ 0x54
 8005906:	4a16      	ldr	r2, [pc, #88]	@ (8005960 <vTaskStartScheduler+0xd8>)
 8005908:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800590a:	4b16      	ldr	r3, [pc, #88]	@ (8005964 <vTaskStartScheduler+0xdc>)
 800590c:	f04f 32ff 	mov.w	r2, #4294967295
 8005910:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005912:	4b15      	ldr	r3, [pc, #84]	@ (8005968 <vTaskStartScheduler+0xe0>)
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005918:	4b14      	ldr	r3, [pc, #80]	@ (800596c <vTaskStartScheduler+0xe4>)
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800591e:	f001 fa07 	bl	8006d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005922:	e011      	b.n	8005948 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d10d      	bne.n	8005948 <vTaskStartScheduler+0xc0>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	b672      	cpsid	i
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	b662      	cpsie	i
 8005940:	60fb      	str	r3, [r7, #12]
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	e7fd      	b.n	8005944 <vTaskStartScheduler+0xbc>
}
 8005948:	bf00      	nop
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	08008994 	.word	0x08008994
 8005954:	08005fc1 	.word	0x08005fc1
 8005958:	20000df4 	.word	0x20000df4
 800595c:	200008fc 	.word	0x200008fc
 8005960:	20000024 	.word	0x20000024
 8005964:	20000df0 	.word	0x20000df0
 8005968:	20000ddc 	.word	0x20000ddc
 800596c:	20000dd4 	.word	0x20000dd4

08005970 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005974:	4b04      	ldr	r3, [pc, #16]	@ (8005988 <vTaskSuspendAll+0x18>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3301      	adds	r3, #1
 800597a:	4a03      	ldr	r2, [pc, #12]	@ (8005988 <vTaskSuspendAll+0x18>)
 800597c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800597e:	bf00      	nop
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	20000df8 	.word	0x20000df8

0800598c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005996:	2300      	movs	r3, #0
 8005998:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800599a:	4b43      	ldr	r3, [pc, #268]	@ (8005aa8 <xTaskResumeAll+0x11c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10d      	bne.n	80059be <xTaskResumeAll+0x32>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	b672      	cpsid	i
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	b662      	cpsie	i
 80059b6:	603b      	str	r3, [r7, #0]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059be:	f001 fa35 	bl	8006e2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059c2:	4b39      	ldr	r3, [pc, #228]	@ (8005aa8 <xTaskResumeAll+0x11c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	4a37      	ldr	r2, [pc, #220]	@ (8005aa8 <xTaskResumeAll+0x11c>)
 80059ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059cc:	4b36      	ldr	r3, [pc, #216]	@ (8005aa8 <xTaskResumeAll+0x11c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d162      	bne.n	8005a9a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059d4:	4b35      	ldr	r3, [pc, #212]	@ (8005aac <xTaskResumeAll+0x120>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d05e      	beq.n	8005a9a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059dc:	e02f      	b.n	8005a3e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059de:	4b34      	ldr	r3, [pc, #208]	@ (8005ab0 <xTaskResumeAll+0x124>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3318      	adds	r3, #24
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff f842 	bl	8004a74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff f83d 	bl	8004a74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fe:	4b2d      	ldr	r3, [pc, #180]	@ (8005ab4 <xTaskResumeAll+0x128>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d903      	bls.n	8005a0e <xTaskResumeAll+0x82>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab4 <xTaskResumeAll+0x128>)
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4a27      	ldr	r2, [pc, #156]	@ (8005ab8 <xTaskResumeAll+0x12c>)
 8005a1c:	441a      	add	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3304      	adds	r3, #4
 8005a22:	4619      	mov	r1, r3
 8005a24:	4610      	mov	r0, r2
 8005a26:	f7fe ffc8 	bl	80049ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2e:	4b23      	ldr	r3, [pc, #140]	@ (8005abc <xTaskResumeAll+0x130>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d302      	bcc.n	8005a3e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8005a38:	4b21      	ldr	r3, [pc, #132]	@ (8005ac0 <xTaskResumeAll+0x134>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ab0 <xTaskResumeAll+0x124>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1cb      	bne.n	80059de <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a4c:	f000 fb76 	bl	800613c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a50:	4b1c      	ldr	r3, [pc, #112]	@ (8005ac4 <xTaskResumeAll+0x138>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d010      	beq.n	8005a7e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a5c:	f000 f846 	bl	8005aec <xTaskIncrementTick>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8005a66:	4b16      	ldr	r3, [pc, #88]	@ (8005ac0 <xTaskResumeAll+0x134>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1f1      	bne.n	8005a5c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8005a78:	4b12      	ldr	r3, [pc, #72]	@ (8005ac4 <xTaskResumeAll+0x138>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a7e:	4b10      	ldr	r3, [pc, #64]	@ (8005ac0 <xTaskResumeAll+0x134>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d009      	beq.n	8005a9a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a86:	2301      	movs	r3, #1
 8005a88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac8 <xTaskResumeAll+0x13c>)
 8005a8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a9a:	f001 f9fd 	bl	8006e98 <vPortExitCritical>

	return xAlreadyYielded;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20000df8 	.word	0x20000df8
 8005aac:	20000dd0 	.word	0x20000dd0
 8005ab0:	20000d90 	.word	0x20000d90
 8005ab4:	20000dd8 	.word	0x20000dd8
 8005ab8:	20000900 	.word	0x20000900
 8005abc:	200008fc 	.word	0x200008fc
 8005ac0:	20000de4 	.word	0x20000de4
 8005ac4:	20000de0 	.word	0x20000de0
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ad2:	4b05      	ldr	r3, [pc, #20]	@ (8005ae8 <xTaskGetTickCount+0x1c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ad8:	687b      	ldr	r3, [r7, #4]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	20000dd4 	.word	0x20000dd4

08005aec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005af6:	4b50      	ldr	r3, [pc, #320]	@ (8005c38 <xTaskIncrementTick+0x14c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f040 808c 	bne.w	8005c18 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b00:	4b4e      	ldr	r3, [pc, #312]	@ (8005c3c <xTaskIncrementTick+0x150>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3301      	adds	r3, #1
 8005b06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b08:	4a4c      	ldr	r2, [pc, #304]	@ (8005c3c <xTaskIncrementTick+0x150>)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d123      	bne.n	8005b5c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005b14:	4b4a      	ldr	r3, [pc, #296]	@ (8005c40 <xTaskIncrementTick+0x154>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00d      	beq.n	8005b3a <xTaskIncrementTick+0x4e>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b22:	b672      	cpsid	i
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	b662      	cpsie	i
 8005b32:	603b      	str	r3, [r7, #0]
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	e7fd      	b.n	8005b36 <xTaskIncrementTick+0x4a>
 8005b3a:	4b41      	ldr	r3, [pc, #260]	@ (8005c40 <xTaskIncrementTick+0x154>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	4b40      	ldr	r3, [pc, #256]	@ (8005c44 <xTaskIncrementTick+0x158>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a3e      	ldr	r2, [pc, #248]	@ (8005c40 <xTaskIncrementTick+0x154>)
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	4a3e      	ldr	r2, [pc, #248]	@ (8005c44 <xTaskIncrementTick+0x158>)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c48 <xTaskIncrementTick+0x15c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3301      	adds	r3, #1
 8005b54:	4a3c      	ldr	r2, [pc, #240]	@ (8005c48 <xTaskIncrementTick+0x15c>)
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	f000 faf0 	bl	800613c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c4c <xTaskIncrementTick+0x160>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d349      	bcc.n	8005bfa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b66:	4b36      	ldr	r3, [pc, #216]	@ (8005c40 <xTaskIncrementTick+0x154>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b70:	4b36      	ldr	r3, [pc, #216]	@ (8005c4c <xTaskIncrementTick+0x160>)
 8005b72:	f04f 32ff 	mov.w	r2, #4294967295
 8005b76:	601a      	str	r2, [r3, #0]
					break;
 8005b78:	e03f      	b.n	8005bfa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7a:	4b31      	ldr	r3, [pc, #196]	@ (8005c40 <xTaskIncrementTick+0x154>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d203      	bcs.n	8005b9a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b92:	4a2e      	ldr	r2, [pc, #184]	@ (8005c4c <xTaskIncrementTick+0x160>)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b98:	e02f      	b.n	8005bfa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe ff68 	bl	8004a74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	3318      	adds	r3, #24
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fe ff5f 	bl	8004a74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bba:	4b25      	ldr	r3, [pc, #148]	@ (8005c50 <xTaskIncrementTick+0x164>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d903      	bls.n	8005bca <xTaskIncrementTick+0xde>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc6:	4a22      	ldr	r2, [pc, #136]	@ (8005c50 <xTaskIncrementTick+0x164>)
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c54 <xTaskIncrementTick+0x168>)
 8005bd8:	441a      	add	r2, r3
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f7fe feea 	bl	80049ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bea:	4b1b      	ldr	r3, [pc, #108]	@ (8005c58 <xTaskIncrementTick+0x16c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d3b8      	bcc.n	8005b66 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bf8:	e7b5      	b.n	8005b66 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bfa:	4b17      	ldr	r3, [pc, #92]	@ (8005c58 <xTaskIncrementTick+0x16c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c00:	4914      	ldr	r1, [pc, #80]	@ (8005c54 <xTaskIncrementTick+0x168>)
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d907      	bls.n	8005c22 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005c12:	2301      	movs	r3, #1
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	e004      	b.n	8005c22 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005c18:	4b10      	ldr	r3, [pc, #64]	@ (8005c5c <xTaskIncrementTick+0x170>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8005c5c <xTaskIncrementTick+0x170>)
 8005c20:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005c22:	4b0f      	ldr	r3, [pc, #60]	@ (8005c60 <xTaskIncrementTick+0x174>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c2e:	697b      	ldr	r3, [r7, #20]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	20000df8 	.word	0x20000df8
 8005c3c:	20000dd4 	.word	0x20000dd4
 8005c40:	20000d88 	.word	0x20000d88
 8005c44:	20000d8c 	.word	0x20000d8c
 8005c48:	20000de8 	.word	0x20000de8
 8005c4c:	20000df0 	.word	0x20000df0
 8005c50:	20000dd8 	.word	0x20000dd8
 8005c54:	20000900 	.word	0x20000900
 8005c58:	200008fc 	.word	0x200008fc
 8005c5c:	20000de0 	.word	0x20000de0
 8005c60:	20000de4 	.word	0x20000de4

08005c64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8005d1c <vTaskSwitchContext+0xb8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c72:	4b2b      	ldr	r3, [pc, #172]	@ (8005d20 <vTaskSwitchContext+0xbc>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c78:	e049      	b.n	8005d0e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8005c7a:	4b29      	ldr	r3, [pc, #164]	@ (8005d20 <vTaskSwitchContext+0xbc>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c80:	4b28      	ldr	r3, [pc, #160]	@ (8005d24 <vTaskSwitchContext+0xc0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e013      	b.n	8005cb0 <vTaskSwitchContext+0x4c>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10d      	bne.n	8005caa <vTaskSwitchContext+0x46>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	b672      	cpsid	i
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	b662      	cpsie	i
 8005ca2:	607b      	str	r3, [r7, #4]
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop
 8005ca8:	e7fd      	b.n	8005ca6 <vTaskSwitchContext+0x42>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	491d      	ldr	r1, [pc, #116]	@ (8005d28 <vTaskSwitchContext+0xc4>)
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0e1      	beq.n	8005c88 <vTaskSwitchContext+0x24>
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4a16      	ldr	r2, [pc, #88]	@ (8005d28 <vTaskSwitchContext+0xc4>)
 8005cd0:	4413      	add	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	605a      	str	r2, [r3, #4]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d104      	bne.n	8005cf4 <vTaskSwitchContext+0x90>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	605a      	str	r2, [r3, #4]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8005d2c <vTaskSwitchContext+0xc8>)
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4a09      	ldr	r2, [pc, #36]	@ (8005d24 <vTaskSwitchContext+0xc0>)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d04:	4b09      	ldr	r3, [pc, #36]	@ (8005d2c <vTaskSwitchContext+0xc8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3354      	adds	r3, #84	@ 0x54
 8005d0a:	4a09      	ldr	r2, [pc, #36]	@ (8005d30 <vTaskSwitchContext+0xcc>)
 8005d0c:	6013      	str	r3, [r2, #0]
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20000df8 	.word	0x20000df8
 8005d20:	20000de4 	.word	0x20000de4
 8005d24:	20000dd8 	.word	0x20000dd8
 8005d28:	20000900 	.word	0x20000900
 8005d2c:	200008fc 	.word	0x200008fc
 8005d30:	20000024 	.word	0x20000024

08005d34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10d      	bne.n	8005d60 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d48:	b672      	cpsid	i
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	b662      	cpsie	i
 8005d58:	60fb      	str	r3, [r7, #12]
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	e7fd      	b.n	8005d5c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d60:	4b07      	ldr	r3, [pc, #28]	@ (8005d80 <vTaskPlaceOnEventList+0x4c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3318      	adds	r3, #24
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7fe fe4a 	bl	8004a02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d6e:	2101      	movs	r1, #1
 8005d70:	6838      	ldr	r0, [r7, #0]
 8005d72:	f000 fb8d 	bl	8006490 <prvAddCurrentTaskToDelayedList>
}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	200008fc 	.word	0x200008fc

08005d84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10d      	bne.n	8005db2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9a:	b672      	cpsid	i
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	b662      	cpsie	i
 8005daa:	617b      	str	r3, [r7, #20]
}
 8005dac:	bf00      	nop
 8005dae:	bf00      	nop
 8005db0:	e7fd      	b.n	8005dae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005db2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ddc <vTaskPlaceOnEventListRestricted+0x58>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3318      	adds	r3, #24
 8005db8:	4619      	mov	r1, r3
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7fe fdfd 	bl	80049ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8005dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	68b8      	ldr	r0, [r7, #8]
 8005dd0:	f000 fb5e 	bl	8006490 <prvAddCurrentTaskToDelayedList>
	}
 8005dd4:	bf00      	nop
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	200008fc 	.word	0x200008fc

08005de0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10d      	bne.n	8005e12 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfa:	b672      	cpsid	i
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	b662      	cpsie	i
 8005e0a:	60fb      	str	r3, [r7, #12]
}
 8005e0c:	bf00      	nop
 8005e0e:	bf00      	nop
 8005e10:	e7fd      	b.n	8005e0e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	3318      	adds	r3, #24
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe fe2c 	bl	8004a74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005e94 <xTaskRemoveFromEventList+0xb4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d11d      	bne.n	8005e60 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fe fe23 	bl	8004a74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e32:	4b19      	ldr	r3, [pc, #100]	@ (8005e98 <xTaskRemoveFromEventList+0xb8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d903      	bls.n	8005e42 <xTaskRemoveFromEventList+0x62>
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3e:	4a16      	ldr	r2, [pc, #88]	@ (8005e98 <xTaskRemoveFromEventList+0xb8>)
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4a13      	ldr	r2, [pc, #76]	@ (8005e9c <xTaskRemoveFromEventList+0xbc>)
 8005e50:	441a      	add	r2, r3
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	3304      	adds	r3, #4
 8005e56:	4619      	mov	r1, r3
 8005e58:	4610      	mov	r0, r2
 8005e5a:	f7fe fdae 	bl	80049ba <vListInsertEnd>
 8005e5e:	e005      	b.n	8005e6c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	3318      	adds	r3, #24
 8005e64:	4619      	mov	r1, r3
 8005e66:	480e      	ldr	r0, [pc, #56]	@ (8005ea0 <xTaskRemoveFromEventList+0xc0>)
 8005e68:	f7fe fda7 	bl	80049ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ea4 <xTaskRemoveFromEventList+0xc4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d905      	bls.n	8005e86 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea8 <xTaskRemoveFromEventList+0xc8>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	e001      	b.n	8005e8a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e8a:	697b      	ldr	r3, [r7, #20]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000df8 	.word	0x20000df8
 8005e98:	20000dd8 	.word	0x20000dd8
 8005e9c:	20000900 	.word	0x20000900
 8005ea0:	20000d90 	.word	0x20000d90
 8005ea4:	200008fc 	.word	0x200008fc
 8005ea8:	20000de4 	.word	0x20000de4

08005eac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005eb4:	4b06      	ldr	r3, [pc, #24]	@ (8005ed0 <vTaskInternalSetTimeOutState+0x24>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ebc:	4b05      	ldr	r3, [pc, #20]	@ (8005ed4 <vTaskInternalSetTimeOutState+0x28>)
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	605a      	str	r2, [r3, #4]
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	20000de8 	.word	0x20000de8
 8005ed4:	20000dd4 	.word	0x20000dd4

08005ed8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10d      	bne.n	8005f04 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eec:	b672      	cpsid	i
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	b662      	cpsie	i
 8005efc:	613b      	str	r3, [r7, #16]
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	e7fd      	b.n	8005f00 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10d      	bne.n	8005f26 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0e:	b672      	cpsid	i
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	b662      	cpsie	i
 8005f1e:	60fb      	str	r3, [r7, #12]
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	e7fd      	b.n	8005f22 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8005f26:	f000 ff81 	bl	8006e2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa0 <xTaskCheckForTimeOut+0xc8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f42:	d102      	bne.n	8005f4a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	61fb      	str	r3, [r7, #28]
 8005f48:	e023      	b.n	8005f92 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4b15      	ldr	r3, [pc, #84]	@ (8005fa4 <xTaskCheckForTimeOut+0xcc>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d007      	beq.n	8005f66 <xTaskCheckForTimeOut+0x8e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d302      	bcc.n	8005f66 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f60:	2301      	movs	r3, #1
 8005f62:	61fb      	str	r3, [r7, #28]
 8005f64:	e015      	b.n	8005f92 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d20b      	bcs.n	8005f88 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	1ad2      	subs	r2, r2, r3
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff ff95 	bl	8005eac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f82:	2300      	movs	r3, #0
 8005f84:	61fb      	str	r3, [r7, #28]
 8005f86:	e004      	b.n	8005f92 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f92:	f000 ff81 	bl	8006e98 <vPortExitCritical>

	return xReturn;
 8005f96:	69fb      	ldr	r3, [r7, #28]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3720      	adds	r7, #32
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	20000dd4 	.word	0x20000dd4
 8005fa4:	20000de8 	.word	0x20000de8

08005fa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005fac:	4b03      	ldr	r3, [pc, #12]	@ (8005fbc <vTaskMissedYield+0x14>)
 8005fae:	2201      	movs	r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
}
 8005fb2:	bf00      	nop
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	20000de4 	.word	0x20000de4

08005fc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005fc8:	f000 f852 	bl	8006070 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005fcc:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <prvIdleTask+0x28>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d9f9      	bls.n	8005fc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005fd4:	4b05      	ldr	r3, [pc, #20]	@ (8005fec <prvIdleTask+0x2c>)
 8005fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005fe4:	e7f0      	b.n	8005fc8 <prvIdleTask+0x8>
 8005fe6:	bf00      	nop
 8005fe8:	20000900 	.word	0x20000900
 8005fec:	e000ed04 	.word	0xe000ed04

08005ff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	607b      	str	r3, [r7, #4]
 8005ffa:	e00c      	b.n	8006016 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4a12      	ldr	r2, [pc, #72]	@ (8006050 <prvInitialiseTaskLists+0x60>)
 8006008:	4413      	add	r3, r2
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe fca8 	bl	8004960 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3301      	adds	r3, #1
 8006014:	607b      	str	r3, [r7, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b37      	cmp	r3, #55	@ 0x37
 800601a:	d9ef      	bls.n	8005ffc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800601c:	480d      	ldr	r0, [pc, #52]	@ (8006054 <prvInitialiseTaskLists+0x64>)
 800601e:	f7fe fc9f 	bl	8004960 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006022:	480d      	ldr	r0, [pc, #52]	@ (8006058 <prvInitialiseTaskLists+0x68>)
 8006024:	f7fe fc9c 	bl	8004960 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006028:	480c      	ldr	r0, [pc, #48]	@ (800605c <prvInitialiseTaskLists+0x6c>)
 800602a:	f7fe fc99 	bl	8004960 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800602e:	480c      	ldr	r0, [pc, #48]	@ (8006060 <prvInitialiseTaskLists+0x70>)
 8006030:	f7fe fc96 	bl	8004960 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006034:	480b      	ldr	r0, [pc, #44]	@ (8006064 <prvInitialiseTaskLists+0x74>)
 8006036:	f7fe fc93 	bl	8004960 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800603a:	4b0b      	ldr	r3, [pc, #44]	@ (8006068 <prvInitialiseTaskLists+0x78>)
 800603c:	4a05      	ldr	r2, [pc, #20]	@ (8006054 <prvInitialiseTaskLists+0x64>)
 800603e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006040:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <prvInitialiseTaskLists+0x7c>)
 8006042:	4a05      	ldr	r2, [pc, #20]	@ (8006058 <prvInitialiseTaskLists+0x68>)
 8006044:	601a      	str	r2, [r3, #0]
}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20000900 	.word	0x20000900
 8006054:	20000d60 	.word	0x20000d60
 8006058:	20000d74 	.word	0x20000d74
 800605c:	20000d90 	.word	0x20000d90
 8006060:	20000da4 	.word	0x20000da4
 8006064:	20000dbc 	.word	0x20000dbc
 8006068:	20000d88 	.word	0x20000d88
 800606c:	20000d8c 	.word	0x20000d8c

08006070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006076:	e019      	b.n	80060ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006078:	f000 fed8 	bl	8006e2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800607c:	4b10      	ldr	r3, [pc, #64]	@ (80060c0 <prvCheckTasksWaitingTermination+0x50>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3304      	adds	r3, #4
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe fcf3 	bl	8004a74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800608e:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <prvCheckTasksWaitingTermination+0x54>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3b01      	subs	r3, #1
 8006094:	4a0b      	ldr	r2, [pc, #44]	@ (80060c4 <prvCheckTasksWaitingTermination+0x54>)
 8006096:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006098:	4b0b      	ldr	r3, [pc, #44]	@ (80060c8 <prvCheckTasksWaitingTermination+0x58>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3b01      	subs	r3, #1
 800609e:	4a0a      	ldr	r2, [pc, #40]	@ (80060c8 <prvCheckTasksWaitingTermination+0x58>)
 80060a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060a2:	f000 fef9 	bl	8006e98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f810 	bl	80060cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060ac:	4b06      	ldr	r3, [pc, #24]	@ (80060c8 <prvCheckTasksWaitingTermination+0x58>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e1      	bne.n	8006078 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000da4 	.word	0x20000da4
 80060c4:	20000dd0 	.word	0x20000dd0
 80060c8:	20000db8 	.word	0x20000db8

080060cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3354      	adds	r3, #84	@ 0x54
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 fdfd 	bl	8007cd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d108      	bne.n	80060fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 f899 	bl	8007224 <vPortFree>
				vPortFree( pxTCB );
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 f896 	bl	8007224 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060f8:	e01b      	b.n	8006132 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006100:	2b01      	cmp	r3, #1
 8006102:	d103      	bne.n	800610c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 f88d 	bl	8007224 <vPortFree>
	}
 800610a:	e012      	b.n	8006132 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006112:	2b02      	cmp	r3, #2
 8006114:	d00d      	beq.n	8006132 <prvDeleteTCB+0x66>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611a:	b672      	cpsid	i
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	b662      	cpsie	i
 800612a:	60fb      	str	r3, [r7, #12]
}
 800612c:	bf00      	nop
 800612e:	bf00      	nop
 8006130:	e7fd      	b.n	800612e <prvDeleteTCB+0x62>
	}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006142:	4b0c      	ldr	r3, [pc, #48]	@ (8006174 <prvResetNextTaskUnblockTime+0x38>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d104      	bne.n	8006156 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800614c:	4b0a      	ldr	r3, [pc, #40]	@ (8006178 <prvResetNextTaskUnblockTime+0x3c>)
 800614e:	f04f 32ff 	mov.w	r2, #4294967295
 8006152:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006154:	e008      	b.n	8006168 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006156:	4b07      	ldr	r3, [pc, #28]	@ (8006174 <prvResetNextTaskUnblockTime+0x38>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	4a04      	ldr	r2, [pc, #16]	@ (8006178 <prvResetNextTaskUnblockTime+0x3c>)
 8006166:	6013      	str	r3, [r2, #0]
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	20000d88 	.word	0x20000d88
 8006178:	20000df0 	.word	0x20000df0

0800617c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006182:	4b05      	ldr	r3, [pc, #20]	@ (8006198 <xTaskGetCurrentTaskHandle+0x1c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006188:	687b      	ldr	r3, [r7, #4]
	}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	200008fc 	.word	0x200008fc

0800619c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80061a2:	4b0b      	ldr	r3, [pc, #44]	@ (80061d0 <xTaskGetSchedulerState+0x34>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d102      	bne.n	80061b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80061aa:	2301      	movs	r3, #1
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	e008      	b.n	80061c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061b0:	4b08      	ldr	r3, [pc, #32]	@ (80061d4 <xTaskGetSchedulerState+0x38>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80061b8:	2302      	movs	r3, #2
 80061ba:	607b      	str	r3, [r7, #4]
 80061bc:	e001      	b.n	80061c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80061be:	2300      	movs	r3, #0
 80061c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80061c2:	687b      	ldr	r3, [r7, #4]
	}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	20000ddc 	.word	0x20000ddc
 80061d4:	20000df8 	.word	0x20000df8

080061d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d05c      	beq.n	80062a8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80061ee:	4b31      	ldr	r3, [pc, #196]	@ (80062b4 <xTaskPriorityDisinherit+0xdc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d00d      	beq.n	8006214 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	b672      	cpsid	i
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	b662      	cpsie	i
 800620c:	60fb      	str	r3, [r7, #12]
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10d      	bne.n	8006238 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006220:	b672      	cpsid	i
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	b662      	cpsie	i
 8006230:	60bb      	str	r3, [r7, #8]
}
 8006232:	bf00      	nop
 8006234:	bf00      	nop
 8006236:	e7fd      	b.n	8006234 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800623c:	1e5a      	subs	r2, r3, #1
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800624a:	429a      	cmp	r2, r3
 800624c:	d02c      	beq.n	80062a8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006252:	2b00      	cmp	r3, #0
 8006254:	d128      	bne.n	80062a8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	3304      	adds	r3, #4
 800625a:	4618      	mov	r0, r3
 800625c:	f7fe fc0a 	bl	8004a74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006278:	4b0f      	ldr	r3, [pc, #60]	@ (80062b8 <xTaskPriorityDisinherit+0xe0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d903      	bls.n	8006288 <xTaskPriorityDisinherit+0xb0>
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006284:	4a0c      	ldr	r2, [pc, #48]	@ (80062b8 <xTaskPriorityDisinherit+0xe0>)
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4a09      	ldr	r2, [pc, #36]	@ (80062bc <xTaskPriorityDisinherit+0xe4>)
 8006296:	441a      	add	r2, r3
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	3304      	adds	r3, #4
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7fe fb8b 	bl	80049ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80062a4:	2301      	movs	r3, #1
 80062a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80062a8:	697b      	ldr	r3, [r7, #20]
	}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	200008fc 	.word	0x200008fc
 80062b8:	20000dd8 	.word	0x20000dd8
 80062bc:	20000900 	.word	0x20000900

080062c0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80062ca:	f000 fdaf 	bl	8006e2c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80062ce:	4b20      	ldr	r3, [pc, #128]	@ (8006350 <ulTaskNotifyTake+0x90>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d113      	bne.n	8006302 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80062da:	4b1d      	ldr	r3, [pc, #116]	@ (8006350 <ulTaskNotifyTake+0x90>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062ea:	2101      	movs	r1, #1
 80062ec:	6838      	ldr	r0, [r7, #0]
 80062ee:	f000 f8cf 	bl	8006490 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80062f2:	4b18      	ldr	r3, [pc, #96]	@ (8006354 <ulTaskNotifyTake+0x94>)
 80062f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006302:	f000 fdc9 	bl	8006e98 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006306:	f000 fd91 	bl	8006e2c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800630a:	4b11      	ldr	r3, [pc, #68]	@ (8006350 <ulTaskNotifyTake+0x90>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006312:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00e      	beq.n	8006338 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006320:	4b0b      	ldr	r3, [pc, #44]	@ (8006350 <ulTaskNotifyTake+0x90>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2200      	movs	r2, #0
 8006326:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800632a:	e005      	b.n	8006338 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800632c:	4b08      	ldr	r3, [pc, #32]	@ (8006350 <ulTaskNotifyTake+0x90>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	3a01      	subs	r2, #1
 8006334:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006338:	4b05      	ldr	r3, [pc, #20]	@ (8006350 <ulTaskNotifyTake+0x90>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8006342:	f000 fda9 	bl	8006e98 <vPortExitCritical>

		return ulReturn;
 8006346:	68fb      	ldr	r3, [r7, #12]
	}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	200008fc 	.word	0x200008fc
 8006354:	e000ed04 	.word	0xe000ed04

08006358 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	@ 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10d      	bne.n	8006384 <vTaskNotifyGiveFromISR+0x2c>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	b672      	cpsid	i
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	b662      	cpsie	i
 800637c:	61bb      	str	r3, [r7, #24]
}
 800637e:	bf00      	nop
 8006380:	bf00      	nop
 8006382:	e7fd      	b.n	8006380 <vTaskNotifyGiveFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006384:	f000 fe3a 	bl	8006ffc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800638c:	f3ef 8211 	mrs	r2, BASEPRI
 8006390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006394:	b672      	cpsid	i
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	b662      	cpsie	i
 80063a4:	617a      	str	r2, [r7, #20]
 80063a6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80063a8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063aa:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80063ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ae:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80063b2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80063ca:	7ffb      	ldrb	r3, [r7, #31]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d149      	bne.n	8006464 <vTaskNotifyGiveFromISR+0x10c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00d      	beq.n	80063f4 <vTaskNotifyGiveFromISR+0x9c>
	__asm volatile
 80063d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063dc:	b672      	cpsid	i
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	b662      	cpsie	i
 80063ec:	60fb      	str	r3, [r7, #12]
}
 80063ee:	bf00      	nop
 80063f0:	bf00      	nop
 80063f2:	e7fd      	b.n	80063f0 <vTaskNotifyGiveFromISR+0x98>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063f4:	4b20      	ldr	r3, [pc, #128]	@ (8006478 <vTaskNotifyGiveFromISR+0x120>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d11d      	bne.n	8006438 <vTaskNotifyGiveFromISR+0xe0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	3304      	adds	r3, #4
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe fb37 	bl	8004a74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640a:	4b1c      	ldr	r3, [pc, #112]	@ (800647c <vTaskNotifyGiveFromISR+0x124>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d903      	bls.n	800641a <vTaskNotifyGiveFromISR+0xc2>
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006416:	4a19      	ldr	r2, [pc, #100]	@ (800647c <vTaskNotifyGiveFromISR+0x124>)
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4a16      	ldr	r2, [pc, #88]	@ (8006480 <vTaskNotifyGiveFromISR+0x128>)
 8006428:	441a      	add	r2, r3
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	3304      	adds	r3, #4
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f7fe fac2 	bl	80049ba <vListInsertEnd>
 8006436:	e005      	b.n	8006444 <vTaskNotifyGiveFromISR+0xec>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643a:	3318      	adds	r3, #24
 800643c:	4619      	mov	r1, r3
 800643e:	4811      	ldr	r0, [pc, #68]	@ (8006484 <vTaskNotifyGiveFromISR+0x12c>)
 8006440:	f7fe fabb 	bl	80049ba <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006448:	4b0f      	ldr	r3, [pc, #60]	@ (8006488 <vTaskNotifyGiveFromISR+0x130>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644e:	429a      	cmp	r2, r3
 8006450:	d908      	bls.n	8006464 <vTaskNotifyGiveFromISR+0x10c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <vTaskNotifyGiveFromISR+0x106>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2201      	movs	r2, #1
 800645c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800645e:	4b0b      	ldr	r3, [pc, #44]	@ (800648c <vTaskNotifyGiveFromISR+0x134>)
 8006460:	2201      	movs	r2, #1
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f383 8811 	msr	BASEPRI, r3
}
 800646e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006470:	bf00      	nop
 8006472:	3728      	adds	r7, #40	@ 0x28
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	20000df8 	.word	0x20000df8
 800647c:	20000dd8 	.word	0x20000dd8
 8006480:	20000900 	.word	0x20000900
 8006484:	20000d90 	.word	0x20000d90
 8006488:	200008fc 	.word	0x200008fc
 800648c:	20000de4 	.word	0x20000de4

08006490 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800649a:	4b21      	ldr	r3, [pc, #132]	@ (8006520 <prvAddCurrentTaskToDelayedList+0x90>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064a0:	4b20      	ldr	r3, [pc, #128]	@ (8006524 <prvAddCurrentTaskToDelayedList+0x94>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3304      	adds	r3, #4
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fe fae4 	bl	8004a74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b2:	d10a      	bne.n	80064ca <prvAddCurrentTaskToDelayedList+0x3a>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d007      	beq.n	80064ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006524 <prvAddCurrentTaskToDelayedList+0x94>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3304      	adds	r3, #4
 80064c0:	4619      	mov	r1, r3
 80064c2:	4819      	ldr	r0, [pc, #100]	@ (8006528 <prvAddCurrentTaskToDelayedList+0x98>)
 80064c4:	f7fe fa79 	bl	80049ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064c8:	e026      	b.n	8006518 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4413      	add	r3, r2
 80064d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064d2:	4b14      	ldr	r3, [pc, #80]	@ (8006524 <prvAddCurrentTaskToDelayedList+0x94>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d209      	bcs.n	80064f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064e2:	4b12      	ldr	r3, [pc, #72]	@ (800652c <prvAddCurrentTaskToDelayedList+0x9c>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006524 <prvAddCurrentTaskToDelayedList+0x94>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4619      	mov	r1, r3
 80064ee:	4610      	mov	r0, r2
 80064f0:	f7fe fa87 	bl	8004a02 <vListInsert>
}
 80064f4:	e010      	b.n	8006518 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006530 <prvAddCurrentTaskToDelayedList+0xa0>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006524 <prvAddCurrentTaskToDelayedList+0x94>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3304      	adds	r3, #4
 8006500:	4619      	mov	r1, r3
 8006502:	4610      	mov	r0, r2
 8006504:	f7fe fa7d 	bl	8004a02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006508:	4b0a      	ldr	r3, [pc, #40]	@ (8006534 <prvAddCurrentTaskToDelayedList+0xa4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	429a      	cmp	r2, r3
 8006510:	d202      	bcs.n	8006518 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006512:	4a08      	ldr	r2, [pc, #32]	@ (8006534 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6013      	str	r3, [r2, #0]
}
 8006518:	bf00      	nop
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000dd4 	.word	0x20000dd4
 8006524:	200008fc 	.word	0x200008fc
 8006528:	20000dbc 	.word	0x20000dbc
 800652c:	20000d8c 	.word	0x20000d8c
 8006530:	20000d88 	.word	0x20000d88
 8006534:	20000df0 	.word	0x20000df0

08006538 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08a      	sub	sp, #40	@ 0x28
 800653c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800653e:	2300      	movs	r3, #0
 8006540:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006542:	f000 fb21 	bl	8006b88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006546:	4b1e      	ldr	r3, [pc, #120]	@ (80065c0 <xTimerCreateTimerTask+0x88>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d021      	beq.n	8006592 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006552:	2300      	movs	r3, #0
 8006554:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006556:	1d3a      	adds	r2, r7, #4
 8006558:	f107 0108 	add.w	r1, r7, #8
 800655c:	f107 030c 	add.w	r3, r7, #12
 8006560:	4618      	mov	r0, r3
 8006562:	f7fe f9e3 	bl	800492c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	9202      	str	r2, [sp, #8]
 800656e:	9301      	str	r3, [sp, #4]
 8006570:	2302      	movs	r3, #2
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	2300      	movs	r3, #0
 8006576:	460a      	mov	r2, r1
 8006578:	4912      	ldr	r1, [pc, #72]	@ (80065c4 <xTimerCreateTimerTask+0x8c>)
 800657a:	4813      	ldr	r0, [pc, #76]	@ (80065c8 <xTimerCreateTimerTask+0x90>)
 800657c:	f7fe ffbe 	bl	80054fc <xTaskCreateStatic>
 8006580:	4603      	mov	r3, r0
 8006582:	4a12      	ldr	r2, [pc, #72]	@ (80065cc <xTimerCreateTimerTask+0x94>)
 8006584:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006586:	4b11      	ldr	r3, [pc, #68]	@ (80065cc <xTimerCreateTimerTask+0x94>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800658e:	2301      	movs	r3, #1
 8006590:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10d      	bne.n	80065b4 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659c:	b672      	cpsid	i
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	b662      	cpsie	i
 80065ac:	613b      	str	r3, [r7, #16]
}
 80065ae:	bf00      	nop
 80065b0:	bf00      	nop
 80065b2:	e7fd      	b.n	80065b0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80065b4:	697b      	ldr	r3, [r7, #20]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000e2c 	.word	0x20000e2c
 80065c4:	0800899c 	.word	0x0800899c
 80065c8:	08006711 	.word	0x08006711
 80065cc:	20000e30 	.word	0x20000e30

080065d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08a      	sub	sp, #40	@ 0x28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065de:	2300      	movs	r3, #0
 80065e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10d      	bne.n	8006604 <xTimerGenericCommand+0x34>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	b672      	cpsid	i
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	b662      	cpsie	i
 80065fc:	623b      	str	r3, [r7, #32]
}
 80065fe:	bf00      	nop
 8006600:	bf00      	nop
 8006602:	e7fd      	b.n	8006600 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006604:	4b19      	ldr	r3, [pc, #100]	@ (800666c <xTimerGenericCommand+0x9c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d02a      	beq.n	8006662 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b05      	cmp	r3, #5
 800661c:	dc18      	bgt.n	8006650 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800661e:	f7ff fdbd 	bl	800619c <xTaskGetSchedulerState>
 8006622:	4603      	mov	r3, r0
 8006624:	2b02      	cmp	r3, #2
 8006626:	d109      	bne.n	800663c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006628:	4b10      	ldr	r3, [pc, #64]	@ (800666c <xTimerGenericCommand+0x9c>)
 800662a:	6818      	ldr	r0, [r3, #0]
 800662c:	f107 0110 	add.w	r1, r7, #16
 8006630:	2300      	movs	r3, #0
 8006632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006634:	f7fe fb5e 	bl	8004cf4 <xQueueGenericSend>
 8006638:	6278      	str	r0, [r7, #36]	@ 0x24
 800663a:	e012      	b.n	8006662 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800663c:	4b0b      	ldr	r3, [pc, #44]	@ (800666c <xTimerGenericCommand+0x9c>)
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	f107 0110 	add.w	r1, r7, #16
 8006644:	2300      	movs	r3, #0
 8006646:	2200      	movs	r2, #0
 8006648:	f7fe fb54 	bl	8004cf4 <xQueueGenericSend>
 800664c:	6278      	str	r0, [r7, #36]	@ 0x24
 800664e:	e008      	b.n	8006662 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006650:	4b06      	ldr	r3, [pc, #24]	@ (800666c <xTimerGenericCommand+0x9c>)
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	f107 0110 	add.w	r1, r7, #16
 8006658:	2300      	movs	r3, #0
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	f7fe fc54 	bl	8004f08 <xQueueGenericSendFromISR>
 8006660:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006664:	4618      	mov	r0, r3
 8006666:	3728      	adds	r7, #40	@ 0x28
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20000e2c 	.word	0x20000e2c

08006670 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af02      	add	r7, sp, #8
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800667a:	4b24      	ldr	r3, [pc, #144]	@ (800670c <prvProcessExpiredTimer+0x9c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	3304      	adds	r3, #4
 8006688:	4618      	mov	r0, r3
 800668a:	f7fe f9f3 	bl	8004a74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d025      	beq.n	80066e8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	699a      	ldr	r2, [r3, #24]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	18d1      	adds	r1, r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	6978      	ldr	r0, [r7, #20]
 80066aa:	f000 f8d7 	bl	800685c <prvInsertTimerInActiveList>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d022      	beq.n	80066fa <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066b4:	2300      	movs	r3, #0
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	2300      	movs	r3, #0
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	2100      	movs	r1, #0
 80066be:	6978      	ldr	r0, [r7, #20]
 80066c0:	f7ff ff86 	bl	80065d0 <xTimerGenericCommand>
 80066c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d116      	bne.n	80066fa <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d0:	b672      	cpsid	i
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	b662      	cpsie	i
 80066e0:	60fb      	str	r3, [r7, #12]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	6978      	ldr	r0, [r7, #20]
 8006700:	4798      	blx	r3
}
 8006702:	bf00      	nop
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20000e24 	.word	0x20000e24

08006710 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006718:	f107 0308 	add.w	r3, r7, #8
 800671c:	4618      	mov	r0, r3
 800671e:	f000 f859 	bl	80067d4 <prvGetNextExpireTime>
 8006722:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4619      	mov	r1, r3
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 f805 	bl	8006738 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800672e:	f000 f8d7 	bl	80068e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006732:	bf00      	nop
 8006734:	e7f0      	b.n	8006718 <prvTimerTask+0x8>
	...

08006738 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006742:	f7ff f915 	bl	8005970 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006746:	f107 0308 	add.w	r3, r7, #8
 800674a:	4618      	mov	r0, r3
 800674c:	f000 f866 	bl	800681c <prvSampleTimeNow>
 8006750:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d130      	bne.n	80067ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <prvProcessTimerOrBlockTask+0x3c>
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	429a      	cmp	r2, r3
 8006764:	d806      	bhi.n	8006774 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006766:	f7ff f911 	bl	800598c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800676a:	68f9      	ldr	r1, [r7, #12]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff ff7f 	bl	8006670 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006772:	e024      	b.n	80067be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d008      	beq.n	800678c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800677a:	4b13      	ldr	r3, [pc, #76]	@ (80067c8 <prvProcessTimerOrBlockTask+0x90>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <prvProcessTimerOrBlockTask+0x50>
 8006784:	2301      	movs	r3, #1
 8006786:	e000      	b.n	800678a <prvProcessTimerOrBlockTask+0x52>
 8006788:	2300      	movs	r3, #0
 800678a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800678c:	4b0f      	ldr	r3, [pc, #60]	@ (80067cc <prvProcessTimerOrBlockTask+0x94>)
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	4619      	mov	r1, r3
 800679a:	f7fe fe7b 	bl	8005494 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800679e:	f7ff f8f5 	bl	800598c <xTaskResumeAll>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067a8:	4b09      	ldr	r3, [pc, #36]	@ (80067d0 <prvProcessTimerOrBlockTask+0x98>)
 80067aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	f3bf 8f6f 	isb	sy
}
 80067b8:	e001      	b.n	80067be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067ba:	f7ff f8e7 	bl	800598c <xTaskResumeAll>
}
 80067be:	bf00      	nop
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20000e28 	.word	0x20000e28
 80067cc:	20000e2c 	.word	0x20000e2c
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006818 <prvGetNextExpireTime+0x44>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <prvGetNextExpireTime+0x16>
 80067e6:	2201      	movs	r2, #1
 80067e8:	e000      	b.n	80067ec <prvGetNextExpireTime+0x18>
 80067ea:	2200      	movs	r2, #0
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d105      	bne.n	8006804 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067f8:	4b07      	ldr	r3, [pc, #28]	@ (8006818 <prvGetNextExpireTime+0x44>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	e001      	b.n	8006808 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006808:	68fb      	ldr	r3, [r7, #12]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	20000e24 	.word	0x20000e24

0800681c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006824:	f7ff f952 	bl	8005acc <xTaskGetTickCount>
 8006828:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800682a:	4b0b      	ldr	r3, [pc, #44]	@ (8006858 <prvSampleTimeNow+0x3c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	429a      	cmp	r2, r3
 8006832:	d205      	bcs.n	8006840 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006834:	f000 f940 	bl	8006ab8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	e002      	b.n	8006846 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006846:	4a04      	ldr	r2, [pc, #16]	@ (8006858 <prvSampleTimeNow+0x3c>)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800684c:	68fb      	ldr	r3, [r7, #12]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20000e34 	.word	0x20000e34

0800685c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800686a:	2300      	movs	r3, #0
 800686c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	429a      	cmp	r2, r3
 8006880:	d812      	bhi.n	80068a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	429a      	cmp	r2, r3
 800688e:	d302      	bcc.n	8006896 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	e01b      	b.n	80068ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006896:	4b10      	ldr	r3, [pc, #64]	@ (80068d8 <prvInsertTimerInActiveList+0x7c>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3304      	adds	r3, #4
 800689e:	4619      	mov	r1, r3
 80068a0:	4610      	mov	r0, r2
 80068a2:	f7fe f8ae 	bl	8004a02 <vListInsert>
 80068a6:	e012      	b.n	80068ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d206      	bcs.n	80068be <prvInsertTimerInActiveList+0x62>
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d302      	bcc.n	80068be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068b8:	2301      	movs	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	e007      	b.n	80068ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068be:	4b07      	ldr	r3, [pc, #28]	@ (80068dc <prvInsertTimerInActiveList+0x80>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3304      	adds	r3, #4
 80068c6:	4619      	mov	r1, r3
 80068c8:	4610      	mov	r0, r2
 80068ca:	f7fe f89a 	bl	8004a02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068ce:	697b      	ldr	r3, [r7, #20]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000e28 	.word	0x20000e28
 80068dc:	20000e24 	.word	0x20000e24

080068e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08e      	sub	sp, #56	@ 0x38
 80068e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068e6:	e0d4      	b.n	8006a92 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	da1b      	bge.n	8006926 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80068ee:	1d3b      	adds	r3, r7, #4
 80068f0:	3304      	adds	r3, #4
 80068f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80068f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10d      	bne.n	8006916 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fe:	b672      	cpsid	i
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	b662      	cpsie	i
 800690e:	61fb      	str	r3, [r7, #28]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800691c:	6850      	ldr	r0, [r2, #4]
 800691e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006920:	6892      	ldr	r2, [r2, #8]
 8006922:	4611      	mov	r1, r2
 8006924:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	f2c0 80b2 	blt.w	8006a92 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d004      	beq.n	8006944 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800693a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693c:	3304      	adds	r3, #4
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe f898 	bl	8004a74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006944:	463b      	mov	r3, r7
 8006946:	4618      	mov	r0, r3
 8006948:	f7ff ff68 	bl	800681c <prvSampleTimeNow>
 800694c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b09      	cmp	r3, #9
 8006952:	f200 809b 	bhi.w	8006a8c <prvProcessReceivedCommands+0x1ac>
 8006956:	a201      	add	r2, pc, #4	@ (adr r2, 800695c <prvProcessReceivedCommands+0x7c>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	08006985 	.word	0x08006985
 8006960:	08006985 	.word	0x08006985
 8006964:	08006985 	.word	0x08006985
 8006968:	080069ff 	.word	0x080069ff
 800696c:	08006a13 	.word	0x08006a13
 8006970:	08006a63 	.word	0x08006a63
 8006974:	08006985 	.word	0x08006985
 8006978:	08006985 	.word	0x08006985
 800697c:	080069ff 	.word	0x080069ff
 8006980:	08006a13 	.word	0x08006a13
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006986:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800698a:	f043 0301 	orr.w	r3, r3, #1
 800698e:	b2da      	uxtb	r2, r3
 8006990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006992:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	18d1      	adds	r1, r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069a4:	f7ff ff5a 	bl	800685c <prvInsertTimerInActiveList>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d070      	beq.n	8006a90 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d065      	beq.n	8006a90 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	441a      	add	r2, r3
 80069cc:	2300      	movs	r3, #0
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	2300      	movs	r3, #0
 80069d2:	2100      	movs	r1, #0
 80069d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069d6:	f7ff fdfb 	bl	80065d0 <xTimerGenericCommand>
 80069da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d156      	bne.n	8006a90 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e6:	b672      	cpsid	i
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	b662      	cpsie	i
 80069f6:	61bb      	str	r3, [r7, #24]
}
 80069f8:	bf00      	nop
 80069fa:	bf00      	nop
 80069fc:	e7fd      	b.n	80069fa <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a04:	f023 0301 	bic.w	r3, r3, #1
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006a10:	e03f      	b.n	8006a92 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a18:	f043 0301 	orr.w	r3, r3, #1
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10d      	bne.n	8006a4e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a36:	b672      	cpsid	i
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	b662      	cpsie	i
 8006a46:	617b      	str	r3, [r7, #20]
}
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
 8006a4c:	e7fd      	b.n	8006a4a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a54:	18d1      	adds	r1, r2, r3
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a5c:	f7ff fefe 	bl	800685c <prvInsertTimerInActiveList>
					break;
 8006a60:	e017      	b.n	8006a92 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d103      	bne.n	8006a78 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8006a70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a72:	f000 fbd7 	bl	8007224 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a76:	e00c      	b.n	8006a92 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006a8a:	e002      	b.n	8006a92 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8006a8c:	bf00      	nop
 8006a8e:	e000      	b.n	8006a92 <prvProcessReceivedCommands+0x1b2>
					break;
 8006a90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a92:	4b08      	ldr	r3, [pc, #32]	@ (8006ab4 <prvProcessReceivedCommands+0x1d4>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	1d39      	adds	r1, r7, #4
 8006a98:	2200      	movs	r2, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fad8 	bl	8005050 <xQueueReceive>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f47f af20 	bne.w	80068e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	3730      	adds	r7, #48	@ 0x30
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20000e2c 	.word	0x20000e2c

08006ab8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006abe:	e04b      	b.n	8006b58 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8006b80 <prvSwitchTimerLists+0xc8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aca:	4b2d      	ldr	r3, [pc, #180]	@ (8006b80 <prvSwitchTimerLists+0xc8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fd ffcb 	bl	8004a74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d031      	beq.n	8006b58 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	4413      	add	r3, r2
 8006afc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d90e      	bls.n	8006b24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b12:	4b1b      	ldr	r3, [pc, #108]	@ (8006b80 <prvSwitchTimerLists+0xc8>)
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3304      	adds	r3, #4
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	f7fd ff70 	bl	8004a02 <vListInsert>
 8006b22:	e019      	b.n	8006b58 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b24:	2300      	movs	r3, #0
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f7ff fd4e 	bl	80065d0 <xTimerGenericCommand>
 8006b34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10d      	bne.n	8006b58 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b40:	b672      	cpsid	i
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	b662      	cpsie	i
 8006b50:	603b      	str	r3, [r7, #0]
}
 8006b52:	bf00      	nop
 8006b54:	bf00      	nop
 8006b56:	e7fd      	b.n	8006b54 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b58:	4b09      	ldr	r3, [pc, #36]	@ (8006b80 <prvSwitchTimerLists+0xc8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1ae      	bne.n	8006ac0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b62:	4b07      	ldr	r3, [pc, #28]	@ (8006b80 <prvSwitchTimerLists+0xc8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b68:	4b06      	ldr	r3, [pc, #24]	@ (8006b84 <prvSwitchTimerLists+0xcc>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a04      	ldr	r2, [pc, #16]	@ (8006b80 <prvSwitchTimerLists+0xc8>)
 8006b6e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b70:	4a04      	ldr	r2, [pc, #16]	@ (8006b84 <prvSwitchTimerLists+0xcc>)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	6013      	str	r3, [r2, #0]
}
 8006b76:	bf00      	nop
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000e24 	.word	0x20000e24
 8006b84:	20000e28 	.word	0x20000e28

08006b88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b8e:	f000 f94d 	bl	8006e2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b92:	4b15      	ldr	r3, [pc, #84]	@ (8006be8 <prvCheckForValidListAndQueue+0x60>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d120      	bne.n	8006bdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b9a:	4814      	ldr	r0, [pc, #80]	@ (8006bec <prvCheckForValidListAndQueue+0x64>)
 8006b9c:	f7fd fee0 	bl	8004960 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ba0:	4813      	ldr	r0, [pc, #76]	@ (8006bf0 <prvCheckForValidListAndQueue+0x68>)
 8006ba2:	f7fd fedd 	bl	8004960 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ba6:	4b13      	ldr	r3, [pc, #76]	@ (8006bf4 <prvCheckForValidListAndQueue+0x6c>)
 8006ba8:	4a10      	ldr	r2, [pc, #64]	@ (8006bec <prvCheckForValidListAndQueue+0x64>)
 8006baa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bac:	4b12      	ldr	r3, [pc, #72]	@ (8006bf8 <prvCheckForValidListAndQueue+0x70>)
 8006bae:	4a10      	ldr	r2, [pc, #64]	@ (8006bf0 <prvCheckForValidListAndQueue+0x68>)
 8006bb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	4b11      	ldr	r3, [pc, #68]	@ (8006bfc <prvCheckForValidListAndQueue+0x74>)
 8006bb8:	4a11      	ldr	r2, [pc, #68]	@ (8006c00 <prvCheckForValidListAndQueue+0x78>)
 8006bba:	2110      	movs	r1, #16
 8006bbc:	200a      	movs	r0, #10
 8006bbe:	f7fd ffef 	bl	8004ba0 <xQueueGenericCreateStatic>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	4a08      	ldr	r2, [pc, #32]	@ (8006be8 <prvCheckForValidListAndQueue+0x60>)
 8006bc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006bc8:	4b07      	ldr	r3, [pc, #28]	@ (8006be8 <prvCheckForValidListAndQueue+0x60>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bd0:	4b05      	ldr	r3, [pc, #20]	@ (8006be8 <prvCheckForValidListAndQueue+0x60>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	490b      	ldr	r1, [pc, #44]	@ (8006c04 <prvCheckForValidListAndQueue+0x7c>)
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fe fc32 	bl	8005440 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bdc:	f000 f95c 	bl	8006e98 <vPortExitCritical>
}
 8006be0:	bf00      	nop
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20000e2c 	.word	0x20000e2c
 8006bec:	20000dfc 	.word	0x20000dfc
 8006bf0:	20000e10 	.word	0x20000e10
 8006bf4:	20000e24 	.word	0x20000e24
 8006bf8:	20000e28 	.word	0x20000e28
 8006bfc:	20000ed8 	.word	0x20000ed8
 8006c00:	20000e38 	.word	0x20000e38
 8006c04:	080089a4 	.word	0x080089a4

08006c08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3b04      	subs	r3, #4
 8006c18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3b04      	subs	r3, #4
 8006c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f023 0201 	bic.w	r2, r3, #1
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3b04      	subs	r3, #4
 8006c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c38:	4a0c      	ldr	r2, [pc, #48]	@ (8006c6c <pxPortInitialiseStack+0x64>)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3b14      	subs	r3, #20
 8006c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3b04      	subs	r3, #4
 8006c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f06f 0202 	mvn.w	r2, #2
 8006c56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3b20      	subs	r3, #32
 8006c5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	08006c71 	.word	0x08006c71

08006c70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c7a:	4b15      	ldr	r3, [pc, #84]	@ (8006cd0 <prvTaskExitError+0x60>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d00d      	beq.n	8006ca0 <prvTaskExitError+0x30>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c88:	b672      	cpsid	i
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	b662      	cpsie	i
 8006c98:	60fb      	str	r3, [r7, #12]
}
 8006c9a:	bf00      	nop
 8006c9c:	bf00      	nop
 8006c9e:	e7fd      	b.n	8006c9c <prvTaskExitError+0x2c>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca4:	b672      	cpsid	i
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	b662      	cpsie	i
 8006cb4:	60bb      	str	r3, [r7, #8]
}
 8006cb6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cb8:	bf00      	nop
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0fc      	beq.n	8006cba <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	2000000c 	.word	0x2000000c
	...

08006ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ce0:	4b07      	ldr	r3, [pc, #28]	@ (8006d00 <pxCurrentTCBConst2>)
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	6808      	ldr	r0, [r1, #0]
 8006ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	f380 8809 	msr	PSP, r0
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f04f 0000 	mov.w	r0, #0
 8006cf6:	f380 8811 	msr	BASEPRI, r0
 8006cfa:	4770      	bx	lr
 8006cfc:	f3af 8000 	nop.w

08006d00 <pxCurrentTCBConst2>:
 8006d00:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop

08006d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d08:	4808      	ldr	r0, [pc, #32]	@ (8006d2c <prvPortStartFirstTask+0x24>)
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	6800      	ldr	r0, [r0, #0]
 8006d0e:	f380 8808 	msr	MSP, r0
 8006d12:	f04f 0000 	mov.w	r0, #0
 8006d16:	f380 8814 	msr	CONTROL, r0
 8006d1a:	b662      	cpsie	i
 8006d1c:	b661      	cpsie	f
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	df00      	svc	0
 8006d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d2a:	bf00      	nop
 8006d2c:	e000ed08 	.word	0xe000ed08

08006d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d36:	4b37      	ldr	r3, [pc, #220]	@ (8006e14 <xPortStartScheduler+0xe4>)
 8006d38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	22ff      	movs	r2, #255	@ 0xff
 8006d46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006e18 <xPortStartScheduler+0xe8>)
 8006d5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006d60:	2207      	movs	r2, #7
 8006d62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d64:	e009      	b.n	8006d7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d66:	4b2d      	ldr	r3, [pc, #180]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006d6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d82:	2b80      	cmp	r3, #128	@ 0x80
 8006d84:	d0ef      	beq.n	8006d66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d86:	4b25      	ldr	r3, [pc, #148]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f1c3 0307 	rsb	r3, r3, #7
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d00d      	beq.n	8006dae <xPortStartScheduler+0x7e>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d96:	b672      	cpsid	i
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	b662      	cpsie	i
 8006da6:	60bb      	str	r3, [r7, #8]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dae:	4b1b      	ldr	r3, [pc, #108]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	4a19      	ldr	r2, [pc, #100]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006db6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006db8:	4b18      	ldr	r3, [pc, #96]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006dc0:	4a16      	ldr	r2, [pc, #88]	@ (8006e1c <xPortStartScheduler+0xec>)
 8006dc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006dcc:	4b14      	ldr	r3, [pc, #80]	@ (8006e20 <xPortStartScheduler+0xf0>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a13      	ldr	r2, [pc, #76]	@ (8006e20 <xPortStartScheduler+0xf0>)
 8006dd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006dd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006dd8:	4b11      	ldr	r3, [pc, #68]	@ (8006e20 <xPortStartScheduler+0xf0>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a10      	ldr	r2, [pc, #64]	@ (8006e20 <xPortStartScheduler+0xf0>)
 8006dde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006de2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006de4:	f000 f8dc 	bl	8006fa0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006de8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e24 <xPortStartScheduler+0xf4>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006dee:	f000 f8fb 	bl	8006fe8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006df2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e28 <xPortStartScheduler+0xf8>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a0c      	ldr	r2, [pc, #48]	@ (8006e28 <xPortStartScheduler+0xf8>)
 8006df8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006dfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006dfe:	f7ff ff83 	bl	8006d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e02:	f7fe ff2f 	bl	8005c64 <vTaskSwitchContext>
	prvTaskExitError();
 8006e06:	f7ff ff33 	bl	8006c70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	e000e400 	.word	0xe000e400
 8006e18:	20000f28 	.word	0x20000f28
 8006e1c:	20000f2c 	.word	0x20000f2c
 8006e20:	e000ed20 	.word	0xe000ed20
 8006e24:	2000000c 	.word	0x2000000c
 8006e28:	e000ef34 	.word	0xe000ef34

08006e2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e36:	b672      	cpsid	i
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	b662      	cpsie	i
 8006e46:	607b      	str	r3, [r7, #4]
}
 8006e48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e4a:	4b11      	ldr	r3, [pc, #68]	@ (8006e90 <vPortEnterCritical+0x64>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	4a0f      	ldr	r2, [pc, #60]	@ (8006e90 <vPortEnterCritical+0x64>)
 8006e52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e54:	4b0e      	ldr	r3, [pc, #56]	@ (8006e90 <vPortEnterCritical+0x64>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d112      	bne.n	8006e82 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <vPortEnterCritical+0x68>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00d      	beq.n	8006e82 <vPortEnterCritical+0x56>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6a:	b672      	cpsid	i
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	b662      	cpsie	i
 8006e7a:	603b      	str	r3, [r7, #0]
}
 8006e7c:	bf00      	nop
 8006e7e:	bf00      	nop
 8006e80:	e7fd      	b.n	8006e7e <vPortEnterCritical+0x52>
	}
}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	2000000c 	.word	0x2000000c
 8006e94:	e000ed04 	.word	0xe000ed04

08006e98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e9e:	4b13      	ldr	r3, [pc, #76]	@ (8006eec <vPortExitCritical+0x54>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10d      	bne.n	8006ec2 <vPortExitCritical+0x2a>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eaa:	b672      	cpsid	i
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	b662      	cpsie	i
 8006eba:	607b      	str	r3, [r7, #4]
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	e7fd      	b.n	8006ebe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8006eec <vPortExitCritical+0x54>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	4a08      	ldr	r2, [pc, #32]	@ (8006eec <vPortExitCritical+0x54>)
 8006eca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ecc:	4b07      	ldr	r3, [pc, #28]	@ (8006eec <vPortExitCritical+0x54>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d105      	bne.n	8006ee0 <vPortExitCritical+0x48>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	f383 8811 	msr	BASEPRI, r3
}
 8006ede:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	2000000c 	.word	0x2000000c

08006ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ef0:	f3ef 8009 	mrs	r0, PSP
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	4b15      	ldr	r3, [pc, #84]	@ (8006f50 <pxCurrentTCBConst>)
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	f01e 0f10 	tst.w	lr, #16
 8006f00:	bf08      	it	eq
 8006f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0a:	6010      	str	r0, [r2, #0]
 8006f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006f14:	b672      	cpsid	i
 8006f16:	f380 8811 	msr	BASEPRI, r0
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	b662      	cpsie	i
 8006f24:	f7fe fe9e 	bl	8005c64 <vTaskSwitchContext>
 8006f28:	f04f 0000 	mov.w	r0, #0
 8006f2c:	f380 8811 	msr	BASEPRI, r0
 8006f30:	bc09      	pop	{r0, r3}
 8006f32:	6819      	ldr	r1, [r3, #0]
 8006f34:	6808      	ldr	r0, [r1, #0]
 8006f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3a:	f01e 0f10 	tst.w	lr, #16
 8006f3e:	bf08      	it	eq
 8006f40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f44:	f380 8809 	msr	PSP, r0
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop

08006f50 <pxCurrentTCBConst>:
 8006f50:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop

08006f58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	b672      	cpsid	i
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	b662      	cpsie	i
 8006f72:	607b      	str	r3, [r7, #4]
}
 8006f74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f76:	f7fe fdb9 	bl	8005aec <xTaskIncrementTick>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f80:	4b06      	ldr	r3, [pc, #24]	@ (8006f9c <SysTick_Handler+0x44>)
 8006f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	f383 8811 	msr	BASEPRI, r3
}
 8006f92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f94:	bf00      	nop
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	e000ed04 	.word	0xe000ed04

08006fa0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd4 <vPortSetupTimerInterrupt+0x34>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006faa:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd8 <vPortSetupTimerInterrupt+0x38>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006fdc <vPortSetupTimerInterrupt+0x3c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe0 <vPortSetupTimerInterrupt+0x40>)
 8006fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fba:	099b      	lsrs	r3, r3, #6
 8006fbc:	4a09      	ldr	r2, [pc, #36]	@ (8006fe4 <vPortSetupTimerInterrupt+0x44>)
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fc2:	4b04      	ldr	r3, [pc, #16]	@ (8006fd4 <vPortSetupTimerInterrupt+0x34>)
 8006fc4:	2207      	movs	r2, #7
 8006fc6:	601a      	str	r2, [r3, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	e000e010 	.word	0xe000e010
 8006fd8:	e000e018 	.word	0xe000e018
 8006fdc:	20000000 	.word	0x20000000
 8006fe0:	10624dd3 	.word	0x10624dd3
 8006fe4:	e000e014 	.word	0xe000e014

08006fe8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fe8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ff8 <vPortEnableVFP+0x10>
 8006fec:	6801      	ldr	r1, [r0, #0]
 8006fee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006ff2:	6001      	str	r1, [r0, #0]
 8006ff4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ff6:	bf00      	nop
 8006ff8:	e000ed88 	.word	0xe000ed88

08006ffc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007002:	f3ef 8305 	mrs	r3, IPSR
 8007006:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b0f      	cmp	r3, #15
 800700c:	d917      	bls.n	800703e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800700e:	4a1a      	ldr	r2, [pc, #104]	@ (8007078 <vPortValidateInterruptPriority+0x7c>)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4413      	add	r3, r2
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007018:	4b18      	ldr	r3, [pc, #96]	@ (800707c <vPortValidateInterruptPriority+0x80>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	7afa      	ldrb	r2, [r7, #11]
 800701e:	429a      	cmp	r2, r3
 8007020:	d20d      	bcs.n	800703e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007026:	b672      	cpsid	i
 8007028:	f383 8811 	msr	BASEPRI, r3
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	b662      	cpsie	i
 8007036:	607b      	str	r3, [r7, #4]
}
 8007038:	bf00      	nop
 800703a:	bf00      	nop
 800703c:	e7fd      	b.n	800703a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800703e:	4b10      	ldr	r3, [pc, #64]	@ (8007080 <vPortValidateInterruptPriority+0x84>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007046:	4b0f      	ldr	r3, [pc, #60]	@ (8007084 <vPortValidateInterruptPriority+0x88>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d90d      	bls.n	800706a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	b672      	cpsid	i
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	b662      	cpsie	i
 8007062:	603b      	str	r3, [r7, #0]
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	e7fd      	b.n	8007066 <vPortValidateInterruptPriority+0x6a>
	}
 800706a:	bf00      	nop
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	e000e3f0 	.word	0xe000e3f0
 800707c:	20000f28 	.word	0x20000f28
 8007080:	e000ed0c 	.word	0xe000ed0c
 8007084:	20000f2c 	.word	0x20000f2c

08007088 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08a      	sub	sp, #40	@ 0x28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007090:	2300      	movs	r3, #0
 8007092:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007094:	f7fe fc6c 	bl	8005970 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007098:	4b5d      	ldr	r3, [pc, #372]	@ (8007210 <pvPortMalloc+0x188>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070a0:	f000 f920 	bl	80072e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070a4:	4b5b      	ldr	r3, [pc, #364]	@ (8007214 <pvPortMalloc+0x18c>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4013      	ands	r3, r2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f040 8094 	bne.w	80071da <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d020      	beq.n	80070fa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80070b8:	2208      	movs	r2, #8
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4413      	add	r3, r2
 80070be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d017      	beq.n	80070fa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f023 0307 	bic.w	r3, r3, #7
 80070d0:	3308      	adds	r3, #8
 80070d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00d      	beq.n	80070fa <pvPortMalloc+0x72>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e2:	b672      	cpsid	i
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	b662      	cpsie	i
 80070f2:	617b      	str	r3, [r7, #20]
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	e7fd      	b.n	80070f6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d06c      	beq.n	80071da <pvPortMalloc+0x152>
 8007100:	4b45      	ldr	r3, [pc, #276]	@ (8007218 <pvPortMalloc+0x190>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	429a      	cmp	r2, r3
 8007108:	d867      	bhi.n	80071da <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800710a:	4b44      	ldr	r3, [pc, #272]	@ (800721c <pvPortMalloc+0x194>)
 800710c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800710e:	4b43      	ldr	r3, [pc, #268]	@ (800721c <pvPortMalloc+0x194>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007114:	e004      	b.n	8007120 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	429a      	cmp	r2, r3
 8007128:	d903      	bls.n	8007132 <pvPortMalloc+0xaa>
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1f1      	bne.n	8007116 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007132:	4b37      	ldr	r3, [pc, #220]	@ (8007210 <pvPortMalloc+0x188>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007138:	429a      	cmp	r2, r3
 800713a:	d04e      	beq.n	80071da <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2208      	movs	r2, #8
 8007142:	4413      	add	r3, r2
 8007144:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	1ad2      	subs	r2, r2, r3
 8007156:	2308      	movs	r3, #8
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	429a      	cmp	r2, r3
 800715c:	d922      	bls.n	80071a4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800715e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4413      	add	r3, r2
 8007164:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	f003 0307 	and.w	r3, r3, #7
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00d      	beq.n	800718c <pvPortMalloc+0x104>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007174:	b672      	cpsid	i
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	b662      	cpsie	i
 8007184:	613b      	str	r3, [r7, #16]
}
 8007186:	bf00      	nop
 8007188:	bf00      	nop
 800718a:	e7fd      	b.n	8007188 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	1ad2      	subs	r2, r2, r3
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800719e:	69b8      	ldr	r0, [r7, #24]
 80071a0:	f000 f902 	bl	80073a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007218 <pvPortMalloc+0x190>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007218 <pvPortMalloc+0x190>)
 80071b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071b2:	4b19      	ldr	r3, [pc, #100]	@ (8007218 <pvPortMalloc+0x190>)
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007220 <pvPortMalloc+0x198>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d203      	bcs.n	80071c6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071be:	4b16      	ldr	r3, [pc, #88]	@ (8007218 <pvPortMalloc+0x190>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a17      	ldr	r2, [pc, #92]	@ (8007220 <pvPortMalloc+0x198>)
 80071c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	4b12      	ldr	r3, [pc, #72]	@ (8007214 <pvPortMalloc+0x18c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071da:	f7fe fbd7 	bl	800598c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00d      	beq.n	8007204 <pvPortMalloc+0x17c>
	__asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ec:	b672      	cpsid	i
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	b662      	cpsie	i
 80071fc:	60fb      	str	r3, [r7, #12]
}
 80071fe:	bf00      	nop
 8007200:	bf00      	nop
 8007202:	e7fd      	b.n	8007200 <pvPortMalloc+0x178>
	return pvReturn;
 8007204:	69fb      	ldr	r3, [r7, #28]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3728      	adds	r7, #40	@ 0x28
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20004b38 	.word	0x20004b38
 8007214:	20004b44 	.word	0x20004b44
 8007218:	20004b3c 	.word	0x20004b3c
 800721c:	20004b30 	.word	0x20004b30
 8007220:	20004b40 	.word	0x20004b40

08007224 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d04e      	beq.n	80072d4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007236:	2308      	movs	r3, #8
 8007238:	425b      	negs	r3, r3
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4413      	add	r3, r2
 800723e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	4b24      	ldr	r3, [pc, #144]	@ (80072dc <vPortFree+0xb8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4013      	ands	r3, r2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10d      	bne.n	800726e <vPortFree+0x4a>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007256:	b672      	cpsid	i
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	b662      	cpsie	i
 8007266:	60fb      	str	r3, [r7, #12]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00d      	beq.n	8007292 <vPortFree+0x6e>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727a:	b672      	cpsid	i
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	b662      	cpsie	i
 800728a:	60bb      	str	r3, [r7, #8]
}
 800728c:	bf00      	nop
 800728e:	bf00      	nop
 8007290:	e7fd      	b.n	800728e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	4b11      	ldr	r3, [pc, #68]	@ (80072dc <vPortFree+0xb8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4013      	ands	r3, r2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d019      	beq.n	80072d4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d115      	bne.n	80072d4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	4b0b      	ldr	r3, [pc, #44]	@ (80072dc <vPortFree+0xb8>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	43db      	mvns	r3, r3
 80072b2:	401a      	ands	r2, r3
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072b8:	f7fe fb5a 	bl	8005970 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	4b07      	ldr	r3, [pc, #28]	@ (80072e0 <vPortFree+0xbc>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4413      	add	r3, r2
 80072c6:	4a06      	ldr	r2, [pc, #24]	@ (80072e0 <vPortFree+0xbc>)
 80072c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072ca:	6938      	ldr	r0, [r7, #16]
 80072cc:	f000 f86c 	bl	80073a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80072d0:	f7fe fb5c 	bl	800598c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072d4:	bf00      	nop
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	20004b44 	.word	0x20004b44
 80072e0:	20004b3c 	.word	0x20004b3c

080072e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072ea:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80072ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072f0:	4b27      	ldr	r3, [pc, #156]	@ (8007390 <prvHeapInit+0xac>)
 80072f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00c      	beq.n	8007318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3307      	adds	r3, #7
 8007302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f023 0307 	bic.w	r3, r3, #7
 800730a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	4a1f      	ldr	r2, [pc, #124]	@ (8007390 <prvHeapInit+0xac>)
 8007314:	4413      	add	r3, r2
 8007316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800731c:	4a1d      	ldr	r2, [pc, #116]	@ (8007394 <prvHeapInit+0xb0>)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007322:	4b1c      	ldr	r3, [pc, #112]	@ (8007394 <prvHeapInit+0xb0>)
 8007324:	2200      	movs	r2, #0
 8007326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	4413      	add	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007330:	2208      	movs	r2, #8
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	1a9b      	subs	r3, r3, r2
 8007336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f023 0307 	bic.w	r3, r3, #7
 800733e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4a15      	ldr	r2, [pc, #84]	@ (8007398 <prvHeapInit+0xb4>)
 8007344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007346:	4b14      	ldr	r3, [pc, #80]	@ (8007398 <prvHeapInit+0xb4>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2200      	movs	r2, #0
 800734c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800734e:	4b12      	ldr	r3, [pc, #72]	@ (8007398 <prvHeapInit+0xb4>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	1ad2      	subs	r2, r2, r3
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007364:	4b0c      	ldr	r3, [pc, #48]	@ (8007398 <prvHeapInit+0xb4>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	4a0a      	ldr	r2, [pc, #40]	@ (800739c <prvHeapInit+0xb8>)
 8007372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	4a09      	ldr	r2, [pc, #36]	@ (80073a0 <prvHeapInit+0xbc>)
 800737a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800737c:	4b09      	ldr	r3, [pc, #36]	@ (80073a4 <prvHeapInit+0xc0>)
 800737e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007382:	601a      	str	r2, [r3, #0]
}
 8007384:	bf00      	nop
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	20000f30 	.word	0x20000f30
 8007394:	20004b30 	.word	0x20004b30
 8007398:	20004b38 	.word	0x20004b38
 800739c:	20004b40 	.word	0x20004b40
 80073a0:	20004b3c 	.word	0x20004b3c
 80073a4:	20004b44 	.word	0x20004b44

080073a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073b0:	4b28      	ldr	r3, [pc, #160]	@ (8007454 <prvInsertBlockIntoFreeList+0xac>)
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	e002      	b.n	80073bc <prvInsertBlockIntoFreeList+0x14>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d8f7      	bhi.n	80073b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	4413      	add	r3, r2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d108      	bne.n	80073ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	441a      	add	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	441a      	add	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d118      	bne.n	8007430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	4b15      	ldr	r3, [pc, #84]	@ (8007458 <prvInsertBlockIntoFreeList+0xb0>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d00d      	beq.n	8007426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	441a      	add	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	e008      	b.n	8007438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007426:	4b0c      	ldr	r3, [pc, #48]	@ (8007458 <prvInsertBlockIntoFreeList+0xb0>)
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	e003      	b.n	8007438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	429a      	cmp	r2, r3
 800743e:	d002      	beq.n	8007446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007446:	bf00      	nop
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20004b30 	.word	0x20004b30
 8007458:	20004b38 	.word	0x20004b38

0800745c <drv_uart_set_task_handle>:
#include "task.h"

static TaskHandle_t uart_task_handle = NULL;
char uart_rx_char;

void drv_uart_set_task_handle(void *handle) {
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
	uart_task_handle = (TaskHandle_t)handle;
 8007464:	4a04      	ldr	r2, [pc, #16]	@ (8007478 <drv_uart_set_task_handle+0x1c>)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6013      	str	r3, [r2, #0]
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20004b48 	.word	0x20004b48

0800747c <drv_uart_receive>:

uint8_t drv_uart_receive(char *pData, uint16_t size) {
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	807b      	strh	r3, [r7, #2]
	// Attend que l'interruption notifie la tâche
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8007488:	f04f 31ff 	mov.w	r1, #4294967295
 800748c:	2001      	movs	r0, #1
 800748e:	f7fe ff17 	bl	80062c0 <ulTaskNotifyTake>
	*pData = uart_rx_char;
 8007492:	4b04      	ldr	r3, [pc, #16]	@ (80074a4 <drv_uart_receive+0x28>)
 8007494:	781a      	ldrb	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	701a      	strb	r2, [r3, #0]
	return 1;
 800749a:	2301      	movs	r3, #1
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	20004b4c 	.word	0x20004b4c

080074a8 <drv_uart_transmit>:

uint8_t drv_uart_transmit(char *pData, uint16_t size) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	807b      	strh	r3, [r7, #2]
	return (HAL_UART_Transmit(&huart1, (uint8_t *)pData, size, HAL_MAX_DELAY) == HAL_OK);
 80074b4:	887a      	ldrh	r2, [r7, #2]
 80074b6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	4806      	ldr	r0, [pc, #24]	@ (80074d8 <drv_uart_transmit+0x30>)
 80074be:	f7fb ff7f 	bl	80033c0 <HAL_UART_Transmit>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bf0c      	ite	eq
 80074c8:	2301      	moveq	r3, #1
 80074ca:	2300      	movne	r3, #0
 80074cc:	b2db      	uxtb	r3, r3
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	200000e0 	.word	0x200000e0

080074dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1 && uart_task_handle) {
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a12      	ldr	r2, [pc, #72]	@ (8007534 <HAL_UART_RxCpltCallback+0x58>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d11d      	bne.n	800752a <HAL_UART_RxCpltCallback+0x4e>
 80074ee:	4b12      	ldr	r3, [pc, #72]	@ (8007538 <HAL_UART_RxCpltCallback+0x5c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d019      	beq.n	800752a <HAL_UART_RxCpltCallback+0x4e>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60fb      	str	r3, [r7, #12]

		vTaskNotifyGiveFromISR(uart_task_handle, &xHigherPriorityTaskWoken);
 80074fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007538 <HAL_UART_RxCpltCallback+0x5c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f107 020c 	add.w	r2, r7, #12
 8007502:	4611      	mov	r1, r2
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe ff27 	bl	8006358 <vTaskNotifyGiveFromISR>

		// Redémarre la réception du caractère suivant
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_rx_char, 1);
 800750a:	2201      	movs	r2, #1
 800750c:	490b      	ldr	r1, [pc, #44]	@ (800753c <HAL_UART_RxCpltCallback+0x60>)
 800750e:	480c      	ldr	r0, [pc, #48]	@ (8007540 <HAL_UART_RxCpltCallback+0x64>)
 8007510:	f7fb ffdf 	bl	80034d2 <HAL_UART_Receive_IT>

		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d007      	beq.n	800752a <HAL_UART_RxCpltCallback+0x4e>
 800751a:	4b0a      	ldr	r3, [pc, #40]	@ (8007544 <HAL_UART_RxCpltCallback+0x68>)
 800751c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	f3bf 8f6f 	isb	sy
	}
}
 800752a:	bf00      	nop
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	40011000 	.word	0x40011000
 8007538:	20004b48 	.word	0x20004b48
 800753c:	20004b4c 	.word	0x20004b4c
 8007540:	200000e0 	.word	0x200000e0
 8007544:	e000ed04 	.word	0xe000ed04

08007548 <uart_read>:
static char cmd_buffer[BUFFER_SIZE];

static char prompt[] = "> ";
static char backspace[] = "\b \b";

static char uart_read(void) {
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
	char c;
	drv_uart_receive(&c, 1);  // Attend un caractère via UART (IT + FreeRTOS)
 800754e:	1dfb      	adds	r3, r7, #7
 8007550:	2101      	movs	r1, #1
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff ff92 	bl	800747c <drv_uart_receive>
	return c;
 8007558:	79fb      	ldrb	r3, [r7, #7]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <uart_write>:

static int uart_write(char *s, uint16_t size) {
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	807b      	strh	r3, [r7, #2]
	return drv_uart_transmit(s, size);
 800756e:	887b      	ldrh	r3, [r7, #2]
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff ff98 	bl	80074a8 <drv_uart_transmit>
 8007578:	4603      	mov	r3, r0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <sh_help>:

static int sh_help(int argc, char **argv) {
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af02      	add	r7, sp, #8
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < shell_func_list_size; i++) {
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	e022      	b.n	80075da <sh_help+0x56>
		int size = snprintf(print_buffer, BUFFER_SIZE, "%c: %s\r\n",
		                    shell_func_list[i].c, shell_func_list[i].description);
 8007594:	4916      	ldr	r1, [pc, #88]	@ (80075f0 <sh_help+0x6c>)
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4613      	mov	r3, r2
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	781b      	ldrb	r3, [r3, #0]
		int size = snprintf(print_buffer, BUFFER_SIZE, "%c: %s\r\n",
 80075a4:	4618      	mov	r0, r3
 80075a6:	4912      	ldr	r1, [pc, #72]	@ (80075f0 <sh_help+0x6c>)
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4613      	mov	r3, r2
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	440b      	add	r3, r1
 80075b4:	3308      	adds	r3, #8
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	4603      	mov	r3, r0
 80075bc:	4a0d      	ldr	r2, [pc, #52]	@ (80075f4 <sh_help+0x70>)
 80075be:	2140      	movs	r1, #64	@ 0x40
 80075c0:	480d      	ldr	r0, [pc, #52]	@ (80075f8 <sh_help+0x74>)
 80075c2:	f000 fa65 	bl	8007a90 <sniprintf>
 80075c6:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4619      	mov	r1, r3
 80075ce:	480a      	ldr	r0, [pc, #40]	@ (80075f8 <sh_help+0x74>)
 80075d0:	f7ff ffc7 	bl	8007562 <uart_write>
	for (int i = 0; i < shell_func_list_size; i++) {
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]
 80075da:	4b08      	ldr	r3, [pc, #32]	@ (80075fc <sh_help+0x78>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	dbd7      	blt.n	8007594 <sh_help+0x10>
	}
	return 0;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	20004b50 	.word	0x20004b50
 80075f4:	080089ac 	.word	0x080089ac
 80075f8:	20004cd4 	.word	0x20004cd4
 80075fc:	20004cd0 	.word	0x20004cd0

08007600 <shell_init>:

void shell_init(void) {
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
	shell_func_list_size = 0;
 8007606:	4b0c      	ldr	r3, [pc, #48]	@ (8007638 <shell_init+0x38>)
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]
	int size = snprintf(print_buffer, BUFFER_SIZE, "\r\n===== FreeRTOS Shell v1.0 =====\r\n");
 800760c:	4a0b      	ldr	r2, [pc, #44]	@ (800763c <shell_init+0x3c>)
 800760e:	2140      	movs	r1, #64	@ 0x40
 8007610:	480b      	ldr	r0, [pc, #44]	@ (8007640 <shell_init+0x40>)
 8007612:	f000 fa3d 	bl	8007a90 <sniprintf>
 8007616:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	b29b      	uxth	r3, r3
 800761c:	4619      	mov	r1, r3
 800761e:	4808      	ldr	r0, [pc, #32]	@ (8007640 <shell_init+0x40>)
 8007620:	f7ff ff9f 	bl	8007562 <uart_write>
	shell_add('h', sh_help, "Help");
 8007624:	4a07      	ldr	r2, [pc, #28]	@ (8007644 <shell_init+0x44>)
 8007626:	4908      	ldr	r1, [pc, #32]	@ (8007648 <shell_init+0x48>)
 8007628:	2068      	movs	r0, #104	@ 0x68
 800762a:	f000 f80f 	bl	800764c <shell_add>
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20004cd0 	.word	0x20004cd0
 800763c:	080089b8 	.word	0x080089b8
 8007640:	20004cd4 	.word	0x20004cd4
 8007644:	080089dc 	.word	0x080089dc
 8007648:	08007585 	.word	0x08007585

0800764c <shell_add>:

int shell_add(char c, int (*func)(int, char **), char *description) {
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 800765a:	4b19      	ldr	r3, [pc, #100]	@ (80076c0 <shell_add+0x74>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b1f      	cmp	r3, #31
 8007660:	dc26      	bgt.n	80076b0 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8007662:	4b17      	ldr	r3, [pc, #92]	@ (80076c0 <shell_add+0x74>)
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	4917      	ldr	r1, [pc, #92]	@ (80076c4 <shell_add+0x78>)
 8007668:	4613      	mov	r3, r2
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	440b      	add	r3, r1
 8007672:	7bfa      	ldrb	r2, [r7, #15]
 8007674:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = func;
 8007676:	4b12      	ldr	r3, [pc, #72]	@ (80076c0 <shell_add+0x74>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4912      	ldr	r1, [pc, #72]	@ (80076c4 <shell_add+0x78>)
 800767c:	4613      	mov	r3, r2
 800767e:	005b      	lsls	r3, r3, #1
 8007680:	4413      	add	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	3304      	adds	r3, #4
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 800768c:	4b0c      	ldr	r3, [pc, #48]	@ (80076c0 <shell_add+0x74>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	490c      	ldr	r1, [pc, #48]	@ (80076c4 <shell_add+0x78>)
 8007692:	4613      	mov	r3, r2
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	3308      	adds	r3, #8
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 80076a2:	4b07      	ldr	r3, [pc, #28]	@ (80076c0 <shell_add+0x74>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3301      	adds	r3, #1
 80076a8:	4a05      	ldr	r2, [pc, #20]	@ (80076c0 <shell_add+0x74>)
 80076aa:	6013      	str	r3, [r2, #0]
		return 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	e001      	b.n	80076b4 <shell_add+0x68>
	}
	return -1;
 80076b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	20004cd0 	.word	0x20004cd0
 80076c4:	20004b50 	.word	0x20004b50

080076c8 <shell_exec>:

static int shell_exec(char *buf) {
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b090      	sub	sp, #64	@ 0x40
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
	char c = buf[0];
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	char *argv[ARGC_MAX];
	int argc = 1;
 80076d8:	2301      	movs	r3, #1
 80076da:	63fb      	str	r3, [r7, #60]	@ 0x3c
	argv[0] = buf;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	60fb      	str	r3, [r7, #12]

	for (char *p = buf; *p != '\0' && argc < ARGC_MAX; p++) {
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076e4:	e013      	b.n	800770e <shell_exec+0x46>
		if (*p == ' ') {
 80076e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d10c      	bne.n	8007708 <shell_exec+0x40>
			*p = '\0';
 80076ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f0:	2200      	movs	r2, #0
 80076f2:	701a      	strb	r2, [r3, #0]
			argv[argc++] = p + 1;
 80076f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80076fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076fc:	3201      	adds	r2, #1
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	3340      	adds	r3, #64	@ 0x40
 8007702:	443b      	add	r3, r7
 8007704:	f843 2c34 	str.w	r2, [r3, #-52]
	for (char *p = buf; *p != '\0' && argc < ARGC_MAX; p++) {
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	3301      	adds	r3, #1
 800770c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800770e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <shell_exec+0x54>
 8007716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007718:	2b07      	cmp	r3, #7
 800771a:	dde4      	ble.n	80076e6 <shell_exec+0x1e>
		}
	}

	for (int i = 0; i < shell_func_list_size; i++) {
 800771c:	2300      	movs	r3, #0
 800771e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007720:	e01e      	b.n	8007760 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8007722:	491c      	ldr	r1, [pc, #112]	@ (8007794 <shell_exec+0xcc>)
 8007724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007726:	4613      	mov	r3, r2
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	4413      	add	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	440b      	add	r3, r1
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007736:	429a      	cmp	r2, r3
 8007738:	d10f      	bne.n	800775a <shell_exec+0x92>
			return shell_func_list[i].func(argc, argv);
 800773a:	4916      	ldr	r1, [pc, #88]	@ (8007794 <shell_exec+0xcc>)
 800773c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800773e:	4613      	mov	r3, r2
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	3304      	adds	r3, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f107 020c 	add.w	r2, r7, #12
 8007750:	4611      	mov	r1, r2
 8007752:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007754:	4798      	blx	r3
 8007756:	4603      	mov	r3, r0
 8007758:	e017      	b.n	800778a <shell_exec+0xc2>
	for (int i = 0; i < shell_func_list_size; i++) {
 800775a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775c:	3301      	adds	r3, #1
 800775e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007760:	4b0d      	ldr	r3, [pc, #52]	@ (8007798 <shell_exec+0xd0>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007766:	429a      	cmp	r2, r3
 8007768:	dbdb      	blt.n	8007722 <shell_exec+0x5a>
		}
	}

	int size = snprintf(print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 800776a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800776e:	4a0b      	ldr	r2, [pc, #44]	@ (800779c <shell_exec+0xd4>)
 8007770:	2140      	movs	r1, #64	@ 0x40
 8007772:	480b      	ldr	r0, [pc, #44]	@ (80077a0 <shell_exec+0xd8>)
 8007774:	f000 f98c 	bl	8007a90 <sniprintf>
 8007778:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 800777a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800777c:	b29b      	uxth	r3, r3
 800777e:	4619      	mov	r1, r3
 8007780:	4807      	ldr	r0, [pc, #28]	@ (80077a0 <shell_exec+0xd8>)
 8007782:	f7ff feee 	bl	8007562 <uart_write>
	return -1;
 8007786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800778a:	4618      	mov	r0, r3
 800778c:	3740      	adds	r7, #64	@ 0x40
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20004b50 	.word	0x20004b50
 8007798:	20004cd0 	.word	0x20004cd0
 800779c:	080089e4 	.word	0x080089e4
 80077a0:	20004cd4 	.word	0x20004cd4

080077a4 <shell_run>:

int shell_run(void) {
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
	int pos = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	607b      	str	r3, [r7, #4]
	uart_write(prompt, strlen(prompt));
 80077ae:	4824      	ldr	r0, [pc, #144]	@ (8007840 <shell_run+0x9c>)
 80077b0:	f7f8 fd2e 	bl	8000210 <strlen>
 80077b4:	4603      	mov	r3, r0
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	4619      	mov	r1, r3
 80077ba:	4821      	ldr	r0, [pc, #132]	@ (8007840 <shell_run+0x9c>)
 80077bc:	f7ff fed1 	bl	8007562 <uart_write>

	while (1) {
		char c = uart_read();
 80077c0:	f7ff fec2 	bl	8007548 <uart_read>
 80077c4:	4603      	mov	r3, r0
 80077c6:	70fb      	strb	r3, [r7, #3]

		switch (c) {
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	2b08      	cmp	r3, #8
 80077cc:	d019      	beq.n	8007802 <shell_run+0x5e>
 80077ce:	2b0d      	cmp	r3, #13
 80077d0:	d122      	bne.n	8007818 <shell_run+0x74>
		case '\r':  // Entrée
			cmd_buffer[pos] = '\0';
 80077d2:	4a1c      	ldr	r2, [pc, #112]	@ (8007844 <shell_run+0xa0>)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4413      	add	r3, r2
 80077d8:	2200      	movs	r2, #0
 80077da:	701a      	strb	r2, [r3, #0]
			uart_write("\r\n", 2);
 80077dc:	2102      	movs	r1, #2
 80077de:	481a      	ldr	r0, [pc, #104]	@ (8007848 <shell_run+0xa4>)
 80077e0:	f7ff febf 	bl	8007562 <uart_write>
			shell_exec(cmd_buffer);
 80077e4:	4817      	ldr	r0, [pc, #92]	@ (8007844 <shell_run+0xa0>)
 80077e6:	f7ff ff6f 	bl	80076c8 <shell_exec>
			pos = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	607b      	str	r3, [r7, #4]
			uart_write(prompt, strlen(prompt));
 80077ee:	4814      	ldr	r0, [pc, #80]	@ (8007840 <shell_run+0x9c>)
 80077f0:	f7f8 fd0e 	bl	8000210 <strlen>
 80077f4:	4603      	mov	r3, r0
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	4619      	mov	r1, r3
 80077fa:	4811      	ldr	r0, [pc, #68]	@ (8007840 <shell_run+0x9c>)
 80077fc:	f7ff feb1 	bl	8007562 <uart_write>
			break;
 8007800:	e01c      	b.n	800783c <shell_run+0x98>

		case '\b':
			if (pos > 0) {
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	dd16      	ble.n	8007836 <shell_run+0x92>
				pos--;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3b01      	subs	r3, #1
 800780c:	607b      	str	r3, [r7, #4]
				uart_write(backspace, 3);
 800780e:	2103      	movs	r1, #3
 8007810:	480e      	ldr	r0, [pc, #56]	@ (800784c <shell_run+0xa8>)
 8007812:	f7ff fea6 	bl	8007562 <uart_write>
			}
			break;
 8007816:	e00e      	b.n	8007836 <shell_run+0x92>

		default:
			if (pos < BUFFER_SIZE - 1) {
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b3e      	cmp	r3, #62	@ 0x3e
 800781c:	dc0d      	bgt.n	800783a <shell_run+0x96>
				cmd_buffer[pos++] = c;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	78f9      	ldrb	r1, [r7, #3]
 8007826:	4a07      	ldr	r2, [pc, #28]	@ (8007844 <shell_run+0xa0>)
 8007828:	54d1      	strb	r1, [r2, r3]
				uart_write(&c, 1);
 800782a:	1cfb      	adds	r3, r7, #3
 800782c:	2101      	movs	r1, #1
 800782e:	4618      	mov	r0, r3
 8007830:	f7ff fe97 	bl	8007562 <uart_write>
			}
			break;
 8007834:	e001      	b.n	800783a <shell_run+0x96>
			break;
 8007836:	bf00      	nop
 8007838:	e7c2      	b.n	80077c0 <shell_run+0x1c>
			break;
 800783a:	bf00      	nop
	while (1) {
 800783c:	e7c0      	b.n	80077c0 <shell_run+0x1c>
 800783e:	bf00      	nop
 8007840:	20000010 	.word	0x20000010
 8007844:	20004d14 	.word	0x20004d14
 8007848:	080089fc 	.word	0x080089fc
 800784c:	20000014 	.word	0x20000014

08007850 <std>:
 8007850:	2300      	movs	r3, #0
 8007852:	b510      	push	{r4, lr}
 8007854:	4604      	mov	r4, r0
 8007856:	e9c0 3300 	strd	r3, r3, [r0]
 800785a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800785e:	6083      	str	r3, [r0, #8]
 8007860:	8181      	strh	r1, [r0, #12]
 8007862:	6643      	str	r3, [r0, #100]	@ 0x64
 8007864:	81c2      	strh	r2, [r0, #14]
 8007866:	6183      	str	r3, [r0, #24]
 8007868:	4619      	mov	r1, r3
 800786a:	2208      	movs	r2, #8
 800786c:	305c      	adds	r0, #92	@ 0x5c
 800786e:	f000 fa1b 	bl	8007ca8 <memset>
 8007872:	4b0d      	ldr	r3, [pc, #52]	@ (80078a8 <std+0x58>)
 8007874:	6263      	str	r3, [r4, #36]	@ 0x24
 8007876:	4b0d      	ldr	r3, [pc, #52]	@ (80078ac <std+0x5c>)
 8007878:	62a3      	str	r3, [r4, #40]	@ 0x28
 800787a:	4b0d      	ldr	r3, [pc, #52]	@ (80078b0 <std+0x60>)
 800787c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800787e:	4b0d      	ldr	r3, [pc, #52]	@ (80078b4 <std+0x64>)
 8007880:	6323      	str	r3, [r4, #48]	@ 0x30
 8007882:	4b0d      	ldr	r3, [pc, #52]	@ (80078b8 <std+0x68>)
 8007884:	6224      	str	r4, [r4, #32]
 8007886:	429c      	cmp	r4, r3
 8007888:	d006      	beq.n	8007898 <std+0x48>
 800788a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800788e:	4294      	cmp	r4, r2
 8007890:	d002      	beq.n	8007898 <std+0x48>
 8007892:	33d0      	adds	r3, #208	@ 0xd0
 8007894:	429c      	cmp	r4, r3
 8007896:	d105      	bne.n	80078a4 <std+0x54>
 8007898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800789c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a0:	f000 bad0 	b.w	8007e44 <__retarget_lock_init_recursive>
 80078a4:	bd10      	pop	{r4, pc}
 80078a6:	bf00      	nop
 80078a8:	08007af9 	.word	0x08007af9
 80078ac:	08007b1b 	.word	0x08007b1b
 80078b0:	08007b53 	.word	0x08007b53
 80078b4:	08007b77 	.word	0x08007b77
 80078b8:	20004d54 	.word	0x20004d54

080078bc <stdio_exit_handler>:
 80078bc:	4a02      	ldr	r2, [pc, #8]	@ (80078c8 <stdio_exit_handler+0xc>)
 80078be:	4903      	ldr	r1, [pc, #12]	@ (80078cc <stdio_exit_handler+0x10>)
 80078c0:	4803      	ldr	r0, [pc, #12]	@ (80078d0 <stdio_exit_handler+0x14>)
 80078c2:	f000 b869 	b.w	8007998 <_fwalk_sglue>
 80078c6:	bf00      	nop
 80078c8:	20000018 	.word	0x20000018
 80078cc:	0800872d 	.word	0x0800872d
 80078d0:	20000028 	.word	0x20000028

080078d4 <cleanup_stdio>:
 80078d4:	6841      	ldr	r1, [r0, #4]
 80078d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007908 <cleanup_stdio+0x34>)
 80078d8:	4299      	cmp	r1, r3
 80078da:	b510      	push	{r4, lr}
 80078dc:	4604      	mov	r4, r0
 80078de:	d001      	beq.n	80078e4 <cleanup_stdio+0x10>
 80078e0:	f000 ff24 	bl	800872c <_fflush_r>
 80078e4:	68a1      	ldr	r1, [r4, #8]
 80078e6:	4b09      	ldr	r3, [pc, #36]	@ (800790c <cleanup_stdio+0x38>)
 80078e8:	4299      	cmp	r1, r3
 80078ea:	d002      	beq.n	80078f2 <cleanup_stdio+0x1e>
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 ff1d 	bl	800872c <_fflush_r>
 80078f2:	68e1      	ldr	r1, [r4, #12]
 80078f4:	4b06      	ldr	r3, [pc, #24]	@ (8007910 <cleanup_stdio+0x3c>)
 80078f6:	4299      	cmp	r1, r3
 80078f8:	d004      	beq.n	8007904 <cleanup_stdio+0x30>
 80078fa:	4620      	mov	r0, r4
 80078fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007900:	f000 bf14 	b.w	800872c <_fflush_r>
 8007904:	bd10      	pop	{r4, pc}
 8007906:	bf00      	nop
 8007908:	20004d54 	.word	0x20004d54
 800790c:	20004dbc 	.word	0x20004dbc
 8007910:	20004e24 	.word	0x20004e24

08007914 <global_stdio_init.part.0>:
 8007914:	b510      	push	{r4, lr}
 8007916:	4b0b      	ldr	r3, [pc, #44]	@ (8007944 <global_stdio_init.part.0+0x30>)
 8007918:	4c0b      	ldr	r4, [pc, #44]	@ (8007948 <global_stdio_init.part.0+0x34>)
 800791a:	4a0c      	ldr	r2, [pc, #48]	@ (800794c <global_stdio_init.part.0+0x38>)
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	4620      	mov	r0, r4
 8007920:	2200      	movs	r2, #0
 8007922:	2104      	movs	r1, #4
 8007924:	f7ff ff94 	bl	8007850 <std>
 8007928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800792c:	2201      	movs	r2, #1
 800792e:	2109      	movs	r1, #9
 8007930:	f7ff ff8e 	bl	8007850 <std>
 8007934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007938:	2202      	movs	r2, #2
 800793a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800793e:	2112      	movs	r1, #18
 8007940:	f7ff bf86 	b.w	8007850 <std>
 8007944:	20004e8c 	.word	0x20004e8c
 8007948:	20004d54 	.word	0x20004d54
 800794c:	080078bd 	.word	0x080078bd

08007950 <__sfp_lock_acquire>:
 8007950:	4801      	ldr	r0, [pc, #4]	@ (8007958 <__sfp_lock_acquire+0x8>)
 8007952:	f000 ba78 	b.w	8007e46 <__retarget_lock_acquire_recursive>
 8007956:	bf00      	nop
 8007958:	20004e95 	.word	0x20004e95

0800795c <__sfp_lock_release>:
 800795c:	4801      	ldr	r0, [pc, #4]	@ (8007964 <__sfp_lock_release+0x8>)
 800795e:	f000 ba73 	b.w	8007e48 <__retarget_lock_release_recursive>
 8007962:	bf00      	nop
 8007964:	20004e95 	.word	0x20004e95

08007968 <__sinit>:
 8007968:	b510      	push	{r4, lr}
 800796a:	4604      	mov	r4, r0
 800796c:	f7ff fff0 	bl	8007950 <__sfp_lock_acquire>
 8007970:	6a23      	ldr	r3, [r4, #32]
 8007972:	b11b      	cbz	r3, 800797c <__sinit+0x14>
 8007974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007978:	f7ff bff0 	b.w	800795c <__sfp_lock_release>
 800797c:	4b04      	ldr	r3, [pc, #16]	@ (8007990 <__sinit+0x28>)
 800797e:	6223      	str	r3, [r4, #32]
 8007980:	4b04      	ldr	r3, [pc, #16]	@ (8007994 <__sinit+0x2c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1f5      	bne.n	8007974 <__sinit+0xc>
 8007988:	f7ff ffc4 	bl	8007914 <global_stdio_init.part.0>
 800798c:	e7f2      	b.n	8007974 <__sinit+0xc>
 800798e:	bf00      	nop
 8007990:	080078d5 	.word	0x080078d5
 8007994:	20004e8c 	.word	0x20004e8c

08007998 <_fwalk_sglue>:
 8007998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800799c:	4607      	mov	r7, r0
 800799e:	4688      	mov	r8, r1
 80079a0:	4614      	mov	r4, r2
 80079a2:	2600      	movs	r6, #0
 80079a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079a8:	f1b9 0901 	subs.w	r9, r9, #1
 80079ac:	d505      	bpl.n	80079ba <_fwalk_sglue+0x22>
 80079ae:	6824      	ldr	r4, [r4, #0]
 80079b0:	2c00      	cmp	r4, #0
 80079b2:	d1f7      	bne.n	80079a4 <_fwalk_sglue+0xc>
 80079b4:	4630      	mov	r0, r6
 80079b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ba:	89ab      	ldrh	r3, [r5, #12]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d907      	bls.n	80079d0 <_fwalk_sglue+0x38>
 80079c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079c4:	3301      	adds	r3, #1
 80079c6:	d003      	beq.n	80079d0 <_fwalk_sglue+0x38>
 80079c8:	4629      	mov	r1, r5
 80079ca:	4638      	mov	r0, r7
 80079cc:	47c0      	blx	r8
 80079ce:	4306      	orrs	r6, r0
 80079d0:	3568      	adds	r5, #104	@ 0x68
 80079d2:	e7e9      	b.n	80079a8 <_fwalk_sglue+0x10>

080079d4 <_puts_r>:
 80079d4:	6a03      	ldr	r3, [r0, #32]
 80079d6:	b570      	push	{r4, r5, r6, lr}
 80079d8:	6884      	ldr	r4, [r0, #8]
 80079da:	4605      	mov	r5, r0
 80079dc:	460e      	mov	r6, r1
 80079de:	b90b      	cbnz	r3, 80079e4 <_puts_r+0x10>
 80079e0:	f7ff ffc2 	bl	8007968 <__sinit>
 80079e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079e6:	07db      	lsls	r3, r3, #31
 80079e8:	d405      	bmi.n	80079f6 <_puts_r+0x22>
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	0598      	lsls	r0, r3, #22
 80079ee:	d402      	bmi.n	80079f6 <_puts_r+0x22>
 80079f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079f2:	f000 fa28 	bl	8007e46 <__retarget_lock_acquire_recursive>
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	0719      	lsls	r1, r3, #28
 80079fa:	d502      	bpl.n	8007a02 <_puts_r+0x2e>
 80079fc:	6923      	ldr	r3, [r4, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d135      	bne.n	8007a6e <_puts_r+0x9a>
 8007a02:	4621      	mov	r1, r4
 8007a04:	4628      	mov	r0, r5
 8007a06:	f000 f8f9 	bl	8007bfc <__swsetup_r>
 8007a0a:	b380      	cbz	r0, 8007a6e <_puts_r+0x9a>
 8007a0c:	f04f 35ff 	mov.w	r5, #4294967295
 8007a10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a12:	07da      	lsls	r2, r3, #31
 8007a14:	d405      	bmi.n	8007a22 <_puts_r+0x4e>
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	059b      	lsls	r3, r3, #22
 8007a1a:	d402      	bmi.n	8007a22 <_puts_r+0x4e>
 8007a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a1e:	f000 fa13 	bl	8007e48 <__retarget_lock_release_recursive>
 8007a22:	4628      	mov	r0, r5
 8007a24:	bd70      	pop	{r4, r5, r6, pc}
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	da04      	bge.n	8007a34 <_puts_r+0x60>
 8007a2a:	69a2      	ldr	r2, [r4, #24]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	dc17      	bgt.n	8007a60 <_puts_r+0x8c>
 8007a30:	290a      	cmp	r1, #10
 8007a32:	d015      	beq.n	8007a60 <_puts_r+0x8c>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	6022      	str	r2, [r4, #0]
 8007a3a:	7019      	strb	r1, [r3, #0]
 8007a3c:	68a3      	ldr	r3, [r4, #8]
 8007a3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a42:	3b01      	subs	r3, #1
 8007a44:	60a3      	str	r3, [r4, #8]
 8007a46:	2900      	cmp	r1, #0
 8007a48:	d1ed      	bne.n	8007a26 <_puts_r+0x52>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	da11      	bge.n	8007a72 <_puts_r+0x9e>
 8007a4e:	4622      	mov	r2, r4
 8007a50:	210a      	movs	r1, #10
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 f893 	bl	8007b7e <__swbuf_r>
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d0d7      	beq.n	8007a0c <_puts_r+0x38>
 8007a5c:	250a      	movs	r5, #10
 8007a5e:	e7d7      	b.n	8007a10 <_puts_r+0x3c>
 8007a60:	4622      	mov	r2, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f88b 	bl	8007b7e <__swbuf_r>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d1e7      	bne.n	8007a3c <_puts_r+0x68>
 8007a6c:	e7ce      	b.n	8007a0c <_puts_r+0x38>
 8007a6e:	3e01      	subs	r6, #1
 8007a70:	e7e4      	b.n	8007a3c <_puts_r+0x68>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	6022      	str	r2, [r4, #0]
 8007a78:	220a      	movs	r2, #10
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e7ee      	b.n	8007a5c <_puts_r+0x88>
	...

08007a80 <puts>:
 8007a80:	4b02      	ldr	r3, [pc, #8]	@ (8007a8c <puts+0xc>)
 8007a82:	4601      	mov	r1, r0
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	f7ff bfa5 	b.w	80079d4 <_puts_r>
 8007a8a:	bf00      	nop
 8007a8c:	20000024 	.word	0x20000024

08007a90 <sniprintf>:
 8007a90:	b40c      	push	{r2, r3}
 8007a92:	b530      	push	{r4, r5, lr}
 8007a94:	4b17      	ldr	r3, [pc, #92]	@ (8007af4 <sniprintf+0x64>)
 8007a96:	1e0c      	subs	r4, r1, #0
 8007a98:	681d      	ldr	r5, [r3, #0]
 8007a9a:	b09d      	sub	sp, #116	@ 0x74
 8007a9c:	da08      	bge.n	8007ab0 <sniprintf+0x20>
 8007a9e:	238b      	movs	r3, #139	@ 0x8b
 8007aa0:	602b      	str	r3, [r5, #0]
 8007aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa6:	b01d      	add	sp, #116	@ 0x74
 8007aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007aac:	b002      	add	sp, #8
 8007aae:	4770      	bx	lr
 8007ab0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ab4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ab8:	bf14      	ite	ne
 8007aba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007abe:	4623      	moveq	r3, r4
 8007ac0:	9304      	str	r3, [sp, #16]
 8007ac2:	9307      	str	r3, [sp, #28]
 8007ac4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ac8:	9002      	str	r0, [sp, #8]
 8007aca:	9006      	str	r0, [sp, #24]
 8007acc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ad0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007ad2:	ab21      	add	r3, sp, #132	@ 0x84
 8007ad4:	a902      	add	r1, sp, #8
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	9301      	str	r3, [sp, #4]
 8007ada:	f000 fb19 	bl	8008110 <_svfiprintf_r>
 8007ade:	1c43      	adds	r3, r0, #1
 8007ae0:	bfbc      	itt	lt
 8007ae2:	238b      	movlt	r3, #139	@ 0x8b
 8007ae4:	602b      	strlt	r3, [r5, #0]
 8007ae6:	2c00      	cmp	r4, #0
 8007ae8:	d0dd      	beq.n	8007aa6 <sniprintf+0x16>
 8007aea:	9b02      	ldr	r3, [sp, #8]
 8007aec:	2200      	movs	r2, #0
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	e7d9      	b.n	8007aa6 <sniprintf+0x16>
 8007af2:	bf00      	nop
 8007af4:	20000024 	.word	0x20000024

08007af8 <__sread>:
 8007af8:	b510      	push	{r4, lr}
 8007afa:	460c      	mov	r4, r1
 8007afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b00:	f000 f952 	bl	8007da8 <_read_r>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	bfab      	itete	ge
 8007b08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b0c:	181b      	addge	r3, r3, r0
 8007b0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b12:	bfac      	ite	ge
 8007b14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b16:	81a3      	strhlt	r3, [r4, #12]
 8007b18:	bd10      	pop	{r4, pc}

08007b1a <__swrite>:
 8007b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1e:	461f      	mov	r7, r3
 8007b20:	898b      	ldrh	r3, [r1, #12]
 8007b22:	05db      	lsls	r3, r3, #23
 8007b24:	4605      	mov	r5, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	4616      	mov	r6, r2
 8007b2a:	d505      	bpl.n	8007b38 <__swrite+0x1e>
 8007b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b30:	2302      	movs	r3, #2
 8007b32:	2200      	movs	r2, #0
 8007b34:	f000 f926 	bl	8007d84 <_lseek_r>
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	4632      	mov	r2, r6
 8007b46:	463b      	mov	r3, r7
 8007b48:	4628      	mov	r0, r5
 8007b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4e:	f000 b93d 	b.w	8007dcc <_write_r>

08007b52 <__sseek>:
 8007b52:	b510      	push	{r4, lr}
 8007b54:	460c      	mov	r4, r1
 8007b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5a:	f000 f913 	bl	8007d84 <_lseek_r>
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	bf15      	itete	ne
 8007b64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b6e:	81a3      	strheq	r3, [r4, #12]
 8007b70:	bf18      	it	ne
 8007b72:	81a3      	strhne	r3, [r4, #12]
 8007b74:	bd10      	pop	{r4, pc}

08007b76 <__sclose>:
 8007b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7a:	f000 b89d 	b.w	8007cb8 <_close_r>

08007b7e <__swbuf_r>:
 8007b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b80:	460e      	mov	r6, r1
 8007b82:	4614      	mov	r4, r2
 8007b84:	4605      	mov	r5, r0
 8007b86:	b118      	cbz	r0, 8007b90 <__swbuf_r+0x12>
 8007b88:	6a03      	ldr	r3, [r0, #32]
 8007b8a:	b90b      	cbnz	r3, 8007b90 <__swbuf_r+0x12>
 8007b8c:	f7ff feec 	bl	8007968 <__sinit>
 8007b90:	69a3      	ldr	r3, [r4, #24]
 8007b92:	60a3      	str	r3, [r4, #8]
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	071a      	lsls	r2, r3, #28
 8007b98:	d501      	bpl.n	8007b9e <__swbuf_r+0x20>
 8007b9a:	6923      	ldr	r3, [r4, #16]
 8007b9c:	b943      	cbnz	r3, 8007bb0 <__swbuf_r+0x32>
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f000 f82b 	bl	8007bfc <__swsetup_r>
 8007ba6:	b118      	cbz	r0, 8007bb0 <__swbuf_r+0x32>
 8007ba8:	f04f 37ff 	mov.w	r7, #4294967295
 8007bac:	4638      	mov	r0, r7
 8007bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	6922      	ldr	r2, [r4, #16]
 8007bb4:	1a98      	subs	r0, r3, r2
 8007bb6:	6963      	ldr	r3, [r4, #20]
 8007bb8:	b2f6      	uxtb	r6, r6
 8007bba:	4283      	cmp	r3, r0
 8007bbc:	4637      	mov	r7, r6
 8007bbe:	dc05      	bgt.n	8007bcc <__swbuf_r+0x4e>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 fdb2 	bl	800872c <_fflush_r>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d1ed      	bne.n	8007ba8 <__swbuf_r+0x2a>
 8007bcc:	68a3      	ldr	r3, [r4, #8]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	60a3      	str	r3, [r4, #8]
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	1c5a      	adds	r2, r3, #1
 8007bd6:	6022      	str	r2, [r4, #0]
 8007bd8:	701e      	strb	r6, [r3, #0]
 8007bda:	6962      	ldr	r2, [r4, #20]
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d004      	beq.n	8007bec <__swbuf_r+0x6e>
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	07db      	lsls	r3, r3, #31
 8007be6:	d5e1      	bpl.n	8007bac <__swbuf_r+0x2e>
 8007be8:	2e0a      	cmp	r6, #10
 8007bea:	d1df      	bne.n	8007bac <__swbuf_r+0x2e>
 8007bec:	4621      	mov	r1, r4
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 fd9c 	bl	800872c <_fflush_r>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d0d9      	beq.n	8007bac <__swbuf_r+0x2e>
 8007bf8:	e7d6      	b.n	8007ba8 <__swbuf_r+0x2a>
	...

08007bfc <__swsetup_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4b29      	ldr	r3, [pc, #164]	@ (8007ca4 <__swsetup_r+0xa8>)
 8007c00:	4605      	mov	r5, r0
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	460c      	mov	r4, r1
 8007c06:	b118      	cbz	r0, 8007c10 <__swsetup_r+0x14>
 8007c08:	6a03      	ldr	r3, [r0, #32]
 8007c0a:	b90b      	cbnz	r3, 8007c10 <__swsetup_r+0x14>
 8007c0c:	f7ff feac 	bl	8007968 <__sinit>
 8007c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c14:	0719      	lsls	r1, r3, #28
 8007c16:	d422      	bmi.n	8007c5e <__swsetup_r+0x62>
 8007c18:	06da      	lsls	r2, r3, #27
 8007c1a:	d407      	bmi.n	8007c2c <__swsetup_r+0x30>
 8007c1c:	2209      	movs	r2, #9
 8007c1e:	602a      	str	r2, [r5, #0]
 8007c20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c24:	81a3      	strh	r3, [r4, #12]
 8007c26:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2a:	e033      	b.n	8007c94 <__swsetup_r+0x98>
 8007c2c:	0758      	lsls	r0, r3, #29
 8007c2e:	d512      	bpl.n	8007c56 <__swsetup_r+0x5a>
 8007c30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c32:	b141      	cbz	r1, 8007c46 <__swsetup_r+0x4a>
 8007c34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c38:	4299      	cmp	r1, r3
 8007c3a:	d002      	beq.n	8007c42 <__swsetup_r+0x46>
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 f913 	bl	8007e68 <_free_r>
 8007c42:	2300      	movs	r3, #0
 8007c44:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c46:	89a3      	ldrh	r3, [r4, #12]
 8007c48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c4c:	81a3      	strh	r3, [r4, #12]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	6063      	str	r3, [r4, #4]
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	f043 0308 	orr.w	r3, r3, #8
 8007c5c:	81a3      	strh	r3, [r4, #12]
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	b94b      	cbnz	r3, 8007c76 <__swsetup_r+0x7a>
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c6c:	d003      	beq.n	8007c76 <__swsetup_r+0x7a>
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4628      	mov	r0, r5
 8007c72:	f000 fda9 	bl	80087c8 <__smakebuf_r>
 8007c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c7a:	f013 0201 	ands.w	r2, r3, #1
 8007c7e:	d00a      	beq.n	8007c96 <__swsetup_r+0x9a>
 8007c80:	2200      	movs	r2, #0
 8007c82:	60a2      	str	r2, [r4, #8]
 8007c84:	6962      	ldr	r2, [r4, #20]
 8007c86:	4252      	negs	r2, r2
 8007c88:	61a2      	str	r2, [r4, #24]
 8007c8a:	6922      	ldr	r2, [r4, #16]
 8007c8c:	b942      	cbnz	r2, 8007ca0 <__swsetup_r+0xa4>
 8007c8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c92:	d1c5      	bne.n	8007c20 <__swsetup_r+0x24>
 8007c94:	bd38      	pop	{r3, r4, r5, pc}
 8007c96:	0799      	lsls	r1, r3, #30
 8007c98:	bf58      	it	pl
 8007c9a:	6962      	ldrpl	r2, [r4, #20]
 8007c9c:	60a2      	str	r2, [r4, #8]
 8007c9e:	e7f4      	b.n	8007c8a <__swsetup_r+0x8e>
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	e7f7      	b.n	8007c94 <__swsetup_r+0x98>
 8007ca4:	20000024 	.word	0x20000024

08007ca8 <memset>:
 8007ca8:	4402      	add	r2, r0
 8007caa:	4603      	mov	r3, r0
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d100      	bne.n	8007cb2 <memset+0xa>
 8007cb0:	4770      	bx	lr
 8007cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007cb6:	e7f9      	b.n	8007cac <memset+0x4>

08007cb8 <_close_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4d06      	ldr	r5, [pc, #24]	@ (8007cd4 <_close_r+0x1c>)
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	4608      	mov	r0, r1
 8007cc2:	602b      	str	r3, [r5, #0]
 8007cc4:	f7f9 fab3 	bl	800122e <_close>
 8007cc8:	1c43      	adds	r3, r0, #1
 8007cca:	d102      	bne.n	8007cd2 <_close_r+0x1a>
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	b103      	cbz	r3, 8007cd2 <_close_r+0x1a>
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	bd38      	pop	{r3, r4, r5, pc}
 8007cd4:	20004e90 	.word	0x20004e90

08007cd8 <_reclaim_reent>:
 8007cd8:	4b29      	ldr	r3, [pc, #164]	@ (8007d80 <_reclaim_reent+0xa8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4283      	cmp	r3, r0
 8007cde:	b570      	push	{r4, r5, r6, lr}
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	d04b      	beq.n	8007d7c <_reclaim_reent+0xa4>
 8007ce4:	69c3      	ldr	r3, [r0, #28]
 8007ce6:	b1ab      	cbz	r3, 8007d14 <_reclaim_reent+0x3c>
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	b16b      	cbz	r3, 8007d08 <_reclaim_reent+0x30>
 8007cec:	2500      	movs	r5, #0
 8007cee:	69e3      	ldr	r3, [r4, #28]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	5959      	ldr	r1, [r3, r5]
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	d13b      	bne.n	8007d70 <_reclaim_reent+0x98>
 8007cf8:	3504      	adds	r5, #4
 8007cfa:	2d80      	cmp	r5, #128	@ 0x80
 8007cfc:	d1f7      	bne.n	8007cee <_reclaim_reent+0x16>
 8007cfe:	69e3      	ldr	r3, [r4, #28]
 8007d00:	4620      	mov	r0, r4
 8007d02:	68d9      	ldr	r1, [r3, #12]
 8007d04:	f000 f8b0 	bl	8007e68 <_free_r>
 8007d08:	69e3      	ldr	r3, [r4, #28]
 8007d0a:	6819      	ldr	r1, [r3, #0]
 8007d0c:	b111      	cbz	r1, 8007d14 <_reclaim_reent+0x3c>
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 f8aa 	bl	8007e68 <_free_r>
 8007d14:	6961      	ldr	r1, [r4, #20]
 8007d16:	b111      	cbz	r1, 8007d1e <_reclaim_reent+0x46>
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 f8a5 	bl	8007e68 <_free_r>
 8007d1e:	69e1      	ldr	r1, [r4, #28]
 8007d20:	b111      	cbz	r1, 8007d28 <_reclaim_reent+0x50>
 8007d22:	4620      	mov	r0, r4
 8007d24:	f000 f8a0 	bl	8007e68 <_free_r>
 8007d28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007d2a:	b111      	cbz	r1, 8007d32 <_reclaim_reent+0x5a>
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 f89b 	bl	8007e68 <_free_r>
 8007d32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d34:	b111      	cbz	r1, 8007d3c <_reclaim_reent+0x64>
 8007d36:	4620      	mov	r0, r4
 8007d38:	f000 f896 	bl	8007e68 <_free_r>
 8007d3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007d3e:	b111      	cbz	r1, 8007d46 <_reclaim_reent+0x6e>
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 f891 	bl	8007e68 <_free_r>
 8007d46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007d48:	b111      	cbz	r1, 8007d50 <_reclaim_reent+0x78>
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 f88c 	bl	8007e68 <_free_r>
 8007d50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007d52:	b111      	cbz	r1, 8007d5a <_reclaim_reent+0x82>
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 f887 	bl	8007e68 <_free_r>
 8007d5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007d5c:	b111      	cbz	r1, 8007d64 <_reclaim_reent+0x8c>
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f000 f882 	bl	8007e68 <_free_r>
 8007d64:	6a23      	ldr	r3, [r4, #32]
 8007d66:	b14b      	cbz	r3, 8007d7c <_reclaim_reent+0xa4>
 8007d68:	4620      	mov	r0, r4
 8007d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d6e:	4718      	bx	r3
 8007d70:	680e      	ldr	r6, [r1, #0]
 8007d72:	4620      	mov	r0, r4
 8007d74:	f000 f878 	bl	8007e68 <_free_r>
 8007d78:	4631      	mov	r1, r6
 8007d7a:	e7bb      	b.n	8007cf4 <_reclaim_reent+0x1c>
 8007d7c:	bd70      	pop	{r4, r5, r6, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000024 	.word	0x20000024

08007d84 <_lseek_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4d07      	ldr	r5, [pc, #28]	@ (8007da4 <_lseek_r+0x20>)
 8007d88:	4604      	mov	r4, r0
 8007d8a:	4608      	mov	r0, r1
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	2200      	movs	r2, #0
 8007d90:	602a      	str	r2, [r5, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	f7f9 fa72 	bl	800127c <_lseek>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d102      	bne.n	8007da2 <_lseek_r+0x1e>
 8007d9c:	682b      	ldr	r3, [r5, #0]
 8007d9e:	b103      	cbz	r3, 8007da2 <_lseek_r+0x1e>
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
 8007da4:	20004e90 	.word	0x20004e90

08007da8 <_read_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d07      	ldr	r5, [pc, #28]	@ (8007dc8 <_read_r+0x20>)
 8007dac:	4604      	mov	r4, r0
 8007dae:	4608      	mov	r0, r1
 8007db0:	4611      	mov	r1, r2
 8007db2:	2200      	movs	r2, #0
 8007db4:	602a      	str	r2, [r5, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	f7f9 fa00 	bl	80011bc <_read>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d102      	bne.n	8007dc6 <_read_r+0x1e>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	b103      	cbz	r3, 8007dc6 <_read_r+0x1e>
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	20004e90 	.word	0x20004e90

08007dcc <_write_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4d07      	ldr	r5, [pc, #28]	@ (8007dec <_write_r+0x20>)
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	4608      	mov	r0, r1
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	602a      	str	r2, [r5, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f7f9 fa0b 	bl	80011f6 <_write>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	d102      	bne.n	8007dea <_write_r+0x1e>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	b103      	cbz	r3, 8007dea <_write_r+0x1e>
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	bd38      	pop	{r3, r4, r5, pc}
 8007dec:	20004e90 	.word	0x20004e90

08007df0 <__errno>:
 8007df0:	4b01      	ldr	r3, [pc, #4]	@ (8007df8 <__errno+0x8>)
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	20000024 	.word	0x20000024

08007dfc <__libc_init_array>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	4d0d      	ldr	r5, [pc, #52]	@ (8007e34 <__libc_init_array+0x38>)
 8007e00:	4c0d      	ldr	r4, [pc, #52]	@ (8007e38 <__libc_init_array+0x3c>)
 8007e02:	1b64      	subs	r4, r4, r5
 8007e04:	10a4      	asrs	r4, r4, #2
 8007e06:	2600      	movs	r6, #0
 8007e08:	42a6      	cmp	r6, r4
 8007e0a:	d109      	bne.n	8007e20 <__libc_init_array+0x24>
 8007e0c:	4d0b      	ldr	r5, [pc, #44]	@ (8007e3c <__libc_init_array+0x40>)
 8007e0e:	4c0c      	ldr	r4, [pc, #48]	@ (8007e40 <__libc_init_array+0x44>)
 8007e10:	f000 fd98 	bl	8008944 <_init>
 8007e14:	1b64      	subs	r4, r4, r5
 8007e16:	10a4      	asrs	r4, r4, #2
 8007e18:	2600      	movs	r6, #0
 8007e1a:	42a6      	cmp	r6, r4
 8007e1c:	d105      	bne.n	8007e2a <__libc_init_array+0x2e>
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e24:	4798      	blx	r3
 8007e26:	3601      	adds	r6, #1
 8007e28:	e7ee      	b.n	8007e08 <__libc_init_array+0xc>
 8007e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2e:	4798      	blx	r3
 8007e30:	3601      	adds	r6, #1
 8007e32:	e7f2      	b.n	8007e1a <__libc_init_array+0x1e>
 8007e34:	08008a54 	.word	0x08008a54
 8007e38:	08008a54 	.word	0x08008a54
 8007e3c:	08008a54 	.word	0x08008a54
 8007e40:	08008a58 	.word	0x08008a58

08007e44 <__retarget_lock_init_recursive>:
 8007e44:	4770      	bx	lr

08007e46 <__retarget_lock_acquire_recursive>:
 8007e46:	4770      	bx	lr

08007e48 <__retarget_lock_release_recursive>:
 8007e48:	4770      	bx	lr

08007e4a <memcpy>:
 8007e4a:	440a      	add	r2, r1
 8007e4c:	4291      	cmp	r1, r2
 8007e4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e52:	d100      	bne.n	8007e56 <memcpy+0xc>
 8007e54:	4770      	bx	lr
 8007e56:	b510      	push	{r4, lr}
 8007e58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e60:	4291      	cmp	r1, r2
 8007e62:	d1f9      	bne.n	8007e58 <memcpy+0xe>
 8007e64:	bd10      	pop	{r4, pc}
	...

08007e68 <_free_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	d041      	beq.n	8007ef4 <_free_r+0x8c>
 8007e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e74:	1f0c      	subs	r4, r1, #4
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	bfb8      	it	lt
 8007e7a:	18e4      	addlt	r4, r4, r3
 8007e7c:	f000 f8e0 	bl	8008040 <__malloc_lock>
 8007e80:	4a1d      	ldr	r2, [pc, #116]	@ (8007ef8 <_free_r+0x90>)
 8007e82:	6813      	ldr	r3, [r2, #0]
 8007e84:	b933      	cbnz	r3, 8007e94 <_free_r+0x2c>
 8007e86:	6063      	str	r3, [r4, #4]
 8007e88:	6014      	str	r4, [r2, #0]
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e90:	f000 b8dc 	b.w	800804c <__malloc_unlock>
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	d908      	bls.n	8007eaa <_free_r+0x42>
 8007e98:	6820      	ldr	r0, [r4, #0]
 8007e9a:	1821      	adds	r1, r4, r0
 8007e9c:	428b      	cmp	r3, r1
 8007e9e:	bf01      	itttt	eq
 8007ea0:	6819      	ldreq	r1, [r3, #0]
 8007ea2:	685b      	ldreq	r3, [r3, #4]
 8007ea4:	1809      	addeq	r1, r1, r0
 8007ea6:	6021      	streq	r1, [r4, #0]
 8007ea8:	e7ed      	b.n	8007e86 <_free_r+0x1e>
 8007eaa:	461a      	mov	r2, r3
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	b10b      	cbz	r3, 8007eb4 <_free_r+0x4c>
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	d9fa      	bls.n	8007eaa <_free_r+0x42>
 8007eb4:	6811      	ldr	r1, [r2, #0]
 8007eb6:	1850      	adds	r0, r2, r1
 8007eb8:	42a0      	cmp	r0, r4
 8007eba:	d10b      	bne.n	8007ed4 <_free_r+0x6c>
 8007ebc:	6820      	ldr	r0, [r4, #0]
 8007ebe:	4401      	add	r1, r0
 8007ec0:	1850      	adds	r0, r2, r1
 8007ec2:	4283      	cmp	r3, r0
 8007ec4:	6011      	str	r1, [r2, #0]
 8007ec6:	d1e0      	bne.n	8007e8a <_free_r+0x22>
 8007ec8:	6818      	ldr	r0, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	6053      	str	r3, [r2, #4]
 8007ece:	4408      	add	r0, r1
 8007ed0:	6010      	str	r0, [r2, #0]
 8007ed2:	e7da      	b.n	8007e8a <_free_r+0x22>
 8007ed4:	d902      	bls.n	8007edc <_free_r+0x74>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	602b      	str	r3, [r5, #0]
 8007eda:	e7d6      	b.n	8007e8a <_free_r+0x22>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	1821      	adds	r1, r4, r0
 8007ee0:	428b      	cmp	r3, r1
 8007ee2:	bf04      	itt	eq
 8007ee4:	6819      	ldreq	r1, [r3, #0]
 8007ee6:	685b      	ldreq	r3, [r3, #4]
 8007ee8:	6063      	str	r3, [r4, #4]
 8007eea:	bf04      	itt	eq
 8007eec:	1809      	addeq	r1, r1, r0
 8007eee:	6021      	streq	r1, [r4, #0]
 8007ef0:	6054      	str	r4, [r2, #4]
 8007ef2:	e7ca      	b.n	8007e8a <_free_r+0x22>
 8007ef4:	bd38      	pop	{r3, r4, r5, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20004e9c 	.word	0x20004e9c

08007efc <sbrk_aligned>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	4e0f      	ldr	r6, [pc, #60]	@ (8007f3c <sbrk_aligned+0x40>)
 8007f00:	460c      	mov	r4, r1
 8007f02:	6831      	ldr	r1, [r6, #0]
 8007f04:	4605      	mov	r5, r0
 8007f06:	b911      	cbnz	r1, 8007f0e <sbrk_aligned+0x12>
 8007f08:	f000 fcd6 	bl	80088b8 <_sbrk_r>
 8007f0c:	6030      	str	r0, [r6, #0]
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	f000 fcd1 	bl	80088b8 <_sbrk_r>
 8007f16:	1c43      	adds	r3, r0, #1
 8007f18:	d103      	bne.n	8007f22 <sbrk_aligned+0x26>
 8007f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f1e:	4620      	mov	r0, r4
 8007f20:	bd70      	pop	{r4, r5, r6, pc}
 8007f22:	1cc4      	adds	r4, r0, #3
 8007f24:	f024 0403 	bic.w	r4, r4, #3
 8007f28:	42a0      	cmp	r0, r4
 8007f2a:	d0f8      	beq.n	8007f1e <sbrk_aligned+0x22>
 8007f2c:	1a21      	subs	r1, r4, r0
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f000 fcc2 	bl	80088b8 <_sbrk_r>
 8007f34:	3001      	adds	r0, #1
 8007f36:	d1f2      	bne.n	8007f1e <sbrk_aligned+0x22>
 8007f38:	e7ef      	b.n	8007f1a <sbrk_aligned+0x1e>
 8007f3a:	bf00      	nop
 8007f3c:	20004e98 	.word	0x20004e98

08007f40 <_malloc_r>:
 8007f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f44:	1ccd      	adds	r5, r1, #3
 8007f46:	f025 0503 	bic.w	r5, r5, #3
 8007f4a:	3508      	adds	r5, #8
 8007f4c:	2d0c      	cmp	r5, #12
 8007f4e:	bf38      	it	cc
 8007f50:	250c      	movcc	r5, #12
 8007f52:	2d00      	cmp	r5, #0
 8007f54:	4606      	mov	r6, r0
 8007f56:	db01      	blt.n	8007f5c <_malloc_r+0x1c>
 8007f58:	42a9      	cmp	r1, r5
 8007f5a:	d904      	bls.n	8007f66 <_malloc_r+0x26>
 8007f5c:	230c      	movs	r3, #12
 8007f5e:	6033      	str	r3, [r6, #0]
 8007f60:	2000      	movs	r0, #0
 8007f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800803c <_malloc_r+0xfc>
 8007f6a:	f000 f869 	bl	8008040 <__malloc_lock>
 8007f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f72:	461c      	mov	r4, r3
 8007f74:	bb44      	cbnz	r4, 8007fc8 <_malloc_r+0x88>
 8007f76:	4629      	mov	r1, r5
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f7ff ffbf 	bl	8007efc <sbrk_aligned>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	4604      	mov	r4, r0
 8007f82:	d158      	bne.n	8008036 <_malloc_r+0xf6>
 8007f84:	f8d8 4000 	ldr.w	r4, [r8]
 8007f88:	4627      	mov	r7, r4
 8007f8a:	2f00      	cmp	r7, #0
 8007f8c:	d143      	bne.n	8008016 <_malloc_r+0xd6>
 8007f8e:	2c00      	cmp	r4, #0
 8007f90:	d04b      	beq.n	800802a <_malloc_r+0xea>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	4639      	mov	r1, r7
 8007f96:	4630      	mov	r0, r6
 8007f98:	eb04 0903 	add.w	r9, r4, r3
 8007f9c:	f000 fc8c 	bl	80088b8 <_sbrk_r>
 8007fa0:	4581      	cmp	r9, r0
 8007fa2:	d142      	bne.n	800802a <_malloc_r+0xea>
 8007fa4:	6821      	ldr	r1, [r4, #0]
 8007fa6:	1a6d      	subs	r5, r5, r1
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4630      	mov	r0, r6
 8007fac:	f7ff ffa6 	bl	8007efc <sbrk_aligned>
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	d03a      	beq.n	800802a <_malloc_r+0xea>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	442b      	add	r3, r5
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	f8d8 3000 	ldr.w	r3, [r8]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	bb62      	cbnz	r2, 800801c <_malloc_r+0xdc>
 8007fc2:	f8c8 7000 	str.w	r7, [r8]
 8007fc6:	e00f      	b.n	8007fe8 <_malloc_r+0xa8>
 8007fc8:	6822      	ldr	r2, [r4, #0]
 8007fca:	1b52      	subs	r2, r2, r5
 8007fcc:	d420      	bmi.n	8008010 <_malloc_r+0xd0>
 8007fce:	2a0b      	cmp	r2, #11
 8007fd0:	d917      	bls.n	8008002 <_malloc_r+0xc2>
 8007fd2:	1961      	adds	r1, r4, r5
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	6025      	str	r5, [r4, #0]
 8007fd8:	bf18      	it	ne
 8007fda:	6059      	strne	r1, [r3, #4]
 8007fdc:	6863      	ldr	r3, [r4, #4]
 8007fde:	bf08      	it	eq
 8007fe0:	f8c8 1000 	streq.w	r1, [r8]
 8007fe4:	5162      	str	r2, [r4, r5]
 8007fe6:	604b      	str	r3, [r1, #4]
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f000 f82f 	bl	800804c <__malloc_unlock>
 8007fee:	f104 000b 	add.w	r0, r4, #11
 8007ff2:	1d23      	adds	r3, r4, #4
 8007ff4:	f020 0007 	bic.w	r0, r0, #7
 8007ff8:	1ac2      	subs	r2, r0, r3
 8007ffa:	bf1c      	itt	ne
 8007ffc:	1a1b      	subne	r3, r3, r0
 8007ffe:	50a3      	strne	r3, [r4, r2]
 8008000:	e7af      	b.n	8007f62 <_malloc_r+0x22>
 8008002:	6862      	ldr	r2, [r4, #4]
 8008004:	42a3      	cmp	r3, r4
 8008006:	bf0c      	ite	eq
 8008008:	f8c8 2000 	streq.w	r2, [r8]
 800800c:	605a      	strne	r2, [r3, #4]
 800800e:	e7eb      	b.n	8007fe8 <_malloc_r+0xa8>
 8008010:	4623      	mov	r3, r4
 8008012:	6864      	ldr	r4, [r4, #4]
 8008014:	e7ae      	b.n	8007f74 <_malloc_r+0x34>
 8008016:	463c      	mov	r4, r7
 8008018:	687f      	ldr	r7, [r7, #4]
 800801a:	e7b6      	b.n	8007f8a <_malloc_r+0x4a>
 800801c:	461a      	mov	r2, r3
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	42a3      	cmp	r3, r4
 8008022:	d1fb      	bne.n	800801c <_malloc_r+0xdc>
 8008024:	2300      	movs	r3, #0
 8008026:	6053      	str	r3, [r2, #4]
 8008028:	e7de      	b.n	8007fe8 <_malloc_r+0xa8>
 800802a:	230c      	movs	r3, #12
 800802c:	6033      	str	r3, [r6, #0]
 800802e:	4630      	mov	r0, r6
 8008030:	f000 f80c 	bl	800804c <__malloc_unlock>
 8008034:	e794      	b.n	8007f60 <_malloc_r+0x20>
 8008036:	6005      	str	r5, [r0, #0]
 8008038:	e7d6      	b.n	8007fe8 <_malloc_r+0xa8>
 800803a:	bf00      	nop
 800803c:	20004e9c 	.word	0x20004e9c

08008040 <__malloc_lock>:
 8008040:	4801      	ldr	r0, [pc, #4]	@ (8008048 <__malloc_lock+0x8>)
 8008042:	f7ff bf00 	b.w	8007e46 <__retarget_lock_acquire_recursive>
 8008046:	bf00      	nop
 8008048:	20004e94 	.word	0x20004e94

0800804c <__malloc_unlock>:
 800804c:	4801      	ldr	r0, [pc, #4]	@ (8008054 <__malloc_unlock+0x8>)
 800804e:	f7ff befb 	b.w	8007e48 <__retarget_lock_release_recursive>
 8008052:	bf00      	nop
 8008054:	20004e94 	.word	0x20004e94

08008058 <__ssputs_r>:
 8008058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800805c:	688e      	ldr	r6, [r1, #8]
 800805e:	461f      	mov	r7, r3
 8008060:	42be      	cmp	r6, r7
 8008062:	680b      	ldr	r3, [r1, #0]
 8008064:	4682      	mov	sl, r0
 8008066:	460c      	mov	r4, r1
 8008068:	4690      	mov	r8, r2
 800806a:	d82d      	bhi.n	80080c8 <__ssputs_r+0x70>
 800806c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008070:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008074:	d026      	beq.n	80080c4 <__ssputs_r+0x6c>
 8008076:	6965      	ldr	r5, [r4, #20]
 8008078:	6909      	ldr	r1, [r1, #16]
 800807a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800807e:	eba3 0901 	sub.w	r9, r3, r1
 8008082:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008086:	1c7b      	adds	r3, r7, #1
 8008088:	444b      	add	r3, r9
 800808a:	106d      	asrs	r5, r5, #1
 800808c:	429d      	cmp	r5, r3
 800808e:	bf38      	it	cc
 8008090:	461d      	movcc	r5, r3
 8008092:	0553      	lsls	r3, r2, #21
 8008094:	d527      	bpl.n	80080e6 <__ssputs_r+0x8e>
 8008096:	4629      	mov	r1, r5
 8008098:	f7ff ff52 	bl	8007f40 <_malloc_r>
 800809c:	4606      	mov	r6, r0
 800809e:	b360      	cbz	r0, 80080fa <__ssputs_r+0xa2>
 80080a0:	6921      	ldr	r1, [r4, #16]
 80080a2:	464a      	mov	r2, r9
 80080a4:	f7ff fed1 	bl	8007e4a <memcpy>
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80080ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	6126      	str	r6, [r4, #16]
 80080b6:	6165      	str	r5, [r4, #20]
 80080b8:	444e      	add	r6, r9
 80080ba:	eba5 0509 	sub.w	r5, r5, r9
 80080be:	6026      	str	r6, [r4, #0]
 80080c0:	60a5      	str	r5, [r4, #8]
 80080c2:	463e      	mov	r6, r7
 80080c4:	42be      	cmp	r6, r7
 80080c6:	d900      	bls.n	80080ca <__ssputs_r+0x72>
 80080c8:	463e      	mov	r6, r7
 80080ca:	6820      	ldr	r0, [r4, #0]
 80080cc:	4632      	mov	r2, r6
 80080ce:	4641      	mov	r1, r8
 80080d0:	f000 fbb6 	bl	8008840 <memmove>
 80080d4:	68a3      	ldr	r3, [r4, #8]
 80080d6:	1b9b      	subs	r3, r3, r6
 80080d8:	60a3      	str	r3, [r4, #8]
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	4433      	add	r3, r6
 80080de:	6023      	str	r3, [r4, #0]
 80080e0:	2000      	movs	r0, #0
 80080e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e6:	462a      	mov	r2, r5
 80080e8:	f000 fbf6 	bl	80088d8 <_realloc_r>
 80080ec:	4606      	mov	r6, r0
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d1e0      	bne.n	80080b4 <__ssputs_r+0x5c>
 80080f2:	6921      	ldr	r1, [r4, #16]
 80080f4:	4650      	mov	r0, sl
 80080f6:	f7ff feb7 	bl	8007e68 <_free_r>
 80080fa:	230c      	movs	r3, #12
 80080fc:	f8ca 3000 	str.w	r3, [sl]
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008106:	81a3      	strh	r3, [r4, #12]
 8008108:	f04f 30ff 	mov.w	r0, #4294967295
 800810c:	e7e9      	b.n	80080e2 <__ssputs_r+0x8a>
	...

08008110 <_svfiprintf_r>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	4698      	mov	r8, r3
 8008116:	898b      	ldrh	r3, [r1, #12]
 8008118:	061b      	lsls	r3, r3, #24
 800811a:	b09d      	sub	sp, #116	@ 0x74
 800811c:	4607      	mov	r7, r0
 800811e:	460d      	mov	r5, r1
 8008120:	4614      	mov	r4, r2
 8008122:	d510      	bpl.n	8008146 <_svfiprintf_r+0x36>
 8008124:	690b      	ldr	r3, [r1, #16]
 8008126:	b973      	cbnz	r3, 8008146 <_svfiprintf_r+0x36>
 8008128:	2140      	movs	r1, #64	@ 0x40
 800812a:	f7ff ff09 	bl	8007f40 <_malloc_r>
 800812e:	6028      	str	r0, [r5, #0]
 8008130:	6128      	str	r0, [r5, #16]
 8008132:	b930      	cbnz	r0, 8008142 <_svfiprintf_r+0x32>
 8008134:	230c      	movs	r3, #12
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	f04f 30ff 	mov.w	r0, #4294967295
 800813c:	b01d      	add	sp, #116	@ 0x74
 800813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008142:	2340      	movs	r3, #64	@ 0x40
 8008144:	616b      	str	r3, [r5, #20]
 8008146:	2300      	movs	r3, #0
 8008148:	9309      	str	r3, [sp, #36]	@ 0x24
 800814a:	2320      	movs	r3, #32
 800814c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008150:	f8cd 800c 	str.w	r8, [sp, #12]
 8008154:	2330      	movs	r3, #48	@ 0x30
 8008156:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80082f4 <_svfiprintf_r+0x1e4>
 800815a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800815e:	f04f 0901 	mov.w	r9, #1
 8008162:	4623      	mov	r3, r4
 8008164:	469a      	mov	sl, r3
 8008166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800816a:	b10a      	cbz	r2, 8008170 <_svfiprintf_r+0x60>
 800816c:	2a25      	cmp	r2, #37	@ 0x25
 800816e:	d1f9      	bne.n	8008164 <_svfiprintf_r+0x54>
 8008170:	ebba 0b04 	subs.w	fp, sl, r4
 8008174:	d00b      	beq.n	800818e <_svfiprintf_r+0x7e>
 8008176:	465b      	mov	r3, fp
 8008178:	4622      	mov	r2, r4
 800817a:	4629      	mov	r1, r5
 800817c:	4638      	mov	r0, r7
 800817e:	f7ff ff6b 	bl	8008058 <__ssputs_r>
 8008182:	3001      	adds	r0, #1
 8008184:	f000 80a7 	beq.w	80082d6 <_svfiprintf_r+0x1c6>
 8008188:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800818a:	445a      	add	r2, fp
 800818c:	9209      	str	r2, [sp, #36]	@ 0x24
 800818e:	f89a 3000 	ldrb.w	r3, [sl]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 809f 	beq.w	80082d6 <_svfiprintf_r+0x1c6>
 8008198:	2300      	movs	r3, #0
 800819a:	f04f 32ff 	mov.w	r2, #4294967295
 800819e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081a2:	f10a 0a01 	add.w	sl, sl, #1
 80081a6:	9304      	str	r3, [sp, #16]
 80081a8:	9307      	str	r3, [sp, #28]
 80081aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80081b0:	4654      	mov	r4, sl
 80081b2:	2205      	movs	r2, #5
 80081b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b8:	484e      	ldr	r0, [pc, #312]	@ (80082f4 <_svfiprintf_r+0x1e4>)
 80081ba:	f7f8 f831 	bl	8000220 <memchr>
 80081be:	9a04      	ldr	r2, [sp, #16]
 80081c0:	b9d8      	cbnz	r0, 80081fa <_svfiprintf_r+0xea>
 80081c2:	06d0      	lsls	r0, r2, #27
 80081c4:	bf44      	itt	mi
 80081c6:	2320      	movmi	r3, #32
 80081c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081cc:	0711      	lsls	r1, r2, #28
 80081ce:	bf44      	itt	mi
 80081d0:	232b      	movmi	r3, #43	@ 0x2b
 80081d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081d6:	f89a 3000 	ldrb.w	r3, [sl]
 80081da:	2b2a      	cmp	r3, #42	@ 0x2a
 80081dc:	d015      	beq.n	800820a <_svfiprintf_r+0xfa>
 80081de:	9a07      	ldr	r2, [sp, #28]
 80081e0:	4654      	mov	r4, sl
 80081e2:	2000      	movs	r0, #0
 80081e4:	f04f 0c0a 	mov.w	ip, #10
 80081e8:	4621      	mov	r1, r4
 80081ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ee:	3b30      	subs	r3, #48	@ 0x30
 80081f0:	2b09      	cmp	r3, #9
 80081f2:	d94b      	bls.n	800828c <_svfiprintf_r+0x17c>
 80081f4:	b1b0      	cbz	r0, 8008224 <_svfiprintf_r+0x114>
 80081f6:	9207      	str	r2, [sp, #28]
 80081f8:	e014      	b.n	8008224 <_svfiprintf_r+0x114>
 80081fa:	eba0 0308 	sub.w	r3, r0, r8
 80081fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008202:	4313      	orrs	r3, r2
 8008204:	9304      	str	r3, [sp, #16]
 8008206:	46a2      	mov	sl, r4
 8008208:	e7d2      	b.n	80081b0 <_svfiprintf_r+0xa0>
 800820a:	9b03      	ldr	r3, [sp, #12]
 800820c:	1d19      	adds	r1, r3, #4
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	9103      	str	r1, [sp, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	bfbb      	ittet	lt
 8008216:	425b      	neglt	r3, r3
 8008218:	f042 0202 	orrlt.w	r2, r2, #2
 800821c:	9307      	strge	r3, [sp, #28]
 800821e:	9307      	strlt	r3, [sp, #28]
 8008220:	bfb8      	it	lt
 8008222:	9204      	strlt	r2, [sp, #16]
 8008224:	7823      	ldrb	r3, [r4, #0]
 8008226:	2b2e      	cmp	r3, #46	@ 0x2e
 8008228:	d10a      	bne.n	8008240 <_svfiprintf_r+0x130>
 800822a:	7863      	ldrb	r3, [r4, #1]
 800822c:	2b2a      	cmp	r3, #42	@ 0x2a
 800822e:	d132      	bne.n	8008296 <_svfiprintf_r+0x186>
 8008230:	9b03      	ldr	r3, [sp, #12]
 8008232:	1d1a      	adds	r2, r3, #4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	9203      	str	r2, [sp, #12]
 8008238:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800823c:	3402      	adds	r4, #2
 800823e:	9305      	str	r3, [sp, #20]
 8008240:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008304 <_svfiprintf_r+0x1f4>
 8008244:	7821      	ldrb	r1, [r4, #0]
 8008246:	2203      	movs	r2, #3
 8008248:	4650      	mov	r0, sl
 800824a:	f7f7 ffe9 	bl	8000220 <memchr>
 800824e:	b138      	cbz	r0, 8008260 <_svfiprintf_r+0x150>
 8008250:	9b04      	ldr	r3, [sp, #16]
 8008252:	eba0 000a 	sub.w	r0, r0, sl
 8008256:	2240      	movs	r2, #64	@ 0x40
 8008258:	4082      	lsls	r2, r0
 800825a:	4313      	orrs	r3, r2
 800825c:	3401      	adds	r4, #1
 800825e:	9304      	str	r3, [sp, #16]
 8008260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008264:	4824      	ldr	r0, [pc, #144]	@ (80082f8 <_svfiprintf_r+0x1e8>)
 8008266:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800826a:	2206      	movs	r2, #6
 800826c:	f7f7 ffd8 	bl	8000220 <memchr>
 8008270:	2800      	cmp	r0, #0
 8008272:	d036      	beq.n	80082e2 <_svfiprintf_r+0x1d2>
 8008274:	4b21      	ldr	r3, [pc, #132]	@ (80082fc <_svfiprintf_r+0x1ec>)
 8008276:	bb1b      	cbnz	r3, 80082c0 <_svfiprintf_r+0x1b0>
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	3307      	adds	r3, #7
 800827c:	f023 0307 	bic.w	r3, r3, #7
 8008280:	3308      	adds	r3, #8
 8008282:	9303      	str	r3, [sp, #12]
 8008284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008286:	4433      	add	r3, r6
 8008288:	9309      	str	r3, [sp, #36]	@ 0x24
 800828a:	e76a      	b.n	8008162 <_svfiprintf_r+0x52>
 800828c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008290:	460c      	mov	r4, r1
 8008292:	2001      	movs	r0, #1
 8008294:	e7a8      	b.n	80081e8 <_svfiprintf_r+0xd8>
 8008296:	2300      	movs	r3, #0
 8008298:	3401      	adds	r4, #1
 800829a:	9305      	str	r3, [sp, #20]
 800829c:	4619      	mov	r1, r3
 800829e:	f04f 0c0a 	mov.w	ip, #10
 80082a2:	4620      	mov	r0, r4
 80082a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a8:	3a30      	subs	r2, #48	@ 0x30
 80082aa:	2a09      	cmp	r2, #9
 80082ac:	d903      	bls.n	80082b6 <_svfiprintf_r+0x1a6>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0c6      	beq.n	8008240 <_svfiprintf_r+0x130>
 80082b2:	9105      	str	r1, [sp, #20]
 80082b4:	e7c4      	b.n	8008240 <_svfiprintf_r+0x130>
 80082b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80082ba:	4604      	mov	r4, r0
 80082bc:	2301      	movs	r3, #1
 80082be:	e7f0      	b.n	80082a2 <_svfiprintf_r+0x192>
 80082c0:	ab03      	add	r3, sp, #12
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	462a      	mov	r2, r5
 80082c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008300 <_svfiprintf_r+0x1f0>)
 80082c8:	a904      	add	r1, sp, #16
 80082ca:	4638      	mov	r0, r7
 80082cc:	f3af 8000 	nop.w
 80082d0:	1c42      	adds	r2, r0, #1
 80082d2:	4606      	mov	r6, r0
 80082d4:	d1d6      	bne.n	8008284 <_svfiprintf_r+0x174>
 80082d6:	89ab      	ldrh	r3, [r5, #12]
 80082d8:	065b      	lsls	r3, r3, #25
 80082da:	f53f af2d 	bmi.w	8008138 <_svfiprintf_r+0x28>
 80082de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082e0:	e72c      	b.n	800813c <_svfiprintf_r+0x2c>
 80082e2:	ab03      	add	r3, sp, #12
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	462a      	mov	r2, r5
 80082e8:	4b05      	ldr	r3, [pc, #20]	@ (8008300 <_svfiprintf_r+0x1f0>)
 80082ea:	a904      	add	r1, sp, #16
 80082ec:	4638      	mov	r0, r7
 80082ee:	f000 f879 	bl	80083e4 <_printf_i>
 80082f2:	e7ed      	b.n	80082d0 <_svfiprintf_r+0x1c0>
 80082f4:	08008a18 	.word	0x08008a18
 80082f8:	08008a22 	.word	0x08008a22
 80082fc:	00000000 	.word	0x00000000
 8008300:	08008059 	.word	0x08008059
 8008304:	08008a1e 	.word	0x08008a1e

08008308 <_printf_common>:
 8008308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800830c:	4616      	mov	r6, r2
 800830e:	4698      	mov	r8, r3
 8008310:	688a      	ldr	r2, [r1, #8]
 8008312:	690b      	ldr	r3, [r1, #16]
 8008314:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008318:	4293      	cmp	r3, r2
 800831a:	bfb8      	it	lt
 800831c:	4613      	movlt	r3, r2
 800831e:	6033      	str	r3, [r6, #0]
 8008320:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008324:	4607      	mov	r7, r0
 8008326:	460c      	mov	r4, r1
 8008328:	b10a      	cbz	r2, 800832e <_printf_common+0x26>
 800832a:	3301      	adds	r3, #1
 800832c:	6033      	str	r3, [r6, #0]
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	0699      	lsls	r1, r3, #26
 8008332:	bf42      	ittt	mi
 8008334:	6833      	ldrmi	r3, [r6, #0]
 8008336:	3302      	addmi	r3, #2
 8008338:	6033      	strmi	r3, [r6, #0]
 800833a:	6825      	ldr	r5, [r4, #0]
 800833c:	f015 0506 	ands.w	r5, r5, #6
 8008340:	d106      	bne.n	8008350 <_printf_common+0x48>
 8008342:	f104 0a19 	add.w	sl, r4, #25
 8008346:	68e3      	ldr	r3, [r4, #12]
 8008348:	6832      	ldr	r2, [r6, #0]
 800834a:	1a9b      	subs	r3, r3, r2
 800834c:	42ab      	cmp	r3, r5
 800834e:	dc26      	bgt.n	800839e <_printf_common+0x96>
 8008350:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008354:	6822      	ldr	r2, [r4, #0]
 8008356:	3b00      	subs	r3, #0
 8008358:	bf18      	it	ne
 800835a:	2301      	movne	r3, #1
 800835c:	0692      	lsls	r2, r2, #26
 800835e:	d42b      	bmi.n	80083b8 <_printf_common+0xb0>
 8008360:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008364:	4641      	mov	r1, r8
 8008366:	4638      	mov	r0, r7
 8008368:	47c8      	blx	r9
 800836a:	3001      	adds	r0, #1
 800836c:	d01e      	beq.n	80083ac <_printf_common+0xa4>
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	6922      	ldr	r2, [r4, #16]
 8008372:	f003 0306 	and.w	r3, r3, #6
 8008376:	2b04      	cmp	r3, #4
 8008378:	bf02      	ittt	eq
 800837a:	68e5      	ldreq	r5, [r4, #12]
 800837c:	6833      	ldreq	r3, [r6, #0]
 800837e:	1aed      	subeq	r5, r5, r3
 8008380:	68a3      	ldr	r3, [r4, #8]
 8008382:	bf0c      	ite	eq
 8008384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008388:	2500      	movne	r5, #0
 800838a:	4293      	cmp	r3, r2
 800838c:	bfc4      	itt	gt
 800838e:	1a9b      	subgt	r3, r3, r2
 8008390:	18ed      	addgt	r5, r5, r3
 8008392:	2600      	movs	r6, #0
 8008394:	341a      	adds	r4, #26
 8008396:	42b5      	cmp	r5, r6
 8008398:	d11a      	bne.n	80083d0 <_printf_common+0xc8>
 800839a:	2000      	movs	r0, #0
 800839c:	e008      	b.n	80083b0 <_printf_common+0xa8>
 800839e:	2301      	movs	r3, #1
 80083a0:	4652      	mov	r2, sl
 80083a2:	4641      	mov	r1, r8
 80083a4:	4638      	mov	r0, r7
 80083a6:	47c8      	blx	r9
 80083a8:	3001      	adds	r0, #1
 80083aa:	d103      	bne.n	80083b4 <_printf_common+0xac>
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295
 80083b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b4:	3501      	adds	r5, #1
 80083b6:	e7c6      	b.n	8008346 <_printf_common+0x3e>
 80083b8:	18e1      	adds	r1, r4, r3
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	2030      	movs	r0, #48	@ 0x30
 80083be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083c2:	4422      	add	r2, r4
 80083c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083cc:	3302      	adds	r3, #2
 80083ce:	e7c7      	b.n	8008360 <_printf_common+0x58>
 80083d0:	2301      	movs	r3, #1
 80083d2:	4622      	mov	r2, r4
 80083d4:	4641      	mov	r1, r8
 80083d6:	4638      	mov	r0, r7
 80083d8:	47c8      	blx	r9
 80083da:	3001      	adds	r0, #1
 80083dc:	d0e6      	beq.n	80083ac <_printf_common+0xa4>
 80083de:	3601      	adds	r6, #1
 80083e0:	e7d9      	b.n	8008396 <_printf_common+0x8e>
	...

080083e4 <_printf_i>:
 80083e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083e8:	7e0f      	ldrb	r7, [r1, #24]
 80083ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083ec:	2f78      	cmp	r7, #120	@ 0x78
 80083ee:	4691      	mov	r9, r2
 80083f0:	4680      	mov	r8, r0
 80083f2:	460c      	mov	r4, r1
 80083f4:	469a      	mov	sl, r3
 80083f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083fa:	d807      	bhi.n	800840c <_printf_i+0x28>
 80083fc:	2f62      	cmp	r7, #98	@ 0x62
 80083fe:	d80a      	bhi.n	8008416 <_printf_i+0x32>
 8008400:	2f00      	cmp	r7, #0
 8008402:	f000 80d2 	beq.w	80085aa <_printf_i+0x1c6>
 8008406:	2f58      	cmp	r7, #88	@ 0x58
 8008408:	f000 80b9 	beq.w	800857e <_printf_i+0x19a>
 800840c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008410:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008414:	e03a      	b.n	800848c <_printf_i+0xa8>
 8008416:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800841a:	2b15      	cmp	r3, #21
 800841c:	d8f6      	bhi.n	800840c <_printf_i+0x28>
 800841e:	a101      	add	r1, pc, #4	@ (adr r1, 8008424 <_printf_i+0x40>)
 8008420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008424:	0800847d 	.word	0x0800847d
 8008428:	08008491 	.word	0x08008491
 800842c:	0800840d 	.word	0x0800840d
 8008430:	0800840d 	.word	0x0800840d
 8008434:	0800840d 	.word	0x0800840d
 8008438:	0800840d 	.word	0x0800840d
 800843c:	08008491 	.word	0x08008491
 8008440:	0800840d 	.word	0x0800840d
 8008444:	0800840d 	.word	0x0800840d
 8008448:	0800840d 	.word	0x0800840d
 800844c:	0800840d 	.word	0x0800840d
 8008450:	08008591 	.word	0x08008591
 8008454:	080084bb 	.word	0x080084bb
 8008458:	0800854b 	.word	0x0800854b
 800845c:	0800840d 	.word	0x0800840d
 8008460:	0800840d 	.word	0x0800840d
 8008464:	080085b3 	.word	0x080085b3
 8008468:	0800840d 	.word	0x0800840d
 800846c:	080084bb 	.word	0x080084bb
 8008470:	0800840d 	.word	0x0800840d
 8008474:	0800840d 	.word	0x0800840d
 8008478:	08008553 	.word	0x08008553
 800847c:	6833      	ldr	r3, [r6, #0]
 800847e:	1d1a      	adds	r2, r3, #4
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6032      	str	r2, [r6, #0]
 8008484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008488:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800848c:	2301      	movs	r3, #1
 800848e:	e09d      	b.n	80085cc <_printf_i+0x1e8>
 8008490:	6833      	ldr	r3, [r6, #0]
 8008492:	6820      	ldr	r0, [r4, #0]
 8008494:	1d19      	adds	r1, r3, #4
 8008496:	6031      	str	r1, [r6, #0]
 8008498:	0606      	lsls	r6, r0, #24
 800849a:	d501      	bpl.n	80084a0 <_printf_i+0xbc>
 800849c:	681d      	ldr	r5, [r3, #0]
 800849e:	e003      	b.n	80084a8 <_printf_i+0xc4>
 80084a0:	0645      	lsls	r5, r0, #25
 80084a2:	d5fb      	bpl.n	800849c <_printf_i+0xb8>
 80084a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084a8:	2d00      	cmp	r5, #0
 80084aa:	da03      	bge.n	80084b4 <_printf_i+0xd0>
 80084ac:	232d      	movs	r3, #45	@ 0x2d
 80084ae:	426d      	negs	r5, r5
 80084b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084b4:	4859      	ldr	r0, [pc, #356]	@ (800861c <_printf_i+0x238>)
 80084b6:	230a      	movs	r3, #10
 80084b8:	e011      	b.n	80084de <_printf_i+0xfa>
 80084ba:	6821      	ldr	r1, [r4, #0]
 80084bc:	6833      	ldr	r3, [r6, #0]
 80084be:	0608      	lsls	r0, r1, #24
 80084c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80084c4:	d402      	bmi.n	80084cc <_printf_i+0xe8>
 80084c6:	0649      	lsls	r1, r1, #25
 80084c8:	bf48      	it	mi
 80084ca:	b2ad      	uxthmi	r5, r5
 80084cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80084ce:	4853      	ldr	r0, [pc, #332]	@ (800861c <_printf_i+0x238>)
 80084d0:	6033      	str	r3, [r6, #0]
 80084d2:	bf14      	ite	ne
 80084d4:	230a      	movne	r3, #10
 80084d6:	2308      	moveq	r3, #8
 80084d8:	2100      	movs	r1, #0
 80084da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084de:	6866      	ldr	r6, [r4, #4]
 80084e0:	60a6      	str	r6, [r4, #8]
 80084e2:	2e00      	cmp	r6, #0
 80084e4:	bfa2      	ittt	ge
 80084e6:	6821      	ldrge	r1, [r4, #0]
 80084e8:	f021 0104 	bicge.w	r1, r1, #4
 80084ec:	6021      	strge	r1, [r4, #0]
 80084ee:	b90d      	cbnz	r5, 80084f4 <_printf_i+0x110>
 80084f0:	2e00      	cmp	r6, #0
 80084f2:	d04b      	beq.n	800858c <_printf_i+0x1a8>
 80084f4:	4616      	mov	r6, r2
 80084f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80084fa:	fb03 5711 	mls	r7, r3, r1, r5
 80084fe:	5dc7      	ldrb	r7, [r0, r7]
 8008500:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008504:	462f      	mov	r7, r5
 8008506:	42bb      	cmp	r3, r7
 8008508:	460d      	mov	r5, r1
 800850a:	d9f4      	bls.n	80084f6 <_printf_i+0x112>
 800850c:	2b08      	cmp	r3, #8
 800850e:	d10b      	bne.n	8008528 <_printf_i+0x144>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	07df      	lsls	r7, r3, #31
 8008514:	d508      	bpl.n	8008528 <_printf_i+0x144>
 8008516:	6923      	ldr	r3, [r4, #16]
 8008518:	6861      	ldr	r1, [r4, #4]
 800851a:	4299      	cmp	r1, r3
 800851c:	bfde      	ittt	le
 800851e:	2330      	movle	r3, #48	@ 0x30
 8008520:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008524:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008528:	1b92      	subs	r2, r2, r6
 800852a:	6122      	str	r2, [r4, #16]
 800852c:	f8cd a000 	str.w	sl, [sp]
 8008530:	464b      	mov	r3, r9
 8008532:	aa03      	add	r2, sp, #12
 8008534:	4621      	mov	r1, r4
 8008536:	4640      	mov	r0, r8
 8008538:	f7ff fee6 	bl	8008308 <_printf_common>
 800853c:	3001      	adds	r0, #1
 800853e:	d14a      	bne.n	80085d6 <_printf_i+0x1f2>
 8008540:	f04f 30ff 	mov.w	r0, #4294967295
 8008544:	b004      	add	sp, #16
 8008546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	f043 0320 	orr.w	r3, r3, #32
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	4833      	ldr	r0, [pc, #204]	@ (8008620 <_printf_i+0x23c>)
 8008554:	2778      	movs	r7, #120	@ 0x78
 8008556:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	6831      	ldr	r1, [r6, #0]
 800855e:	061f      	lsls	r7, r3, #24
 8008560:	f851 5b04 	ldr.w	r5, [r1], #4
 8008564:	d402      	bmi.n	800856c <_printf_i+0x188>
 8008566:	065f      	lsls	r7, r3, #25
 8008568:	bf48      	it	mi
 800856a:	b2ad      	uxthmi	r5, r5
 800856c:	6031      	str	r1, [r6, #0]
 800856e:	07d9      	lsls	r1, r3, #31
 8008570:	bf44      	itt	mi
 8008572:	f043 0320 	orrmi.w	r3, r3, #32
 8008576:	6023      	strmi	r3, [r4, #0]
 8008578:	b11d      	cbz	r5, 8008582 <_printf_i+0x19e>
 800857a:	2310      	movs	r3, #16
 800857c:	e7ac      	b.n	80084d8 <_printf_i+0xf4>
 800857e:	4827      	ldr	r0, [pc, #156]	@ (800861c <_printf_i+0x238>)
 8008580:	e7e9      	b.n	8008556 <_printf_i+0x172>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	f023 0320 	bic.w	r3, r3, #32
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	e7f6      	b.n	800857a <_printf_i+0x196>
 800858c:	4616      	mov	r6, r2
 800858e:	e7bd      	b.n	800850c <_printf_i+0x128>
 8008590:	6833      	ldr	r3, [r6, #0]
 8008592:	6825      	ldr	r5, [r4, #0]
 8008594:	6961      	ldr	r1, [r4, #20]
 8008596:	1d18      	adds	r0, r3, #4
 8008598:	6030      	str	r0, [r6, #0]
 800859a:	062e      	lsls	r6, r5, #24
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	d501      	bpl.n	80085a4 <_printf_i+0x1c0>
 80085a0:	6019      	str	r1, [r3, #0]
 80085a2:	e002      	b.n	80085aa <_printf_i+0x1c6>
 80085a4:	0668      	lsls	r0, r5, #25
 80085a6:	d5fb      	bpl.n	80085a0 <_printf_i+0x1bc>
 80085a8:	8019      	strh	r1, [r3, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	6123      	str	r3, [r4, #16]
 80085ae:	4616      	mov	r6, r2
 80085b0:	e7bc      	b.n	800852c <_printf_i+0x148>
 80085b2:	6833      	ldr	r3, [r6, #0]
 80085b4:	1d1a      	adds	r2, r3, #4
 80085b6:	6032      	str	r2, [r6, #0]
 80085b8:	681e      	ldr	r6, [r3, #0]
 80085ba:	6862      	ldr	r2, [r4, #4]
 80085bc:	2100      	movs	r1, #0
 80085be:	4630      	mov	r0, r6
 80085c0:	f7f7 fe2e 	bl	8000220 <memchr>
 80085c4:	b108      	cbz	r0, 80085ca <_printf_i+0x1e6>
 80085c6:	1b80      	subs	r0, r0, r6
 80085c8:	6060      	str	r0, [r4, #4]
 80085ca:	6863      	ldr	r3, [r4, #4]
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	2300      	movs	r3, #0
 80085d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085d4:	e7aa      	b.n	800852c <_printf_i+0x148>
 80085d6:	6923      	ldr	r3, [r4, #16]
 80085d8:	4632      	mov	r2, r6
 80085da:	4649      	mov	r1, r9
 80085dc:	4640      	mov	r0, r8
 80085de:	47d0      	blx	sl
 80085e0:	3001      	adds	r0, #1
 80085e2:	d0ad      	beq.n	8008540 <_printf_i+0x15c>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	079b      	lsls	r3, r3, #30
 80085e8:	d413      	bmi.n	8008612 <_printf_i+0x22e>
 80085ea:	68e0      	ldr	r0, [r4, #12]
 80085ec:	9b03      	ldr	r3, [sp, #12]
 80085ee:	4298      	cmp	r0, r3
 80085f0:	bfb8      	it	lt
 80085f2:	4618      	movlt	r0, r3
 80085f4:	e7a6      	b.n	8008544 <_printf_i+0x160>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4632      	mov	r2, r6
 80085fa:	4649      	mov	r1, r9
 80085fc:	4640      	mov	r0, r8
 80085fe:	47d0      	blx	sl
 8008600:	3001      	adds	r0, #1
 8008602:	d09d      	beq.n	8008540 <_printf_i+0x15c>
 8008604:	3501      	adds	r5, #1
 8008606:	68e3      	ldr	r3, [r4, #12]
 8008608:	9903      	ldr	r1, [sp, #12]
 800860a:	1a5b      	subs	r3, r3, r1
 800860c:	42ab      	cmp	r3, r5
 800860e:	dcf2      	bgt.n	80085f6 <_printf_i+0x212>
 8008610:	e7eb      	b.n	80085ea <_printf_i+0x206>
 8008612:	2500      	movs	r5, #0
 8008614:	f104 0619 	add.w	r6, r4, #25
 8008618:	e7f5      	b.n	8008606 <_printf_i+0x222>
 800861a:	bf00      	nop
 800861c:	08008a29 	.word	0x08008a29
 8008620:	08008a3a 	.word	0x08008a3a

08008624 <__sflush_r>:
 8008624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800862c:	0716      	lsls	r6, r2, #28
 800862e:	4605      	mov	r5, r0
 8008630:	460c      	mov	r4, r1
 8008632:	d454      	bmi.n	80086de <__sflush_r+0xba>
 8008634:	684b      	ldr	r3, [r1, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	dc02      	bgt.n	8008640 <__sflush_r+0x1c>
 800863a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800863c:	2b00      	cmp	r3, #0
 800863e:	dd48      	ble.n	80086d2 <__sflush_r+0xae>
 8008640:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008642:	2e00      	cmp	r6, #0
 8008644:	d045      	beq.n	80086d2 <__sflush_r+0xae>
 8008646:	2300      	movs	r3, #0
 8008648:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800864c:	682f      	ldr	r7, [r5, #0]
 800864e:	6a21      	ldr	r1, [r4, #32]
 8008650:	602b      	str	r3, [r5, #0]
 8008652:	d030      	beq.n	80086b6 <__sflush_r+0x92>
 8008654:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	0759      	lsls	r1, r3, #29
 800865a:	d505      	bpl.n	8008668 <__sflush_r+0x44>
 800865c:	6863      	ldr	r3, [r4, #4]
 800865e:	1ad2      	subs	r2, r2, r3
 8008660:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008662:	b10b      	cbz	r3, 8008668 <__sflush_r+0x44>
 8008664:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008666:	1ad2      	subs	r2, r2, r3
 8008668:	2300      	movs	r3, #0
 800866a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800866c:	6a21      	ldr	r1, [r4, #32]
 800866e:	4628      	mov	r0, r5
 8008670:	47b0      	blx	r6
 8008672:	1c43      	adds	r3, r0, #1
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	d106      	bne.n	8008686 <__sflush_r+0x62>
 8008678:	6829      	ldr	r1, [r5, #0]
 800867a:	291d      	cmp	r1, #29
 800867c:	d82b      	bhi.n	80086d6 <__sflush_r+0xb2>
 800867e:	4a2a      	ldr	r2, [pc, #168]	@ (8008728 <__sflush_r+0x104>)
 8008680:	410a      	asrs	r2, r1
 8008682:	07d6      	lsls	r6, r2, #31
 8008684:	d427      	bmi.n	80086d6 <__sflush_r+0xb2>
 8008686:	2200      	movs	r2, #0
 8008688:	6062      	str	r2, [r4, #4]
 800868a:	04d9      	lsls	r1, r3, #19
 800868c:	6922      	ldr	r2, [r4, #16]
 800868e:	6022      	str	r2, [r4, #0]
 8008690:	d504      	bpl.n	800869c <__sflush_r+0x78>
 8008692:	1c42      	adds	r2, r0, #1
 8008694:	d101      	bne.n	800869a <__sflush_r+0x76>
 8008696:	682b      	ldr	r3, [r5, #0]
 8008698:	b903      	cbnz	r3, 800869c <__sflush_r+0x78>
 800869a:	6560      	str	r0, [r4, #84]	@ 0x54
 800869c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800869e:	602f      	str	r7, [r5, #0]
 80086a0:	b1b9      	cbz	r1, 80086d2 <__sflush_r+0xae>
 80086a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086a6:	4299      	cmp	r1, r3
 80086a8:	d002      	beq.n	80086b0 <__sflush_r+0x8c>
 80086aa:	4628      	mov	r0, r5
 80086ac:	f7ff fbdc 	bl	8007e68 <_free_r>
 80086b0:	2300      	movs	r3, #0
 80086b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80086b4:	e00d      	b.n	80086d2 <__sflush_r+0xae>
 80086b6:	2301      	movs	r3, #1
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b0      	blx	r6
 80086bc:	4602      	mov	r2, r0
 80086be:	1c50      	adds	r0, r2, #1
 80086c0:	d1c9      	bne.n	8008656 <__sflush_r+0x32>
 80086c2:	682b      	ldr	r3, [r5, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d0c6      	beq.n	8008656 <__sflush_r+0x32>
 80086c8:	2b1d      	cmp	r3, #29
 80086ca:	d001      	beq.n	80086d0 <__sflush_r+0xac>
 80086cc:	2b16      	cmp	r3, #22
 80086ce:	d11e      	bne.n	800870e <__sflush_r+0xea>
 80086d0:	602f      	str	r7, [r5, #0]
 80086d2:	2000      	movs	r0, #0
 80086d4:	e022      	b.n	800871c <__sflush_r+0xf8>
 80086d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086da:	b21b      	sxth	r3, r3
 80086dc:	e01b      	b.n	8008716 <__sflush_r+0xf2>
 80086de:	690f      	ldr	r7, [r1, #16]
 80086e0:	2f00      	cmp	r7, #0
 80086e2:	d0f6      	beq.n	80086d2 <__sflush_r+0xae>
 80086e4:	0793      	lsls	r3, r2, #30
 80086e6:	680e      	ldr	r6, [r1, #0]
 80086e8:	bf08      	it	eq
 80086ea:	694b      	ldreq	r3, [r1, #20]
 80086ec:	600f      	str	r7, [r1, #0]
 80086ee:	bf18      	it	ne
 80086f0:	2300      	movne	r3, #0
 80086f2:	eba6 0807 	sub.w	r8, r6, r7
 80086f6:	608b      	str	r3, [r1, #8]
 80086f8:	f1b8 0f00 	cmp.w	r8, #0
 80086fc:	dde9      	ble.n	80086d2 <__sflush_r+0xae>
 80086fe:	6a21      	ldr	r1, [r4, #32]
 8008700:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008702:	4643      	mov	r3, r8
 8008704:	463a      	mov	r2, r7
 8008706:	4628      	mov	r0, r5
 8008708:	47b0      	blx	r6
 800870a:	2800      	cmp	r0, #0
 800870c:	dc08      	bgt.n	8008720 <__sflush_r+0xfc>
 800870e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008716:	81a3      	strh	r3, [r4, #12]
 8008718:	f04f 30ff 	mov.w	r0, #4294967295
 800871c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008720:	4407      	add	r7, r0
 8008722:	eba8 0800 	sub.w	r8, r8, r0
 8008726:	e7e7      	b.n	80086f8 <__sflush_r+0xd4>
 8008728:	dfbffffe 	.word	0xdfbffffe

0800872c <_fflush_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	690b      	ldr	r3, [r1, #16]
 8008730:	4605      	mov	r5, r0
 8008732:	460c      	mov	r4, r1
 8008734:	b913      	cbnz	r3, 800873c <_fflush_r+0x10>
 8008736:	2500      	movs	r5, #0
 8008738:	4628      	mov	r0, r5
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	b118      	cbz	r0, 8008746 <_fflush_r+0x1a>
 800873e:	6a03      	ldr	r3, [r0, #32]
 8008740:	b90b      	cbnz	r3, 8008746 <_fflush_r+0x1a>
 8008742:	f7ff f911 	bl	8007968 <__sinit>
 8008746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0f3      	beq.n	8008736 <_fflush_r+0xa>
 800874e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008750:	07d0      	lsls	r0, r2, #31
 8008752:	d404      	bmi.n	800875e <_fflush_r+0x32>
 8008754:	0599      	lsls	r1, r3, #22
 8008756:	d402      	bmi.n	800875e <_fflush_r+0x32>
 8008758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800875a:	f7ff fb74 	bl	8007e46 <__retarget_lock_acquire_recursive>
 800875e:	4628      	mov	r0, r5
 8008760:	4621      	mov	r1, r4
 8008762:	f7ff ff5f 	bl	8008624 <__sflush_r>
 8008766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008768:	07da      	lsls	r2, r3, #31
 800876a:	4605      	mov	r5, r0
 800876c:	d4e4      	bmi.n	8008738 <_fflush_r+0xc>
 800876e:	89a3      	ldrh	r3, [r4, #12]
 8008770:	059b      	lsls	r3, r3, #22
 8008772:	d4e1      	bmi.n	8008738 <_fflush_r+0xc>
 8008774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008776:	f7ff fb67 	bl	8007e48 <__retarget_lock_release_recursive>
 800877a:	e7dd      	b.n	8008738 <_fflush_r+0xc>

0800877c <__swhatbuf_r>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	460c      	mov	r4, r1
 8008780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008784:	2900      	cmp	r1, #0
 8008786:	b096      	sub	sp, #88	@ 0x58
 8008788:	4615      	mov	r5, r2
 800878a:	461e      	mov	r6, r3
 800878c:	da0d      	bge.n	80087aa <__swhatbuf_r+0x2e>
 800878e:	89a3      	ldrh	r3, [r4, #12]
 8008790:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008794:	f04f 0100 	mov.w	r1, #0
 8008798:	bf14      	ite	ne
 800879a:	2340      	movne	r3, #64	@ 0x40
 800879c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80087a0:	2000      	movs	r0, #0
 80087a2:	6031      	str	r1, [r6, #0]
 80087a4:	602b      	str	r3, [r5, #0]
 80087a6:	b016      	add	sp, #88	@ 0x58
 80087a8:	bd70      	pop	{r4, r5, r6, pc}
 80087aa:	466a      	mov	r2, sp
 80087ac:	f000 f862 	bl	8008874 <_fstat_r>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	dbec      	blt.n	800878e <__swhatbuf_r+0x12>
 80087b4:	9901      	ldr	r1, [sp, #4]
 80087b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087be:	4259      	negs	r1, r3
 80087c0:	4159      	adcs	r1, r3
 80087c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087c6:	e7eb      	b.n	80087a0 <__swhatbuf_r+0x24>

080087c8 <__smakebuf_r>:
 80087c8:	898b      	ldrh	r3, [r1, #12]
 80087ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087cc:	079d      	lsls	r5, r3, #30
 80087ce:	4606      	mov	r6, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	d507      	bpl.n	80087e4 <__smakebuf_r+0x1c>
 80087d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	6123      	str	r3, [r4, #16]
 80087dc:	2301      	movs	r3, #1
 80087de:	6163      	str	r3, [r4, #20]
 80087e0:	b003      	add	sp, #12
 80087e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087e4:	ab01      	add	r3, sp, #4
 80087e6:	466a      	mov	r2, sp
 80087e8:	f7ff ffc8 	bl	800877c <__swhatbuf_r>
 80087ec:	9f00      	ldr	r7, [sp, #0]
 80087ee:	4605      	mov	r5, r0
 80087f0:	4639      	mov	r1, r7
 80087f2:	4630      	mov	r0, r6
 80087f4:	f7ff fba4 	bl	8007f40 <_malloc_r>
 80087f8:	b948      	cbnz	r0, 800880e <__smakebuf_r+0x46>
 80087fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087fe:	059a      	lsls	r2, r3, #22
 8008800:	d4ee      	bmi.n	80087e0 <__smakebuf_r+0x18>
 8008802:	f023 0303 	bic.w	r3, r3, #3
 8008806:	f043 0302 	orr.w	r3, r3, #2
 800880a:	81a3      	strh	r3, [r4, #12]
 800880c:	e7e2      	b.n	80087d4 <__smakebuf_r+0xc>
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	6020      	str	r0, [r4, #0]
 8008812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008816:	81a3      	strh	r3, [r4, #12]
 8008818:	9b01      	ldr	r3, [sp, #4]
 800881a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800881e:	b15b      	cbz	r3, 8008838 <__smakebuf_r+0x70>
 8008820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008824:	4630      	mov	r0, r6
 8008826:	f000 f837 	bl	8008898 <_isatty_r>
 800882a:	b128      	cbz	r0, 8008838 <__smakebuf_r+0x70>
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	f023 0303 	bic.w	r3, r3, #3
 8008832:	f043 0301 	orr.w	r3, r3, #1
 8008836:	81a3      	strh	r3, [r4, #12]
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	431d      	orrs	r5, r3
 800883c:	81a5      	strh	r5, [r4, #12]
 800883e:	e7cf      	b.n	80087e0 <__smakebuf_r+0x18>

08008840 <memmove>:
 8008840:	4288      	cmp	r0, r1
 8008842:	b510      	push	{r4, lr}
 8008844:	eb01 0402 	add.w	r4, r1, r2
 8008848:	d902      	bls.n	8008850 <memmove+0x10>
 800884a:	4284      	cmp	r4, r0
 800884c:	4623      	mov	r3, r4
 800884e:	d807      	bhi.n	8008860 <memmove+0x20>
 8008850:	1e43      	subs	r3, r0, #1
 8008852:	42a1      	cmp	r1, r4
 8008854:	d008      	beq.n	8008868 <memmove+0x28>
 8008856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800885a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800885e:	e7f8      	b.n	8008852 <memmove+0x12>
 8008860:	4402      	add	r2, r0
 8008862:	4601      	mov	r1, r0
 8008864:	428a      	cmp	r2, r1
 8008866:	d100      	bne.n	800886a <memmove+0x2a>
 8008868:	bd10      	pop	{r4, pc}
 800886a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800886e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008872:	e7f7      	b.n	8008864 <memmove+0x24>

08008874 <_fstat_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d07      	ldr	r5, [pc, #28]	@ (8008894 <_fstat_r+0x20>)
 8008878:	2300      	movs	r3, #0
 800887a:	4604      	mov	r4, r0
 800887c:	4608      	mov	r0, r1
 800887e:	4611      	mov	r1, r2
 8008880:	602b      	str	r3, [r5, #0]
 8008882:	f7f8 fce0 	bl	8001246 <_fstat>
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	d102      	bne.n	8008890 <_fstat_r+0x1c>
 800888a:	682b      	ldr	r3, [r5, #0]
 800888c:	b103      	cbz	r3, 8008890 <_fstat_r+0x1c>
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	bd38      	pop	{r3, r4, r5, pc}
 8008892:	bf00      	nop
 8008894:	20004e90 	.word	0x20004e90

08008898 <_isatty_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4d06      	ldr	r5, [pc, #24]	@ (80088b4 <_isatty_r+0x1c>)
 800889c:	2300      	movs	r3, #0
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	602b      	str	r3, [r5, #0]
 80088a4:	f7f8 fcdf 	bl	8001266 <_isatty>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_isatty_r+0x1a>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_isatty_r+0x1a>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	20004e90 	.word	0x20004e90

080088b8 <_sbrk_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d06      	ldr	r5, [pc, #24]	@ (80088d4 <_sbrk_r+0x1c>)
 80088bc:	2300      	movs	r3, #0
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	f7f8 fce8 	bl	8001298 <_sbrk>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_sbrk_r+0x1a>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_sbrk_r+0x1a>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	20004e90 	.word	0x20004e90

080088d8 <_realloc_r>:
 80088d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088dc:	4680      	mov	r8, r0
 80088de:	4615      	mov	r5, r2
 80088e0:	460c      	mov	r4, r1
 80088e2:	b921      	cbnz	r1, 80088ee <_realloc_r+0x16>
 80088e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088e8:	4611      	mov	r1, r2
 80088ea:	f7ff bb29 	b.w	8007f40 <_malloc_r>
 80088ee:	b92a      	cbnz	r2, 80088fc <_realloc_r+0x24>
 80088f0:	f7ff faba 	bl	8007e68 <_free_r>
 80088f4:	2400      	movs	r4, #0
 80088f6:	4620      	mov	r0, r4
 80088f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fc:	f000 f81a 	bl	8008934 <_malloc_usable_size_r>
 8008900:	4285      	cmp	r5, r0
 8008902:	4606      	mov	r6, r0
 8008904:	d802      	bhi.n	800890c <_realloc_r+0x34>
 8008906:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800890a:	d8f4      	bhi.n	80088f6 <_realloc_r+0x1e>
 800890c:	4629      	mov	r1, r5
 800890e:	4640      	mov	r0, r8
 8008910:	f7ff fb16 	bl	8007f40 <_malloc_r>
 8008914:	4607      	mov	r7, r0
 8008916:	2800      	cmp	r0, #0
 8008918:	d0ec      	beq.n	80088f4 <_realloc_r+0x1c>
 800891a:	42b5      	cmp	r5, r6
 800891c:	462a      	mov	r2, r5
 800891e:	4621      	mov	r1, r4
 8008920:	bf28      	it	cs
 8008922:	4632      	movcs	r2, r6
 8008924:	f7ff fa91 	bl	8007e4a <memcpy>
 8008928:	4621      	mov	r1, r4
 800892a:	4640      	mov	r0, r8
 800892c:	f7ff fa9c 	bl	8007e68 <_free_r>
 8008930:	463c      	mov	r4, r7
 8008932:	e7e0      	b.n	80088f6 <_realloc_r+0x1e>

08008934 <_malloc_usable_size_r>:
 8008934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008938:	1f18      	subs	r0, r3, #4
 800893a:	2b00      	cmp	r3, #0
 800893c:	bfbc      	itt	lt
 800893e:	580b      	ldrlt	r3, [r1, r0]
 8008940:	18c0      	addlt	r0, r0, r3
 8008942:	4770      	bx	lr

08008944 <_init>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	bf00      	nop
 8008948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894a:	bc08      	pop	{r3}
 800894c:	469e      	mov	lr, r3
 800894e:	4770      	bx	lr

08008950 <_fini>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	bf00      	nop
 8008954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008956:	bc08      	pop	{r3}
 8008958:	469e      	mov	lr, r3
 800895a:	4770      	bx	lr
