
TP_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007584  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08007754  08007754  00008754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007894  08007894  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007894  08007894  00008894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800789c  0800789c  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800789c  0800789c  0000889c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078a0  080078a0  000088a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080078a4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c2c  2000006c  08007910  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c98  08007910  00009c98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab0c  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f5  00000000  00000000  00023ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  000275a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001081  00000000  00000000  00028ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ccf  00000000  00000000  00029b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae8e  00000000  00000000  00053838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdc13  00000000  00000000  0006e6c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c2d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e78  00000000  00000000  0016c31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00172194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800773c 	.word	0x0800773c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800773c 	.word	0x0800773c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000504:	4a04      	ldr	r2, [pc, #16]	@ (8000518 <MX_FREERTOS_Init+0x18>)
 8000506:	2100      	movs	r1, #0
 8000508:	4804      	ldr	r0, [pc, #16]	@ (800051c <MX_FREERTOS_Init+0x1c>)
 800050a:	f003 fbcd 	bl	8003ca8 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a03      	ldr	r2, [pc, #12]	@ (8000520 <MX_FREERTOS_Init+0x20>)
 8000512:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	08007858 	.word	0x08007858
 800051c:	08000525 	.word	0x08000525
 8000520:	20000088 	.word	0x20000088

08000524 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800052c:	2001      	movs	r0, #1
 800052e:	f003 fc61 	bl	8003df4 <osDelay>
 8000532:	e7fb      	b.n	800052c <StartDefaultTask+0x8>

08000534 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b090      	sub	sp, #64	@ 0x40
 8000538:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800054a:	4bad      	ldr	r3, [pc, #692]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4aac      	ldr	r2, [pc, #688]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000550:	f043 0310 	orr.w	r3, r3, #16
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4baa      	ldr	r3, [pc, #680]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0310 	and.w	r3, r3, #16
 800055e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000562:	4ba7      	ldr	r3, [pc, #668]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4aa6      	ldr	r2, [pc, #664]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4ba4      	ldr	r3, [pc, #656]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000576:	627b      	str	r3, [r7, #36]	@ 0x24
 8000578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4ba1      	ldr	r3, [pc, #644]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4aa0      	ldr	r2, [pc, #640]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b9e      	ldr	r3, [pc, #632]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f003 0302 	and.w	r3, r3, #2
 800058e:	623b      	str	r3, [r7, #32]
 8000590:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000592:	4b9b      	ldr	r3, [pc, #620]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	4a9a      	ldr	r2, [pc, #616]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	6313      	str	r3, [r2, #48]	@ 0x30
 800059e:	4b98      	ldr	r3, [pc, #608]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	f003 0308 	and.w	r3, r3, #8
 80005a6:	61fb      	str	r3, [r7, #28]
 80005a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b95      	ldr	r3, [pc, #596]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a94      	ldr	r2, [pc, #592]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b92      	ldr	r3, [pc, #584]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	61bb      	str	r3, [r7, #24]
 80005c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b8f      	ldr	r3, [pc, #572]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a8e      	ldr	r2, [pc, #568]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b8c      	ldr	r3, [pc, #560]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80005da:	4b89      	ldr	r3, [pc, #548]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a88      	ldr	r2, [pc, #544]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 80005e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b86      	ldr	r3, [pc, #536]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005f2:	4b83      	ldr	r3, [pc, #524]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a82      	ldr	r2, [pc, #520]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 80005f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b80      	ldr	r3, [pc, #512]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800060a:	4b7d      	ldr	r3, [pc, #500]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a7c      	ldr	r2, [pc, #496]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000610:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
 8000616:	4b7a      	ldr	r3, [pc, #488]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000622:	4b77      	ldr	r3, [pc, #476]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a76      	ldr	r2, [pc, #472]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000628:	f043 0320 	orr.w	r3, r3, #32
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b74      	ldr	r3, [pc, #464]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	4b71      	ldr	r3, [pc, #452]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a70      	ldr	r2, [pc, #448]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b6e      	ldr	r3, [pc, #440]	@ (8000800 <MX_GPIO_Init+0x2cc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f241 010e 	movw	r1, #4110	@ 0x100e
 8000658:	486a      	ldr	r0, [pc, #424]	@ (8000804 <MX_GPIO_Init+0x2d0>)
 800065a:	f001 f9c3 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2108      	movs	r1, #8
 8000662:	4869      	ldr	r0, [pc, #420]	@ (8000808 <MX_GPIO_Init+0x2d4>)
 8000664:	f001 f9be 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800066e:	4867      	ldr	r0, [pc, #412]	@ (800080c <MX_GPIO_Init+0x2d8>)
 8000670:	f001 f9b8 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	21c8      	movs	r1, #200	@ 0xc8
 8000678:	4865      	ldr	r0, [pc, #404]	@ (8000810 <MX_GPIO_Init+0x2dc>)
 800067a:	f001 f9b3 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800067e:	2310      	movs	r3, #16
 8000680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800068e:	230e      	movs	r3, #14
 8000690:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000696:	4619      	mov	r1, r3
 8000698:	485e      	ldr	r0, [pc, #376]	@ (8000814 <MX_GPIO_Init+0x2e0>)
 800069a:	f000 fff7 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800069e:	2308      	movs	r3, #8
 80006a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006ae:	4619      	mov	r1, r3
 80006b0:	4858      	ldr	r0, [pc, #352]	@ (8000814 <MX_GPIO_Init+0x2e0>)
 80006b2:	f000 ffeb 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80006b6:	2304      	movs	r3, #4
 80006b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80006c6:	2309      	movs	r3, #9
 80006c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006ce:	4619      	mov	r1, r3
 80006d0:	4850      	ldr	r0, [pc, #320]	@ (8000814 <MX_GPIO_Init+0x2e0>)
 80006d2:	f000 ffdb 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80006d6:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80006da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e4:	2303      	movs	r3, #3
 80006e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e8:	230b      	movs	r3, #11
 80006ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006f0:	4619      	mov	r1, r3
 80006f2:	4847      	ldr	r0, [pc, #284]	@ (8000810 <MX_GPIO_Init+0x2dc>)
 80006f4:	f000 ffca 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80006f8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80006fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fe:	2302      	movs	r3, #2
 8000700:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800070a:	230c      	movs	r3, #12
 800070c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800070e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000712:	4619      	mov	r1, r3
 8000714:	483f      	ldr	r0, [pc, #252]	@ (8000814 <MX_GPIO_Init+0x2e0>)
 8000716:	f000 ffb9 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800071a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000720:	2312      	movs	r3, #18
 8000722:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800072c:	2304      	movs	r3, #4
 800072e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000730:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000734:	4619      	mov	r1, r3
 8000736:	4838      	ldr	r0, [pc, #224]	@ (8000818 <MX_GPIO_Init+0x2e4>)
 8000738:	f000 ffa8 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800073c:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000740:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800074e:	230a      	movs	r3, #10
 8000750:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000756:	4619      	mov	r1, r3
 8000758:	482f      	ldr	r0, [pc, #188]	@ (8000818 <MX_GPIO_Init+0x2e4>)
 800075a:	f000 ff97 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800075e:	2310      	movs	r3, #16
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800076e:	2302      	movs	r3, #2
 8000770:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000776:	4619      	mov	r1, r3
 8000778:	4827      	ldr	r0, [pc, #156]	@ (8000818 <MX_GPIO_Init+0x2e4>)
 800077a:	f000 ff87 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800077e:	2380      	movs	r3, #128	@ 0x80
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800078e:	2308      	movs	r3, #8
 8000790:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000796:	4619      	mov	r1, r3
 8000798:	4820      	ldr	r0, [pc, #128]	@ (800081c <MX_GPIO_Init+0x2e8>)
 800079a:	f000 ff77 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800079e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007b0:	230c      	movs	r3, #12
 80007b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007b8:	4619      	mov	r1, r3
 80007ba:	4819      	ldr	r0, [pc, #100]	@ (8000820 <MX_GPIO_Init+0x2ec>)
 80007bc:	f000 ff66 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80007c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007d2:	2301      	movs	r3, #1
 80007d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007da:	4619      	mov	r1, r3
 80007dc:	4811      	ldr	r0, [pc, #68]	@ (8000824 <MX_GPIO_Init+0x2f0>)
 80007de:	f000 ff55 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007e2:	2360      	movs	r3, #96	@ 0x60
 80007e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007f2:	230d      	movs	r3, #13
 80007f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007fa:	4619      	mov	r1, r3
 80007fc:	e014      	b.n	8000828 <MX_GPIO_Init+0x2f4>
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40022000 	.word	0x40022000
 8000808:	40022800 	.word	0x40022800
 800080c:	40021c00 	.word	0x40021c00
 8000810:	40021800 	.word	0x40021800
 8000814:	40021000 	.word	0x40021000
 8000818:	40020400 	.word	0x40020400
 800081c:	40020c00 	.word	0x40020c00
 8000820:	40020800 	.word	0x40020800
 8000824:	40020000 	.word	0x40020000
 8000828:	48bb      	ldr	r0, [pc, #748]	@ (8000b18 <MX_GPIO_Init+0x5e4>)
 800082a:	f000 ff2f 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800082e:	2340      	movs	r3, #64	@ 0x40
 8000830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800083e:	230a      	movs	r3, #10
 8000840:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000846:	4619      	mov	r1, r3
 8000848:	48b4      	ldr	r0, [pc, #720]	@ (8000b1c <MX_GPIO_Init+0x5e8>)
 800084a:	f000 ff1f 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800084e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000860:	230c      	movs	r3, #12
 8000862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000868:	4619      	mov	r1, r3
 800086a:	48ad      	ldr	r0, [pc, #692]	@ (8000b20 <MX_GPIO_Init+0x5ec>)
 800086c:	f000 ff0e 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000870:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000874:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000882:	230e      	movs	r3, #14
 8000884:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000886:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800088a:	4619      	mov	r1, r3
 800088c:	48a5      	ldr	r0, [pc, #660]	@ (8000b24 <MX_GPIO_Init+0x5f0>)
 800088e:	f000 fefd 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000892:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008a4:	230c      	movs	r3, #12
 80008a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ac:	4619      	mov	r1, r3
 80008ae:	489e      	ldr	r0, [pc, #632]	@ (8000b28 <MX_GPIO_Init+0x5f4>)
 80008b0:	f000 feec 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 80008b4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008c6:	230a      	movs	r3, #10
 80008c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ce:	4619      	mov	r1, r3
 80008d0:	4896      	ldr	r0, [pc, #600]	@ (8000b2c <MX_GPIO_Init+0x5f8>)
 80008d2:	f000 fedb 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80008d6:	23f0      	movs	r3, #240	@ 0xf0
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80008e6:	230a      	movs	r3, #10
 80008e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ee:	4619      	mov	r1, r3
 80008f0:	488f      	ldr	r0, [pc, #572]	@ (8000b30 <MX_GPIO_Init+0x5fc>)
 80008f2:	f000 fecb 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80008f6:	23f7      	movs	r3, #247	@ 0xf7
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000906:	230e      	movs	r3, #14
 8000908:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800090a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800090e:	4619      	mov	r1, r3
 8000910:	4888      	ldr	r0, [pc, #544]	@ (8000b34 <MX_GPIO_Init+0x600>)
 8000912:	f000 febb 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000916:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800091a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000928:	2309      	movs	r3, #9
 800092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000930:	4619      	mov	r1, r3
 8000932:	487b      	ldr	r0, [pc, #492]	@ (8000b20 <MX_GPIO_Init+0x5ec>)
 8000934:	f000 feaa 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800094a:	230a      	movs	r3, #10
 800094c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000952:	4619      	mov	r1, r3
 8000954:	4872      	ldr	r0, [pc, #456]	@ (8000b20 <MX_GPIO_Init+0x5ec>)
 8000956:	f000 fe99 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800095a:	2320      	movs	r3, #32
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096a:	2307      	movs	r3, #7
 800096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000972:	4619      	mov	r1, r3
 8000974:	486c      	ldr	r0, [pc, #432]	@ (8000b28 <MX_GPIO_Init+0x5f4>)
 8000976:	f000 fe89 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800097a:	2308      	movs	r3, #8
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800098a:	230d      	movs	r3, #13
 800098c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000992:	4619      	mov	r1, r3
 8000994:	4864      	ldr	r0, [pc, #400]	@ (8000b28 <MX_GPIO_Init+0x5f4>)
 8000996:	f000 fe79 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 800099a:	f241 030e 	movw	r3, #4110	@ 0x100e
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b0:	4619      	mov	r1, r3
 80009b2:	485f      	ldr	r0, [pc, #380]	@ (8000b30 <MX_GPIO_Init+0x5fc>)
 80009b4:	f000 fe6a 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ca:	4619      	mov	r1, r3
 80009cc:	485a      	ldr	r0, [pc, #360]	@ (8000b38 <MX_GPIO_Init+0x604>)
 80009ce:	f000 fe5d 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80009d2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009e4:	230c      	movs	r3, #12
 80009e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ec:	4619      	mov	r1, r3
 80009ee:	4853      	ldr	r0, [pc, #332]	@ (8000b3c <MX_GPIO_Init+0x608>)
 80009f0:	f000 fe4c 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80009f4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80009f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a06:	230e      	movs	r3, #14
 8000a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4847      	ldr	r0, [pc, #284]	@ (8000b30 <MX_GPIO_Init+0x5fc>)
 8000a12:	f000 fe3b 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a16:	2308      	movs	r3, #8
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4841      	ldr	r0, [pc, #260]	@ (8000b34 <MX_GPIO_Init+0x600>)
 8000a2e:	f000 fe2d 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000a32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a44:	230d      	movs	r3, #13
 8000a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4834      	ldr	r0, [pc, #208]	@ (8000b20 <MX_GPIO_Init+0x5ec>)
 8000a50:	f000 fe1c 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a54:	2310      	movs	r3, #16
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a64:	4619      	mov	r1, r3
 8000a66:	4830      	ldr	r0, [pc, #192]	@ (8000b28 <MX_GPIO_Init+0x5f4>)
 8000a68:	f000 fe10 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a84:	4619      	mov	r1, r3
 8000a86:	4828      	ldr	r0, [pc, #160]	@ (8000b28 <MX_GPIO_Init+0x5f4>)
 8000a88:	f000 fe00 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000a8c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4827      	ldr	r0, [pc, #156]	@ (8000b40 <MX_GPIO_Init+0x60c>)
 8000aa2:	f000 fdf3 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000abc:	4619      	mov	r1, r3
 8000abe:	4820      	ldr	r0, [pc, #128]	@ (8000b40 <MX_GPIO_Init+0x60c>)
 8000ac0:	f000 fde4 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000ac4:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ad6:	230d      	movs	r3, #13
 8000ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ada:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4817      	ldr	r0, [pc, #92]	@ (8000b40 <MX_GPIO_Init+0x60c>)
 8000ae2:	f000 fdd3 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000af6:	2302      	movs	r3, #2
 8000af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <MX_GPIO_Init+0x5fc>)
 8000b02:	f000 fdc3 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000b06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	e015      	b.n	8000b44 <MX_GPIO_Init+0x610>
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40020400 	.word	0x40020400
 8000b20:	40021800 	.word	0x40021800
 8000b24:	40022400 	.word	0x40022400
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	40022000 	.word	0x40022000
 8000b34:	40022800 	.word	0x40022800
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	40021400 	.word	0x40021400
 8000b40:	40021c00 	.word	0x40021c00
 8000b44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4895      	ldr	r0, [pc, #596]	@ (8000da8 <MX_GPIO_Init+0x874>)
 8000b52:	f000 fd9b 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000b56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b5c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	488f      	ldr	r0, [pc, #572]	@ (8000dac <MX_GPIO_Init+0x878>)
 8000b6e:	f000 fd8d 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000b72:	23c0      	movs	r3, #192	@ 0xc0
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b82:	2308      	movs	r3, #8
 8000b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4888      	ldr	r0, [pc, #544]	@ (8000db0 <MX_GPIO_Init+0x87c>)
 8000b8e:	f000 fd7d 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000b92:	2310      	movs	r3, #16
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000baa:	4619      	mov	r1, r3
 8000bac:	4881      	ldr	r0, [pc, #516]	@ (8000db4 <MX_GPIO_Init+0x880>)
 8000bae:	f000 fd6d 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000bb2:	2328      	movs	r3, #40	@ 0x28
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bc2:	230c      	movs	r3, #12
 8000bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4879      	ldr	r0, [pc, #484]	@ (8000db4 <MX_GPIO_Init+0x880>)
 8000bce:	f000 fd5d 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000bd2:	23c8      	movs	r3, #200	@ 0xc8
 8000bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be6:	4619      	mov	r1, r3
 8000be8:	4873      	ldr	r0, [pc, #460]	@ (8000db8 <MX_GPIO_Init+0x884>)
 8000bea:	f000 fd4f 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000bee:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c00:	4619      	mov	r1, r3
 8000c02:	486e      	ldr	r0, [pc, #440]	@ (8000dbc <MX_GPIO_Init+0x888>)
 8000c04:	f000 fd42 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c20:	4619      	mov	r1, r3
 8000c22:	4863      	ldr	r0, [pc, #396]	@ (8000db0 <MX_GPIO_Init+0x87c>)
 8000c24:	f000 fd32 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000c28:	2305      	movs	r3, #5
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c38:	230a      	movs	r3, #10
 8000c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c40:	4619      	mov	r1, r3
 8000c42:	485b      	ldr	r0, [pc, #364]	@ (8000db0 <MX_GPIO_Init+0x87c>)
 8000c44:	f000 fd22 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c48:	2332      	movs	r3, #50	@ 0x32
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c58:	230b      	movs	r3, #11
 8000c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c60:	4619      	mov	r1, r3
 8000c62:	4853      	ldr	r0, [pc, #332]	@ (8000db0 <MX_GPIO_Init+0x87c>)
 8000c64:	f000 fd12 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c78:	2309      	movs	r3, #9
 8000c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c80:	4619      	mov	r1, r3
 8000c82:	484f      	ldr	r0, [pc, #316]	@ (8000dc0 <MX_GPIO_Init+0x88c>)
 8000c84:	f000 fd02 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000c88:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c9a:	2309      	movs	r3, #9
 8000c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4847      	ldr	r0, [pc, #284]	@ (8000dc4 <MX_GPIO_Init+0x890>)
 8000ca6:	f000 fcf1 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000caa:	2304      	movs	r3, #4
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	483e      	ldr	r0, [pc, #248]	@ (8000db8 <MX_GPIO_Init+0x884>)
 8000cbe:	f000 fce5 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000cc2:	2382      	movs	r3, #130	@ 0x82
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd2:	230b      	movs	r3, #11
 8000cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4832      	ldr	r0, [pc, #200]	@ (8000da8 <MX_GPIO_Init+0x874>)
 8000cde:	f000 fcd5 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	482c      	ldr	r0, [pc, #176]	@ (8000da8 <MX_GPIO_Init+0x874>)
 8000cf6:	f000 fcc9 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d0a:	230d      	movs	r3, #13
 8000d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d12:	4619      	mov	r1, r3
 8000d14:	4824      	ldr	r0, [pc, #144]	@ (8000da8 <MX_GPIO_Init+0x874>)
 8000d16:	f000 fcb9 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000d1a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d20:	2312      	movs	r3, #18
 8000d22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d34:	4619      	mov	r1, r3
 8000d36:	481f      	ldr	r0, [pc, #124]	@ (8000db4 <MX_GPIO_Init+0x880>)
 8000d38:	f000 fca8 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_CLK_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin;
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d54:	4619      	mov	r1, r3
 8000d56:	4814      	ldr	r0, [pc, #80]	@ (8000da8 <MX_GPIO_Init+0x874>)
 8000d58:	f000 fc98 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000d5c:	2340      	movs	r3, #64	@ 0x40
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000d6c:	2309      	movs	r3, #9
 8000d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d74:	4619      	mov	r1, r3
 8000d76:	480f      	ldr	r0, [pc, #60]	@ (8000db4 <MX_GPIO_Init+0x880>)
 8000d78:	f000 fc88 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000d7c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d8e:	2305      	movs	r3, #5
 8000d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d96:	4619      	mov	r1, r3
 8000d98:	4809      	ldr	r0, [pc, #36]	@ (8000dc0 <MX_GPIO_Init+0x88c>)
 8000d9a:	f000 fc77 	bl	800168c <HAL_GPIO_Init>

}
 8000d9e:	bf00      	nop
 8000da0:	3740      	adds	r7, #64	@ 0x40
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40022000 	.word	0x40022000
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40021c00 	.word	0x40021c00
 8000db8:	40021800 	.word	0x40021800
 8000dbc:	40021400 	.word	0x40021400
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	40020c00 	.word	0x40020c00

08000dc8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000dd0:	1d39      	adds	r1, r7, #4
 8000dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <__io_putchar+0x20>)
 8000dda:	f002 fa3b 	bl	8003254 <HAL_UART_Transmit>
return ch;
 8000dde:	687b      	ldr	r3, [r7, #4]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200000e0 	.word	0x200000e0

08000dec <TaskGive>:
SemaphoreHandle_t sem;

void TaskGive(void *argument);
void TaskTake(void *argument);

void TaskGive(void *argument){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	for(;;)
	    {
	        // Affichage avant de donner le sémaphore
	        printf("TaskGive: Avant de donner le sémaphore\n");
 8000df4:	4809      	ldr	r0, [pc, #36]	@ (8000e1c <TaskGive+0x30>)
 8000df6:	f006 f8a9 	bl	8006f4c <puts>


	        // Donner le sémaphore (si possible)
	        if (xSemaphoreGive(sem) == pdPASS)
 8000dfa:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <TaskGive+0x34>)
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	f003 fa66 	bl	80042d4 <xQueueGenericSend>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d102      	bne.n	8000e14 <TaskGive+0x28>
	        {
	            printf("TaskGive: Sémaphore donné\n");
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <TaskGive+0x38>)
 8000e10:	f006 f89c 	bl	8006f4c <puts>
	        }

	        // Affichage après avoir donné le sémaphore
	        vTaskDelay(pdMS_TO_TICKS(100)); // Attendre 100 ms
 8000e14:	2064      	movs	r0, #100	@ 0x64
 8000e16:	f004 f957 	bl	80050c8 <vTaskDelay>
	        printf("TaskGive: Avant de donner le sémaphore\n");
 8000e1a:	e7eb      	b.n	8000df4 <TaskGive+0x8>
 8000e1c:	08007760 	.word	0x08007760
 8000e20:	2000008c 	.word	0x2000008c
 8000e24:	08007788 	.word	0x08007788

08000e28 <TaskTake>:
	    }
}

void TaskTake(void *argument){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

	for(;;)
	    {
	        // Affichage avant de prendre le sémaphore
	        printf("TaskTake: Avant de prendre le sémaphore\n");
 8000e30:	4808      	ldr	r0, [pc, #32]	@ (8000e54 <TaskTake+0x2c>)
 8000e32:	f006 f88b 	bl	8006f4c <puts>

	        // Attendre que le sémaphore soit disponible
	        if (xSemaphoreTake(sem, portMAX_DELAY) == pdTRUE)
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <TaskTake+0x30>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 fcde 	bl	8004800 <xQueueSemaphoreTake>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d1f2      	bne.n	8000e30 <TaskTake+0x8>
	        {
	            printf("TaskTake: Sémaphore pris\n");
 8000e4a:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <TaskTake+0x34>)
 8000e4c:	f006 f87e 	bl	8006f4c <puts>
	        printf("TaskTake: Avant de prendre le sémaphore\n");
 8000e50:	e7ee      	b.n	8000e30 <TaskTake+0x8>
 8000e52:	bf00      	nop
 8000e54:	080077a4 	.word	0x080077a4
 8000e58:	2000008c 	.word	0x2000008c
 8000e5c:	080077d0 	.word	0x080077d0

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e66:	f000 fb02 	bl	800146e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6a:	f000 f845 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6e:	f7ff fb61 	bl	8000534 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e72:	f000 fa45 	bl	8001300 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Test UART transmission\n");
 8000e76:	4819      	ldr	r0, [pc, #100]	@ (8000edc <main+0x7c>)
 8000e78:	f006 f868 	bl	8006f4c <puts>


  	  sem = xSemaphoreCreateBinary();
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2001      	movs	r0, #1
 8000e82:	f003 f9c0 	bl	8004206 <xQueueGenericCreate>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a15      	ldr	r2, [pc, #84]	@ (8000ee0 <main+0x80>)
 8000e8a:	6013      	str	r3, [r2, #0]
      // Vérifier si le sémaphore a été créé avec succès
      if (sem == NULL)
 8000e8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <main+0x80>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d104      	bne.n	8000e9e <main+0x3e>
      {
          printf("Erreur de création du sémaphore\n");
 8000e94:	4813      	ldr	r0, [pc, #76]	@ (8000ee4 <main+0x84>)
 8000e96:	f006 f859 	bl	8006f4c <puts>
          while(1);
 8000e9a:	bf00      	nop
 8000e9c:	e7fd      	b.n	8000e9a <main+0x3a>
      }
  /* Création de la tâche */
    //xTaskCreate(LedCli, "LedTask", 128, NULL, 1, NULL);
  xTaskCreate(TaskGive, "TaskGive", 128, NULL, 1, NULL);
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	2280      	movs	r2, #128	@ 0x80
 8000eaa:	490f      	ldr	r1, [pc, #60]	@ (8000ee8 <main+0x88>)
 8000eac:	480f      	ldr	r0, [pc, #60]	@ (8000eec <main+0x8c>)
 8000eae:	f003 ffab 	bl	8004e08 <xTaskCreate>
  xTaskCreate(TaskTake, "TaskTake", 127, NULL, 1, NULL);
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	227f      	movs	r2, #127	@ 0x7f
 8000ebe:	490c      	ldr	r1, [pc, #48]	@ (8000ef0 <main+0x90>)
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <main+0x94>)
 8000ec2:	f003 ffa1 	bl	8004e08 <xTaskCreate>


    /* Lancement du scheduler */
    vTaskStartScheduler();
 8000ec6:	f004 f937 	bl	8005138 <vTaskStartScheduler>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eca:	f002 fe83 	bl	8003bd4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000ece:	f7ff fb17 	bl	8000500 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ed2:	f002 feb3 	bl	8003c3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ed6:	bf00      	nop
 8000ed8:	e7fd      	b.n	8000ed6 <main+0x76>
 8000eda:	bf00      	nop
 8000edc:	080077ec 	.word	0x080077ec
 8000ee0:	2000008c 	.word	0x2000008c
 8000ee4:	08007804 	.word	0x08007804
 8000ee8:	08007828 	.word	0x08007828
 8000eec:	08000ded 	.word	0x08000ded
 8000ef0:	08007834 	.word	0x08007834
 8000ef4:	08000e29 	.word	0x08000e29

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b094      	sub	sp, #80	@ 0x50
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0320 	add.w	r3, r7, #32
 8000f02:	2230      	movs	r2, #48	@ 0x30
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f006 f900 	bl	800710c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fcc <SystemClock_Config+0xd4>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	4a2a      	ldr	r2, [pc, #168]	@ (8000fcc <SystemClock_Config+0xd4>)
 8000f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f28:	4b28      	ldr	r3, [pc, #160]	@ (8000fcc <SystemClock_Config+0xd4>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f34:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <SystemClock_Config+0xd8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a25      	ldr	r2, [pc, #148]	@ (8000fd0 <SystemClock_Config+0xd8>)
 8000f3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <SystemClock_Config+0xd8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f60:	2319      	movs	r3, #25
 8000f62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000f64:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000f68:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fd9e 	bl	8001ab8 <HAL_RCC_OscConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f82:	f000 f839 	bl	8000ff8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f86:	f000 fd47 	bl	8001a18 <HAL_PWREx_EnableOverDrive>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f90:	f000 f832 	bl	8000ff8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	230f      	movs	r3, #15
 8000f96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fa0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000faa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 f824 	bl	8002000 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000fbe:	f000 f81b 	bl	8000ff8 <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3750      	adds	r7, #80	@ 0x50
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fe6:	f000 fa4f 	bl	8001488 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40001000 	.word	0x40001000

08000ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
}
 8000ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <Error_Handler+0x8>

08001004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	4a10      	ldr	r2, [pc, #64]	@ (8001050 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	@ 0x40
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <HAL_MspInit+0x4c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <HAL_MspInit+0x4c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	210f      	movs	r1, #15
 800103e:	f06f 0001 	mvn.w	r0, #1
 8001042:	f000 faf9 	bl	8001638 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08e      	sub	sp, #56	@ 0x38
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001064:	4b33      	ldr	r3, [pc, #204]	@ (8001134 <HAL_InitTick+0xe0>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	4a32      	ldr	r2, [pc, #200]	@ (8001134 <HAL_InitTick+0xe0>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001070:	4b30      	ldr	r3, [pc, #192]	@ (8001134 <HAL_InitTick+0xe0>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	f003 0310 	and.w	r3, r3, #16
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800107c:	f107 0210 	add.w	r2, r7, #16
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f001 f9a0 	bl	80023cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800108c:	6a3b      	ldr	r3, [r7, #32]
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001092:	2b00      	cmp	r3, #0
 8001094:	d103      	bne.n	800109e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001096:	f001 f971 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 800109a:	6378      	str	r0, [r7, #52]	@ 0x34
 800109c:	e004      	b.n	80010a8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800109e:	f001 f96d 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 80010a2:	4603      	mov	r3, r0
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010aa:	4a23      	ldr	r2, [pc, #140]	@ (8001138 <HAL_InitTick+0xe4>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	0c9b      	lsrs	r3, r3, #18
 80010b2:	3b01      	subs	r3, #1
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010b6:	4b21      	ldr	r3, [pc, #132]	@ (800113c <HAL_InitTick+0xe8>)
 80010b8:	4a21      	ldr	r2, [pc, #132]	@ (8001140 <HAL_InitTick+0xec>)
 80010ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <HAL_InitTick+0xe8>)
 80010be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010c4:	4a1d      	ldr	r2, [pc, #116]	@ (800113c <HAL_InitTick+0xe8>)
 80010c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <HAL_InitTick+0xe8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <HAL_InitTick+0xe8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_InitTick+0xe8>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010dc:	4817      	ldr	r0, [pc, #92]	@ (800113c <HAL_InitTick+0xe8>)
 80010de:	f001 fd97 	bl	8002c10 <HAL_TIM_Base_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d11b      	bne.n	8001128 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010f0:	4812      	ldr	r0, [pc, #72]	@ (800113c <HAL_InitTick+0xe8>)
 80010f2:	f001 fdef 	bl	8002cd4 <HAL_TIM_Base_Start_IT>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001100:	2b00      	cmp	r3, #0
 8001102:	d111      	bne.n	8001128 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001104:	2036      	movs	r0, #54	@ 0x36
 8001106:	f000 fab3 	bl	8001670 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d808      	bhi.n	8001122 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	2036      	movs	r0, #54	@ 0x36
 8001116:	f000 fa8f 	bl	8001638 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <HAL_InitTick+0xf0>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	e002      	b.n	8001128 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001128:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800112c:	4618      	mov	r0, r3
 800112e:	3738      	adds	r7, #56	@ 0x38
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	431bde83 	.word	0x431bde83
 800113c:	20000090 	.word	0x20000090
 8001140:	40001000 	.word	0x40001000
 8001144:	20000004 	.word	0x20000004

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <NMI_Handler+0x4>

08001150 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <MemManage_Handler+0x4>

08001160 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <UsageFault_Handler+0x4>

08001170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <TIM6_DAC_IRQHandler+0x10>)
 8001186:	f001 fe1d 	bl	8002dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000090 	.word	0x20000090

08001194 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e00a      	b.n	80011bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011a6:	f3af 8000 	nop.w
 80011aa:	4601      	mov	r1, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	60ba      	str	r2, [r7, #8]
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf0      	blt.n	80011a6 <_read+0x12>
  }

  return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	e009      	b.n	80011f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fded 	bl	8000dc8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbf1      	blt.n	80011e0 <_write+0x12>
  }
  return len;
 80011fc:	687b      	ldr	r3, [r7, #4]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_close>:

int _close(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800122e:	605a      	str	r2, [r3, #4]
  return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <_isatty>:

int _isatty(int file)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001278:	4a14      	ldr	r2, [pc, #80]	@ (80012cc <_sbrk+0x5c>)
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <_sbrk+0x60>)
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <_sbrk+0x64>)
 800128e:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <_sbrk+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	429a      	cmp	r2, r3
 800129e:	d207      	bcs.n	80012b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a0:	f005 ffd8 	bl	8007254 <__errno>
 80012a4:	4603      	mov	r3, r0
 80012a6:	220c      	movs	r2, #12
 80012a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	e009      	b.n	80012c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b0:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b6:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	4a05      	ldr	r2, [pc, #20]	@ (80012d4 <_sbrk+0x64>)
 80012c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20050000 	.word	0x20050000
 80012d0:	00000400 	.word	0x00000400
 80012d4:	200000dc 	.word	0x200000dc
 80012d8:	20004c98 	.word	0x20004c98

080012dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <SystemInit+0x20>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e6:	4a05      	ldr	r2, [pc, #20]	@ (80012fc <SystemInit+0x20>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001306:	4a15      	ldr	r2, [pc, #84]	@ (800135c <MX_USART1_UART_Init+0x5c>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130a:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <MX_USART1_UART_Init+0x58>)
 8001344:	f001 ff38 	bl	80031b8 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800134e:	f7ff fe53 	bl	8000ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200000e0 	.word	0x200000e0
 800135c:	40011000 	.word	0x40011000

08001360 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0aa      	sub	sp, #168	@ 0xa8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	2284      	movs	r2, #132	@ 0x84
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f005 fec3 	bl	800710c <memset>
  if(uartHandle->Instance==USART1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a21      	ldr	r2, [pc, #132]	@ (8001410 <HAL_UART_MspInit+0xb0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d13b      	bne.n	8001408 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001390:	2340      	movs	r3, #64	@ 0x40
 8001392:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001394:	2300      	movs	r3, #0
 8001396:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4618      	mov	r0, r3
 800139e:	f001 f847 	bl	8002430 <HAL_RCCEx_PeriphCLKConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013a8:	f7ff fe26 	bl	8000ff8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ac:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <HAL_UART_MspInit+0xb4>)
 80013ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b0:	4a18      	ldr	r2, [pc, #96]	@ (8001414 <HAL_UART_MspInit+0xb4>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b8:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <HAL_UART_MspInit+0xb4>)
 80013ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <HAL_UART_MspInit+0xb4>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c8:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <HAL_UART_MspInit+0xb4>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d0:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <HAL_UART_MspInit+0xb4>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80013dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f6:	2307      	movs	r3, #7
 80013f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001400:	4619      	mov	r1, r3
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <HAL_UART_MspInit+0xb8>)
 8001404:	f000 f942 	bl	800168c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001408:	bf00      	nop
 800140a:	37a8      	adds	r7, #168	@ 0xa8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40011000 	.word	0x40011000
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000

0800141c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800141c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001454 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001420:	f7ff ff5c 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001426:	490d      	ldr	r1, [pc, #52]	@ (800145c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800143c:	4c0a      	ldr	r4, [pc, #40]	@ (8001468 <LoopFillZerobss+0x22>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800144a:	f005 ff09 	bl	8007260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144e:	f7ff fd07 	bl	8000e60 <main>
  bx  lr    
 8001452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001454:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800145c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001460:	080078a4 	.word	0x080078a4
  ldr r2, =_sbss
 8001464:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001468:	20004c98 	.word	0x20004c98

0800146c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC_IRQHandler>

0800146e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001472:	2003      	movs	r0, #3
 8001474:	f000 f8d5 	bl	8001622 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001478:	200f      	movs	r0, #15
 800147a:	f7ff fdeb 	bl	8001054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800147e:	f7ff fdc1 	bl	8001004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_IncTick+0x20>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_IncTick+0x24>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <HAL_IncTick+0x24>)
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000168 	.word	0x20000168

080014b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b03      	ldr	r3, [pc, #12]	@ (80014c4 <HAL_GetTick+0x14>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000168 	.word	0x20000168

080014c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <__NVIC_SetPriorityGrouping+0x40>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <__NVIC_SetPriorityGrouping+0x40>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00
 800150c:	05fa0000 	.word	0x05fa0000

08001510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <__NVIC_GetPriorityGrouping+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 0307 	and.w	r3, r3, #7
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	2b00      	cmp	r3, #0
 800153c:	db0b      	blt.n	8001556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f003 021f 	and.w	r2, r3, #31
 8001544:	4907      	ldr	r1, [pc, #28]	@ (8001564 <__NVIC_EnableIRQ+0x38>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	095b      	lsrs	r3, r3, #5
 800154c:	2001      	movs	r0, #1
 800154e:	fa00 f202 	lsl.w	r2, r0, r2
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000e100 	.word	0xe000e100

08001568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0a      	blt.n	8001592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	490c      	ldr	r1, [pc, #48]	@ (80015b4 <__NVIC_SetPriority+0x4c>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	0112      	lsls	r2, r2, #4
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	440b      	add	r3, r1
 800158c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001590:	e00a      	b.n	80015a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4908      	ldr	r1, [pc, #32]	@ (80015b8 <__NVIC_SetPriority+0x50>)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	3b04      	subs	r3, #4
 80015a0:	0112      	lsls	r2, r2, #4
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	440b      	add	r3, r1
 80015a6:	761a      	strb	r2, [r3, #24]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	@ 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f1c3 0307 	rsb	r3, r3, #7
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	bf28      	it	cs
 80015da:	2304      	movcs	r3, #4
 80015dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d902      	bls.n	80015ec <NVIC_EncodePriority+0x30>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3b03      	subs	r3, #3
 80015ea:	e000      	b.n	80015ee <NVIC_EncodePriority+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	401a      	ands	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43d9      	mvns	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	4313      	orrs	r3, r2
         );
}
 8001616:	4618      	mov	r0, r3
 8001618:	3724      	adds	r7, #36	@ 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ff4c 	bl	80014c8 <__NVIC_SetPriorityGrouping>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800164a:	f7ff ff61 	bl	8001510 <__NVIC_GetPriorityGrouping>
 800164e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	6978      	ldr	r0, [r7, #20]
 8001656:	f7ff ffb1 	bl	80015bc <NVIC_EncodePriority>
 800165a:	4602      	mov	r2, r0
 800165c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff80 	bl	8001568 <__NVIC_SetPriority>
}
 8001668:	bf00      	nop
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff54 	bl	800152c <__NVIC_EnableIRQ>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	@ 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
 80016aa:	e175      	b.n	8001998 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f040 8164 	bne.w	8001992 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d005      	beq.n	80016e2 <HAL_GPIO_Init+0x56>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d130      	bne.n	8001744 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 0201 	and.w	r2, r3, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b03      	cmp	r3, #3
 800174e:	d017      	beq.n	8001780 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d123      	bne.n	80017d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	691a      	ldr	r2, [r3, #16]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	69b9      	ldr	r1, [r7, #24]
 80017d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0203 	and.w	r2, r3, #3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80be 	beq.w	8001992 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	4b66      	ldr	r3, [pc, #408]	@ (80019b0 <HAL_GPIO_Init+0x324>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	4a65      	ldr	r2, [pc, #404]	@ (80019b0 <HAL_GPIO_Init+0x324>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001820:	6453      	str	r3, [r2, #68]	@ 0x44
 8001822:	4b63      	ldr	r3, [pc, #396]	@ (80019b0 <HAL_GPIO_Init+0x324>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800182e:	4a61      	ldr	r2, [pc, #388]	@ (80019b4 <HAL_GPIO_Init+0x328>)
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	220f      	movs	r2, #15
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a58      	ldr	r2, [pc, #352]	@ (80019b8 <HAL_GPIO_Init+0x32c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d037      	beq.n	80018ca <HAL_GPIO_Init+0x23e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a57      	ldr	r2, [pc, #348]	@ (80019bc <HAL_GPIO_Init+0x330>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d031      	beq.n	80018c6 <HAL_GPIO_Init+0x23a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a56      	ldr	r2, [pc, #344]	@ (80019c0 <HAL_GPIO_Init+0x334>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d02b      	beq.n	80018c2 <HAL_GPIO_Init+0x236>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a55      	ldr	r2, [pc, #340]	@ (80019c4 <HAL_GPIO_Init+0x338>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d025      	beq.n	80018be <HAL_GPIO_Init+0x232>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a54      	ldr	r2, [pc, #336]	@ (80019c8 <HAL_GPIO_Init+0x33c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d01f      	beq.n	80018ba <HAL_GPIO_Init+0x22e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a53      	ldr	r2, [pc, #332]	@ (80019cc <HAL_GPIO_Init+0x340>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d019      	beq.n	80018b6 <HAL_GPIO_Init+0x22a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a52      	ldr	r2, [pc, #328]	@ (80019d0 <HAL_GPIO_Init+0x344>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0x226>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a51      	ldr	r2, [pc, #324]	@ (80019d4 <HAL_GPIO_Init+0x348>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00d      	beq.n	80018ae <HAL_GPIO_Init+0x222>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a50      	ldr	r2, [pc, #320]	@ (80019d8 <HAL_GPIO_Init+0x34c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d007      	beq.n	80018aa <HAL_GPIO_Init+0x21e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4f      	ldr	r2, [pc, #316]	@ (80019dc <HAL_GPIO_Init+0x350>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_GPIO_Init+0x21a>
 80018a2:	2309      	movs	r3, #9
 80018a4:	e012      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018a6:	230a      	movs	r3, #10
 80018a8:	e010      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018aa:	2308      	movs	r3, #8
 80018ac:	e00e      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018ae:	2307      	movs	r3, #7
 80018b0:	e00c      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018b2:	2306      	movs	r3, #6
 80018b4:	e00a      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018b6:	2305      	movs	r3, #5
 80018b8:	e008      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018ba:	2304      	movs	r3, #4
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018be:	2303      	movs	r3, #3
 80018c0:	e004      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_GPIO_Init+0x240>
 80018ca:	2300      	movs	r3, #0
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	f002 0203 	and.w	r2, r2, #3
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	4093      	lsls	r3, r2
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018dc:	4935      	ldr	r1, [pc, #212]	@ (80019b4 <HAL_GPIO_Init+0x328>)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	3302      	adds	r3, #2
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ea:	4b3d      	ldr	r3, [pc, #244]	@ (80019e0 <HAL_GPIO_Init+0x354>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800190e:	4a34      	ldr	r2, [pc, #208]	@ (80019e0 <HAL_GPIO_Init+0x354>)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001914:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <HAL_GPIO_Init+0x354>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001938:	4a29      	ldr	r2, [pc, #164]	@ (80019e0 <HAL_GPIO_Init+0x354>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800193e:	4b28      	ldr	r3, [pc, #160]	@ (80019e0 <HAL_GPIO_Init+0x354>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001962:	4a1f      	ldr	r2, [pc, #124]	@ (80019e0 <HAL_GPIO_Init+0x354>)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001968:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <HAL_GPIO_Init+0x354>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800198c:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <HAL_GPIO_Init+0x354>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3301      	adds	r3, #1
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b0f      	cmp	r3, #15
 800199c:	f67f ae86 	bls.w	80016ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3724      	adds	r7, #36	@ 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40013800 	.word	0x40013800
 80019b8:	40020000 	.word	0x40020000
 80019bc:	40020400 	.word	0x40020400
 80019c0:	40020800 	.word	0x40020800
 80019c4:	40020c00 	.word	0x40020c00
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40021400 	.word	0x40021400
 80019d0:	40021800 	.word	0x40021800
 80019d4:	40021c00 	.word	0x40021c00
 80019d8:	40022000 	.word	0x40022000
 80019dc:	40022400 	.word	0x40022400
 80019e0:	40013c00 	.word	0x40013c00

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a00:	e003      	b.n	8001a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	041a      	lsls	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	619a      	str	r2, [r3, #24]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	4b23      	ldr	r3, [pc, #140]	@ (8001ab0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	4a22      	ldr	r2, [pc, #136]	@ (8001ab0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a2e:	4b20      	ldr	r3, [pc, #128]	@ (8001ab0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a46:	f7ff fd33 	bl	80014b0 <HAL_GetTick>
 8001a4a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a4c:	e009      	b.n	8001a62 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a4e:	f7ff fd2f 	bl	80014b0 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a5c:	d901      	bls.n	8001a62 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e022      	b.n	8001aa8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a62:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a6e:	d1ee      	bne.n	8001a4e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a70:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a7c:	f7ff fd18 	bl	80014b0 <HAL_GetTick>
 8001a80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a82:	e009      	b.n	8001a98 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a84:	f7ff fd14 	bl	80014b0 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a92:	d901      	bls.n	8001a98 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e007      	b.n	8001aa8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001aa4:	d1ee      	bne.n	8001a84 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40007000 	.word	0x40007000

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e291      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8087 	beq.w	8001bea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001adc:	4b96      	ldr	r3, [pc, #600]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d00c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ae8:	4b93      	ldr	r3, [pc, #588]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d112      	bne.n	8001b1a <HAL_RCC_OscConfig+0x62>
 8001af4:	4b90      	ldr	r3, [pc, #576]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b00:	d10b      	bne.n	8001b1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b02:	4b8d      	ldr	r3, [pc, #564]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d06c      	beq.n	8001be8 <HAL_RCC_OscConfig+0x130>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d168      	bne.n	8001be8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e26b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x7a>
 8001b24:	4b84      	ldr	r3, [pc, #528]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a83      	ldr	r2, [pc, #524]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e02e      	b.n	8001b90 <HAL_RCC_OscConfig+0xd8>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x9c>
 8001b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b7c      	ldr	r3, [pc, #496]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7b      	ldr	r2, [pc, #492]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e01d      	b.n	8001b90 <HAL_RCC_OscConfig+0xd8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0xc0>
 8001b5e:	4b76      	ldr	r3, [pc, #472]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a75      	ldr	r2, [pc, #468]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b73      	ldr	r3, [pc, #460]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a72      	ldr	r2, [pc, #456]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0xd8>
 8001b78:	4b6f      	ldr	r3, [pc, #444]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b6c      	ldr	r3, [pc, #432]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6b      	ldr	r2, [pc, #428]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff fc8a 	bl	80014b0 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fc86 	bl	80014b0 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	@ 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e21f      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b61      	ldr	r3, [pc, #388]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xe8>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fc76 	bl	80014b0 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fc72 	bl	80014b0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	@ 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e20b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	4b57      	ldr	r3, [pc, #348]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x110>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d069      	beq.n	8001cca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf6:	4b50      	ldr	r3, [pc, #320]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c02:	4b4d      	ldr	r3, [pc, #308]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d11c      	bne.n	8001c48 <HAL_RCC_OscConfig+0x190>
 8001c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1a:	4b47      	ldr	r3, [pc, #284]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_RCC_OscConfig+0x17a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1df      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c32:	4b41      	ldr	r3, [pc, #260]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	493d      	ldr	r1, [pc, #244]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	e040      	b.n	8001cca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d023      	beq.n	8001c98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c50:	4b39      	ldr	r3, [pc, #228]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a38      	ldr	r2, [pc, #224]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fc28 	bl	80014b0 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff fc24 	bl	80014b0 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e1bd      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	4b30      	ldr	r3, [pc, #192]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c82:	4b2d      	ldr	r3, [pc, #180]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4929      	ldr	r1, [pc, #164]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
 8001c96:	e018      	b.n	8001cca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c98:	4b27      	ldr	r3, [pc, #156]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a26      	ldr	r2, [pc, #152]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fc04 	bl	80014b0 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff fc00 	bl	80014b0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e199      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d038      	beq.n	8001d48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d019      	beq.n	8001d12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ce2:	4a15      	ldr	r2, [pc, #84]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cea:	f7ff fbe1 	bl	80014b0 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf2:	f7ff fbdd 	bl	80014b0 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e176      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001d06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x23a>
 8001d10:	e01a      	b.n	8001d48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d16:	4a08      	ldr	r2, [pc, #32]	@ (8001d38 <HAL_RCC_OscConfig+0x280>)
 8001d18:	f023 0301 	bic.w	r3, r3, #1
 8001d1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fbc7 	bl	80014b0 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d26:	f7ff fbc3 	bl	80014b0 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d903      	bls.n	8001d3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e15c      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
 8001d38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3c:	4b91      	ldr	r3, [pc, #580]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1ee      	bne.n	8001d26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80a4 	beq.w	8001e9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d56:	4b8b      	ldr	r3, [pc, #556]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10d      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	4b88      	ldr	r3, [pc, #544]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	4a87      	ldr	r2, [pc, #540]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d6e:	4b85      	ldr	r3, [pc, #532]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7e:	4b82      	ldr	r3, [pc, #520]	@ (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a7e      	ldr	r2, [pc, #504]	@ (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d96:	f7ff fb8b 	bl	80014b0 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9e:	f7ff fb87 	bl	80014b0 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b64      	cmp	r3, #100	@ 0x64
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e120      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db0:	4b75      	ldr	r3, [pc, #468]	@ (8001f88 <HAL_RCC_OscConfig+0x4d0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x31a>
 8001dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc8:	4a6e      	ldr	r2, [pc, #440]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd0:	e02d      	b.n	8001e2e <HAL_RCC_OscConfig+0x376>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x33c>
 8001dda:	4b6a      	ldr	r3, [pc, #424]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dde:	4a69      	ldr	r2, [pc, #420]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001de6:	4b67      	ldr	r3, [pc, #412]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dea:	4a66      	ldr	r2, [pc, #408]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df2:	e01c      	b.n	8001e2e <HAL_RCC_OscConfig+0x376>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x35e>
 8001dfc:	4b61      	ldr	r3, [pc, #388]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e00:	4a60      	ldr	r2, [pc, #384]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e08:	4b5e      	ldr	r3, [pc, #376]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0c:	4a5d      	ldr	r2, [pc, #372]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e14:	e00b      	b.n	8001e2e <HAL_RCC_OscConfig+0x376>
 8001e16:	4b5b      	ldr	r3, [pc, #364]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1a:	4a5a      	ldr	r2, [pc, #360]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e22:	4b58      	ldr	r3, [pc, #352]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e26:	4a57      	ldr	r2, [pc, #348]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d015      	beq.n	8001e62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7ff fb3b 	bl	80014b0 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff fb37 	bl	80014b0 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e0ce      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	4b4b      	ldr	r3, [pc, #300]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0ee      	beq.n	8001e3e <HAL_RCC_OscConfig+0x386>
 8001e60:	e014      	b.n	8001e8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7ff fb25 	bl	80014b0 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7ff fb21 	bl	80014b0 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e0b8      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e80:	4b40      	ldr	r3, [pc, #256]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1ee      	bne.n	8001e6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	4b3c      	ldr	r3, [pc, #240]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	4a3b      	ldr	r2, [pc, #236]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80a4 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea8:	4b36      	ldr	r3, [pc, #216]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d06b      	beq.n	8001f8c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d149      	bne.n	8001f50 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebc:	4b31      	ldr	r3, [pc, #196]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a30      	ldr	r2, [pc, #192]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff faf2 	bl	80014b0 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff faee 	bl	80014b0 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e087      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	019b      	lsls	r3, r3, #6
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	3b01      	subs	r3, #1
 8001f08:	041b      	lsls	r3, r3, #16
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	4313      	orrs	r3, r2
 8001f14:	4a1b      	ldr	r2, [pc, #108]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001f16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001f1a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f1c:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a18      	ldr	r2, [pc, #96]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff fac2 	bl	80014b0 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff fabe 	bl	80014b0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e057      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x478>
 8001f4e:	e04f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0b      	ldr	r2, [pc, #44]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7ff faa8 	bl	80014b0 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7ff faa4 	bl	80014b0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e03d      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f76:	4b03      	ldr	r3, [pc, #12]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x4ac>
 8001f82:	e035      	b.n	8001ff0 <HAL_RCC_OscConfig+0x538>
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <HAL_RCC_OscConfig+0x544>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d028      	beq.n	8001fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d121      	bne.n	8001fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d11a      	bne.n	8001fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fc2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d111      	bne.n	8001fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd2:	085b      	lsrs	r3, r3, #1
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800

08002000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0d0      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b6a      	ldr	r3, [pc, #424]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d910      	bls.n	8002048 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b67      	ldr	r3, [pc, #412]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 020f 	bic.w	r2, r3, #15
 800202e:	4965      	ldr	r1, [pc, #404]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b63      	ldr	r3, [pc, #396]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b8      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4b59      	ldr	r3, [pc, #356]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a58      	ldr	r2, [pc, #352]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800206a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002078:	4b53      	ldr	r3, [pc, #332]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4a52      	ldr	r2, [pc, #328]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 800207e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002082:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b50      	ldr	r3, [pc, #320]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	494d      	ldr	r1, [pc, #308]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d040      	beq.n	8002124 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d115      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c2:	4b41      	ldr	r3, [pc, #260]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e073      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	4b3d      	ldr	r3, [pc, #244]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06b      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b39      	ldr	r3, [pc, #228]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4936      	ldr	r1, [pc, #216]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f4:	f7ff f9dc 	bl	80014b0 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7ff f9d8 	bl	80014b0 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e053      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b2d      	ldr	r3, [pc, #180]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b27      	ldr	r3, [pc, #156]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d210      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b24      	ldr	r3, [pc, #144]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 020f 	bic.w	r2, r3, #15
 800213a:	4922      	ldr	r1, [pc, #136]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e032      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b19      	ldr	r3, [pc, #100]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4916      	ldr	r1, [pc, #88]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800217e:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490e      	ldr	r1, [pc, #56]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002192:	f000 f821 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490a      	ldr	r1, [pc, #40]	@ (80021cc <HAL_RCC_ClockConfig+0x1cc>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a09      	ldr	r2, [pc, #36]	@ (80021d0 <HAL_RCC_ClockConfig+0x1d0>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_RCC_ClockConfig+0x1d4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe ff4e 	bl	8001054 <HAL_InitTick>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023c00 	.word	0x40023c00
 80021c8:	40023800 	.word	0x40023800
 80021cc:	0800787c 	.word	0x0800787c
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021dc:	b090      	sub	sp, #64	@ 0x40
 80021de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80021e4:	2300      	movs	r3, #0
 80021e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021e8:	2300      	movs	r3, #0
 80021ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f0:	4b59      	ldr	r3, [pc, #356]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d00d      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x40>
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	f200 80a1 	bhi.w	8002344 <HAL_RCC_GetSysClockFreq+0x16c>
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x34>
 8002206:	2b04      	cmp	r3, #4
 8002208:	d003      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x3a>
 800220a:	e09b      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800220c:	4b53      	ldr	r3, [pc, #332]	@ (800235c <HAL_RCC_GetSysClockFreq+0x184>)
 800220e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002210:	e09b      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002212:	4b53      	ldr	r3, [pc, #332]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x188>)
 8002214:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002216:	e098      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002218:	4b4f      	ldr	r3, [pc, #316]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002220:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002222:	4b4d      	ldr	r3, [pc, #308]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d028      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222e:	4b4a      	ldr	r3, [pc, #296]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	2200      	movs	r2, #0
 8002236:	623b      	str	r3, [r7, #32]
 8002238:	627a      	str	r2, [r7, #36]	@ 0x24
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002240:	2100      	movs	r1, #0
 8002242:	4b47      	ldr	r3, [pc, #284]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x188>)
 8002244:	fb03 f201 	mul.w	r2, r3, r1
 8002248:	2300      	movs	r3, #0
 800224a:	fb00 f303 	mul.w	r3, r0, r3
 800224e:	4413      	add	r3, r2
 8002250:	4a43      	ldr	r2, [pc, #268]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x188>)
 8002252:	fba0 1202 	umull	r1, r2, r0, r2
 8002256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002258:	460a      	mov	r2, r1
 800225a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800225c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800225e:	4413      	add	r3, r2
 8002260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002264:	2200      	movs	r2, #0
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	61fa      	str	r2, [r7, #28]
 800226a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800226e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002272:	f7fd ffcd 	bl	8000210 <__aeabi_uldivmod>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4613      	mov	r3, r2
 800227c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800227e:	e053      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002280:	4b35      	ldr	r3, [pc, #212]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	099b      	lsrs	r3, r3, #6
 8002286:	2200      	movs	r2, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	617a      	str	r2, [r7, #20]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002292:	f04f 0b00 	mov.w	fp, #0
 8002296:	4652      	mov	r2, sl
 8002298:	465b      	mov	r3, fp
 800229a:	f04f 0000 	mov.w	r0, #0
 800229e:	f04f 0100 	mov.w	r1, #0
 80022a2:	0159      	lsls	r1, r3, #5
 80022a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a8:	0150      	lsls	r0, r2, #5
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	ebb2 080a 	subs.w	r8, r2, sl
 80022b2:	eb63 090b 	sbc.w	r9, r3, fp
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022ca:	ebb2 0408 	subs.w	r4, r2, r8
 80022ce:	eb63 0509 	sbc.w	r5, r3, r9
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	00eb      	lsls	r3, r5, #3
 80022dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e0:	00e2      	lsls	r2, r4, #3
 80022e2:	4614      	mov	r4, r2
 80022e4:	461d      	mov	r5, r3
 80022e6:	eb14 030a 	adds.w	r3, r4, sl
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	eb45 030b 	adc.w	r3, r5, fp
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022fe:	4629      	mov	r1, r5
 8002300:	028b      	lsls	r3, r1, #10
 8002302:	4621      	mov	r1, r4
 8002304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002308:	4621      	mov	r1, r4
 800230a:	028a      	lsls	r2, r1, #10
 800230c:	4610      	mov	r0, r2
 800230e:	4619      	mov	r1, r3
 8002310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002312:	2200      	movs	r2, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	60fa      	str	r2, [r7, #12]
 8002318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800231c:	f7fd ff78 	bl	8000210 <__aeabi_uldivmod>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4613      	mov	r3, r2
 8002326:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x180>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	3301      	adds	r3, #1
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002338:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800233a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002342:	e002      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002344:	4b05      	ldr	r3, [pc, #20]	@ (800235c <HAL_RCC_GetSysClockFreq+0x184>)
 8002346:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800234a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800234c:	4618      	mov	r0, r3
 800234e:	3740      	adds	r7, #64	@ 0x40
 8002350:	46bd      	mov	sp, r7
 8002352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	00f42400 	.word	0x00f42400
 8002360:	017d7840 	.word	0x017d7840

08002364 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002368:	4b03      	ldr	r3, [pc, #12]	@ (8002378 <HAL_RCC_GetHCLKFreq+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000000 	.word	0x20000000

0800237c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002380:	f7ff fff0 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 8002384:	4602      	mov	r2, r0
 8002386:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	0a9b      	lsrs	r3, r3, #10
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4903      	ldr	r1, [pc, #12]	@ (80023a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	0800788c 	.word	0x0800788c

080023a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a8:	f7ff ffdc 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	0b5b      	lsrs	r3, r3, #13
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	4903      	ldr	r1, [pc, #12]	@ (80023c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40023800 	.word	0x40023800
 80023c8:	0800788c 	.word	0x0800788c

080023cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	220f      	movs	r2, #15
 80023da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023dc:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <HAL_RCC_GetClockConfig+0x5c>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <HAL_RCC_GetClockConfig+0x5c>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <HAL_RCC_GetClockConfig+0x5c>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002400:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <HAL_RCC_GetClockConfig+0x5c>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800240e:	4b07      	ldr	r3, [pc, #28]	@ (800242c <HAL_RCC_GetClockConfig+0x60>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 020f 	and.w	r2, r3, #15
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	601a      	str	r2, [r3, #0]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40023c00 	.word	0x40023c00

08002430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d012      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002458:	4b69      	ldr	r3, [pc, #420]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a68      	ldr	r2, [pc, #416]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002462:	6093      	str	r3, [r2, #8]
 8002464:	4b66      	ldr	r3, [pc, #408]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800246c:	4964      	ldr	r1, [pc, #400]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800247a:	2301      	movs	r3, #1
 800247c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d017      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800248a:	4b5d      	ldr	r3, [pc, #372]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002490:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002498:	4959      	ldr	r1, [pc, #356]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024a8:	d101      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d017      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	494a      	ldr	r1, [pc, #296]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024e4:	d101      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002502:	2301      	movs	r3, #1
 8002504:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 808b 	beq.w	800262a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002514:	4b3a      	ldr	r3, [pc, #232]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	4a39      	ldr	r2, [pc, #228]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002520:	4b37      	ldr	r3, [pc, #220]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800252c:	4b35      	ldr	r3, [pc, #212]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a34      	ldr	r2, [pc, #208]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002538:	f7fe ffba 	bl	80014b0 <HAL_GetTick>
 800253c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002540:	f7fe ffb6 	bl	80014b0 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	@ 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e357      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002552:	4b2c      	ldr	r3, [pc, #176]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800255e:	4b28      	ldr	r3, [pc, #160]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002566:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d035      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	429a      	cmp	r2, r3
 800257a:	d02e      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800257c:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002584:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002586:	4b1e      	ldr	r3, [pc, #120]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258a:	4a1d      	ldr	r2, [pc, #116]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002590:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002592:	4b1b      	ldr	r3, [pc, #108]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002596:	4a1a      	ldr	r2, [pc, #104]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800259c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800259e:	4a18      	ldr	r2, [pc, #96]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025a4:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d114      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe ff7e 	bl	80014b0 <HAL_GetTick>
 80025b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b6:	e00a      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b8:	f7fe ff7a 	bl	80014b0 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e319      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0ee      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025e6:	d111      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025e8:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025f4:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025f6:	400b      	ands	r3, r1
 80025f8:	4901      	ldr	r1, [pc, #4]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
 80025fe:	e00b      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002600:	40023800 	.word	0x40023800
 8002604:	40007000 	.word	0x40007000
 8002608:	0ffffcff 	.word	0x0ffffcff
 800260c:	4baa      	ldr	r3, [pc, #680]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4aa9      	ldr	r2, [pc, #676]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002612:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002616:	6093      	str	r3, [r2, #8]
 8002618:	4ba7      	ldr	r3, [pc, #668]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800261a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	49a4      	ldr	r1, [pc, #656]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002626:	4313      	orrs	r3, r2
 8002628:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	d010      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002636:	4ba0      	ldr	r3, [pc, #640]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800263c:	4a9e      	ldr	r2, [pc, #632]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002642:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002646:	4b9c      	ldr	r3, [pc, #624]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002648:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002650:	4999      	ldr	r1, [pc, #612]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002664:	4b94      	ldr	r3, [pc, #592]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002672:	4991      	ldr	r1, [pc, #580]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002686:	4b8c      	ldr	r3, [pc, #560]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002694:	4988      	ldr	r1, [pc, #544]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026a8:	4b83      	ldr	r3, [pc, #524]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026b6:	4980      	ldr	r1, [pc, #512]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026ca:	4b7b      	ldr	r3, [pc, #492]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d8:	4977      	ldr	r1, [pc, #476]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ec:	4b72      	ldr	r3, [pc, #456]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f2:	f023 0203 	bic.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	496f      	ldr	r1, [pc, #444]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800270e:	4b6a      	ldr	r3, [pc, #424]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002714:	f023 020c 	bic.w	r2, r3, #12
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800271c:	4966      	ldr	r1, [pc, #408]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002730:	4b61      	ldr	r3, [pc, #388]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002736:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273e:	495e      	ldr	r1, [pc, #376]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002752:	4b59      	ldr	r3, [pc, #356]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002758:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002760:	4955      	ldr	r1, [pc, #340]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002774:	4b50      	ldr	r3, [pc, #320]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002782:	494d      	ldr	r1, [pc, #308]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002796:	4b48      	ldr	r3, [pc, #288]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a4:	4944      	ldr	r1, [pc, #272]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80027b8:	4b3f      	ldr	r3, [pc, #252]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c6:	493c      	ldr	r1, [pc, #240]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027da:	4b37      	ldr	r3, [pc, #220]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e8:	4933      	ldr	r1, [pc, #204]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027fc:	4b2e      	ldr	r3, [pc, #184]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002802:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800280a:	492b      	ldr	r1, [pc, #172]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d011      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800281e:	4b26      	ldr	r3, [pc, #152]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002824:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800282c:	4922      	ldr	r1, [pc, #136]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002838:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800283c:	d101      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800283e:	2301      	movs	r3, #1
 8002840:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800284e:	2301      	movs	r3, #1
 8002850:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800285e:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002864:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286c:	4912      	ldr	r1, [pc, #72]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00b      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002880:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002886:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002890:	4909      	ldr	r1, [pc, #36]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d006      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80d9 	beq.w	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028ac:	4b02      	ldr	r3, [pc, #8]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a01      	ldr	r2, [pc, #4]	@ (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80028b6:	e001      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028be:	f7fe fdf7 	bl	80014b0 <HAL_GetTick>
 80028c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028c6:	f7fe fdf3 	bl	80014b0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b64      	cmp	r3, #100	@ 0x64
 80028d2:	d901      	bls.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e194      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028d8:	4b6c      	ldr	r3, [pc, #432]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d021      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d11d      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028f8:	4b64      	ldr	r3, [pc, #400]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028fe:	0c1b      	lsrs	r3, r3, #16
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002906:	4b61      	ldr	r3, [pc, #388]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800290c:	0e1b      	lsrs	r3, r3, #24
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	019a      	lsls	r2, r3, #6
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	431a      	orrs	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	061b      	lsls	r3, r3, #24
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	071b      	lsls	r3, r3, #28
 800292c:	4957      	ldr	r1, [pc, #348]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002944:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002952:	2b00      	cmp	r3, #0
 8002954:	d02e      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800295e:	d129      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002960:	4b4a      	ldr	r3, [pc, #296]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002962:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002966:	0c1b      	lsrs	r3, r3, #16
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800296e:	4b47      	ldr	r3, [pc, #284]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002974:	0f1b      	lsrs	r3, r3, #28
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	019a      	lsls	r2, r3, #6
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	041b      	lsls	r3, r3, #16
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	061b      	lsls	r3, r3, #24
 800298e:	431a      	orrs	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	071b      	lsls	r3, r3, #28
 8002994:	493d      	ldr	r1, [pc, #244]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800299c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800299e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029a2:	f023 021f 	bic.w	r2, r3, #31
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	3b01      	subs	r3, #1
 80029ac:	4937      	ldr	r1, [pc, #220]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01d      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029c0:	4b32      	ldr	r3, [pc, #200]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029c6:	0e1b      	lsrs	r3, r3, #24
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029ce:	4b2f      	ldr	r3, [pc, #188]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029d4:	0f1b      	lsrs	r3, r3, #28
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	019a      	lsls	r2, r3, #6
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	041b      	lsls	r3, r3, #16
 80029e8:	431a      	orrs	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	431a      	orrs	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	071b      	lsls	r3, r3, #28
 80029f4:	4925      	ldr	r1, [pc, #148]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d011      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	019a      	lsls	r2, r3, #6
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	041b      	lsls	r3, r3, #16
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	061b      	lsls	r3, r3, #24
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	071b      	lsls	r3, r3, #28
 8002a24:	4919      	ldr	r1, [pc, #100]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a2c:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a16      	ldr	r2, [pc, #88]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a38:	f7fe fd3a 	bl	80014b0 <HAL_GetTick>
 8002a3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a40:	f7fe fd36 	bl	80014b0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	@ 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e0d7      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a52:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	f040 80cd 	bne.w	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a66:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a08      	ldr	r2, [pc, #32]	@ (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a72:	f7fe fd1d 	bl	80014b0 <HAL_GetTick>
 8002a76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a78:	e00a      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a7a:	f7fe fd19 	bl	80014b0 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b64      	cmp	r3, #100	@ 0x64
 8002a86:	d903      	bls.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e0ba      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002a8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a90:	4b5e      	ldr	r3, [pc, #376]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a9c:	d0ed      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d02e      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d12a      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ac6:	4b51      	ldr	r3, [pc, #324]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ada:	0f1b      	lsrs	r3, r3, #28
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	019a      	lsls	r2, r3, #6
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	061b      	lsls	r3, r3, #24
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	071b      	lsls	r3, r3, #28
 8002afa:	4944      	ldr	r1, [pc, #272]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b02:	4b42      	ldr	r3, [pc, #264]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b08:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	3b01      	subs	r3, #1
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	493d      	ldr	r1, [pc, #244]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d022      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b30:	d11d      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b32:	4b36      	ldr	r3, [pc, #216]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b38:	0e1b      	lsrs	r3, r3, #24
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b40:	4b32      	ldr	r3, [pc, #200]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b46:	0f1b      	lsrs	r3, r3, #28
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	019a      	lsls	r2, r3, #6
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	061b      	lsls	r3, r3, #24
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	071b      	lsls	r3, r3, #28
 8002b66:	4929      	ldr	r1, [pc, #164]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d028      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b7a:	4b24      	ldr	r3, [pc, #144]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b80:	0e1b      	lsrs	r3, r3, #24
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b88:	4b20      	ldr	r3, [pc, #128]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8e:	0c1b      	lsrs	r3, r3, #16
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	019a      	lsls	r2, r3, #6
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	041b      	lsls	r3, r3, #16
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	061b      	lsls	r3, r3, #24
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	071b      	lsls	r3, r3, #28
 8002bae:	4917      	ldr	r1, [pc, #92]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	4911      	ldr	r1, [pc, #68]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fc6a 	bl	80014b0 <HAL_GetTick>
 8002bdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002be0:	f7fe fc66 	bl	80014b0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	@ 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e007      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bf2:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bfe:	d1ef      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800

08002c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e049      	b.n	8002cb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f841 	bl	8002cbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f000 f9e8 	bl	8003024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d001      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e054      	b.n	8002d96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a26      	ldr	r2, [pc, #152]	@ (8002da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d022      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0x80>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d16:	d01d      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0x80>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a22      	ldr	r2, [pc, #136]	@ (8002da8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d018      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0x80>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a21      	ldr	r2, [pc, #132]	@ (8002dac <HAL_TIM_Base_Start_IT+0xd8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d013      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0x80>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1f      	ldr	r2, [pc, #124]	@ (8002db0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00e      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0x80>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002db4 <HAL_TIM_Base_Start_IT+0xe0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d009      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0x80>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1c      	ldr	r2, [pc, #112]	@ (8002db8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d004      	beq.n	8002d54 <HAL_TIM_Base_Start_IT+0x80>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dbc <HAL_TIM_Base_Start_IT+0xe8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d115      	bne.n	8002d80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	4b19      	ldr	r3, [pc, #100]	@ (8002dc0 <HAL_TIM_Base_Start_IT+0xec>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d015      	beq.n	8002d92 <HAL_TIM_Base_Start_IT+0xbe>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d6c:	d011      	beq.n	8002d92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0201 	orr.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7e:	e008      	b.n	8002d92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e000      	b.n	8002d94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40010000 	.word	0x40010000
 8002da8:	40000400 	.word	0x40000400
 8002dac:	40000800 	.word	0x40000800
 8002db0:	40000c00 	.word	0x40000c00
 8002db4:	40010400 	.word	0x40010400
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	40001800 	.word	0x40001800
 8002dc0:	00010007 	.word	0x00010007

08002dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d020      	beq.n	8002e28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01b      	beq.n	8002e28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0202 	mvn.w	r2, #2
 8002df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f8e9 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8db 	bl	8002fd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f8ec 	bl	8002ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d020      	beq.n	8002e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01b      	beq.n	8002e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0204 	mvn.w	r2, #4
 8002e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f8c3 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f8b5 	bl	8002fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f8c6 	bl	8002ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d020      	beq.n	8002ec0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01b      	beq.n	8002ec0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0208 	mvn.w	r2, #8
 8002e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2204      	movs	r2, #4
 8002e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f89d 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002eac:	e005      	b.n	8002eba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f88f 	bl	8002fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f8a0 	bl	8002ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d020      	beq.n	8002f0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d01b      	beq.n	8002f0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0210 	mvn.w	r2, #16
 8002edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f877 	bl	8002fe6 <HAL_TIM_IC_CaptureCallback>
 8002ef8:	e005      	b.n	8002f06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f869 	bl	8002fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f87a 	bl	8002ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00c      	beq.n	8002f30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0201 	mvn.w	r2, #1
 8002f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe f852 	bl	8000fd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d104      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00c      	beq.n	8002f5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f919 	bl	8003190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00c      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f911 	bl	80031a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00c      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f834 	bl	800300e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00c      	beq.n	8002fca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f06f 0220 	mvn.w	r2, #32
 8002fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f8d9 	bl	800317c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a46      	ldr	r2, [pc, #280]	@ (8003150 <TIM_Base_SetConfig+0x12c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d013      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003042:	d00f      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a43      	ldr	r2, [pc, #268]	@ (8003154 <TIM_Base_SetConfig+0x130>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00b      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a42      	ldr	r2, [pc, #264]	@ (8003158 <TIM_Base_SetConfig+0x134>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d007      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a41      	ldr	r2, [pc, #260]	@ (800315c <TIM_Base_SetConfig+0x138>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <TIM_Base_SetConfig+0x40>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a40      	ldr	r2, [pc, #256]	@ (8003160 <TIM_Base_SetConfig+0x13c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d108      	bne.n	8003076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800306a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a35      	ldr	r2, [pc, #212]	@ (8003150 <TIM_Base_SetConfig+0x12c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d02b      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003084:	d027      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a32      	ldr	r2, [pc, #200]	@ (8003154 <TIM_Base_SetConfig+0x130>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d023      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a31      	ldr	r2, [pc, #196]	@ (8003158 <TIM_Base_SetConfig+0x134>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01f      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a30      	ldr	r2, [pc, #192]	@ (800315c <TIM_Base_SetConfig+0x138>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01b      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003160 <TIM_Base_SetConfig+0x13c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d017      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003164 <TIM_Base_SetConfig+0x140>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003168 <TIM_Base_SetConfig+0x144>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00f      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a2c      	ldr	r2, [pc, #176]	@ (800316c <TIM_Base_SetConfig+0x148>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00b      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003170 <TIM_Base_SetConfig+0x14c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003174 <TIM_Base_SetConfig+0x150>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a29      	ldr	r2, [pc, #164]	@ (8003178 <TIM_Base_SetConfig+0x154>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d108      	bne.n	80030e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a10      	ldr	r2, [pc, #64]	@ (8003150 <TIM_Base_SetConfig+0x12c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <TIM_Base_SetConfig+0xf8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a12      	ldr	r2, [pc, #72]	@ (8003160 <TIM_Base_SetConfig+0x13c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d103      	bne.n	8003124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d105      	bne.n	8003142 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f023 0201 	bic.w	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	611a      	str	r2, [r3, #16]
  }
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40010000 	.word	0x40010000
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800
 800315c:	40000c00 	.word	0x40000c00
 8003160:	40010400 	.word	0x40010400
 8003164:	40014000 	.word	0x40014000
 8003168:	40014400 	.word	0x40014400
 800316c:	40014800 	.word	0x40014800
 8003170:	40001800 	.word	0x40001800
 8003174:	40001c00 	.word	0x40001c00
 8003178:	40002000 	.word	0x40002000

0800317c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e040      	b.n	800324c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fe f8c0 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	@ 0x24
 80031e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fb16 	bl	8003830 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f8af 	bl	8003368 <UART_SetConfig>
 800320a:	4603      	mov	r3, r0
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e01b      	b.n	800324c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fb95 	bl	8003974 <UART_CheckIdleState>
 800324a:	4603      	mov	r3, r0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	@ 0x28
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003268:	2b20      	cmp	r3, #32
 800326a:	d177      	bne.n	800335c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_UART_Transmit+0x24>
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e070      	b.n	800335e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2221      	movs	r2, #33	@ 0x21
 8003288:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800328a:	f7fe f911 	bl	80014b0 <HAL_GetTick>
 800328e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	88fa      	ldrh	r2, [r7, #6]
 8003294:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032a8:	d108      	bne.n	80032bc <HAL_UART_Transmit+0x68>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d104      	bne.n	80032bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	e003      	b.n	80032c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032c4:	e02f      	b.n	8003326 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2180      	movs	r1, #128	@ 0x80
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fba6 	bl	8003a22 <UART_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e03b      	b.n	800335e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	3302      	adds	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e007      	b.n	8003314 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	781a      	ldrb	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3301      	adds	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1c9      	bne.n	80032c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2200      	movs	r2, #0
 800333a:	2140      	movs	r1, #64	@ 0x40
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fb70 	bl	8003a22 <UART_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e005      	b.n	800335e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	e000      	b.n	800335e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800335c:	2302      	movs	r3, #2
  }
}
 800335e:	4618      	mov	r0, r3
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4ba6      	ldr	r3, [pc, #664]	@ (800362c <UART_SetConfig+0x2c4>)
 8003394:	4013      	ands	r3, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	6979      	ldr	r1, [r7, #20]
 800339c:	430b      	orrs	r3, r1
 800339e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a94      	ldr	r2, [pc, #592]	@ (8003630 <UART_SetConfig+0x2c8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d120      	bne.n	8003426 <UART_SetConfig+0xbe>
 80033e4:	4b93      	ldr	r3, [pc, #588]	@ (8003634 <UART_SetConfig+0x2cc>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d816      	bhi.n	8003420 <UART_SetConfig+0xb8>
 80033f2:	a201      	add	r2, pc, #4	@ (adr r2, 80033f8 <UART_SetConfig+0x90>)
 80033f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f8:	08003409 	.word	0x08003409
 80033fc:	08003415 	.word	0x08003415
 8003400:	0800340f 	.word	0x0800340f
 8003404:	0800341b 	.word	0x0800341b
 8003408:	2301      	movs	r3, #1
 800340a:	77fb      	strb	r3, [r7, #31]
 800340c:	e150      	b.n	80036b0 <UART_SetConfig+0x348>
 800340e:	2302      	movs	r3, #2
 8003410:	77fb      	strb	r3, [r7, #31]
 8003412:	e14d      	b.n	80036b0 <UART_SetConfig+0x348>
 8003414:	2304      	movs	r3, #4
 8003416:	77fb      	strb	r3, [r7, #31]
 8003418:	e14a      	b.n	80036b0 <UART_SetConfig+0x348>
 800341a:	2308      	movs	r3, #8
 800341c:	77fb      	strb	r3, [r7, #31]
 800341e:	e147      	b.n	80036b0 <UART_SetConfig+0x348>
 8003420:	2310      	movs	r3, #16
 8003422:	77fb      	strb	r3, [r7, #31]
 8003424:	e144      	b.n	80036b0 <UART_SetConfig+0x348>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a83      	ldr	r2, [pc, #524]	@ (8003638 <UART_SetConfig+0x2d0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d132      	bne.n	8003496 <UART_SetConfig+0x12e>
 8003430:	4b80      	ldr	r3, [pc, #512]	@ (8003634 <UART_SetConfig+0x2cc>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d828      	bhi.n	8003490 <UART_SetConfig+0x128>
 800343e:	a201      	add	r2, pc, #4	@ (adr r2, 8003444 <UART_SetConfig+0xdc>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	08003479 	.word	0x08003479
 8003448:	08003491 	.word	0x08003491
 800344c:	08003491 	.word	0x08003491
 8003450:	08003491 	.word	0x08003491
 8003454:	08003485 	.word	0x08003485
 8003458:	08003491 	.word	0x08003491
 800345c:	08003491 	.word	0x08003491
 8003460:	08003491 	.word	0x08003491
 8003464:	0800347f 	.word	0x0800347f
 8003468:	08003491 	.word	0x08003491
 800346c:	08003491 	.word	0x08003491
 8003470:	08003491 	.word	0x08003491
 8003474:	0800348b 	.word	0x0800348b
 8003478:	2300      	movs	r3, #0
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e118      	b.n	80036b0 <UART_SetConfig+0x348>
 800347e:	2302      	movs	r3, #2
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e115      	b.n	80036b0 <UART_SetConfig+0x348>
 8003484:	2304      	movs	r3, #4
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e112      	b.n	80036b0 <UART_SetConfig+0x348>
 800348a:	2308      	movs	r3, #8
 800348c:	77fb      	strb	r3, [r7, #31]
 800348e:	e10f      	b.n	80036b0 <UART_SetConfig+0x348>
 8003490:	2310      	movs	r3, #16
 8003492:	77fb      	strb	r3, [r7, #31]
 8003494:	e10c      	b.n	80036b0 <UART_SetConfig+0x348>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a68      	ldr	r2, [pc, #416]	@ (800363c <UART_SetConfig+0x2d4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d120      	bne.n	80034e2 <UART_SetConfig+0x17a>
 80034a0:	4b64      	ldr	r3, [pc, #400]	@ (8003634 <UART_SetConfig+0x2cc>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034aa:	2b30      	cmp	r3, #48	@ 0x30
 80034ac:	d013      	beq.n	80034d6 <UART_SetConfig+0x16e>
 80034ae:	2b30      	cmp	r3, #48	@ 0x30
 80034b0:	d814      	bhi.n	80034dc <UART_SetConfig+0x174>
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d009      	beq.n	80034ca <UART_SetConfig+0x162>
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	d810      	bhi.n	80034dc <UART_SetConfig+0x174>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <UART_SetConfig+0x15c>
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d006      	beq.n	80034d0 <UART_SetConfig+0x168>
 80034c2:	e00b      	b.n	80034dc <UART_SetConfig+0x174>
 80034c4:	2300      	movs	r3, #0
 80034c6:	77fb      	strb	r3, [r7, #31]
 80034c8:	e0f2      	b.n	80036b0 <UART_SetConfig+0x348>
 80034ca:	2302      	movs	r3, #2
 80034cc:	77fb      	strb	r3, [r7, #31]
 80034ce:	e0ef      	b.n	80036b0 <UART_SetConfig+0x348>
 80034d0:	2304      	movs	r3, #4
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e0ec      	b.n	80036b0 <UART_SetConfig+0x348>
 80034d6:	2308      	movs	r3, #8
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e0e9      	b.n	80036b0 <UART_SetConfig+0x348>
 80034dc:	2310      	movs	r3, #16
 80034de:	77fb      	strb	r3, [r7, #31]
 80034e0:	e0e6      	b.n	80036b0 <UART_SetConfig+0x348>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a56      	ldr	r2, [pc, #344]	@ (8003640 <UART_SetConfig+0x2d8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d120      	bne.n	800352e <UART_SetConfig+0x1c6>
 80034ec:	4b51      	ldr	r3, [pc, #324]	@ (8003634 <UART_SetConfig+0x2cc>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80034f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80034f8:	d013      	beq.n	8003522 <UART_SetConfig+0x1ba>
 80034fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80034fc:	d814      	bhi.n	8003528 <UART_SetConfig+0x1c0>
 80034fe:	2b80      	cmp	r3, #128	@ 0x80
 8003500:	d009      	beq.n	8003516 <UART_SetConfig+0x1ae>
 8003502:	2b80      	cmp	r3, #128	@ 0x80
 8003504:	d810      	bhi.n	8003528 <UART_SetConfig+0x1c0>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <UART_SetConfig+0x1a8>
 800350a:	2b40      	cmp	r3, #64	@ 0x40
 800350c:	d006      	beq.n	800351c <UART_SetConfig+0x1b4>
 800350e:	e00b      	b.n	8003528 <UART_SetConfig+0x1c0>
 8003510:	2300      	movs	r3, #0
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e0cc      	b.n	80036b0 <UART_SetConfig+0x348>
 8003516:	2302      	movs	r3, #2
 8003518:	77fb      	strb	r3, [r7, #31]
 800351a:	e0c9      	b.n	80036b0 <UART_SetConfig+0x348>
 800351c:	2304      	movs	r3, #4
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e0c6      	b.n	80036b0 <UART_SetConfig+0x348>
 8003522:	2308      	movs	r3, #8
 8003524:	77fb      	strb	r3, [r7, #31]
 8003526:	e0c3      	b.n	80036b0 <UART_SetConfig+0x348>
 8003528:	2310      	movs	r3, #16
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e0c0      	b.n	80036b0 <UART_SetConfig+0x348>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a44      	ldr	r2, [pc, #272]	@ (8003644 <UART_SetConfig+0x2dc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d125      	bne.n	8003584 <UART_SetConfig+0x21c>
 8003538:	4b3e      	ldr	r3, [pc, #248]	@ (8003634 <UART_SetConfig+0x2cc>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003542:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003546:	d017      	beq.n	8003578 <UART_SetConfig+0x210>
 8003548:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800354c:	d817      	bhi.n	800357e <UART_SetConfig+0x216>
 800354e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003552:	d00b      	beq.n	800356c <UART_SetConfig+0x204>
 8003554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003558:	d811      	bhi.n	800357e <UART_SetConfig+0x216>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <UART_SetConfig+0x1fe>
 800355e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003562:	d006      	beq.n	8003572 <UART_SetConfig+0x20a>
 8003564:	e00b      	b.n	800357e <UART_SetConfig+0x216>
 8003566:	2300      	movs	r3, #0
 8003568:	77fb      	strb	r3, [r7, #31]
 800356a:	e0a1      	b.n	80036b0 <UART_SetConfig+0x348>
 800356c:	2302      	movs	r3, #2
 800356e:	77fb      	strb	r3, [r7, #31]
 8003570:	e09e      	b.n	80036b0 <UART_SetConfig+0x348>
 8003572:	2304      	movs	r3, #4
 8003574:	77fb      	strb	r3, [r7, #31]
 8003576:	e09b      	b.n	80036b0 <UART_SetConfig+0x348>
 8003578:	2308      	movs	r3, #8
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	e098      	b.n	80036b0 <UART_SetConfig+0x348>
 800357e:	2310      	movs	r3, #16
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e095      	b.n	80036b0 <UART_SetConfig+0x348>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2f      	ldr	r2, [pc, #188]	@ (8003648 <UART_SetConfig+0x2e0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d125      	bne.n	80035da <UART_SetConfig+0x272>
 800358e:	4b29      	ldr	r3, [pc, #164]	@ (8003634 <UART_SetConfig+0x2cc>)
 8003590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003594:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003598:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800359c:	d017      	beq.n	80035ce <UART_SetConfig+0x266>
 800359e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035a2:	d817      	bhi.n	80035d4 <UART_SetConfig+0x26c>
 80035a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035a8:	d00b      	beq.n	80035c2 <UART_SetConfig+0x25a>
 80035aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035ae:	d811      	bhi.n	80035d4 <UART_SetConfig+0x26c>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <UART_SetConfig+0x254>
 80035b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b8:	d006      	beq.n	80035c8 <UART_SetConfig+0x260>
 80035ba:	e00b      	b.n	80035d4 <UART_SetConfig+0x26c>
 80035bc:	2301      	movs	r3, #1
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	e076      	b.n	80036b0 <UART_SetConfig+0x348>
 80035c2:	2302      	movs	r3, #2
 80035c4:	77fb      	strb	r3, [r7, #31]
 80035c6:	e073      	b.n	80036b0 <UART_SetConfig+0x348>
 80035c8:	2304      	movs	r3, #4
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e070      	b.n	80036b0 <UART_SetConfig+0x348>
 80035ce:	2308      	movs	r3, #8
 80035d0:	77fb      	strb	r3, [r7, #31]
 80035d2:	e06d      	b.n	80036b0 <UART_SetConfig+0x348>
 80035d4:	2310      	movs	r3, #16
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e06a      	b.n	80036b0 <UART_SetConfig+0x348>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1b      	ldr	r2, [pc, #108]	@ (800364c <UART_SetConfig+0x2e4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d138      	bne.n	8003656 <UART_SetConfig+0x2ee>
 80035e4:	4b13      	ldr	r3, [pc, #76]	@ (8003634 <UART_SetConfig+0x2cc>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80035ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035f2:	d017      	beq.n	8003624 <UART_SetConfig+0x2bc>
 80035f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035f8:	d82a      	bhi.n	8003650 <UART_SetConfig+0x2e8>
 80035fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035fe:	d00b      	beq.n	8003618 <UART_SetConfig+0x2b0>
 8003600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003604:	d824      	bhi.n	8003650 <UART_SetConfig+0x2e8>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <UART_SetConfig+0x2aa>
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800360e:	d006      	beq.n	800361e <UART_SetConfig+0x2b6>
 8003610:	e01e      	b.n	8003650 <UART_SetConfig+0x2e8>
 8003612:	2300      	movs	r3, #0
 8003614:	77fb      	strb	r3, [r7, #31]
 8003616:	e04b      	b.n	80036b0 <UART_SetConfig+0x348>
 8003618:	2302      	movs	r3, #2
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e048      	b.n	80036b0 <UART_SetConfig+0x348>
 800361e:	2304      	movs	r3, #4
 8003620:	77fb      	strb	r3, [r7, #31]
 8003622:	e045      	b.n	80036b0 <UART_SetConfig+0x348>
 8003624:	2308      	movs	r3, #8
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	e042      	b.n	80036b0 <UART_SetConfig+0x348>
 800362a:	bf00      	nop
 800362c:	efff69f3 	.word	0xefff69f3
 8003630:	40011000 	.word	0x40011000
 8003634:	40023800 	.word	0x40023800
 8003638:	40004400 	.word	0x40004400
 800363c:	40004800 	.word	0x40004800
 8003640:	40004c00 	.word	0x40004c00
 8003644:	40005000 	.word	0x40005000
 8003648:	40011400 	.word	0x40011400
 800364c:	40007800 	.word	0x40007800
 8003650:	2310      	movs	r3, #16
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e02c      	b.n	80036b0 <UART_SetConfig+0x348>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a72      	ldr	r2, [pc, #456]	@ (8003824 <UART_SetConfig+0x4bc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d125      	bne.n	80036ac <UART_SetConfig+0x344>
 8003660:	4b71      	ldr	r3, [pc, #452]	@ (8003828 <UART_SetConfig+0x4c0>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003666:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800366a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800366e:	d017      	beq.n	80036a0 <UART_SetConfig+0x338>
 8003670:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003674:	d817      	bhi.n	80036a6 <UART_SetConfig+0x33e>
 8003676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800367a:	d00b      	beq.n	8003694 <UART_SetConfig+0x32c>
 800367c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003680:	d811      	bhi.n	80036a6 <UART_SetConfig+0x33e>
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <UART_SetConfig+0x326>
 8003686:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800368a:	d006      	beq.n	800369a <UART_SetConfig+0x332>
 800368c:	e00b      	b.n	80036a6 <UART_SetConfig+0x33e>
 800368e:	2300      	movs	r3, #0
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e00d      	b.n	80036b0 <UART_SetConfig+0x348>
 8003694:	2302      	movs	r3, #2
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e00a      	b.n	80036b0 <UART_SetConfig+0x348>
 800369a:	2304      	movs	r3, #4
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e007      	b.n	80036b0 <UART_SetConfig+0x348>
 80036a0:	2308      	movs	r3, #8
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e004      	b.n	80036b0 <UART_SetConfig+0x348>
 80036a6:	2310      	movs	r3, #16
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e001      	b.n	80036b0 <UART_SetConfig+0x348>
 80036ac:	2310      	movs	r3, #16
 80036ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036b8:	d15b      	bne.n	8003772 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80036ba:	7ffb      	ldrb	r3, [r7, #31]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d828      	bhi.n	8003712 <UART_SetConfig+0x3aa>
 80036c0:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <UART_SetConfig+0x360>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036ed 	.word	0x080036ed
 80036cc:	080036f5 	.word	0x080036f5
 80036d0:	080036fd 	.word	0x080036fd
 80036d4:	08003713 	.word	0x08003713
 80036d8:	08003703 	.word	0x08003703
 80036dc:	08003713 	.word	0x08003713
 80036e0:	08003713 	.word	0x08003713
 80036e4:	08003713 	.word	0x08003713
 80036e8:	0800370b 	.word	0x0800370b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ec:	f7fe fe46 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 80036f0:	61b8      	str	r0, [r7, #24]
        break;
 80036f2:	e013      	b.n	800371c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f4:	f7fe fe56 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 80036f8:	61b8      	str	r0, [r7, #24]
        break;
 80036fa:	e00f      	b.n	800371c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036fc:	4b4b      	ldr	r3, [pc, #300]	@ (800382c <UART_SetConfig+0x4c4>)
 80036fe:	61bb      	str	r3, [r7, #24]
        break;
 8003700:	e00c      	b.n	800371c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003702:	f7fe fd69 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8003706:	61b8      	str	r0, [r7, #24]
        break;
 8003708:	e008      	b.n	800371c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800370e:	61bb      	str	r3, [r7, #24]
        break;
 8003710:	e004      	b.n	800371c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	77bb      	strb	r3, [r7, #30]
        break;
 800371a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d074      	beq.n	800380c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	005a      	lsls	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	441a      	add	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b0f      	cmp	r3, #15
 800373c:	d916      	bls.n	800376c <UART_SetConfig+0x404>
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003744:	d212      	bcs.n	800376c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	b29b      	uxth	r3, r3
 800374a:	f023 030f 	bic.w	r3, r3, #15
 800374e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	085b      	lsrs	r3, r3, #1
 8003754:	b29b      	uxth	r3, r3
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	b29a      	uxth	r2, r3
 800375c:	89fb      	ldrh	r3, [r7, #14]
 800375e:	4313      	orrs	r3, r2
 8003760:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	89fa      	ldrh	r2, [r7, #14]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	e04f      	b.n	800380c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	77bb      	strb	r3, [r7, #30]
 8003770:	e04c      	b.n	800380c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003772:	7ffb      	ldrb	r3, [r7, #31]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d828      	bhi.n	80037ca <UART_SetConfig+0x462>
 8003778:	a201      	add	r2, pc, #4	@ (adr r2, 8003780 <UART_SetConfig+0x418>)
 800377a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377e:	bf00      	nop
 8003780:	080037a5 	.word	0x080037a5
 8003784:	080037ad 	.word	0x080037ad
 8003788:	080037b5 	.word	0x080037b5
 800378c:	080037cb 	.word	0x080037cb
 8003790:	080037bb 	.word	0x080037bb
 8003794:	080037cb 	.word	0x080037cb
 8003798:	080037cb 	.word	0x080037cb
 800379c:	080037cb 	.word	0x080037cb
 80037a0:	080037c3 	.word	0x080037c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a4:	f7fe fdea 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 80037a8:	61b8      	str	r0, [r7, #24]
        break;
 80037aa:	e013      	b.n	80037d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7fe fdfa 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 80037b0:	61b8      	str	r0, [r7, #24]
        break;
 80037b2:	e00f      	b.n	80037d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b4:	4b1d      	ldr	r3, [pc, #116]	@ (800382c <UART_SetConfig+0x4c4>)
 80037b6:	61bb      	str	r3, [r7, #24]
        break;
 80037b8:	e00c      	b.n	80037d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ba:	f7fe fd0d 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 80037be:	61b8      	str	r0, [r7, #24]
        break;
 80037c0:	e008      	b.n	80037d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037c6:	61bb      	str	r3, [r7, #24]
        break;
 80037c8:	e004      	b.n	80037d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	77bb      	strb	r3, [r7, #30]
        break;
 80037d2:	bf00      	nop
    }

    if (pclk != 0U)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d018      	beq.n	800380c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	085a      	lsrs	r2, r3, #1
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	441a      	add	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b0f      	cmp	r3, #15
 80037f2:	d909      	bls.n	8003808 <UART_SetConfig+0x4a0>
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037fa:	d205      	bcs.n	8003808 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	e001      	b.n	800380c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003818:	7fbb      	ldrb	r3, [r7, #30]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3720      	adds	r7, #32
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40007c00 	.word	0x40007c00
 8003828:	40023800 	.word	0x40023800
 800382c:	00f42400 	.word	0x00f42400

08003830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01a      	beq.n	8003946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800392e:	d10a      	bne.n	8003946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	605a      	str	r2, [r3, #4]
  }
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08c      	sub	sp, #48	@ 0x30
 8003978:	af02      	add	r7, sp, #8
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003984:	f7fd fd94 	bl	80014b0 <HAL_GetTick>
 8003988:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b08      	cmp	r3, #8
 8003996:	d12e      	bne.n	80039f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003998:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	2200      	movs	r2, #0
 80039a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f83b 	bl	8003a22 <UART_WaitOnFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d021      	beq.n	80039f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	e853 3f00 	ldrex	r3, [r3]
 80039be:	60fb      	str	r3, [r7, #12]
   return(result);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039c6:	623b      	str	r3, [r7, #32]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	617b      	str	r3, [r7, #20]
   return(result);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e6      	bne.n	80039b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e011      	b.n	8003a1a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3728      	adds	r7, #40	@ 0x28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a32:	e04f      	b.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d04b      	beq.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3c:	f7fd fd38 	bl	80014b0 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d302      	bcc.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e04e      	b.n	8003af4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d037      	beq.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b80      	cmp	r3, #128	@ 0x80
 8003a68:	d034      	beq.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b40      	cmp	r3, #64	@ 0x40
 8003a6e:	d031      	beq.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d110      	bne.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2208      	movs	r2, #8
 8003a84:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f838 	bl	8003afc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2208      	movs	r2, #8
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e029      	b.n	8003af4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aae:	d111      	bne.n	8003ad4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ab8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f81e 	bl	8003afc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e00f      	b.n	8003af4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d0a0      	beq.n	8003a34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b095      	sub	sp, #84	@ 0x54
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b22:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e6      	bne.n	8003b04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	e853 3f00 	ldrex	r3, [r3]
 8003b44:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3308      	adds	r3, #8
 8003b54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e5      	bne.n	8003b36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d118      	bne.n	8003ba4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f023 0310 	bic.w	r3, r3, #16
 8003b86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	6979      	ldr	r1, [r7, #20]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e6      	bne.n	8003b72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003bb8:	bf00      	nop
 8003bba:	3754      	adds	r7, #84	@ 0x54
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bda:	f3ef 8305 	mrs	r3, IPSR
 8003bde:	60bb      	str	r3, [r7, #8]
  return(result);
 8003be0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10f      	bne.n	8003c06 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bea:	607b      	str	r3, [r7, #4]
  return(result);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d105      	bne.n	8003bfe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8003bf6:	603b      	str	r3, [r7, #0]
  return(result);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <osKernelInitialize+0x3a>
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8003c38 <osKernelInitialize+0x64>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d103      	bne.n	8003c0e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003c06:	f06f 0305 	mvn.w	r3, #5
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	e00c      	b.n	8003c28 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c38 <osKernelInitialize+0x64>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d105      	bne.n	8003c22 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c16:	4b08      	ldr	r3, [pc, #32]	@ (8003c38 <osKernelInitialize+0x64>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	e002      	b.n	8003c28 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
 8003c26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c28:	68fb      	ldr	r3, [r7, #12]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	2000016c 	.word	0x2000016c

08003c3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c42:	f3ef 8305 	mrs	r3, IPSR
 8003c46:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10f      	bne.n	8003c6e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c52:	607b      	str	r3, [r7, #4]
  return(result);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8003c5e:	603b      	str	r3, [r7, #0]
  return(result);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <osKernelStart+0x3a>
 8003c66:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca4 <osKernelStart+0x68>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d103      	bne.n	8003c76 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003c6e:	f06f 0305 	mvn.w	r3, #5
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	e010      	b.n	8003c98 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <osKernelStart+0x68>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d109      	bne.n	8003c92 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003c7e:	f7ff ffa1 	bl	8003bc4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003c82:	4b08      	ldr	r3, [pc, #32]	@ (8003ca4 <osKernelStart+0x68>)
 8003c84:	2202      	movs	r2, #2
 8003c86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003c88:	f001 fa56 	bl	8005138 <vTaskStartScheduler>
      stat = osOK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	e002      	b.n	8003c98 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
 8003c96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c98:	68fb      	ldr	r3, [r7, #12]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	2000016c 	.word	0x2000016c

08003ca8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b090      	sub	sp, #64	@ 0x40
 8003cac:	af04      	add	r7, sp, #16
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cb8:	f3ef 8305 	mrs	r3, IPSR
 8003cbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cbe:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f040 808f 	bne.w	8003de4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cca:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d105      	bne.n	8003cde <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cd2:	f3ef 8311 	mrs	r3, BASEPRI
 8003cd6:	617b      	str	r3, [r7, #20]
  return(result);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <osThreadNew+0x3e>
 8003cde:	4b44      	ldr	r3, [pc, #272]	@ (8003df0 <osThreadNew+0x148>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d07e      	beq.n	8003de4 <osThreadNew+0x13c>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d07b      	beq.n	8003de4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003cec:	2380      	movs	r3, #128	@ 0x80
 8003cee:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003cf0:	2318      	movs	r3, #24
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8003cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d045      	beq.n	8003d90 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <osThreadNew+0x6a>
        name = attr->name;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <osThreadNew+0x90>
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	2b38      	cmp	r3, #56	@ 0x38
 8003d2a:	d805      	bhi.n	8003d38 <osThreadNew+0x90>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <osThreadNew+0x94>
        return (NULL);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e054      	b.n	8003de6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	089b      	lsrs	r3, r3, #2
 8003d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00e      	beq.n	8003d72 <osThreadNew+0xca>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2ba7      	cmp	r3, #167	@ 0xa7
 8003d5a:	d90a      	bls.n	8003d72 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d006      	beq.n	8003d72 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <osThreadNew+0xca>
        mem = 1;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	623b      	str	r3, [r7, #32]
 8003d70:	e010      	b.n	8003d94 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10c      	bne.n	8003d94 <osThreadNew+0xec>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d108      	bne.n	8003d94 <osThreadNew+0xec>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d104      	bne.n	8003d94 <osThreadNew+0xec>
          mem = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	623b      	str	r3, [r7, #32]
 8003d8e:	e001      	b.n	8003d94 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d110      	bne.n	8003dbc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003da2:	9202      	str	r2, [sp, #8]
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 ffc3 	bl	8004d3c <xTaskCreateStatic>
 8003db6:	4603      	mov	r3, r0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	e013      	b.n	8003de4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d110      	bne.n	8003de4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	f107 0310 	add.w	r3, r7, #16
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f001 f817 	bl	8004e08 <xTaskCreate>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d001      	beq.n	8003de4 <osThreadNew+0x13c>
          hTask = NULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003de4:	693b      	ldr	r3, [r7, #16]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3730      	adds	r7, #48	@ 0x30
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	2000016c 	.word	0x2000016c

08003df4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dfc:	f3ef 8305 	mrs	r3, IPSR
 8003e00:	613b      	str	r3, [r7, #16]
  return(result);
 8003e02:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10f      	bne.n	8003e28 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e08:	f3ef 8310 	mrs	r3, PRIMASK
 8003e0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e14:	f3ef 8311 	mrs	r3, BASEPRI
 8003e18:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d007      	beq.n	8003e30 <osDelay+0x3c>
 8003e20:	4b0a      	ldr	r3, [pc, #40]	@ (8003e4c <osDelay+0x58>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d103      	bne.n	8003e30 <osDelay+0x3c>
    stat = osErrorISR;
 8003e28:	f06f 0305 	mvn.w	r3, #5
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e007      	b.n	8003e40 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f001 f944 	bl	80050c8 <vTaskDelay>
    }
  }

  return (stat);
 8003e40:	697b      	ldr	r3, [r7, #20]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	2000016c 	.word	0x2000016c

08003e50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4a07      	ldr	r2, [pc, #28]	@ (8003e7c <vApplicationGetIdleTaskMemory+0x2c>)
 8003e60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	4a06      	ldr	r2, [pc, #24]	@ (8003e80 <vApplicationGetIdleTaskMemory+0x30>)
 8003e66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2280      	movs	r2, #128	@ 0x80
 8003e6c:	601a      	str	r2, [r3, #0]
}
 8003e6e:	bf00      	nop
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000170 	.word	0x20000170
 8003e80:	20000218 	.word	0x20000218

08003e84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a07      	ldr	r2, [pc, #28]	@ (8003eb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003e94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4a06      	ldr	r2, [pc, #24]	@ (8003eb4 <vApplicationGetTimerTaskMemory+0x30>)
 8003e9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ea2:	601a      	str	r2, [r3, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	20000418 	.word	0x20000418
 8003eb4:	200004c0 	.word	0x200004c0

08003eb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f103 0208 	add.w	r2, r3, #8
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f103 0208 	add.w	r2, r3, #8
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f103 0208 	add.w	r2, r3, #8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f12:	b480      	push	{r7}
 8003f14:	b085      	sub	sp, #20
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	601a      	str	r2, [r3, #0]
}
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d103      	bne.n	8003f7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	e00c      	b.n	8003f94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	e002      	b.n	8003f88 <vListInsert+0x2e>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d2f6      	bcs.n	8003f82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	601a      	str	r2, [r3, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6892      	ldr	r2, [r2, #8]
 8003fe2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6852      	ldr	r2, [r2, #4]
 8003fec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d103      	bne.n	8004000 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	1e5a      	subs	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10d      	bne.n	8004050 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004038:	b672      	cpsid	i
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	b662      	cpsie	i
 8004048:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	e7fd      	b.n	800404c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004050:	f002 fb4c 	bl	80066ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405c:	68f9      	ldr	r1, [r7, #12]
 800405e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	441a      	add	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004080:	3b01      	subs	r3, #1
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004086:	fb01 f303 	mul.w	r3, r1, r3
 800408a:	441a      	add	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	22ff      	movs	r2, #255	@ 0xff
 8004094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	22ff      	movs	r2, #255	@ 0xff
 800409c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d114      	bne.n	80040d0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d01a      	beq.n	80040e4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3310      	adds	r3, #16
 80040b2:	4618      	mov	r0, r3
 80040b4:	f001 faec 	bl	8005690 <xTaskRemoveFromEventList>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d012      	beq.n	80040e4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040be:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <xQueueGenericReset+0xd4>)
 80040c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	e009      	b.n	80040e4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3310      	adds	r3, #16
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff feef 	bl	8003eb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3324      	adds	r3, #36	@ 0x24
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff feea 	bl	8003eb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040e4:	f002 fb38 	bl	8006758 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040e8:	2301      	movs	r3, #1
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	e000ed04 	.word	0xe000ed04

080040f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08e      	sub	sp, #56	@ 0x38
 80040fc:	af02      	add	r7, sp, #8
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10d      	bne.n	8004128 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004110:	b672      	cpsid	i
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	b662      	cpsie	i
 8004120:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10d      	bne.n	800414a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004132:	b672      	cpsid	i
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	b662      	cpsie	i
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	e7fd      	b.n	8004146 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <xQueueGenericCreateStatic+0x5e>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <xQueueGenericCreateStatic+0x62>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <xQueueGenericCreateStatic+0x64>
 800415a:	2300      	movs	r3, #0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10d      	bne.n	800417c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004164:	b672      	cpsid	i
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	b662      	cpsie	i
 8004174:	623b      	str	r3, [r7, #32]
}
 8004176:	bf00      	nop
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <xQueueGenericCreateStatic+0x90>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <xQueueGenericCreateStatic+0x94>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <xQueueGenericCreateStatic+0x96>
 800418c:	2300      	movs	r3, #0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10d      	bne.n	80041ae <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004196:	b672      	cpsid	i
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	b662      	cpsie	i
 80041a6:	61fb      	str	r3, [r7, #28]
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	e7fd      	b.n	80041aa <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041ae:	2350      	movs	r3, #80	@ 0x50
 80041b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b50      	cmp	r3, #80	@ 0x50
 80041b6:	d00d      	beq.n	80041d4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041bc:	b672      	cpsid	i
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	b662      	cpsie	i
 80041cc:	61bb      	str	r3, [r7, #24]
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80041d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80041da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00d      	beq.n	80041fc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80041ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f848 	bl	800428c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80041fe:	4618      	mov	r0, r3
 8004200:	3730      	adds	r7, #48	@ 0x30
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004206:	b580      	push	{r7, lr}
 8004208:	b08a      	sub	sp, #40	@ 0x28
 800420a:	af02      	add	r7, sp, #8
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	4613      	mov	r3, r2
 8004212:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10d      	bne.n	8004236 <xQueueGenericCreate+0x30>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	b672      	cpsid	i
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	b662      	cpsie	i
 800422e:	613b      	str	r3, [r7, #16]
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	e7fd      	b.n	8004232 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	e004      	b.n	800424c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	fb02 f303 	mul.w	r3, r2, r3
 800424a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	3350      	adds	r3, #80	@ 0x50
 8004250:	4618      	mov	r0, r3
 8004252:	f002 fb79 	bl	8006948 <pvPortMalloc>
 8004256:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d011      	beq.n	8004282 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	3350      	adds	r3, #80	@ 0x50
 8004266:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004270:	79fa      	ldrb	r2, [r7, #7]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	4613      	mov	r3, r2
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f805 	bl	800428c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004282:	69bb      	ldr	r3, [r7, #24]
	}
 8004284:	4618      	mov	r0, r3
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d103      	bne.n	80042a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	e002      	b.n	80042ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042ba:	2101      	movs	r1, #1
 80042bc:	69b8      	ldr	r0, [r7, #24]
 80042be:	f7ff feaf 	bl	8004020 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08e      	sub	sp, #56	@ 0x38
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042e2:	2300      	movs	r3, #0
 80042e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80042ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10d      	bne.n	800430c <xQueueGenericSend+0x38>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f4:	b672      	cpsid	i
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	b662      	cpsie	i
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004306:	bf00      	nop
 8004308:	bf00      	nop
 800430a:	e7fd      	b.n	8004308 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <xQueueGenericSend+0x46>
 8004312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <xQueueGenericSend+0x4a>
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <xQueueGenericSend+0x4c>
 800431e:	2300      	movs	r3, #0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10d      	bne.n	8004340 <xQueueGenericSend+0x6c>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	b672      	cpsid	i
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	b662      	cpsie	i
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800433a:	bf00      	nop
 800433c:	bf00      	nop
 800433e:	e7fd      	b.n	800433c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d103      	bne.n	800434e <xQueueGenericSend+0x7a>
 8004346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <xQueueGenericSend+0x7e>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <xQueueGenericSend+0x80>
 8004352:	2300      	movs	r3, #0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10d      	bne.n	8004374 <xQueueGenericSend+0xa0>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435c:	b672      	cpsid	i
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	b662      	cpsie	i
 800436c:	623b      	str	r3, [r7, #32]
}
 800436e:	bf00      	nop
 8004370:	bf00      	nop
 8004372:	e7fd      	b.n	8004370 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004374:	f001 fb5a 	bl	8005a2c <xTaskGetSchedulerState>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <xQueueGenericSend+0xb0>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <xQueueGenericSend+0xb4>
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <xQueueGenericSend+0xb6>
 8004388:	2300      	movs	r3, #0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10d      	bne.n	80043aa <xQueueGenericSend+0xd6>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004392:	b672      	cpsid	i
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	b662      	cpsie	i
 80043a2:	61fb      	str	r3, [r7, #28]
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop
 80043a8:	e7fd      	b.n	80043a6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043aa:	f002 f99f 	bl	80066ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d302      	bcc.n	80043c0 <xQueueGenericSend+0xec>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d129      	bne.n	8004414 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043c6:	f000 fb4b 	bl	8004a60 <prvCopyDataToQueue>
 80043ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d010      	beq.n	80043f6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d6:	3324      	adds	r3, #36	@ 0x24
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 f959 	bl	8005690 <xTaskRemoveFromEventList>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d013      	beq.n	800440c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043e4:	4b3f      	ldr	r3, [pc, #252]	@ (80044e4 <xQueueGenericSend+0x210>)
 80043e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	e00a      	b.n	800440c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043fc:	4b39      	ldr	r3, [pc, #228]	@ (80044e4 <xQueueGenericSend+0x210>)
 80043fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800440c:	f002 f9a4 	bl	8006758 <vPortExitCritical>
				return pdPASS;
 8004410:	2301      	movs	r3, #1
 8004412:	e063      	b.n	80044dc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d103      	bne.n	8004422 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800441a:	f002 f99d 	bl	8006758 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800441e:	2300      	movs	r3, #0
 8004420:	e05c      	b.n	80044dc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004424:	2b00      	cmp	r3, #0
 8004426:	d106      	bne.n	8004436 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004428:	f107 0314 	add.w	r3, r7, #20
 800442c:	4618      	mov	r0, r3
 800442e:	f001 f995 	bl	800575c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004432:	2301      	movs	r3, #1
 8004434:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004436:	f002 f98f 	bl	8006758 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800443a:	f000 fef1 	bl	8005220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800443e:	f002 f955 	bl	80066ec <vPortEnterCritical>
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004448:	b25b      	sxtb	r3, r3
 800444a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444e:	d103      	bne.n	8004458 <xQueueGenericSend+0x184>
 8004450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800445e:	b25b      	sxtb	r3, r3
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d103      	bne.n	800446e <xQueueGenericSend+0x19a>
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800446e:	f002 f973 	bl	8006758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004472:	1d3a      	adds	r2, r7, #4
 8004474:	f107 0314 	add.w	r3, r7, #20
 8004478:	4611      	mov	r1, r2
 800447a:	4618      	mov	r0, r3
 800447c:	f001 f984 	bl	8005788 <xTaskCheckForTimeOut>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d124      	bne.n	80044d0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004486:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004488:	f000 fbe2 	bl	8004c50 <prvIsQueueFull>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d018      	beq.n	80044c4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	3310      	adds	r3, #16
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f001 f8a2 	bl	80055e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044a2:	f000 fb6d 	bl	8004b80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044a6:	f000 fec9 	bl	800523c <xTaskResumeAll>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f47f af7c 	bne.w	80043aa <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80044b2:	4b0c      	ldr	r3, [pc, #48]	@ (80044e4 <xQueueGenericSend+0x210>)
 80044b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	e772      	b.n	80043aa <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044c6:	f000 fb5b 	bl	8004b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044ca:	f000 feb7 	bl	800523c <xTaskResumeAll>
 80044ce:	e76c      	b.n	80043aa <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044d2:	f000 fb55 	bl	8004b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044d6:	f000 feb1 	bl	800523c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3738      	adds	r7, #56	@ 0x38
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	e000ed04 	.word	0xe000ed04

080044e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08e      	sub	sp, #56	@ 0x38
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80044fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10d      	bne.n	800451c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004504:	b672      	cpsid	i
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	b662      	cpsie	i
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004516:	bf00      	nop
 8004518:	bf00      	nop
 800451a:	e7fd      	b.n	8004518 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d103      	bne.n	800452a <xQueueGenericSendFromISR+0x42>
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <xQueueGenericSendFromISR+0x46>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <xQueueGenericSendFromISR+0x48>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10d      	bne.n	8004550 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004538:	b672      	cpsid	i
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	b662      	cpsie	i
 8004548:	623b      	str	r3, [r7, #32]
}
 800454a:	bf00      	nop
 800454c:	bf00      	nop
 800454e:	e7fd      	b.n	800454c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d103      	bne.n	800455e <xQueueGenericSendFromISR+0x76>
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <xQueueGenericSendFromISR+0x7a>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <xQueueGenericSendFromISR+0x7c>
 8004562:	2300      	movs	r3, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10d      	bne.n	8004584 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456c:	b672      	cpsid	i
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	b662      	cpsie	i
 800457c:	61fb      	str	r3, [r7, #28]
}
 800457e:	bf00      	nop
 8004580:	bf00      	nop
 8004582:	e7fd      	b.n	8004580 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004584:	f002 f99a 	bl	80068bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004588:	f3ef 8211 	mrs	r2, BASEPRI
 800458c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004590:	b672      	cpsid	i
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	b662      	cpsie	i
 80045a0:	61ba      	str	r2, [r7, #24]
 80045a2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d302      	bcc.n	80045ba <xQueueGenericSendFromISR+0xd2>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d12c      	bne.n	8004614 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045ca:	f000 fa49 	bl	8004a60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d6:	d112      	bne.n	80045fe <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d016      	beq.n	800460e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e2:	3324      	adds	r3, #36	@ 0x24
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 f853 	bl	8005690 <xTaskRemoveFromEventList>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e007      	b.n	800460e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004602:	3301      	adds	r3, #1
 8004604:	b2db      	uxtb	r3, r3
 8004606:	b25a      	sxtb	r2, r3
 8004608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800460e:	2301      	movs	r3, #1
 8004610:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004612:	e001      	b.n	8004618 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004614:	2300      	movs	r3, #0
 8004616:	637b      	str	r3, [r7, #52]	@ 0x34
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004622:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004626:	4618      	mov	r0, r3
 8004628:	3738      	adds	r7, #56	@ 0x38
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08c      	sub	sp, #48	@ 0x30
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800463c:	2300      	movs	r3, #0
 800463e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10d      	bne.n	8004666 <xQueueReceive+0x36>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464e:	b672      	cpsid	i
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	b662      	cpsie	i
 800465e:	623b      	str	r3, [r7, #32]
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	e7fd      	b.n	8004662 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d103      	bne.n	8004674 <xQueueReceive+0x44>
 800466c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <xQueueReceive+0x48>
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <xQueueReceive+0x4a>
 8004678:	2300      	movs	r3, #0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10d      	bne.n	800469a <xQueueReceive+0x6a>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	b672      	cpsid	i
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	b662      	cpsie	i
 8004692:	61fb      	str	r3, [r7, #28]
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	e7fd      	b.n	8004696 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800469a:	f001 f9c7 	bl	8005a2c <xTaskGetSchedulerState>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <xQueueReceive+0x7a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <xQueueReceive+0x7e>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <xQueueReceive+0x80>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10d      	bne.n	80046d0 <xQueueReceive+0xa0>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b8:	b672      	cpsid	i
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	b662      	cpsie	i
 80046c8:	61bb      	str	r3, [r7, #24]
}
 80046ca:	bf00      	nop
 80046cc:	bf00      	nop
 80046ce:	e7fd      	b.n	80046cc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046d0:	f002 f80c 	bl	80066ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01f      	beq.n	8004720 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046e4:	f000 fa26 	bl	8004b34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	1e5a      	subs	r2, r3, #1
 80046ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00f      	beq.n	8004718 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fa:	3310      	adds	r3, #16
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 ffc7 	bl	8005690 <xTaskRemoveFromEventList>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004708:	4b3c      	ldr	r3, [pc, #240]	@ (80047fc <xQueueReceive+0x1cc>)
 800470a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004718:	f002 f81e 	bl	8006758 <vPortExitCritical>
				return pdPASS;
 800471c:	2301      	movs	r3, #1
 800471e:	e069      	b.n	80047f4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004726:	f002 f817 	bl	8006758 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800472a:	2300      	movs	r3, #0
 800472c:	e062      	b.n	80047f4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800472e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004734:	f107 0310 	add.w	r3, r7, #16
 8004738:	4618      	mov	r0, r3
 800473a:	f001 f80f 	bl	800575c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800473e:	2301      	movs	r3, #1
 8004740:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004742:	f002 f809 	bl	8006758 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004746:	f000 fd6b 	bl	8005220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800474a:	f001 ffcf 	bl	80066ec <vPortEnterCritical>
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004754:	b25b      	sxtb	r3, r3
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d103      	bne.n	8004764 <xQueueReceive+0x134>
 800475c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004766:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800476a:	b25b      	sxtb	r3, r3
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d103      	bne.n	800477a <xQueueReceive+0x14a>
 8004772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800477a:	f001 ffed 	bl	8006758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800477e:	1d3a      	adds	r2, r7, #4
 8004780:	f107 0310 	add.w	r3, r7, #16
 8004784:	4611      	mov	r1, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fffe 	bl	8005788 <xTaskCheckForTimeOut>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d123      	bne.n	80047da <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004794:	f000 fa46 	bl	8004c24 <prvIsQueueEmpty>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d017      	beq.n	80047ce <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800479e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a0:	3324      	adds	r3, #36	@ 0x24
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 ff1c 	bl	80055e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047ae:	f000 f9e7 	bl	8004b80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047b2:	f000 fd43 	bl	800523c <xTaskResumeAll>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d189      	bne.n	80046d0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80047bc:	4b0f      	ldr	r3, [pc, #60]	@ (80047fc <xQueueReceive+0x1cc>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	e780      	b.n	80046d0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047d0:	f000 f9d6 	bl	8004b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047d4:	f000 fd32 	bl	800523c <xTaskResumeAll>
 80047d8:	e77a      	b.n	80046d0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047dc:	f000 f9d0 	bl	8004b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047e0:	f000 fd2c 	bl	800523c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047e6:	f000 fa1d 	bl	8004c24 <prvIsQueueEmpty>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f43f af6f 	beq.w	80046d0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3730      	adds	r7, #48	@ 0x30
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	e000ed04 	.word	0xe000ed04

08004800 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08e      	sub	sp, #56	@ 0x38
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800480a:	2300      	movs	r3, #0
 800480c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004812:	2300      	movs	r3, #0
 8004814:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10d      	bne.n	8004838 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004820:	b672      	cpsid	i
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	b662      	cpsie	i
 8004830:	623b      	str	r3, [r7, #32]
}
 8004832:	bf00      	nop
 8004834:	bf00      	nop
 8004836:	e7fd      	b.n	8004834 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00d      	beq.n	800485c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004844:	b672      	cpsid	i
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	b662      	cpsie	i
 8004854:	61fb      	str	r3, [r7, #28]
}
 8004856:	bf00      	nop
 8004858:	bf00      	nop
 800485a:	e7fd      	b.n	8004858 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800485c:	f001 f8e6 	bl	8005a2c <xTaskGetSchedulerState>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d102      	bne.n	800486c <xQueueSemaphoreTake+0x6c>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <xQueueSemaphoreTake+0x70>
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <xQueueSemaphoreTake+0x72>
 8004870:	2300      	movs	r3, #0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10d      	bne.n	8004892 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487a:	b672      	cpsid	i
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	b662      	cpsie	i
 800488a:	61bb      	str	r3, [r7, #24]
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	e7fd      	b.n	800488e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004892:	f001 ff2b 	bl	80066ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800489c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d024      	beq.n	80048ec <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80048a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a4:	1e5a      	subs	r2, r3, #1
 80048a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d104      	bne.n	80048bc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80048b2:	f001 fa3d 	bl	8005d30 <pvTaskIncrementMutexHeldCount>
 80048b6:	4602      	mov	r2, r0
 80048b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00f      	beq.n	80048e4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c6:	3310      	adds	r3, #16
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fee1 	bl	8005690 <xTaskRemoveFromEventList>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048d4:	4b55      	ldr	r3, [pc, #340]	@ (8004a2c <xQueueSemaphoreTake+0x22c>)
 80048d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048e4:	f001 ff38 	bl	8006758 <vPortExitCritical>
				return pdPASS;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e09a      	b.n	8004a22 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d114      	bne.n	800491c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00d      	beq.n	8004914 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80048f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fc:	b672      	cpsid	i
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	b662      	cpsie	i
 800490c:	617b      	str	r3, [r7, #20]
}
 800490e:	bf00      	nop
 8004910:	bf00      	nop
 8004912:	e7fd      	b.n	8004910 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004914:	f001 ff20 	bl	8006758 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004918:	2300      	movs	r3, #0
 800491a:	e082      	b.n	8004a22 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800491c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004922:	f107 030c 	add.w	r3, r7, #12
 8004926:	4618      	mov	r0, r3
 8004928:	f000 ff18 	bl	800575c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004930:	f001 ff12 	bl	8006758 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004934:	f000 fc74 	bl	8005220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004938:	f001 fed8 	bl	80066ec <vPortEnterCritical>
 800493c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004942:	b25b      	sxtb	r3, r3
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004948:	d103      	bne.n	8004952 <xQueueSemaphoreTake+0x152>
 800494a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004954:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004958:	b25b      	sxtb	r3, r3
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d103      	bne.n	8004968 <xQueueSemaphoreTake+0x168>
 8004960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004968:	f001 fef6 	bl	8006758 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800496c:	463a      	mov	r2, r7
 800496e:	f107 030c 	add.w	r3, r7, #12
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f000 ff07 	bl	8005788 <xTaskCheckForTimeOut>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d132      	bne.n	80049e6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004980:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004982:	f000 f94f 	bl	8004c24 <prvIsQueueEmpty>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d026      	beq.n	80049da <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800498c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d109      	bne.n	80049a8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8004994:	f001 feaa 	bl	80066ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4618      	mov	r0, r3
 800499e:	f001 f863 	bl	8005a68 <xTaskPriorityInherit>
 80049a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80049a4:	f001 fed8 	bl	8006758 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049aa:	3324      	adds	r3, #36	@ 0x24
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	4611      	mov	r1, r2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fe17 	bl	80055e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049b8:	f000 f8e2 	bl	8004b80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049bc:	f000 fc3e 	bl	800523c <xTaskResumeAll>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f47f af65 	bne.w	8004892 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80049c8:	4b18      	ldr	r3, [pc, #96]	@ (8004a2c <xQueueSemaphoreTake+0x22c>)
 80049ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	e75b      	b.n	8004892 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80049da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049dc:	f000 f8d0 	bl	8004b80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049e0:	f000 fc2c 	bl	800523c <xTaskResumeAll>
 80049e4:	e755      	b.n	8004892 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80049e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049e8:	f000 f8ca 	bl	8004b80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049ec:	f000 fc26 	bl	800523c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049f2:	f000 f917 	bl	8004c24 <prvIsQueueEmpty>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f43f af4a 	beq.w	8004892 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80049fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00d      	beq.n	8004a20 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8004a04:	f001 fe72 	bl	80066ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004a08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004a0a:	f000 f811 	bl	8004a30 <prvGetDisinheritPriorityAfterTimeout>
 8004a0e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 f902 	bl	8005c20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004a1c:	f001 fe9c 	bl	8006758 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3738      	adds	r7, #56	@ 0x38
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	e000ed04 	.word	0xe000ed04

08004a30 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d006      	beq.n	8004a4e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e001      	b.n	8004a52 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a52:	68fb      	ldr	r3, [r7, #12]
	}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10d      	bne.n	8004a9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d14d      	bne.n	8004b22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f001 f854 	bl	8005b38 <xTaskPriorityDisinherit>
 8004a90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	e043      	b.n	8004b22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d119      	bne.n	8004ad4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6858      	ldr	r0, [r3, #4]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	f002 fbff 	bl	80072ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	441a      	add	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d32b      	bcc.n	8004b22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	e026      	b.n	8004b22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68d8      	ldr	r0, [r3, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	461a      	mov	r2, r3
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	f002 fbe5 	bl	80072ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	425b      	negs	r3, r3
 8004aee:	441a      	add	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d207      	bcs.n	8004b10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b08:	425b      	negs	r3, r3
 8004b0a:	441a      	add	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d105      	bne.n	8004b22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004b2a:	697b      	ldr	r3, [r7, #20]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d018      	beq.n	8004b78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	441a      	add	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d303      	bcc.n	8004b68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68d9      	ldr	r1, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b70:	461a      	mov	r2, r3
 8004b72:	6838      	ldr	r0, [r7, #0]
 8004b74:	f002 fb9b 	bl	80072ae <memcpy>
	}
}
 8004b78:	bf00      	nop
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b88:	f001 fdb0 	bl	80066ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b94:	e011      	b.n	8004bba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d012      	beq.n	8004bc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3324      	adds	r3, #36	@ 0x24
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fd74 	bl	8005690 <xTaskRemoveFromEventList>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bae:	f000 fe53 	bl	8005858 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	dce9      	bgt.n	8004b96 <prvUnlockQueue+0x16>
 8004bc2:	e000      	b.n	8004bc6 <prvUnlockQueue+0x46>
					break;
 8004bc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	22ff      	movs	r2, #255	@ 0xff
 8004bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004bce:	f001 fdc3 	bl	8006758 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bd2:	f001 fd8b 	bl	80066ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bde:	e011      	b.n	8004c04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d012      	beq.n	8004c0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3310      	adds	r3, #16
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fd4f 	bl	8005690 <xTaskRemoveFromEventList>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bf8:	f000 fe2e 	bl	8005858 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bfc:	7bbb      	ldrb	r3, [r7, #14]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	dce9      	bgt.n	8004be0 <prvUnlockQueue+0x60>
 8004c0c:	e000      	b.n	8004c10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	22ff      	movs	r2, #255	@ 0xff
 8004c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004c18:	f001 fd9e 	bl	8006758 <vPortExitCritical>
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c2c:	f001 fd5e 	bl	80066ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d102      	bne.n	8004c3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	e001      	b.n	8004c42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c42:	f001 fd89 	bl	8006758 <vPortExitCritical>

	return xReturn;
 8004c46:	68fb      	ldr	r3, [r7, #12]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c58:	f001 fd48 	bl	80066ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d102      	bne.n	8004c6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	e001      	b.n	8004c72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c72:	f001 fd71 	bl	8006758 <vPortExitCritical>

	return xReturn;
 8004c76:	68fb      	ldr	r3, [r7, #12]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	e014      	b.n	8004cba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c90:	4a0f      	ldr	r2, [pc, #60]	@ (8004cd0 <vQueueAddToRegistry+0x50>)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c9c:	490c      	ldr	r1, [pc, #48]	@ (8004cd0 <vQueueAddToRegistry+0x50>)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd0 <vQueueAddToRegistry+0x50>)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	4413      	add	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004cb2:	e006      	b.n	8004cc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b07      	cmp	r3, #7
 8004cbe:	d9e7      	bls.n	8004c90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cc0:	bf00      	nop
 8004cc2:	bf00      	nop
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	200008c0 	.word	0x200008c0

08004cd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ce4:	f001 fd02 	bl	80066ec <vPortEnterCritical>
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cee:	b25b      	sxtb	r3, r3
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf4:	d103      	bne.n	8004cfe <vQueueWaitForMessageRestricted+0x2a>
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d04:	b25b      	sxtb	r3, r3
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0a:	d103      	bne.n	8004d14 <vQueueWaitForMessageRestricted+0x40>
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d14:	f001 fd20 	bl	8006758 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d106      	bne.n	8004d2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3324      	adds	r3, #36	@ 0x24
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fc83 	bl	8005634 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d2e:	6978      	ldr	r0, [r7, #20]
 8004d30:	f7ff ff26 	bl	8004b80 <prvUnlockQueue>
	}
 8004d34:	bf00      	nop
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08e      	sub	sp, #56	@ 0x38
 8004d40:	af04      	add	r7, sp, #16
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <xTaskCreateStatic+0x30>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d54:	b672      	cpsid	i
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	b662      	cpsie	i
 8004d64:	623b      	str	r3, [r7, #32]
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	e7fd      	b.n	8004d68 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10d      	bne.n	8004d8e <xTaskCreateStatic+0x52>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d76:	b672      	cpsid	i
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	b662      	cpsie	i
 8004d86:	61fb      	str	r3, [r7, #28]
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	e7fd      	b.n	8004d8a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d8e:	23a8      	movs	r3, #168	@ 0xa8
 8004d90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2ba8      	cmp	r3, #168	@ 0xa8
 8004d96:	d00d      	beq.n	8004db4 <xTaskCreateStatic+0x78>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9c:	b672      	cpsid	i
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	b662      	cpsie	i
 8004dac:	61bb      	str	r3, [r7, #24]
}
 8004dae:	bf00      	nop
 8004db0:	bf00      	nop
 8004db2:	e7fd      	b.n	8004db0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004db4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01e      	beq.n	8004dfa <xTaskCreateStatic+0xbe>
 8004dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01b      	beq.n	8004dfa <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	9303      	str	r3, [sp, #12]
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	9302      	str	r3, [sp, #8]
 8004ddc:	f107 0314 	add.w	r3, r7, #20
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f851 	bl	8004e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004df2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004df4:	f000 f8f8 	bl	8004fe8 <prvAddNewTaskToReadyList>
 8004df8:	e001      	b.n	8004dfe <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dfe:	697b      	ldr	r3, [r7, #20]
	}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3728      	adds	r7, #40	@ 0x28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08c      	sub	sp, #48	@ 0x30
 8004e0c:	af04      	add	r7, sp, #16
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	603b      	str	r3, [r7, #0]
 8004e14:	4613      	mov	r3, r2
 8004e16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f001 fd93 	bl	8006948 <pvPortMalloc>
 8004e22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00e      	beq.n	8004e48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e2a:	20a8      	movs	r0, #168	@ 0xa8
 8004e2c:	f001 fd8c 	bl	8006948 <pvPortMalloc>
 8004e30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e3e:	e005      	b.n	8004e4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e40:	6978      	ldr	r0, [r7, #20]
 8004e42:	f001 fe4f 	bl	8006ae4 <vPortFree>
 8004e46:	e001      	b.n	8004e4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d017      	beq.n	8004e82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9303      	str	r3, [sp, #12]
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	9302      	str	r3, [sp, #8]
 8004e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f80f 	bl	8004e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e76:	69f8      	ldr	r0, [r7, #28]
 8004e78:	f000 f8b6 	bl	8004fe8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	e002      	b.n	8004e88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e82:	f04f 33ff 	mov.w	r3, #4294967295
 8004e86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e88:	69bb      	ldr	r3, [r7, #24]
	}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	461a      	mov	r2, r3
 8004eac:	21a5      	movs	r1, #165	@ 0xa5
 8004eae:	f002 f92d 	bl	800710c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004ebc:	440b      	add	r3, r1
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	f023 0307 	bic.w	r3, r3, #7
 8004eca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00d      	beq.n	8004ef2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eda:	b672      	cpsid	i
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	b662      	cpsie	i
 8004eea:	617b      	str	r3, [r7, #20]
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	e7fd      	b.n	8004eee <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01f      	beq.n	8004f38 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	e012      	b.n	8004f24 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	4413      	add	r3, r2
 8004f04:	7819      	ldrb	r1, [r3, #0]
 8004f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3334      	adds	r3, #52	@ 0x34
 8004f0e:	460a      	mov	r2, r1
 8004f10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4413      	add	r3, r2
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d006      	beq.n	8004f2c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	3301      	adds	r3, #1
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	2b0f      	cmp	r3, #15
 8004f28:	d9e9      	bls.n	8004efe <prvInitialiseNewTask+0x6a>
 8004f2a:	e000      	b.n	8004f2e <prvInitialiseNewTask+0x9a>
			{
				break;
 8004f2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f36:	e003      	b.n	8004f40 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	2b37      	cmp	r3, #55	@ 0x37
 8004f44:	d901      	bls.n	8004f4a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f46:	2337      	movs	r3, #55	@ 0x37
 8004f48:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f54:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	2200      	movs	r2, #0
 8004f5a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fe ffc9 	bl	8003ef8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f68:	3318      	adds	r3, #24
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe ffc4 	bl	8003ef8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	3354      	adds	r3, #84	@ 0x54
 8004f9a:	224c      	movs	r2, #76	@ 0x4c
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f002 f8b4 	bl	800710c <memset>
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8004fdc <prvInitialiseNewTask+0x148>)
 8004fa8:	659a      	str	r2, [r3, #88]	@ 0x58
 8004faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fac:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe0 <prvInitialiseNewTask+0x14c>)
 8004fae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe4 <prvInitialiseNewTask+0x150>)
 8004fb4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	68f9      	ldr	r1, [r7, #12]
 8004fba:	69b8      	ldr	r0, [r7, #24]
 8004fbc:	f001 fa88 	bl	80064d0 <pxPortInitialiseStack>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fd2:	bf00      	nop
 8004fd4:	3720      	adds	r7, #32
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20004b4c 	.word	0x20004b4c
 8004fe0:	20004bb4 	.word	0x20004bb4
 8004fe4:	20004c1c 	.word	0x20004c1c

08004fe8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ff0:	f001 fb7c 	bl	80066ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80050ac <prvAddNewTaskToReadyList+0xc4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80050ac <prvAddNewTaskToReadyList+0xc4>)
 8004ffc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80050b0 <prvAddNewTaskToReadyList+0xc8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005006:	4a2a      	ldr	r2, [pc, #168]	@ (80050b0 <prvAddNewTaskToReadyList+0xc8>)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800500c:	4b27      	ldr	r3, [pc, #156]	@ (80050ac <prvAddNewTaskToReadyList+0xc4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d110      	bne.n	8005036 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005014:	f000 fc44 	bl	80058a0 <prvInitialiseTaskLists>
 8005018:	e00d      	b.n	8005036 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800501a:	4b26      	ldr	r3, [pc, #152]	@ (80050b4 <prvAddNewTaskToReadyList+0xcc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005022:	4b23      	ldr	r3, [pc, #140]	@ (80050b0 <prvAddNewTaskToReadyList+0xc8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502c:	429a      	cmp	r2, r3
 800502e:	d802      	bhi.n	8005036 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005030:	4a1f      	ldr	r2, [pc, #124]	@ (80050b0 <prvAddNewTaskToReadyList+0xc8>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005036:	4b20      	ldr	r3, [pc, #128]	@ (80050b8 <prvAddNewTaskToReadyList+0xd0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3301      	adds	r3, #1
 800503c:	4a1e      	ldr	r2, [pc, #120]	@ (80050b8 <prvAddNewTaskToReadyList+0xd0>)
 800503e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005040:	4b1d      	ldr	r3, [pc, #116]	@ (80050b8 <prvAddNewTaskToReadyList+0xd0>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504c:	4b1b      	ldr	r3, [pc, #108]	@ (80050bc <prvAddNewTaskToReadyList+0xd4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d903      	bls.n	800505c <prvAddNewTaskToReadyList+0x74>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005058:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <prvAddNewTaskToReadyList+0xd4>)
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4a15      	ldr	r2, [pc, #84]	@ (80050c0 <prvAddNewTaskToReadyList+0xd8>)
 800506a:	441a      	add	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3304      	adds	r3, #4
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f7fe ff4d 	bl	8003f12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005078:	f001 fb6e 	bl	8006758 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800507c:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <prvAddNewTaskToReadyList+0xcc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00e      	beq.n	80050a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005084:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <prvAddNewTaskToReadyList+0xc8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	429a      	cmp	r2, r3
 8005090:	d207      	bcs.n	80050a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005092:	4b0c      	ldr	r3, [pc, #48]	@ (80050c4 <prvAddNewTaskToReadyList+0xdc>)
 8005094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000dd4 	.word	0x20000dd4
 80050b0:	20000900 	.word	0x20000900
 80050b4:	20000de0 	.word	0x20000de0
 80050b8:	20000df0 	.word	0x20000df0
 80050bc:	20000ddc 	.word	0x20000ddc
 80050c0:	20000904 	.word	0x20000904
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d01a      	beq.n	8005110 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050da:	4b15      	ldr	r3, [pc, #84]	@ (8005130 <vTaskDelay+0x68>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00d      	beq.n	80050fe <vTaskDelay+0x36>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	b672      	cpsid	i
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	b662      	cpsie	i
 80050f6:	60bb      	str	r3, [r7, #8]
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	e7fd      	b.n	80050fa <vTaskDelay+0x32>
			vTaskSuspendAll();
 80050fe:	f000 f88f 	bl	8005220 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005102:	2100      	movs	r1, #0
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fe27 	bl	8005d58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800510a:	f000 f897 	bl	800523c <xTaskResumeAll>
 800510e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d107      	bne.n	8005126 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005116:	4b07      	ldr	r3, [pc, #28]	@ (8005134 <vTaskDelay+0x6c>)
 8005118:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000dfc 	.word	0x20000dfc
 8005134:	e000ed04 	.word	0xe000ed04

08005138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	@ 0x28
 800513c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800513e:	2300      	movs	r3, #0
 8005140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005142:	2300      	movs	r3, #0
 8005144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005146:	463a      	mov	r2, r7
 8005148:	1d39      	adds	r1, r7, #4
 800514a:	f107 0308 	add.w	r3, r7, #8
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe fe7e 	bl	8003e50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	9202      	str	r2, [sp, #8]
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	2300      	movs	r3, #0
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	2300      	movs	r3, #0
 8005164:	460a      	mov	r2, r1
 8005166:	4926      	ldr	r1, [pc, #152]	@ (8005200 <vTaskStartScheduler+0xc8>)
 8005168:	4826      	ldr	r0, [pc, #152]	@ (8005204 <vTaskStartScheduler+0xcc>)
 800516a:	f7ff fde7 	bl	8004d3c <xTaskCreateStatic>
 800516e:	4603      	mov	r3, r0
 8005170:	4a25      	ldr	r2, [pc, #148]	@ (8005208 <vTaskStartScheduler+0xd0>)
 8005172:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005174:	4b24      	ldr	r3, [pc, #144]	@ (8005208 <vTaskStartScheduler+0xd0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800517c:	2301      	movs	r3, #1
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e001      	b.n	8005186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d102      	bne.n	8005192 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800518c:	f000 fe38 	bl	8005e00 <xTimerCreateTimerTask>
 8005190:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d11d      	bne.n	80051d4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519c:	b672      	cpsid	i
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	b662      	cpsie	i
 80051ac:	613b      	str	r3, [r7, #16]
}
 80051ae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051b0:	4b16      	ldr	r3, [pc, #88]	@ (800520c <vTaskStartScheduler+0xd4>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3354      	adds	r3, #84	@ 0x54
 80051b6:	4a16      	ldr	r2, [pc, #88]	@ (8005210 <vTaskStartScheduler+0xd8>)
 80051b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051ba:	4b16      	ldr	r3, [pc, #88]	@ (8005214 <vTaskStartScheduler+0xdc>)
 80051bc:	f04f 32ff 	mov.w	r2, #4294967295
 80051c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051c2:	4b15      	ldr	r3, [pc, #84]	@ (8005218 <vTaskStartScheduler+0xe0>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80051c8:	4b14      	ldr	r3, [pc, #80]	@ (800521c <vTaskStartScheduler+0xe4>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051ce:	f001 fa0f 	bl	80065f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051d2:	e011      	b.n	80051f8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051da:	d10d      	bne.n	80051f8 <vTaskStartScheduler+0xc0>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e0:	b672      	cpsid	i
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	b662      	cpsie	i
 80051f0:	60fb      	str	r3, [r7, #12]
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <vTaskStartScheduler+0xbc>
}
 80051f8:	bf00      	nop
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	08007840 	.word	0x08007840
 8005204:	08005871 	.word	0x08005871
 8005208:	20000df8 	.word	0x20000df8
 800520c:	20000900 	.word	0x20000900
 8005210:	2000001c 	.word	0x2000001c
 8005214:	20000df4 	.word	0x20000df4
 8005218:	20000de0 	.word	0x20000de0
 800521c:	20000dd8 	.word	0x20000dd8

08005220 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005224:	4b04      	ldr	r3, [pc, #16]	@ (8005238 <vTaskSuspendAll+0x18>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3301      	adds	r3, #1
 800522a:	4a03      	ldr	r2, [pc, #12]	@ (8005238 <vTaskSuspendAll+0x18>)
 800522c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800522e:	bf00      	nop
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	20000dfc 	.word	0x20000dfc

0800523c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005246:	2300      	movs	r3, #0
 8005248:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800524a:	4b43      	ldr	r3, [pc, #268]	@ (8005358 <xTaskResumeAll+0x11c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10d      	bne.n	800526e <xTaskResumeAll+0x32>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005256:	b672      	cpsid	i
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	b662      	cpsie	i
 8005266:	603b      	str	r3, [r7, #0]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800526e:	f001 fa3d 	bl	80066ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005272:	4b39      	ldr	r3, [pc, #228]	@ (8005358 <xTaskResumeAll+0x11c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3b01      	subs	r3, #1
 8005278:	4a37      	ldr	r2, [pc, #220]	@ (8005358 <xTaskResumeAll+0x11c>)
 800527a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800527c:	4b36      	ldr	r3, [pc, #216]	@ (8005358 <xTaskResumeAll+0x11c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d162      	bne.n	800534a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005284:	4b35      	ldr	r3, [pc, #212]	@ (800535c <xTaskResumeAll+0x120>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d05e      	beq.n	800534a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800528c:	e02f      	b.n	80052ee <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800528e:	4b34      	ldr	r3, [pc, #208]	@ (8005360 <xTaskResumeAll+0x124>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3318      	adds	r3, #24
 800529a:	4618      	mov	r0, r3
 800529c:	f7fe fe96 	bl	8003fcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3304      	adds	r3, #4
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fe fe91 	bl	8003fcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005364 <xTaskResumeAll+0x128>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d903      	bls.n	80052be <xTaskResumeAll+0x82>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005364 <xTaskResumeAll+0x128>)
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4a27      	ldr	r2, [pc, #156]	@ (8005368 <xTaskResumeAll+0x12c>)
 80052cc:	441a      	add	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4619      	mov	r1, r3
 80052d4:	4610      	mov	r0, r2
 80052d6:	f7fe fe1c 	bl	8003f12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052de:	4b23      	ldr	r3, [pc, #140]	@ (800536c <xTaskResumeAll+0x130>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d302      	bcc.n	80052ee <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80052e8:	4b21      	ldr	r3, [pc, #132]	@ (8005370 <xTaskResumeAll+0x134>)
 80052ea:	2201      	movs	r2, #1
 80052ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005360 <xTaskResumeAll+0x124>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1cb      	bne.n	800528e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052fc:	f000 fb76 	bl	80059ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005300:	4b1c      	ldr	r3, [pc, #112]	@ (8005374 <xTaskResumeAll+0x138>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d010      	beq.n	800532e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800530c:	f000 f846 	bl	800539c <xTaskIncrementTick>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8005316:	4b16      	ldr	r3, [pc, #88]	@ (8005370 <xTaskResumeAll+0x134>)
 8005318:	2201      	movs	r2, #1
 800531a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3b01      	subs	r3, #1
 8005320:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f1      	bne.n	800530c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8005328:	4b12      	ldr	r3, [pc, #72]	@ (8005374 <xTaskResumeAll+0x138>)
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800532e:	4b10      	ldr	r3, [pc, #64]	@ (8005370 <xTaskResumeAll+0x134>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005336:	2301      	movs	r3, #1
 8005338:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800533a:	4b0f      	ldr	r3, [pc, #60]	@ (8005378 <xTaskResumeAll+0x13c>)
 800533c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800534a:	f001 fa05 	bl	8006758 <vPortExitCritical>

	return xAlreadyYielded;
 800534e:	68bb      	ldr	r3, [r7, #8]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	20000dfc 	.word	0x20000dfc
 800535c:	20000dd4 	.word	0x20000dd4
 8005360:	20000d94 	.word	0x20000d94
 8005364:	20000ddc 	.word	0x20000ddc
 8005368:	20000904 	.word	0x20000904
 800536c:	20000900 	.word	0x20000900
 8005370:	20000de8 	.word	0x20000de8
 8005374:	20000de4 	.word	0x20000de4
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005382:	4b05      	ldr	r3, [pc, #20]	@ (8005398 <xTaskGetTickCount+0x1c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005388:	687b      	ldr	r3, [r7, #4]
}
 800538a:	4618      	mov	r0, r3
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20000dd8 	.word	0x20000dd8

0800539c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a6:	4b50      	ldr	r3, [pc, #320]	@ (80054e8 <xTaskIncrementTick+0x14c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f040 808c 	bne.w	80054c8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053b0:	4b4e      	ldr	r3, [pc, #312]	@ (80054ec <xTaskIncrementTick+0x150>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3301      	adds	r3, #1
 80053b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053b8:	4a4c      	ldr	r2, [pc, #304]	@ (80054ec <xTaskIncrementTick+0x150>)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d123      	bne.n	800540c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80053c4:	4b4a      	ldr	r3, [pc, #296]	@ (80054f0 <xTaskIncrementTick+0x154>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00d      	beq.n	80053ea <xTaskIncrementTick+0x4e>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	b672      	cpsid	i
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	b662      	cpsie	i
 80053e2:	603b      	str	r3, [r7, #0]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <xTaskIncrementTick+0x4a>
 80053ea:	4b41      	ldr	r3, [pc, #260]	@ (80054f0 <xTaskIncrementTick+0x154>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	4b40      	ldr	r3, [pc, #256]	@ (80054f4 <xTaskIncrementTick+0x158>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a3e      	ldr	r2, [pc, #248]	@ (80054f0 <xTaskIncrementTick+0x154>)
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4a3e      	ldr	r2, [pc, #248]	@ (80054f4 <xTaskIncrementTick+0x158>)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4b3e      	ldr	r3, [pc, #248]	@ (80054f8 <xTaskIncrementTick+0x15c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3301      	adds	r3, #1
 8005404:	4a3c      	ldr	r2, [pc, #240]	@ (80054f8 <xTaskIncrementTick+0x15c>)
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	f000 faf0 	bl	80059ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800540c:	4b3b      	ldr	r3, [pc, #236]	@ (80054fc <xTaskIncrementTick+0x160>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	429a      	cmp	r2, r3
 8005414:	d349      	bcc.n	80054aa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005416:	4b36      	ldr	r3, [pc, #216]	@ (80054f0 <xTaskIncrementTick+0x154>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d104      	bne.n	800542a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005420:	4b36      	ldr	r3, [pc, #216]	@ (80054fc <xTaskIncrementTick+0x160>)
 8005422:	f04f 32ff 	mov.w	r2, #4294967295
 8005426:	601a      	str	r2, [r3, #0]
					break;
 8005428:	e03f      	b.n	80054aa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800542a:	4b31      	ldr	r3, [pc, #196]	@ (80054f0 <xTaskIncrementTick+0x154>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	d203      	bcs.n	800544a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005442:	4a2e      	ldr	r2, [pc, #184]	@ (80054fc <xTaskIncrementTick+0x160>)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005448:	e02f      	b.n	80054aa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	3304      	adds	r3, #4
 800544e:	4618      	mov	r0, r3
 8005450:	f7fe fdbc 	bl	8003fcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	3318      	adds	r3, #24
 8005460:	4618      	mov	r0, r3
 8005462:	f7fe fdb3 	bl	8003fcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800546a:	4b25      	ldr	r3, [pc, #148]	@ (8005500 <xTaskIncrementTick+0x164>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d903      	bls.n	800547a <xTaskIncrementTick+0xde>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005476:	4a22      	ldr	r2, [pc, #136]	@ (8005500 <xTaskIncrementTick+0x164>)
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4a1f      	ldr	r2, [pc, #124]	@ (8005504 <xTaskIncrementTick+0x168>)
 8005488:	441a      	add	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	3304      	adds	r3, #4
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f7fe fd3e 	bl	8003f12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800549a:	4b1b      	ldr	r3, [pc, #108]	@ (8005508 <xTaskIncrementTick+0x16c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d3b8      	bcc.n	8005416 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80054a4:	2301      	movs	r3, #1
 80054a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054a8:	e7b5      	b.n	8005416 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054aa:	4b17      	ldr	r3, [pc, #92]	@ (8005508 <xTaskIncrementTick+0x16c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b0:	4914      	ldr	r1, [pc, #80]	@ (8005504 <xTaskIncrementTick+0x168>)
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d907      	bls.n	80054d2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80054c2:	2301      	movs	r3, #1
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e004      	b.n	80054d2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80054c8:	4b10      	ldr	r3, [pc, #64]	@ (800550c <xTaskIncrementTick+0x170>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	4a0f      	ldr	r2, [pc, #60]	@ (800550c <xTaskIncrementTick+0x170>)
 80054d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80054d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005510 <xTaskIncrementTick+0x174>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80054da:	2301      	movs	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054de:	697b      	ldr	r3, [r7, #20]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20000dfc 	.word	0x20000dfc
 80054ec:	20000dd8 	.word	0x20000dd8
 80054f0:	20000d8c 	.word	0x20000d8c
 80054f4:	20000d90 	.word	0x20000d90
 80054f8:	20000dec 	.word	0x20000dec
 80054fc:	20000df4 	.word	0x20000df4
 8005500:	20000ddc 	.word	0x20000ddc
 8005504:	20000904 	.word	0x20000904
 8005508:	20000900 	.word	0x20000900
 800550c:	20000de4 	.word	0x20000de4
 8005510:	20000de8 	.word	0x20000de8

08005514 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800551a:	4b2c      	ldr	r3, [pc, #176]	@ (80055cc <vTaskSwitchContext+0xb8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005522:	4b2b      	ldr	r3, [pc, #172]	@ (80055d0 <vTaskSwitchContext+0xbc>)
 8005524:	2201      	movs	r2, #1
 8005526:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005528:	e049      	b.n	80055be <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800552a:	4b29      	ldr	r3, [pc, #164]	@ (80055d0 <vTaskSwitchContext+0xbc>)
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005530:	4b28      	ldr	r3, [pc, #160]	@ (80055d4 <vTaskSwitchContext+0xc0>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e013      	b.n	8005560 <vTaskSwitchContext+0x4c>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10d      	bne.n	800555a <vTaskSwitchContext+0x46>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	b672      	cpsid	i
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	b662      	cpsie	i
 8005552:	607b      	str	r3, [r7, #4]
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	e7fd      	b.n	8005556 <vTaskSwitchContext+0x42>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3b01      	subs	r3, #1
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	491d      	ldr	r1, [pc, #116]	@ (80055d8 <vTaskSwitchContext+0xc4>)
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0e1      	beq.n	8005538 <vTaskSwitchContext+0x24>
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4a16      	ldr	r2, [pc, #88]	@ (80055d8 <vTaskSwitchContext+0xc4>)
 8005580:	4413      	add	r3, r2
 8005582:	60bb      	str	r3, [r7, #8]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	605a      	str	r2, [r3, #4]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	3308      	adds	r3, #8
 8005596:	429a      	cmp	r2, r3
 8005598:	d104      	bne.n	80055a4 <vTaskSwitchContext+0x90>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	605a      	str	r2, [r3, #4]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	4a0c      	ldr	r2, [pc, #48]	@ (80055dc <vTaskSwitchContext+0xc8>)
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	4a09      	ldr	r2, [pc, #36]	@ (80055d4 <vTaskSwitchContext+0xc0>)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055b4:	4b09      	ldr	r3, [pc, #36]	@ (80055dc <vTaskSwitchContext+0xc8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3354      	adds	r3, #84	@ 0x54
 80055ba:	4a09      	ldr	r2, [pc, #36]	@ (80055e0 <vTaskSwitchContext+0xcc>)
 80055bc:	6013      	str	r3, [r2, #0]
}
 80055be:	bf00      	nop
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	20000dfc 	.word	0x20000dfc
 80055d0:	20000de8 	.word	0x20000de8
 80055d4:	20000ddc 	.word	0x20000ddc
 80055d8:	20000904 	.word	0x20000904
 80055dc:	20000900 	.word	0x20000900
 80055e0:	2000001c 	.word	0x2000001c

080055e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10d      	bne.n	8005610 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	b672      	cpsid	i
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	b662      	cpsie	i
 8005608:	60fb      	str	r3, [r7, #12]
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005610:	4b07      	ldr	r3, [pc, #28]	@ (8005630 <vTaskPlaceOnEventList+0x4c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3318      	adds	r3, #24
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7fe fc9e 	bl	8003f5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800561e:	2101      	movs	r1, #1
 8005620:	6838      	ldr	r0, [r7, #0]
 8005622:	f000 fb99 	bl	8005d58 <prvAddCurrentTaskToDelayedList>
}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000900 	.word	0x20000900

08005634 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10d      	bne.n	8005662 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564a:	b672      	cpsid	i
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	b662      	cpsie	i
 800565a:	617b      	str	r3, [r7, #20]
}
 800565c:	bf00      	nop
 800565e:	bf00      	nop
 8005660:	e7fd      	b.n	800565e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005662:	4b0a      	ldr	r3, [pc, #40]	@ (800568c <vTaskPlaceOnEventListRestricted+0x58>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3318      	adds	r3, #24
 8005668:	4619      	mov	r1, r3
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f7fe fc51 	bl	8003f12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8005676:	f04f 33ff 	mov.w	r3, #4294967295
 800567a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	68b8      	ldr	r0, [r7, #8]
 8005680:	f000 fb6a 	bl	8005d58 <prvAddCurrentTaskToDelayedList>
	}
 8005684:	bf00      	nop
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000900 	.word	0x20000900

08005690 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10d      	bne.n	80056c2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056aa:	b672      	cpsid	i
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	b662      	cpsie	i
 80056ba:	60fb      	str	r3, [r7, #12]
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	e7fd      	b.n	80056be <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	3318      	adds	r3, #24
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fc80 	bl	8003fcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005744 <xTaskRemoveFromEventList+0xb4>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d11d      	bne.n	8005710 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fe fc77 	bl	8003fcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e2:	4b19      	ldr	r3, [pc, #100]	@ (8005748 <xTaskRemoveFromEventList+0xb8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d903      	bls.n	80056f2 <xTaskRemoveFromEventList+0x62>
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	4a16      	ldr	r2, [pc, #88]	@ (8005748 <xTaskRemoveFromEventList+0xb8>)
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f6:	4613      	mov	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4a13      	ldr	r2, [pc, #76]	@ (800574c <xTaskRemoveFromEventList+0xbc>)
 8005700:	441a      	add	r2, r3
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	3304      	adds	r3, #4
 8005706:	4619      	mov	r1, r3
 8005708:	4610      	mov	r0, r2
 800570a:	f7fe fc02 	bl	8003f12 <vListInsertEnd>
 800570e:	e005      	b.n	800571c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	3318      	adds	r3, #24
 8005714:	4619      	mov	r1, r3
 8005716:	480e      	ldr	r0, [pc, #56]	@ (8005750 <xTaskRemoveFromEventList+0xc0>)
 8005718:	f7fe fbfb 	bl	8003f12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005720:	4b0c      	ldr	r3, [pc, #48]	@ (8005754 <xTaskRemoveFromEventList+0xc4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005726:	429a      	cmp	r2, r3
 8005728:	d905      	bls.n	8005736 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800572a:	2301      	movs	r3, #1
 800572c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800572e:	4b0a      	ldr	r3, [pc, #40]	@ (8005758 <xTaskRemoveFromEventList+0xc8>)
 8005730:	2201      	movs	r2, #1
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	e001      	b.n	800573a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800573a:	697b      	ldr	r3, [r7, #20]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3718      	adds	r7, #24
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20000dfc 	.word	0x20000dfc
 8005748:	20000ddc 	.word	0x20000ddc
 800574c:	20000904 	.word	0x20000904
 8005750:	20000d94 	.word	0x20000d94
 8005754:	20000900 	.word	0x20000900
 8005758:	20000de8 	.word	0x20000de8

0800575c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005764:	4b06      	ldr	r3, [pc, #24]	@ (8005780 <vTaskInternalSetTimeOutState+0x24>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800576c:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <vTaskInternalSetTimeOutState+0x28>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	605a      	str	r2, [r3, #4]
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20000dec 	.word	0x20000dec
 8005784:	20000dd8 	.word	0x20000dd8

08005788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10d      	bne.n	80057b4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579c:	b672      	cpsid	i
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	b662      	cpsie	i
 80057ac:	613b      	str	r3, [r7, #16]
}
 80057ae:	bf00      	nop
 80057b0:	bf00      	nop
 80057b2:	e7fd      	b.n	80057b0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10d      	bne.n	80057d6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057be:	b672      	cpsid	i
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	b662      	cpsie	i
 80057ce:	60fb      	str	r3, [r7, #12]
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	e7fd      	b.n	80057d2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80057d6:	f000 ff89 	bl	80066ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057da:	4b1d      	ldr	r3, [pc, #116]	@ (8005850 <xTaskCheckForTimeOut+0xc8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d102      	bne.n	80057fa <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61fb      	str	r3, [r7, #28]
 80057f8:	e023      	b.n	8005842 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4b15      	ldr	r3, [pc, #84]	@ (8005854 <xTaskCheckForTimeOut+0xcc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d007      	beq.n	8005816 <xTaskCheckForTimeOut+0x8e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	429a      	cmp	r2, r3
 800580e:	d302      	bcc.n	8005816 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	61fb      	str	r3, [r7, #28]
 8005814:	e015      	b.n	8005842 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	429a      	cmp	r2, r3
 800581e:	d20b      	bcs.n	8005838 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	1ad2      	subs	r2, r2, r3
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff ff95 	bl	800575c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005832:	2300      	movs	r3, #0
 8005834:	61fb      	str	r3, [r7, #28]
 8005836:	e004      	b.n	8005842 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800583e:	2301      	movs	r3, #1
 8005840:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005842:	f000 ff89 	bl	8006758 <vPortExitCritical>

	return xReturn;
 8005846:	69fb      	ldr	r3, [r7, #28]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3720      	adds	r7, #32
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20000dd8 	.word	0x20000dd8
 8005854:	20000dec 	.word	0x20000dec

08005858 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800585c:	4b03      	ldr	r3, [pc, #12]	@ (800586c <vTaskMissedYield+0x14>)
 800585e:	2201      	movs	r2, #1
 8005860:	601a      	str	r2, [r3, #0]
}
 8005862:	bf00      	nop
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	20000de8 	.word	0x20000de8

08005870 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005878:	f000 f852 	bl	8005920 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800587c:	4b06      	ldr	r3, [pc, #24]	@ (8005898 <prvIdleTask+0x28>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d9f9      	bls.n	8005878 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005884:	4b05      	ldr	r3, [pc, #20]	@ (800589c <prvIdleTask+0x2c>)
 8005886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005894:	e7f0      	b.n	8005878 <prvIdleTask+0x8>
 8005896:	bf00      	nop
 8005898:	20000904 	.word	0x20000904
 800589c:	e000ed04 	.word	0xe000ed04

080058a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058a6:	2300      	movs	r3, #0
 80058a8:	607b      	str	r3, [r7, #4]
 80058aa:	e00c      	b.n	80058c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4a12      	ldr	r2, [pc, #72]	@ (8005900 <prvInitialiseTaskLists+0x60>)
 80058b8:	4413      	add	r3, r2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe fafc 	bl	8003eb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3301      	adds	r3, #1
 80058c4:	607b      	str	r3, [r7, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b37      	cmp	r3, #55	@ 0x37
 80058ca:	d9ef      	bls.n	80058ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058cc:	480d      	ldr	r0, [pc, #52]	@ (8005904 <prvInitialiseTaskLists+0x64>)
 80058ce:	f7fe faf3 	bl	8003eb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058d2:	480d      	ldr	r0, [pc, #52]	@ (8005908 <prvInitialiseTaskLists+0x68>)
 80058d4:	f7fe faf0 	bl	8003eb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058d8:	480c      	ldr	r0, [pc, #48]	@ (800590c <prvInitialiseTaskLists+0x6c>)
 80058da:	f7fe faed 	bl	8003eb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058de:	480c      	ldr	r0, [pc, #48]	@ (8005910 <prvInitialiseTaskLists+0x70>)
 80058e0:	f7fe faea 	bl	8003eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058e4:	480b      	ldr	r0, [pc, #44]	@ (8005914 <prvInitialiseTaskLists+0x74>)
 80058e6:	f7fe fae7 	bl	8003eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005918 <prvInitialiseTaskLists+0x78>)
 80058ec:	4a05      	ldr	r2, [pc, #20]	@ (8005904 <prvInitialiseTaskLists+0x64>)
 80058ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058f0:	4b0a      	ldr	r3, [pc, #40]	@ (800591c <prvInitialiseTaskLists+0x7c>)
 80058f2:	4a05      	ldr	r2, [pc, #20]	@ (8005908 <prvInitialiseTaskLists+0x68>)
 80058f4:	601a      	str	r2, [r3, #0]
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000904 	.word	0x20000904
 8005904:	20000d64 	.word	0x20000d64
 8005908:	20000d78 	.word	0x20000d78
 800590c:	20000d94 	.word	0x20000d94
 8005910:	20000da8 	.word	0x20000da8
 8005914:	20000dc0 	.word	0x20000dc0
 8005918:	20000d8c 	.word	0x20000d8c
 800591c:	20000d90 	.word	0x20000d90

08005920 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005926:	e019      	b.n	800595c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005928:	f000 fee0 	bl	80066ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592c:	4b10      	ldr	r3, [pc, #64]	@ (8005970 <prvCheckTasksWaitingTermination+0x50>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe fb47 	bl	8003fcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800593e:	4b0d      	ldr	r3, [pc, #52]	@ (8005974 <prvCheckTasksWaitingTermination+0x54>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3b01      	subs	r3, #1
 8005944:	4a0b      	ldr	r2, [pc, #44]	@ (8005974 <prvCheckTasksWaitingTermination+0x54>)
 8005946:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005948:	4b0b      	ldr	r3, [pc, #44]	@ (8005978 <prvCheckTasksWaitingTermination+0x58>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3b01      	subs	r3, #1
 800594e:	4a0a      	ldr	r2, [pc, #40]	@ (8005978 <prvCheckTasksWaitingTermination+0x58>)
 8005950:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005952:	f000 ff01 	bl	8006758 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f810 	bl	800597c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800595c:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <prvCheckTasksWaitingTermination+0x58>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e1      	bne.n	8005928 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000da8 	.word	0x20000da8
 8005974:	20000dd4 	.word	0x20000dd4
 8005978:	20000dbc 	.word	0x20000dbc

0800597c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3354      	adds	r3, #84	@ 0x54
 8005988:	4618      	mov	r0, r3
 800598a:	f001 fbd7 	bl	800713c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005994:	2b00      	cmp	r3, #0
 8005996:	d108      	bne.n	80059aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599c:	4618      	mov	r0, r3
 800599e:	f001 f8a1 	bl	8006ae4 <vPortFree>
				vPortFree( pxTCB );
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 f89e 	bl	8006ae4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059a8:	e01b      	b.n	80059e2 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d103      	bne.n	80059bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f001 f895 	bl	8006ae4 <vPortFree>
	}
 80059ba:	e012      	b.n	80059e2 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d00d      	beq.n	80059e2 <prvDeleteTCB+0x66>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ca:	b672      	cpsid	i
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	b662      	cpsie	i
 80059da:	60fb      	str	r3, [r7, #12]
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	e7fd      	b.n	80059de <prvDeleteTCB+0x62>
	}
 80059e2:	bf00      	nop
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a24 <prvResetNextTaskUnblockTime+0x38>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d104      	bne.n	8005a06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005a28 <prvResetNextTaskUnblockTime+0x3c>)
 80059fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005a02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a04:	e008      	b.n	8005a18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a06:	4b07      	ldr	r3, [pc, #28]	@ (8005a24 <prvResetNextTaskUnblockTime+0x38>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	4a04      	ldr	r2, [pc, #16]	@ (8005a28 <prvResetNextTaskUnblockTime+0x3c>)
 8005a16:	6013      	str	r3, [r2, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	20000d8c 	.word	0x20000d8c
 8005a28:	20000df4 	.word	0x20000df4

08005a2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a32:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <xTaskGetSchedulerState+0x34>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d102      	bne.n	8005a40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	607b      	str	r3, [r7, #4]
 8005a3e:	e008      	b.n	8005a52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a40:	4b08      	ldr	r3, [pc, #32]	@ (8005a64 <xTaskGetSchedulerState+0x38>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	607b      	str	r3, [r7, #4]
 8005a4c:	e001      	b.n	8005a52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a52:	687b      	ldr	r3, [r7, #4]
	}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	20000de0 	.word	0x20000de0
 8005a64:	20000dfc 	.word	0x20000dfc

08005a68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d051      	beq.n	8005b22 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a82:	4b2a      	ldr	r3, [pc, #168]	@ (8005b2c <xTaskPriorityInherit+0xc4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d241      	bcs.n	8005b10 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	db06      	blt.n	8005aa2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a94:	4b25      	ldr	r3, [pc, #148]	@ (8005b2c <xTaskPriorityInherit+0xc4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	6959      	ldr	r1, [r3, #20]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4a1f      	ldr	r2, [pc, #124]	@ (8005b30 <xTaskPriorityInherit+0xc8>)
 8005ab4:	4413      	add	r3, r2
 8005ab6:	4299      	cmp	r1, r3
 8005ab8:	d122      	bne.n	8005b00 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	3304      	adds	r3, #4
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fe fa84 	bl	8003fcc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ac4:	4b19      	ldr	r3, [pc, #100]	@ (8005b2c <xTaskPriorityInherit+0xc4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad2:	4b18      	ldr	r3, [pc, #96]	@ (8005b34 <xTaskPriorityInherit+0xcc>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d903      	bls.n	8005ae2 <xTaskPriorityInherit+0x7a>
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ade:	4a15      	ldr	r2, [pc, #84]	@ (8005b34 <xTaskPriorityInherit+0xcc>)
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4a10      	ldr	r2, [pc, #64]	@ (8005b30 <xTaskPriorityInherit+0xc8>)
 8005af0:	441a      	add	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	3304      	adds	r3, #4
 8005af6:	4619      	mov	r1, r3
 8005af8:	4610      	mov	r0, r2
 8005afa:	f7fe fa0a 	bl	8003f12 <vListInsertEnd>
 8005afe:	e004      	b.n	8005b0a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b00:	4b0a      	ldr	r3, [pc, #40]	@ (8005b2c <xTaskPriorityInherit+0xc4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e008      	b.n	8005b22 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b14:	4b05      	ldr	r3, [pc, #20]	@ (8005b2c <xTaskPriorityInherit+0xc4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d201      	bcs.n	8005b22 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b22:	68fb      	ldr	r3, [r7, #12]
	}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20000900 	.word	0x20000900
 8005b30:	20000904 	.word	0x20000904
 8005b34:	20000ddc 	.word	0x20000ddc

08005b38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d05c      	beq.n	8005c08 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b4e:	4b31      	ldr	r3, [pc, #196]	@ (8005c14 <xTaskPriorityDisinherit+0xdc>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d00d      	beq.n	8005b74 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5c:	b672      	cpsid	i
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	b662      	cpsie	i
 8005b6c:	60fb      	str	r3, [r7, #12]
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	e7fd      	b.n	8005b70 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10d      	bne.n	8005b98 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b80:	b672      	cpsid	i
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	b662      	cpsie	i
 8005b90:	60bb      	str	r3, [r7, #8]
}
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	e7fd      	b.n	8005b94 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b9c:	1e5a      	subs	r2, r3, #1
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d02c      	beq.n	8005c08 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d128      	bne.n	8005c08 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fa06 	bl	8003fcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8005c18 <xTaskPriorityDisinherit+0xe0>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d903      	bls.n	8005be8 <xTaskPriorityDisinherit+0xb0>
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be4:	4a0c      	ldr	r2, [pc, #48]	@ (8005c18 <xTaskPriorityDisinherit+0xe0>)
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4a09      	ldr	r2, [pc, #36]	@ (8005c1c <xTaskPriorityDisinherit+0xe4>)
 8005bf6:	441a      	add	r2, r3
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4610      	mov	r0, r2
 8005c00:	f7fe f987 	bl	8003f12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c04:	2301      	movs	r3, #1
 8005c06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c08:	697b      	ldr	r3, [r7, #20]
	}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000900 	.word	0x20000900
 8005c18:	20000ddc 	.word	0x20000ddc
 8005c1c:	20000904 	.word	0x20000904

08005c20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d070      	beq.n	8005d1a <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10d      	bne.n	8005c5c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c44:	b672      	cpsid	i
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	b662      	cpsie	i
 8005c54:	60fb      	str	r3, [r7, #12]
}
 8005c56:	bf00      	nop
 8005c58:	bf00      	nop
 8005c5a:	e7fd      	b.n	8005c58 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d902      	bls.n	8005c6c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	e002      	b.n	8005c72 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c70:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d04e      	beq.n	8005d1a <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d149      	bne.n	8005d1a <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c86:	4b27      	ldr	r3, [pc, #156]	@ (8005d24 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d10d      	bne.n	8005cac <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	b672      	cpsid	i
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	b662      	cpsie	i
 8005ca4:	60bb      	str	r3, [r7, #8]
}
 8005ca6:	bf00      	nop
 8005ca8:	bf00      	nop
 8005caa:	e7fd      	b.n	8005ca8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	db04      	blt.n	8005cca <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	6959      	ldr	r1, [r3, #20]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4a13      	ldr	r2, [pc, #76]	@ (8005d28 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005cda:	4413      	add	r3, r2
 8005cdc:	4299      	cmp	r1, r3
 8005cde:	d11c      	bne.n	8005d1a <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fe f971 	bl	8003fcc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cee:	4b0f      	ldr	r3, [pc, #60]	@ (8005d2c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d903      	bls.n	8005cfe <vTaskPriorityDisinheritAfterTimeout+0xde>
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8005d2c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4a07      	ldr	r2, [pc, #28]	@ (8005d28 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005d0c:	441a      	add	r2, r3
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4619      	mov	r1, r3
 8005d14:	4610      	mov	r0, r2
 8005d16:	f7fe f8fc 	bl	8003f12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d1a:	bf00      	nop
 8005d1c:	3720      	adds	r7, #32
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000900 	.word	0x20000900
 8005d28:	20000904 	.word	0x20000904
 8005d2c:	20000ddc 	.word	0x20000ddc

08005d30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d34:	4b07      	ldr	r3, [pc, #28]	@ (8005d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d004      	beq.n	8005d46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d3c:	4b05      	ldr	r3, [pc, #20]	@ (8005d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005d42:	3201      	adds	r2, #1
 8005d44:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005d46:	4b03      	ldr	r3, [pc, #12]	@ (8005d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d48:	681b      	ldr	r3, [r3, #0]
	}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	20000900 	.word	0x20000900

08005d58 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d62:	4b21      	ldr	r3, [pc, #132]	@ (8005de8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d68:	4b20      	ldr	r3, [pc, #128]	@ (8005dec <prvAddCurrentTaskToDelayedList+0x94>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fe f92c 	bl	8003fcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7a:	d10a      	bne.n	8005d92 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d82:	4b1a      	ldr	r3, [pc, #104]	@ (8005dec <prvAddCurrentTaskToDelayedList+0x94>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4819      	ldr	r0, [pc, #100]	@ (8005df0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d8c:	f7fe f8c1 	bl	8003f12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d90:	e026      	b.n	8005de0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4413      	add	r3, r2
 8005d98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d9a:	4b14      	ldr	r3, [pc, #80]	@ (8005dec <prvAddCurrentTaskToDelayedList+0x94>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d209      	bcs.n	8005dbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005daa:	4b12      	ldr	r3, [pc, #72]	@ (8005df4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b0f      	ldr	r3, [pc, #60]	@ (8005dec <prvAddCurrentTaskToDelayedList+0x94>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4619      	mov	r1, r3
 8005db6:	4610      	mov	r0, r2
 8005db8:	f7fe f8cf 	bl	8003f5a <vListInsert>
}
 8005dbc:	e010      	b.n	8005de0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005df8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dec <prvAddCurrentTaskToDelayedList+0x94>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	f7fe f8c5 	bl	8003f5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005dfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d202      	bcs.n	8005de0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005dda:	4a08      	ldr	r2, [pc, #32]	@ (8005dfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	6013      	str	r3, [r2, #0]
}
 8005de0:	bf00      	nop
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20000dd8 	.word	0x20000dd8
 8005dec:	20000900 	.word	0x20000900
 8005df0:	20000dc0 	.word	0x20000dc0
 8005df4:	20000d90 	.word	0x20000d90
 8005df8:	20000d8c 	.word	0x20000d8c
 8005dfc:	20000df4 	.word	0x20000df4

08005e00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08a      	sub	sp, #40	@ 0x28
 8005e04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e0a:	f000 fb21 	bl	8006450 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005e88 <xTimerCreateTimerTask+0x88>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d021      	beq.n	8005e5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e1e:	1d3a      	adds	r2, r7, #4
 8005e20:	f107 0108 	add.w	r1, r7, #8
 8005e24:	f107 030c 	add.w	r3, r7, #12
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fe f82b 	bl	8003e84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	9202      	str	r2, [sp, #8]
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	2302      	movs	r3, #2
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	460a      	mov	r2, r1
 8005e40:	4912      	ldr	r1, [pc, #72]	@ (8005e8c <xTimerCreateTimerTask+0x8c>)
 8005e42:	4813      	ldr	r0, [pc, #76]	@ (8005e90 <xTimerCreateTimerTask+0x90>)
 8005e44:	f7fe ff7a 	bl	8004d3c <xTaskCreateStatic>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	4a12      	ldr	r2, [pc, #72]	@ (8005e94 <xTimerCreateTimerTask+0x94>)
 8005e4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e4e:	4b11      	ldr	r3, [pc, #68]	@ (8005e94 <xTimerCreateTimerTask+0x94>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e56:	2301      	movs	r3, #1
 8005e58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10d      	bne.n	8005e7c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e64:	b672      	cpsid	i
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	b662      	cpsie	i
 8005e74:	613b      	str	r3, [r7, #16]
}
 8005e76:	bf00      	nop
 8005e78:	bf00      	nop
 8005e7a:	e7fd      	b.n	8005e78 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005e7c:	697b      	ldr	r3, [r7, #20]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000e30 	.word	0x20000e30
 8005e8c:	08007848 	.word	0x08007848
 8005e90:	08005fd9 	.word	0x08005fd9
 8005e94:	20000e34 	.word	0x20000e34

08005e98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	@ 0x28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10d      	bne.n	8005ecc <xTimerGenericCommand+0x34>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb4:	b672      	cpsid	i
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	b662      	cpsie	i
 8005ec4:	623b      	str	r3, [r7, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	bf00      	nop
 8005eca:	e7fd      	b.n	8005ec8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ecc:	4b19      	ldr	r3, [pc, #100]	@ (8005f34 <xTimerGenericCommand+0x9c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d02a      	beq.n	8005f2a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b05      	cmp	r3, #5
 8005ee4:	dc18      	bgt.n	8005f18 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ee6:	f7ff fda1 	bl	8005a2c <xTaskGetSchedulerState>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d109      	bne.n	8005f04 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ef0:	4b10      	ldr	r3, [pc, #64]	@ (8005f34 <xTimerGenericCommand+0x9c>)
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	f107 0110 	add.w	r1, r7, #16
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005efc:	f7fe f9ea 	bl	80042d4 <xQueueGenericSend>
 8005f00:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f02:	e012      	b.n	8005f2a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f04:	4b0b      	ldr	r3, [pc, #44]	@ (8005f34 <xTimerGenericCommand+0x9c>)
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	f107 0110 	add.w	r1, r7, #16
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f7fe f9e0 	bl	80042d4 <xQueueGenericSend>
 8005f14:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f16:	e008      	b.n	8005f2a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f18:	4b06      	ldr	r3, [pc, #24]	@ (8005f34 <xTimerGenericCommand+0x9c>)
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	f107 0110 	add.w	r1, r7, #16
 8005f20:	2300      	movs	r3, #0
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	f7fe fae0 	bl	80044e8 <xQueueGenericSendFromISR>
 8005f28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3728      	adds	r7, #40	@ 0x28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000e30 	.word	0x20000e30

08005f38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f42:	4b24      	ldr	r3, [pc, #144]	@ (8005fd4 <prvProcessExpiredTimer+0x9c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fe f83b 	bl	8003fcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d025      	beq.n	8005fb0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	699a      	ldr	r2, [r3, #24]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	18d1      	adds	r1, r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	6978      	ldr	r0, [r7, #20]
 8005f72:	f000 f8d7 	bl	8006124 <prvInsertTimerInActiveList>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d022      	beq.n	8005fc2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	2300      	movs	r3, #0
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	2100      	movs	r1, #0
 8005f86:	6978      	ldr	r0, [r7, #20]
 8005f88:	f7ff ff86 	bl	8005e98 <xTimerGenericCommand>
 8005f8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d116      	bne.n	8005fc2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f98:	b672      	cpsid	i
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	b662      	cpsie	i
 8005fa8:	60fb      	str	r3, [r7, #12]
}
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
 8005fae:	e7fd      	b.n	8005fac <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fb6:	f023 0301 	bic.w	r3, r3, #1
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	6978      	ldr	r0, [r7, #20]
 8005fc8:	4798      	blx	r3
}
 8005fca:	bf00      	nop
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000e28 	.word	0x20000e28

08005fd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fe0:	f107 0308 	add.w	r3, r7, #8
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 f859 	bl	800609c <prvGetNextExpireTime>
 8005fea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f805 	bl	8006000 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ff6:	f000 f8d7 	bl	80061a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ffa:	bf00      	nop
 8005ffc:	e7f0      	b.n	8005fe0 <prvTimerTask+0x8>
	...

08006000 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800600a:	f7ff f909 	bl	8005220 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800600e:	f107 0308 	add.w	r3, r7, #8
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f866 	bl	80060e4 <prvSampleTimeNow>
 8006018:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d130      	bne.n	8006082 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10a      	bne.n	800603c <prvProcessTimerOrBlockTask+0x3c>
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	429a      	cmp	r2, r3
 800602c:	d806      	bhi.n	800603c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800602e:	f7ff f905 	bl	800523c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006032:	68f9      	ldr	r1, [r7, #12]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff ff7f 	bl	8005f38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800603a:	e024      	b.n	8006086 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006042:	4b13      	ldr	r3, [pc, #76]	@ (8006090 <prvProcessTimerOrBlockTask+0x90>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <prvProcessTimerOrBlockTask+0x50>
 800604c:	2301      	movs	r3, #1
 800604e:	e000      	b.n	8006052 <prvProcessTimerOrBlockTask+0x52>
 8006050:	2300      	movs	r3, #0
 8006052:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006054:	4b0f      	ldr	r3, [pc, #60]	@ (8006094 <prvProcessTimerOrBlockTask+0x94>)
 8006056:	6818      	ldr	r0, [r3, #0]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	4619      	mov	r1, r3
 8006062:	f7fe fe37 	bl	8004cd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006066:	f7ff f8e9 	bl	800523c <xTaskResumeAll>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10a      	bne.n	8006086 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006070:	4b09      	ldr	r3, [pc, #36]	@ (8006098 <prvProcessTimerOrBlockTask+0x98>)
 8006072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	f3bf 8f6f 	isb	sy
}
 8006080:	e001      	b.n	8006086 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006082:	f7ff f8db 	bl	800523c <xTaskResumeAll>
}
 8006086:	bf00      	nop
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000e2c 	.word	0x20000e2c
 8006094:	20000e30 	.word	0x20000e30
 8006098:	e000ed04 	.word	0xe000ed04

0800609c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060a4:	4b0e      	ldr	r3, [pc, #56]	@ (80060e0 <prvGetNextExpireTime+0x44>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <prvGetNextExpireTime+0x16>
 80060ae:	2201      	movs	r2, #1
 80060b0:	e000      	b.n	80060b4 <prvGetNextExpireTime+0x18>
 80060b2:	2200      	movs	r2, #0
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d105      	bne.n	80060cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060c0:	4b07      	ldr	r3, [pc, #28]	@ (80060e0 <prvGetNextExpireTime+0x44>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	e001      	b.n	80060d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060d0:	68fb      	ldr	r3, [r7, #12]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20000e28 	.word	0x20000e28

080060e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060ec:	f7ff f946 	bl	800537c <xTaskGetTickCount>
 80060f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006120 <prvSampleTimeNow+0x3c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d205      	bcs.n	8006108 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060fc:	f000 f940 	bl	8006380 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	e002      	b.n	800610e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800610e:	4a04      	ldr	r2, [pc, #16]	@ (8006120 <prvSampleTimeNow+0x3c>)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006114:	68fb      	ldr	r3, [r7, #12]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000e38 	.word	0x20000e38

08006124 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006132:	2300      	movs	r3, #0
 8006134:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	d812      	bhi.n	8006170 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	1ad2      	subs	r2, r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	429a      	cmp	r2, r3
 8006156:	d302      	bcc.n	800615e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006158:	2301      	movs	r3, #1
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	e01b      	b.n	8006196 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800615e:	4b10      	ldr	r3, [pc, #64]	@ (80061a0 <prvInsertTimerInActiveList+0x7c>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3304      	adds	r3, #4
 8006166:	4619      	mov	r1, r3
 8006168:	4610      	mov	r0, r2
 800616a:	f7fd fef6 	bl	8003f5a <vListInsert>
 800616e:	e012      	b.n	8006196 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d206      	bcs.n	8006186 <prvInsertTimerInActiveList+0x62>
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	429a      	cmp	r2, r3
 800617e:	d302      	bcc.n	8006186 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006180:	2301      	movs	r3, #1
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	e007      	b.n	8006196 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006186:	4b07      	ldr	r3, [pc, #28]	@ (80061a4 <prvInsertTimerInActiveList+0x80>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3304      	adds	r3, #4
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f7fd fee2 	bl	8003f5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006196:	697b      	ldr	r3, [r7, #20]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	20000e2c 	.word	0x20000e2c
 80061a4:	20000e28 	.word	0x20000e28

080061a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08e      	sub	sp, #56	@ 0x38
 80061ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061ae:	e0d4      	b.n	800635a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	da1b      	bge.n	80061ee <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061b6:	1d3b      	adds	r3, r7, #4
 80061b8:	3304      	adds	r3, #4
 80061ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10d      	bne.n	80061de <prvProcessReceivedCommands+0x36>
	__asm volatile
 80061c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c6:	b672      	cpsid	i
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	b662      	cpsie	i
 80061d6:	61fb      	str	r3, [r7, #28]
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061e4:	6850      	ldr	r0, [r2, #4]
 80061e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061e8:	6892      	ldr	r2, [r2, #8]
 80061ea:	4611      	mov	r1, r2
 80061ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f2c0 80b2 	blt.w	800635a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d004      	beq.n	800620c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006204:	3304      	adds	r3, #4
 8006206:	4618      	mov	r0, r3
 8006208:	f7fd fee0 	bl	8003fcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800620c:	463b      	mov	r3, r7
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff ff68 	bl	80060e4 <prvSampleTimeNow>
 8006214:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b09      	cmp	r3, #9
 800621a:	f200 809b 	bhi.w	8006354 <prvProcessReceivedCommands+0x1ac>
 800621e:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <prvProcessReceivedCommands+0x7c>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	0800624d 	.word	0x0800624d
 8006228:	0800624d 	.word	0x0800624d
 800622c:	0800624d 	.word	0x0800624d
 8006230:	080062c7 	.word	0x080062c7
 8006234:	080062db 	.word	0x080062db
 8006238:	0800632b 	.word	0x0800632b
 800623c:	0800624d 	.word	0x0800624d
 8006240:	0800624d 	.word	0x0800624d
 8006244:	080062c7 	.word	0x080062c7
 8006248:	080062db 	.word	0x080062db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800624c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	b2da      	uxtb	r2, r3
 8006258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	18d1      	adds	r1, r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800626a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800626c:	f7ff ff5a 	bl	8006124 <prvInsertTimerInActiveList>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d070      	beq.n	8006358 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800627c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800627e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d065      	beq.n	8006358 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	441a      	add	r2, r3
 8006294:	2300      	movs	r3, #0
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	2300      	movs	r3, #0
 800629a:	2100      	movs	r1, #0
 800629c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800629e:	f7ff fdfb 	bl	8005e98 <xTimerGenericCommand>
 80062a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d156      	bne.n	8006358 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ae:	b672      	cpsid	i
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	b662      	cpsie	i
 80062be:	61bb      	str	r3, [r7, #24]
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	e7fd      	b.n	80062c2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80062d8:	e03f      	b.n	800635a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062e0:	f043 0301 	orr.w	r3, r3, #1
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10d      	bne.n	8006316 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fe:	b672      	cpsid	i
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	b662      	cpsie	i
 800630e:	617b      	str	r3, [r7, #20]
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	e7fd      	b.n	8006312 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	18d1      	adds	r1, r2, r3
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006324:	f7ff fefe 	bl	8006124 <prvInsertTimerInActiveList>
					break;
 8006328:	e017      	b.n	800635a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800632a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d103      	bne.n	8006340 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8006338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800633a:	f000 fbd3 	bl	8006ae4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800633e:	e00c      	b.n	800635a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006342:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006346:	f023 0301 	bic.w	r3, r3, #1
 800634a:	b2da      	uxtb	r2, r3
 800634c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006352:	e002      	b.n	800635a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8006354:	bf00      	nop
 8006356:	e000      	b.n	800635a <prvProcessReceivedCommands+0x1b2>
					break;
 8006358:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800635a:	4b08      	ldr	r3, [pc, #32]	@ (800637c <prvProcessReceivedCommands+0x1d4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	1d39      	adds	r1, r7, #4
 8006360:	2200      	movs	r2, #0
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe f964 	bl	8004630 <xQueueReceive>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	f47f af20 	bne.w	80061b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	3730      	adds	r7, #48	@ 0x30
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000e30 	.word	0x20000e30

08006380 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006386:	e04b      	b.n	8006420 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006388:	4b2f      	ldr	r3, [pc, #188]	@ (8006448 <prvSwitchTimerLists+0xc8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006392:	4b2d      	ldr	r3, [pc, #180]	@ (8006448 <prvSwitchTimerLists+0xc8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3304      	adds	r3, #4
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fd fe13 	bl	8003fcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d031      	beq.n	8006420 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4413      	add	r3, r2
 80063c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d90e      	bls.n	80063ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063da:	4b1b      	ldr	r3, [pc, #108]	@ (8006448 <prvSwitchTimerLists+0xc8>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f7fd fdb8 	bl	8003f5a <vListInsert>
 80063ea:	e019      	b.n	8006420 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063ec:	2300      	movs	r3, #0
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	2300      	movs	r3, #0
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	2100      	movs	r1, #0
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff fd4e 	bl	8005e98 <xTimerGenericCommand>
 80063fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10d      	bne.n	8006420 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006408:	b672      	cpsid	i
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	b662      	cpsie	i
 8006418:	603b      	str	r3, [r7, #0]
}
 800641a:	bf00      	nop
 800641c:	bf00      	nop
 800641e:	e7fd      	b.n	800641c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006420:	4b09      	ldr	r3, [pc, #36]	@ (8006448 <prvSwitchTimerLists+0xc8>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1ae      	bne.n	8006388 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800642a:	4b07      	ldr	r3, [pc, #28]	@ (8006448 <prvSwitchTimerLists+0xc8>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006430:	4b06      	ldr	r3, [pc, #24]	@ (800644c <prvSwitchTimerLists+0xcc>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a04      	ldr	r2, [pc, #16]	@ (8006448 <prvSwitchTimerLists+0xc8>)
 8006436:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006438:	4a04      	ldr	r2, [pc, #16]	@ (800644c <prvSwitchTimerLists+0xcc>)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	6013      	str	r3, [r2, #0]
}
 800643e:	bf00      	nop
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20000e28 	.word	0x20000e28
 800644c:	20000e2c 	.word	0x20000e2c

08006450 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006456:	f000 f949 	bl	80066ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800645a:	4b15      	ldr	r3, [pc, #84]	@ (80064b0 <prvCheckForValidListAndQueue+0x60>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d120      	bne.n	80064a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006462:	4814      	ldr	r0, [pc, #80]	@ (80064b4 <prvCheckForValidListAndQueue+0x64>)
 8006464:	f7fd fd28 	bl	8003eb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006468:	4813      	ldr	r0, [pc, #76]	@ (80064b8 <prvCheckForValidListAndQueue+0x68>)
 800646a:	f7fd fd25 	bl	8003eb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800646e:	4b13      	ldr	r3, [pc, #76]	@ (80064bc <prvCheckForValidListAndQueue+0x6c>)
 8006470:	4a10      	ldr	r2, [pc, #64]	@ (80064b4 <prvCheckForValidListAndQueue+0x64>)
 8006472:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006474:	4b12      	ldr	r3, [pc, #72]	@ (80064c0 <prvCheckForValidListAndQueue+0x70>)
 8006476:	4a10      	ldr	r2, [pc, #64]	@ (80064b8 <prvCheckForValidListAndQueue+0x68>)
 8006478:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800647a:	2300      	movs	r3, #0
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	4b11      	ldr	r3, [pc, #68]	@ (80064c4 <prvCheckForValidListAndQueue+0x74>)
 8006480:	4a11      	ldr	r2, [pc, #68]	@ (80064c8 <prvCheckForValidListAndQueue+0x78>)
 8006482:	2110      	movs	r1, #16
 8006484:	200a      	movs	r0, #10
 8006486:	f7fd fe37 	bl	80040f8 <xQueueGenericCreateStatic>
 800648a:	4603      	mov	r3, r0
 800648c:	4a08      	ldr	r2, [pc, #32]	@ (80064b0 <prvCheckForValidListAndQueue+0x60>)
 800648e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006490:	4b07      	ldr	r3, [pc, #28]	@ (80064b0 <prvCheckForValidListAndQueue+0x60>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006498:	4b05      	ldr	r3, [pc, #20]	@ (80064b0 <prvCheckForValidListAndQueue+0x60>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	490b      	ldr	r1, [pc, #44]	@ (80064cc <prvCheckForValidListAndQueue+0x7c>)
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe fbee 	bl	8004c80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064a4:	f000 f958 	bl	8006758 <vPortExitCritical>
}
 80064a8:	bf00      	nop
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20000e30 	.word	0x20000e30
 80064b4:	20000e00 	.word	0x20000e00
 80064b8:	20000e14 	.word	0x20000e14
 80064bc:	20000e28 	.word	0x20000e28
 80064c0:	20000e2c 	.word	0x20000e2c
 80064c4:	20000edc 	.word	0x20000edc
 80064c8:	20000e3c 	.word	0x20000e3c
 80064cc:	08007850 	.word	0x08007850

080064d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3b04      	subs	r3, #4
 80064e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3b04      	subs	r3, #4
 80064ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f023 0201 	bic.w	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3b04      	subs	r3, #4
 80064fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006500:	4a0c      	ldr	r2, [pc, #48]	@ (8006534 <pxPortInitialiseStack+0x64>)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3b14      	subs	r3, #20
 800650a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3b04      	subs	r3, #4
 8006516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f06f 0202 	mvn.w	r2, #2
 800651e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3b20      	subs	r3, #32
 8006524:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006526:	68fb      	ldr	r3, [r7, #12]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	08006539 	.word	0x08006539

08006538 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006542:	4b15      	ldr	r3, [pc, #84]	@ (8006598 <prvTaskExitError+0x60>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654a:	d00d      	beq.n	8006568 <prvTaskExitError+0x30>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006550:	b672      	cpsid	i
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	b662      	cpsie	i
 8006560:	60fb      	str	r3, [r7, #12]
}
 8006562:	bf00      	nop
 8006564:	bf00      	nop
 8006566:	e7fd      	b.n	8006564 <prvTaskExitError+0x2c>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656c:	b672      	cpsid	i
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	b662      	cpsie	i
 800657c:	60bb      	str	r3, [r7, #8]
}
 800657e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006580:	bf00      	nop
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0fc      	beq.n	8006582 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	2000000c 	.word	0x2000000c
 800659c:	00000000 	.word	0x00000000

080065a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065a0:	4b07      	ldr	r3, [pc, #28]	@ (80065c0 <pxCurrentTCBConst2>)
 80065a2:	6819      	ldr	r1, [r3, #0]
 80065a4:	6808      	ldr	r0, [r1, #0]
 80065a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065aa:	f380 8809 	msr	PSP, r0
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f04f 0000 	mov.w	r0, #0
 80065b6:	f380 8811 	msr	BASEPRI, r0
 80065ba:	4770      	bx	lr
 80065bc:	f3af 8000 	nop.w

080065c0 <pxCurrentTCBConst2>:
 80065c0:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop

080065c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065c8:	4808      	ldr	r0, [pc, #32]	@ (80065ec <prvPortStartFirstTask+0x24>)
 80065ca:	6800      	ldr	r0, [r0, #0]
 80065cc:	6800      	ldr	r0, [r0, #0]
 80065ce:	f380 8808 	msr	MSP, r0
 80065d2:	f04f 0000 	mov.w	r0, #0
 80065d6:	f380 8814 	msr	CONTROL, r0
 80065da:	b662      	cpsie	i
 80065dc:	b661      	cpsie	f
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	df00      	svc	0
 80065e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065ea:	bf00      	nop
 80065ec:	e000ed08 	.word	0xe000ed08

080065f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065f6:	4b37      	ldr	r3, [pc, #220]	@ (80066d4 <xPortStartScheduler+0xe4>)
 80065f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	22ff      	movs	r2, #255	@ 0xff
 8006606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006618:	b2da      	uxtb	r2, r3
 800661a:	4b2f      	ldr	r3, [pc, #188]	@ (80066d8 <xPortStartScheduler+0xe8>)
 800661c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800661e:	4b2f      	ldr	r3, [pc, #188]	@ (80066dc <xPortStartScheduler+0xec>)
 8006620:	2207      	movs	r2, #7
 8006622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006624:	e009      	b.n	800663a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006626:	4b2d      	ldr	r3, [pc, #180]	@ (80066dc <xPortStartScheduler+0xec>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3b01      	subs	r3, #1
 800662c:	4a2b      	ldr	r2, [pc, #172]	@ (80066dc <xPortStartScheduler+0xec>)
 800662e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	b2db      	uxtb	r3, r3
 8006638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006642:	2b80      	cmp	r3, #128	@ 0x80
 8006644:	d0ef      	beq.n	8006626 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006646:	4b25      	ldr	r3, [pc, #148]	@ (80066dc <xPortStartScheduler+0xec>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f1c3 0307 	rsb	r3, r3, #7
 800664e:	2b04      	cmp	r3, #4
 8006650:	d00d      	beq.n	800666e <xPortStartScheduler+0x7e>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006656:	b672      	cpsid	i
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	b662      	cpsie	i
 8006666:	60bb      	str	r3, [r7, #8]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800666e:	4b1b      	ldr	r3, [pc, #108]	@ (80066dc <xPortStartScheduler+0xec>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	4a19      	ldr	r2, [pc, #100]	@ (80066dc <xPortStartScheduler+0xec>)
 8006676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006678:	4b18      	ldr	r3, [pc, #96]	@ (80066dc <xPortStartScheduler+0xec>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006680:	4a16      	ldr	r2, [pc, #88]	@ (80066dc <xPortStartScheduler+0xec>)
 8006682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	b2da      	uxtb	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800668c:	4b14      	ldr	r3, [pc, #80]	@ (80066e0 <xPortStartScheduler+0xf0>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a13      	ldr	r2, [pc, #76]	@ (80066e0 <xPortStartScheduler+0xf0>)
 8006692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006698:	4b11      	ldr	r3, [pc, #68]	@ (80066e0 <xPortStartScheduler+0xf0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a10      	ldr	r2, [pc, #64]	@ (80066e0 <xPortStartScheduler+0xf0>)
 800669e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066a4:	f000 f8dc 	bl	8006860 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066a8:	4b0e      	ldr	r3, [pc, #56]	@ (80066e4 <xPortStartScheduler+0xf4>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066ae:	f000 f8fb 	bl	80068a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066b2:	4b0d      	ldr	r3, [pc, #52]	@ (80066e8 <xPortStartScheduler+0xf8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a0c      	ldr	r2, [pc, #48]	@ (80066e8 <xPortStartScheduler+0xf8>)
 80066b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80066bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066be:	f7ff ff83 	bl	80065c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066c2:	f7fe ff27 	bl	8005514 <vTaskSwitchContext>
	prvTaskExitError();
 80066c6:	f7ff ff37 	bl	8006538 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	e000e400 	.word	0xe000e400
 80066d8:	20000f2c 	.word	0x20000f2c
 80066dc:	20000f30 	.word	0x20000f30
 80066e0:	e000ed20 	.word	0xe000ed20
 80066e4:	2000000c 	.word	0x2000000c
 80066e8:	e000ef34 	.word	0xe000ef34

080066ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f6:	b672      	cpsid	i
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	b662      	cpsie	i
 8006706:	607b      	str	r3, [r7, #4]
}
 8006708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800670a:	4b11      	ldr	r3, [pc, #68]	@ (8006750 <vPortEnterCritical+0x64>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3301      	adds	r3, #1
 8006710:	4a0f      	ldr	r2, [pc, #60]	@ (8006750 <vPortEnterCritical+0x64>)
 8006712:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006714:	4b0e      	ldr	r3, [pc, #56]	@ (8006750 <vPortEnterCritical+0x64>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d112      	bne.n	8006742 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800671c:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <vPortEnterCritical+0x68>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00d      	beq.n	8006742 <vPortEnterCritical+0x56>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672a:	b672      	cpsid	i
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	b662      	cpsie	i
 800673a:	603b      	str	r3, [r7, #0]
}
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	e7fd      	b.n	800673e <vPortEnterCritical+0x52>
	}
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	2000000c 	.word	0x2000000c
 8006754:	e000ed04 	.word	0xe000ed04

08006758 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800675e:	4b13      	ldr	r3, [pc, #76]	@ (80067ac <vPortExitCritical+0x54>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10d      	bne.n	8006782 <vPortExitCritical+0x2a>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	b672      	cpsid	i
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	b662      	cpsie	i
 800677a:	607b      	str	r3, [r7, #4]
}
 800677c:	bf00      	nop
 800677e:	bf00      	nop
 8006780:	e7fd      	b.n	800677e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006782:	4b0a      	ldr	r3, [pc, #40]	@ (80067ac <vPortExitCritical+0x54>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3b01      	subs	r3, #1
 8006788:	4a08      	ldr	r2, [pc, #32]	@ (80067ac <vPortExitCritical+0x54>)
 800678a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800678c:	4b07      	ldr	r3, [pc, #28]	@ (80067ac <vPortExitCritical+0x54>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d105      	bne.n	80067a0 <vPortExitCritical+0x48>
 8006794:	2300      	movs	r3, #0
 8006796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	f383 8811 	msr	BASEPRI, r3
}
 800679e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	2000000c 	.word	0x2000000c

080067b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067b0:	f3ef 8009 	mrs	r0, PSP
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	4b15      	ldr	r3, [pc, #84]	@ (8006810 <pxCurrentTCBConst>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	f01e 0f10 	tst.w	lr, #16
 80067c0:	bf08      	it	eq
 80067c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ca:	6010      	str	r0, [r2, #0]
 80067cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80067d4:	b672      	cpsid	i
 80067d6:	f380 8811 	msr	BASEPRI, r0
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	b662      	cpsie	i
 80067e4:	f7fe fe96 	bl	8005514 <vTaskSwitchContext>
 80067e8:	f04f 0000 	mov.w	r0, #0
 80067ec:	f380 8811 	msr	BASEPRI, r0
 80067f0:	bc09      	pop	{r0, r3}
 80067f2:	6819      	ldr	r1, [r3, #0]
 80067f4:	6808      	ldr	r0, [r1, #0]
 80067f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fa:	f01e 0f10 	tst.w	lr, #16
 80067fe:	bf08      	it	eq
 8006800:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006804:	f380 8809 	msr	PSP, r0
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop

08006810 <pxCurrentTCBConst>:
 8006810:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop

08006818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	b672      	cpsid	i
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	b662      	cpsie	i
 8006832:	607b      	str	r3, [r7, #4]
}
 8006834:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006836:	f7fe fdb1 	bl	800539c <xTaskIncrementTick>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006840:	4b06      	ldr	r3, [pc, #24]	@ (800685c <SysTick_Handler+0x44>)
 8006842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	2300      	movs	r3, #0
 800684a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	f383 8811 	msr	BASEPRI, r3
}
 8006852:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	e000ed04 	.word	0xe000ed04

08006860 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006864:	4b0b      	ldr	r3, [pc, #44]	@ (8006894 <vPortSetupTimerInterrupt+0x34>)
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800686a:	4b0b      	ldr	r3, [pc, #44]	@ (8006898 <vPortSetupTimerInterrupt+0x38>)
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006870:	4b0a      	ldr	r3, [pc, #40]	@ (800689c <vPortSetupTimerInterrupt+0x3c>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a0a      	ldr	r2, [pc, #40]	@ (80068a0 <vPortSetupTimerInterrupt+0x40>)
 8006876:	fba2 2303 	umull	r2, r3, r2, r3
 800687a:	099b      	lsrs	r3, r3, #6
 800687c:	4a09      	ldr	r2, [pc, #36]	@ (80068a4 <vPortSetupTimerInterrupt+0x44>)
 800687e:	3b01      	subs	r3, #1
 8006880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006882:	4b04      	ldr	r3, [pc, #16]	@ (8006894 <vPortSetupTimerInterrupt+0x34>)
 8006884:	2207      	movs	r2, #7
 8006886:	601a      	str	r2, [r3, #0]
}
 8006888:	bf00      	nop
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	e000e010 	.word	0xe000e010
 8006898:	e000e018 	.word	0xe000e018
 800689c:	20000000 	.word	0x20000000
 80068a0:	10624dd3 	.word	0x10624dd3
 80068a4:	e000e014 	.word	0xe000e014

080068a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80068b8 <vPortEnableVFP+0x10>
 80068ac:	6801      	ldr	r1, [r0, #0]
 80068ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80068b2:	6001      	str	r1, [r0, #0]
 80068b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068b6:	bf00      	nop
 80068b8:	e000ed88 	.word	0xe000ed88

080068bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068c2:	f3ef 8305 	mrs	r3, IPSR
 80068c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b0f      	cmp	r3, #15
 80068cc:	d917      	bls.n	80068fe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006938 <vPortValidateInterruptPriority+0x7c>)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068d8:	4b18      	ldr	r3, [pc, #96]	@ (800693c <vPortValidateInterruptPriority+0x80>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	7afa      	ldrb	r2, [r7, #11]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d20d      	bcs.n	80068fe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e6:	b672      	cpsid	i
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	b662      	cpsie	i
 80068f6:	607b      	str	r3, [r7, #4]
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	e7fd      	b.n	80068fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068fe:	4b10      	ldr	r3, [pc, #64]	@ (8006940 <vPortValidateInterruptPriority+0x84>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006906:	4b0f      	ldr	r3, [pc, #60]	@ (8006944 <vPortValidateInterruptPriority+0x88>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d90d      	bls.n	800692a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006912:	b672      	cpsid	i
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	b662      	cpsie	i
 8006922:	603b      	str	r3, [r7, #0]
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	e7fd      	b.n	8006926 <vPortValidateInterruptPriority+0x6a>
	}
 800692a:	bf00      	nop
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	e000e3f0 	.word	0xe000e3f0
 800693c:	20000f2c 	.word	0x20000f2c
 8006940:	e000ed0c 	.word	0xe000ed0c
 8006944:	20000f30 	.word	0x20000f30

08006948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08a      	sub	sp, #40	@ 0x28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006950:	2300      	movs	r3, #0
 8006952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006954:	f7fe fc64 	bl	8005220 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006958:	4b5d      	ldr	r3, [pc, #372]	@ (8006ad0 <pvPortMalloc+0x188>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006960:	f000 f920 	bl	8006ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006964:	4b5b      	ldr	r3, [pc, #364]	@ (8006ad4 <pvPortMalloc+0x18c>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4013      	ands	r3, r2
 800696c:	2b00      	cmp	r3, #0
 800696e:	f040 8094 	bne.w	8006a9a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d020      	beq.n	80069ba <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8006978:	2208      	movs	r2, #8
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4413      	add	r3, r2
 800697e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f003 0307 	and.w	r3, r3, #7
 8006986:	2b00      	cmp	r3, #0
 8006988:	d017      	beq.n	80069ba <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f023 0307 	bic.w	r3, r3, #7
 8006990:	3308      	adds	r3, #8
 8006992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00d      	beq.n	80069ba <pvPortMalloc+0x72>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	b672      	cpsid	i
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	b662      	cpsie	i
 80069b2:	617b      	str	r3, [r7, #20]
}
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop
 80069b8:	e7fd      	b.n	80069b6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d06c      	beq.n	8006a9a <pvPortMalloc+0x152>
 80069c0:	4b45      	ldr	r3, [pc, #276]	@ (8006ad8 <pvPortMalloc+0x190>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d867      	bhi.n	8006a9a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069ca:	4b44      	ldr	r3, [pc, #272]	@ (8006adc <pvPortMalloc+0x194>)
 80069cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069ce:	4b43      	ldr	r3, [pc, #268]	@ (8006adc <pvPortMalloc+0x194>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069d4:	e004      	b.n	80069e0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d903      	bls.n	80069f2 <pvPortMalloc+0xaa>
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f1      	bne.n	80069d6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069f2:	4b37      	ldr	r3, [pc, #220]	@ (8006ad0 <pvPortMalloc+0x188>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d04e      	beq.n	8006a9a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2208      	movs	r2, #8
 8006a02:	4413      	add	r3, r2
 8006a04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	1ad2      	subs	r2, r2, r3
 8006a16:	2308      	movs	r3, #8
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d922      	bls.n	8006a64 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4413      	add	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00d      	beq.n	8006a4c <pvPortMalloc+0x104>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a34:	b672      	cpsid	i
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	b662      	cpsie	i
 8006a44:	613b      	str	r3, [r7, #16]
}
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a5e:	69b8      	ldr	r0, [r7, #24]
 8006a60:	f000 f902 	bl	8006c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a64:	4b1c      	ldr	r3, [pc, #112]	@ (8006ad8 <pvPortMalloc+0x190>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ad8 <pvPortMalloc+0x190>)
 8006a70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a72:	4b19      	ldr	r3, [pc, #100]	@ (8006ad8 <pvPortMalloc+0x190>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae0 <pvPortMalloc+0x198>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d203      	bcs.n	8006a86 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a7e:	4b16      	ldr	r3, [pc, #88]	@ (8006ad8 <pvPortMalloc+0x190>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a17      	ldr	r2, [pc, #92]	@ (8006ae0 <pvPortMalloc+0x198>)
 8006a84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	4b12      	ldr	r3, [pc, #72]	@ (8006ad4 <pvPortMalloc+0x18c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a9a:	f7fe fbcf 	bl	800523c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	f003 0307 	and.w	r3, r3, #7
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00d      	beq.n	8006ac4 <pvPortMalloc+0x17c>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	b672      	cpsid	i
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	b662      	cpsie	i
 8006abc:	60fb      	str	r3, [r7, #12]
}
 8006abe:	bf00      	nop
 8006ac0:	bf00      	nop
 8006ac2:	e7fd      	b.n	8006ac0 <pvPortMalloc+0x178>
	return pvReturn;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3728      	adds	r7, #40	@ 0x28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20004b3c 	.word	0x20004b3c
 8006ad4:	20004b48 	.word	0x20004b48
 8006ad8:	20004b40 	.word	0x20004b40
 8006adc:	20004b34 	.word	0x20004b34
 8006ae0:	20004b44 	.word	0x20004b44

08006ae4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d04e      	beq.n	8006b94 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006af6:	2308      	movs	r3, #8
 8006af8:	425b      	negs	r3, r3
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4413      	add	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	4b24      	ldr	r3, [pc, #144]	@ (8006b9c <vPortFree+0xb8>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10d      	bne.n	8006b2e <vPortFree+0x4a>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b16:	b672      	cpsid	i
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	b662      	cpsie	i
 8006b26:	60fb      	str	r3, [r7, #12]
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	e7fd      	b.n	8006b2a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00d      	beq.n	8006b52 <vPortFree+0x6e>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3a:	b672      	cpsid	i
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	b662      	cpsie	i
 8006b4a:	60bb      	str	r3, [r7, #8]
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	4b11      	ldr	r3, [pc, #68]	@ (8006b9c <vPortFree+0xb8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d019      	beq.n	8006b94 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d115      	bne.n	8006b94 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b9c <vPortFree+0xb8>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	43db      	mvns	r3, r3
 8006b72:	401a      	ands	r2, r3
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b78:	f7fe fb52 	bl	8005220 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	4b07      	ldr	r3, [pc, #28]	@ (8006ba0 <vPortFree+0xbc>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4413      	add	r3, r2
 8006b86:	4a06      	ldr	r2, [pc, #24]	@ (8006ba0 <vPortFree+0xbc>)
 8006b88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b8a:	6938      	ldr	r0, [r7, #16]
 8006b8c:	f000 f86c 	bl	8006c68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006b90:	f7fe fb54 	bl	800523c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b94:	bf00      	nop
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20004b48 	.word	0x20004b48
 8006ba0:	20004b40 	.word	0x20004b40

08006ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006baa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bb0:	4b27      	ldr	r3, [pc, #156]	@ (8006c50 <prvHeapInit+0xac>)
 8006bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00c      	beq.n	8006bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3307      	adds	r3, #7
 8006bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0307 	bic.w	r3, r3, #7
 8006bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8006c50 <prvHeapInit+0xac>)
 8006bd4:	4413      	add	r3, r2
 8006bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8006c54 <prvHeapInit+0xb0>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006be2:	4b1c      	ldr	r3, [pc, #112]	@ (8006c54 <prvHeapInit+0xb0>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	4413      	add	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 0307 	bic.w	r3, r3, #7
 8006bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4a15      	ldr	r2, [pc, #84]	@ (8006c58 <prvHeapInit+0xb4>)
 8006c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c06:	4b14      	ldr	r3, [pc, #80]	@ (8006c58 <prvHeapInit+0xb4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c0e:	4b12      	ldr	r3, [pc, #72]	@ (8006c58 <prvHeapInit+0xb4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	1ad2      	subs	r2, r2, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c24:	4b0c      	ldr	r3, [pc, #48]	@ (8006c58 <prvHeapInit+0xb4>)
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a0a      	ldr	r2, [pc, #40]	@ (8006c5c <prvHeapInit+0xb8>)
 8006c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	4a09      	ldr	r2, [pc, #36]	@ (8006c60 <prvHeapInit+0xbc>)
 8006c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c3c:	4b09      	ldr	r3, [pc, #36]	@ (8006c64 <prvHeapInit+0xc0>)
 8006c3e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c42:	601a      	str	r2, [r3, #0]
}
 8006c44:	bf00      	nop
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	20000f34 	.word	0x20000f34
 8006c54:	20004b34 	.word	0x20004b34
 8006c58:	20004b3c 	.word	0x20004b3c
 8006c5c:	20004b44 	.word	0x20004b44
 8006c60:	20004b40 	.word	0x20004b40
 8006c64:	20004b48 	.word	0x20004b48

08006c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c70:	4b28      	ldr	r3, [pc, #160]	@ (8006d14 <prvInsertBlockIntoFreeList+0xac>)
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	e002      	b.n	8006c7c <prvInsertBlockIntoFreeList+0x14>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d8f7      	bhi.n	8006c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	4413      	add	r3, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d108      	bne.n	8006caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	441a      	add	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	441a      	add	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d118      	bne.n	8006cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b15      	ldr	r3, [pc, #84]	@ (8006d18 <prvInsertBlockIntoFreeList+0xb0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d00d      	beq.n	8006ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	441a      	add	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	e008      	b.n	8006cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8006d18 <prvInsertBlockIntoFreeList+0xb0>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e003      	b.n	8006cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d002      	beq.n	8006d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	20004b34 	.word	0x20004b34
 8006d18:	20004b3c 	.word	0x20004b3c

08006d1c <std>:
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	4604      	mov	r4, r0
 8006d22:	e9c0 3300 	strd	r3, r3, [r0]
 8006d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d2a:	6083      	str	r3, [r0, #8]
 8006d2c:	8181      	strh	r1, [r0, #12]
 8006d2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d30:	81c2      	strh	r2, [r0, #14]
 8006d32:	6183      	str	r3, [r0, #24]
 8006d34:	4619      	mov	r1, r3
 8006d36:	2208      	movs	r2, #8
 8006d38:	305c      	adds	r0, #92	@ 0x5c
 8006d3a:	f000 f9e7 	bl	800710c <memset>
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d74 <std+0x58>)
 8006d40:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d42:	4b0d      	ldr	r3, [pc, #52]	@ (8006d78 <std+0x5c>)
 8006d44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d46:	4b0d      	ldr	r3, [pc, #52]	@ (8006d7c <std+0x60>)
 8006d48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d80 <std+0x64>)
 8006d4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d84 <std+0x68>)
 8006d50:	6224      	str	r4, [r4, #32]
 8006d52:	429c      	cmp	r4, r3
 8006d54:	d006      	beq.n	8006d64 <std+0x48>
 8006d56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d5a:	4294      	cmp	r4, r2
 8006d5c:	d002      	beq.n	8006d64 <std+0x48>
 8006d5e:	33d0      	adds	r3, #208	@ 0xd0
 8006d60:	429c      	cmp	r4, r3
 8006d62:	d105      	bne.n	8006d70 <std+0x54>
 8006d64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d6c:	f000 ba9c 	b.w	80072a8 <__retarget_lock_init_recursive>
 8006d70:	bd10      	pop	{r4, pc}
 8006d72:	bf00      	nop
 8006d74:	08006f5d 	.word	0x08006f5d
 8006d78:	08006f7f 	.word	0x08006f7f
 8006d7c:	08006fb7 	.word	0x08006fb7
 8006d80:	08006fdb 	.word	0x08006fdb
 8006d84:	20004b4c 	.word	0x20004b4c

08006d88 <stdio_exit_handler>:
 8006d88:	4a02      	ldr	r2, [pc, #8]	@ (8006d94 <stdio_exit_handler+0xc>)
 8006d8a:	4903      	ldr	r1, [pc, #12]	@ (8006d98 <stdio_exit_handler+0x10>)
 8006d8c:	4803      	ldr	r0, [pc, #12]	@ (8006d9c <stdio_exit_handler+0x14>)
 8006d8e:	f000 b869 	b.w	8006e64 <_fwalk_sglue>
 8006d92:	bf00      	nop
 8006d94:	20000010 	.word	0x20000010
 8006d98:	080075c5 	.word	0x080075c5
 8006d9c:	20000020 	.word	0x20000020

08006da0 <cleanup_stdio>:
 8006da0:	6841      	ldr	r1, [r0, #4]
 8006da2:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd4 <cleanup_stdio+0x34>)
 8006da4:	4299      	cmp	r1, r3
 8006da6:	b510      	push	{r4, lr}
 8006da8:	4604      	mov	r4, r0
 8006daa:	d001      	beq.n	8006db0 <cleanup_stdio+0x10>
 8006dac:	f000 fc0a 	bl	80075c4 <_fflush_r>
 8006db0:	68a1      	ldr	r1, [r4, #8]
 8006db2:	4b09      	ldr	r3, [pc, #36]	@ (8006dd8 <cleanup_stdio+0x38>)
 8006db4:	4299      	cmp	r1, r3
 8006db6:	d002      	beq.n	8006dbe <cleanup_stdio+0x1e>
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 fc03 	bl	80075c4 <_fflush_r>
 8006dbe:	68e1      	ldr	r1, [r4, #12]
 8006dc0:	4b06      	ldr	r3, [pc, #24]	@ (8006ddc <cleanup_stdio+0x3c>)
 8006dc2:	4299      	cmp	r1, r3
 8006dc4:	d004      	beq.n	8006dd0 <cleanup_stdio+0x30>
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dcc:	f000 bbfa 	b.w	80075c4 <_fflush_r>
 8006dd0:	bd10      	pop	{r4, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20004b4c 	.word	0x20004b4c
 8006dd8:	20004bb4 	.word	0x20004bb4
 8006ddc:	20004c1c 	.word	0x20004c1c

08006de0 <global_stdio_init.part.0>:
 8006de0:	b510      	push	{r4, lr}
 8006de2:	4b0b      	ldr	r3, [pc, #44]	@ (8006e10 <global_stdio_init.part.0+0x30>)
 8006de4:	4c0b      	ldr	r4, [pc, #44]	@ (8006e14 <global_stdio_init.part.0+0x34>)
 8006de6:	4a0c      	ldr	r2, [pc, #48]	@ (8006e18 <global_stdio_init.part.0+0x38>)
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	4620      	mov	r0, r4
 8006dec:	2200      	movs	r2, #0
 8006dee:	2104      	movs	r1, #4
 8006df0:	f7ff ff94 	bl	8006d1c <std>
 8006df4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006df8:	2201      	movs	r2, #1
 8006dfa:	2109      	movs	r1, #9
 8006dfc:	f7ff ff8e 	bl	8006d1c <std>
 8006e00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e04:	2202      	movs	r2, #2
 8006e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e0a:	2112      	movs	r1, #18
 8006e0c:	f7ff bf86 	b.w	8006d1c <std>
 8006e10:	20004c84 	.word	0x20004c84
 8006e14:	20004b4c 	.word	0x20004b4c
 8006e18:	08006d89 	.word	0x08006d89

08006e1c <__sfp_lock_acquire>:
 8006e1c:	4801      	ldr	r0, [pc, #4]	@ (8006e24 <__sfp_lock_acquire+0x8>)
 8006e1e:	f000 ba44 	b.w	80072aa <__retarget_lock_acquire_recursive>
 8006e22:	bf00      	nop
 8006e24:	20004c8d 	.word	0x20004c8d

08006e28 <__sfp_lock_release>:
 8006e28:	4801      	ldr	r0, [pc, #4]	@ (8006e30 <__sfp_lock_release+0x8>)
 8006e2a:	f000 ba3f 	b.w	80072ac <__retarget_lock_release_recursive>
 8006e2e:	bf00      	nop
 8006e30:	20004c8d 	.word	0x20004c8d

08006e34 <__sinit>:
 8006e34:	b510      	push	{r4, lr}
 8006e36:	4604      	mov	r4, r0
 8006e38:	f7ff fff0 	bl	8006e1c <__sfp_lock_acquire>
 8006e3c:	6a23      	ldr	r3, [r4, #32]
 8006e3e:	b11b      	cbz	r3, 8006e48 <__sinit+0x14>
 8006e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e44:	f7ff bff0 	b.w	8006e28 <__sfp_lock_release>
 8006e48:	4b04      	ldr	r3, [pc, #16]	@ (8006e5c <__sinit+0x28>)
 8006e4a:	6223      	str	r3, [r4, #32]
 8006e4c:	4b04      	ldr	r3, [pc, #16]	@ (8006e60 <__sinit+0x2c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1f5      	bne.n	8006e40 <__sinit+0xc>
 8006e54:	f7ff ffc4 	bl	8006de0 <global_stdio_init.part.0>
 8006e58:	e7f2      	b.n	8006e40 <__sinit+0xc>
 8006e5a:	bf00      	nop
 8006e5c:	08006da1 	.word	0x08006da1
 8006e60:	20004c84 	.word	0x20004c84

08006e64 <_fwalk_sglue>:
 8006e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e68:	4607      	mov	r7, r0
 8006e6a:	4688      	mov	r8, r1
 8006e6c:	4614      	mov	r4, r2
 8006e6e:	2600      	movs	r6, #0
 8006e70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e74:	f1b9 0901 	subs.w	r9, r9, #1
 8006e78:	d505      	bpl.n	8006e86 <_fwalk_sglue+0x22>
 8006e7a:	6824      	ldr	r4, [r4, #0]
 8006e7c:	2c00      	cmp	r4, #0
 8006e7e:	d1f7      	bne.n	8006e70 <_fwalk_sglue+0xc>
 8006e80:	4630      	mov	r0, r6
 8006e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e86:	89ab      	ldrh	r3, [r5, #12]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d907      	bls.n	8006e9c <_fwalk_sglue+0x38>
 8006e8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e90:	3301      	adds	r3, #1
 8006e92:	d003      	beq.n	8006e9c <_fwalk_sglue+0x38>
 8006e94:	4629      	mov	r1, r5
 8006e96:	4638      	mov	r0, r7
 8006e98:	47c0      	blx	r8
 8006e9a:	4306      	orrs	r6, r0
 8006e9c:	3568      	adds	r5, #104	@ 0x68
 8006e9e:	e7e9      	b.n	8006e74 <_fwalk_sglue+0x10>

08006ea0 <_puts_r>:
 8006ea0:	6a03      	ldr	r3, [r0, #32]
 8006ea2:	b570      	push	{r4, r5, r6, lr}
 8006ea4:	6884      	ldr	r4, [r0, #8]
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	460e      	mov	r6, r1
 8006eaa:	b90b      	cbnz	r3, 8006eb0 <_puts_r+0x10>
 8006eac:	f7ff ffc2 	bl	8006e34 <__sinit>
 8006eb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006eb2:	07db      	lsls	r3, r3, #31
 8006eb4:	d405      	bmi.n	8006ec2 <_puts_r+0x22>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	0598      	lsls	r0, r3, #22
 8006eba:	d402      	bmi.n	8006ec2 <_puts_r+0x22>
 8006ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ebe:	f000 f9f4 	bl	80072aa <__retarget_lock_acquire_recursive>
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	0719      	lsls	r1, r3, #28
 8006ec6:	d502      	bpl.n	8006ece <_puts_r+0x2e>
 8006ec8:	6923      	ldr	r3, [r4, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d135      	bne.n	8006f3a <_puts_r+0x9a>
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f000 f8c5 	bl	8007060 <__swsetup_r>
 8006ed6:	b380      	cbz	r0, 8006f3a <_puts_r+0x9a>
 8006ed8:	f04f 35ff 	mov.w	r5, #4294967295
 8006edc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ede:	07da      	lsls	r2, r3, #31
 8006ee0:	d405      	bmi.n	8006eee <_puts_r+0x4e>
 8006ee2:	89a3      	ldrh	r3, [r4, #12]
 8006ee4:	059b      	lsls	r3, r3, #22
 8006ee6:	d402      	bmi.n	8006eee <_puts_r+0x4e>
 8006ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eea:	f000 f9df 	bl	80072ac <__retarget_lock_release_recursive>
 8006eee:	4628      	mov	r0, r5
 8006ef0:	bd70      	pop	{r4, r5, r6, pc}
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	da04      	bge.n	8006f00 <_puts_r+0x60>
 8006ef6:	69a2      	ldr	r2, [r4, #24]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	dc17      	bgt.n	8006f2c <_puts_r+0x8c>
 8006efc:	290a      	cmp	r1, #10
 8006efe:	d015      	beq.n	8006f2c <_puts_r+0x8c>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	6022      	str	r2, [r4, #0]
 8006f06:	7019      	strb	r1, [r3, #0]
 8006f08:	68a3      	ldr	r3, [r4, #8]
 8006f0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	60a3      	str	r3, [r4, #8]
 8006f12:	2900      	cmp	r1, #0
 8006f14:	d1ed      	bne.n	8006ef2 <_puts_r+0x52>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	da11      	bge.n	8006f3e <_puts_r+0x9e>
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	210a      	movs	r1, #10
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f000 f85f 	bl	8006fe2 <__swbuf_r>
 8006f24:	3001      	adds	r0, #1
 8006f26:	d0d7      	beq.n	8006ed8 <_puts_r+0x38>
 8006f28:	250a      	movs	r5, #10
 8006f2a:	e7d7      	b.n	8006edc <_puts_r+0x3c>
 8006f2c:	4622      	mov	r2, r4
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f000 f857 	bl	8006fe2 <__swbuf_r>
 8006f34:	3001      	adds	r0, #1
 8006f36:	d1e7      	bne.n	8006f08 <_puts_r+0x68>
 8006f38:	e7ce      	b.n	8006ed8 <_puts_r+0x38>
 8006f3a:	3e01      	subs	r6, #1
 8006f3c:	e7e4      	b.n	8006f08 <_puts_r+0x68>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	6022      	str	r2, [r4, #0]
 8006f44:	220a      	movs	r2, #10
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	e7ee      	b.n	8006f28 <_puts_r+0x88>
	...

08006f4c <puts>:
 8006f4c:	4b02      	ldr	r3, [pc, #8]	@ (8006f58 <puts+0xc>)
 8006f4e:	4601      	mov	r1, r0
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	f7ff bfa5 	b.w	8006ea0 <_puts_r>
 8006f56:	bf00      	nop
 8006f58:	2000001c 	.word	0x2000001c

08006f5c <__sread>:
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	460c      	mov	r4, r1
 8006f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f64:	f000 f952 	bl	800720c <_read_r>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	bfab      	itete	ge
 8006f6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f70:	181b      	addge	r3, r3, r0
 8006f72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f76:	bfac      	ite	ge
 8006f78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f7a:	81a3      	strhlt	r3, [r4, #12]
 8006f7c:	bd10      	pop	{r4, pc}

08006f7e <__swrite>:
 8006f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f82:	461f      	mov	r7, r3
 8006f84:	898b      	ldrh	r3, [r1, #12]
 8006f86:	05db      	lsls	r3, r3, #23
 8006f88:	4605      	mov	r5, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	4616      	mov	r6, r2
 8006f8e:	d505      	bpl.n	8006f9c <__swrite+0x1e>
 8006f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f94:	2302      	movs	r3, #2
 8006f96:	2200      	movs	r2, #0
 8006f98:	f000 f926 	bl	80071e8 <_lseek_r>
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	4632      	mov	r2, r6
 8006faa:	463b      	mov	r3, r7
 8006fac:	4628      	mov	r0, r5
 8006fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb2:	f000 b93d 	b.w	8007230 <_write_r>

08006fb6 <__sseek>:
 8006fb6:	b510      	push	{r4, lr}
 8006fb8:	460c      	mov	r4, r1
 8006fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbe:	f000 f913 	bl	80071e8 <_lseek_r>
 8006fc2:	1c43      	adds	r3, r0, #1
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	bf15      	itete	ne
 8006fc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006fce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fd2:	81a3      	strheq	r3, [r4, #12]
 8006fd4:	bf18      	it	ne
 8006fd6:	81a3      	strhne	r3, [r4, #12]
 8006fd8:	bd10      	pop	{r4, pc}

08006fda <__sclose>:
 8006fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fde:	f000 b89d 	b.w	800711c <_close_r>

08006fe2 <__swbuf_r>:
 8006fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe4:	460e      	mov	r6, r1
 8006fe6:	4614      	mov	r4, r2
 8006fe8:	4605      	mov	r5, r0
 8006fea:	b118      	cbz	r0, 8006ff4 <__swbuf_r+0x12>
 8006fec:	6a03      	ldr	r3, [r0, #32]
 8006fee:	b90b      	cbnz	r3, 8006ff4 <__swbuf_r+0x12>
 8006ff0:	f7ff ff20 	bl	8006e34 <__sinit>
 8006ff4:	69a3      	ldr	r3, [r4, #24]
 8006ff6:	60a3      	str	r3, [r4, #8]
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	071a      	lsls	r2, r3, #28
 8006ffc:	d501      	bpl.n	8007002 <__swbuf_r+0x20>
 8006ffe:	6923      	ldr	r3, [r4, #16]
 8007000:	b943      	cbnz	r3, 8007014 <__swbuf_r+0x32>
 8007002:	4621      	mov	r1, r4
 8007004:	4628      	mov	r0, r5
 8007006:	f000 f82b 	bl	8007060 <__swsetup_r>
 800700a:	b118      	cbz	r0, 8007014 <__swbuf_r+0x32>
 800700c:	f04f 37ff 	mov.w	r7, #4294967295
 8007010:	4638      	mov	r0, r7
 8007012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	6922      	ldr	r2, [r4, #16]
 8007018:	1a98      	subs	r0, r3, r2
 800701a:	6963      	ldr	r3, [r4, #20]
 800701c:	b2f6      	uxtb	r6, r6
 800701e:	4283      	cmp	r3, r0
 8007020:	4637      	mov	r7, r6
 8007022:	dc05      	bgt.n	8007030 <__swbuf_r+0x4e>
 8007024:	4621      	mov	r1, r4
 8007026:	4628      	mov	r0, r5
 8007028:	f000 facc 	bl	80075c4 <_fflush_r>
 800702c:	2800      	cmp	r0, #0
 800702e:	d1ed      	bne.n	800700c <__swbuf_r+0x2a>
 8007030:	68a3      	ldr	r3, [r4, #8]
 8007032:	3b01      	subs	r3, #1
 8007034:	60a3      	str	r3, [r4, #8]
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	6022      	str	r2, [r4, #0]
 800703c:	701e      	strb	r6, [r3, #0]
 800703e:	6962      	ldr	r2, [r4, #20]
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	429a      	cmp	r2, r3
 8007044:	d004      	beq.n	8007050 <__swbuf_r+0x6e>
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	07db      	lsls	r3, r3, #31
 800704a:	d5e1      	bpl.n	8007010 <__swbuf_r+0x2e>
 800704c:	2e0a      	cmp	r6, #10
 800704e:	d1df      	bne.n	8007010 <__swbuf_r+0x2e>
 8007050:	4621      	mov	r1, r4
 8007052:	4628      	mov	r0, r5
 8007054:	f000 fab6 	bl	80075c4 <_fflush_r>
 8007058:	2800      	cmp	r0, #0
 800705a:	d0d9      	beq.n	8007010 <__swbuf_r+0x2e>
 800705c:	e7d6      	b.n	800700c <__swbuf_r+0x2a>
	...

08007060 <__swsetup_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4b29      	ldr	r3, [pc, #164]	@ (8007108 <__swsetup_r+0xa8>)
 8007064:	4605      	mov	r5, r0
 8007066:	6818      	ldr	r0, [r3, #0]
 8007068:	460c      	mov	r4, r1
 800706a:	b118      	cbz	r0, 8007074 <__swsetup_r+0x14>
 800706c:	6a03      	ldr	r3, [r0, #32]
 800706e:	b90b      	cbnz	r3, 8007074 <__swsetup_r+0x14>
 8007070:	f7ff fee0 	bl	8006e34 <__sinit>
 8007074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007078:	0719      	lsls	r1, r3, #28
 800707a:	d422      	bmi.n	80070c2 <__swsetup_r+0x62>
 800707c:	06da      	lsls	r2, r3, #27
 800707e:	d407      	bmi.n	8007090 <__swsetup_r+0x30>
 8007080:	2209      	movs	r2, #9
 8007082:	602a      	str	r2, [r5, #0]
 8007084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007088:	81a3      	strh	r3, [r4, #12]
 800708a:	f04f 30ff 	mov.w	r0, #4294967295
 800708e:	e033      	b.n	80070f8 <__swsetup_r+0x98>
 8007090:	0758      	lsls	r0, r3, #29
 8007092:	d512      	bpl.n	80070ba <__swsetup_r+0x5a>
 8007094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007096:	b141      	cbz	r1, 80070aa <__swsetup_r+0x4a>
 8007098:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800709c:	4299      	cmp	r1, r3
 800709e:	d002      	beq.n	80070a6 <__swsetup_r+0x46>
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 f913 	bl	80072cc <_free_r>
 80070a6:	2300      	movs	r3, #0
 80070a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	2300      	movs	r3, #0
 80070b4:	6063      	str	r3, [r4, #4]
 80070b6:	6923      	ldr	r3, [r4, #16]
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	89a3      	ldrh	r3, [r4, #12]
 80070bc:	f043 0308 	orr.w	r3, r3, #8
 80070c0:	81a3      	strh	r3, [r4, #12]
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	b94b      	cbnz	r3, 80070da <__swsetup_r+0x7a>
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80070cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070d0:	d003      	beq.n	80070da <__swsetup_r+0x7a>
 80070d2:	4621      	mov	r1, r4
 80070d4:	4628      	mov	r0, r5
 80070d6:	f000 fac3 	bl	8007660 <__smakebuf_r>
 80070da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070de:	f013 0201 	ands.w	r2, r3, #1
 80070e2:	d00a      	beq.n	80070fa <__swsetup_r+0x9a>
 80070e4:	2200      	movs	r2, #0
 80070e6:	60a2      	str	r2, [r4, #8]
 80070e8:	6962      	ldr	r2, [r4, #20]
 80070ea:	4252      	negs	r2, r2
 80070ec:	61a2      	str	r2, [r4, #24]
 80070ee:	6922      	ldr	r2, [r4, #16]
 80070f0:	b942      	cbnz	r2, 8007104 <__swsetup_r+0xa4>
 80070f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070f6:	d1c5      	bne.n	8007084 <__swsetup_r+0x24>
 80070f8:	bd38      	pop	{r3, r4, r5, pc}
 80070fa:	0799      	lsls	r1, r3, #30
 80070fc:	bf58      	it	pl
 80070fe:	6962      	ldrpl	r2, [r4, #20]
 8007100:	60a2      	str	r2, [r4, #8]
 8007102:	e7f4      	b.n	80070ee <__swsetup_r+0x8e>
 8007104:	2000      	movs	r0, #0
 8007106:	e7f7      	b.n	80070f8 <__swsetup_r+0x98>
 8007108:	2000001c 	.word	0x2000001c

0800710c <memset>:
 800710c:	4402      	add	r2, r0
 800710e:	4603      	mov	r3, r0
 8007110:	4293      	cmp	r3, r2
 8007112:	d100      	bne.n	8007116 <memset+0xa>
 8007114:	4770      	bx	lr
 8007116:	f803 1b01 	strb.w	r1, [r3], #1
 800711a:	e7f9      	b.n	8007110 <memset+0x4>

0800711c <_close_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d06      	ldr	r5, [pc, #24]	@ (8007138 <_close_r+0x1c>)
 8007120:	2300      	movs	r3, #0
 8007122:	4604      	mov	r4, r0
 8007124:	4608      	mov	r0, r1
 8007126:	602b      	str	r3, [r5, #0]
 8007128:	f7fa f86d 	bl	8001206 <_close>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_close_r+0x1a>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_close_r+0x1a>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	20004c88 	.word	0x20004c88

0800713c <_reclaim_reent>:
 800713c:	4b29      	ldr	r3, [pc, #164]	@ (80071e4 <_reclaim_reent+0xa8>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4283      	cmp	r3, r0
 8007142:	b570      	push	{r4, r5, r6, lr}
 8007144:	4604      	mov	r4, r0
 8007146:	d04b      	beq.n	80071e0 <_reclaim_reent+0xa4>
 8007148:	69c3      	ldr	r3, [r0, #28]
 800714a:	b1ab      	cbz	r3, 8007178 <_reclaim_reent+0x3c>
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	b16b      	cbz	r3, 800716c <_reclaim_reent+0x30>
 8007150:	2500      	movs	r5, #0
 8007152:	69e3      	ldr	r3, [r4, #28]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	5959      	ldr	r1, [r3, r5]
 8007158:	2900      	cmp	r1, #0
 800715a:	d13b      	bne.n	80071d4 <_reclaim_reent+0x98>
 800715c:	3504      	adds	r5, #4
 800715e:	2d80      	cmp	r5, #128	@ 0x80
 8007160:	d1f7      	bne.n	8007152 <_reclaim_reent+0x16>
 8007162:	69e3      	ldr	r3, [r4, #28]
 8007164:	4620      	mov	r0, r4
 8007166:	68d9      	ldr	r1, [r3, #12]
 8007168:	f000 f8b0 	bl	80072cc <_free_r>
 800716c:	69e3      	ldr	r3, [r4, #28]
 800716e:	6819      	ldr	r1, [r3, #0]
 8007170:	b111      	cbz	r1, 8007178 <_reclaim_reent+0x3c>
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f8aa 	bl	80072cc <_free_r>
 8007178:	6961      	ldr	r1, [r4, #20]
 800717a:	b111      	cbz	r1, 8007182 <_reclaim_reent+0x46>
 800717c:	4620      	mov	r0, r4
 800717e:	f000 f8a5 	bl	80072cc <_free_r>
 8007182:	69e1      	ldr	r1, [r4, #28]
 8007184:	b111      	cbz	r1, 800718c <_reclaim_reent+0x50>
 8007186:	4620      	mov	r0, r4
 8007188:	f000 f8a0 	bl	80072cc <_free_r>
 800718c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800718e:	b111      	cbz	r1, 8007196 <_reclaim_reent+0x5a>
 8007190:	4620      	mov	r0, r4
 8007192:	f000 f89b 	bl	80072cc <_free_r>
 8007196:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007198:	b111      	cbz	r1, 80071a0 <_reclaim_reent+0x64>
 800719a:	4620      	mov	r0, r4
 800719c:	f000 f896 	bl	80072cc <_free_r>
 80071a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80071a2:	b111      	cbz	r1, 80071aa <_reclaim_reent+0x6e>
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 f891 	bl	80072cc <_free_r>
 80071aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80071ac:	b111      	cbz	r1, 80071b4 <_reclaim_reent+0x78>
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 f88c 	bl	80072cc <_free_r>
 80071b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80071b6:	b111      	cbz	r1, 80071be <_reclaim_reent+0x82>
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 f887 	bl	80072cc <_free_r>
 80071be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80071c0:	b111      	cbz	r1, 80071c8 <_reclaim_reent+0x8c>
 80071c2:	4620      	mov	r0, r4
 80071c4:	f000 f882 	bl	80072cc <_free_r>
 80071c8:	6a23      	ldr	r3, [r4, #32]
 80071ca:	b14b      	cbz	r3, 80071e0 <_reclaim_reent+0xa4>
 80071cc:	4620      	mov	r0, r4
 80071ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80071d2:	4718      	bx	r3
 80071d4:	680e      	ldr	r6, [r1, #0]
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 f878 	bl	80072cc <_free_r>
 80071dc:	4631      	mov	r1, r6
 80071de:	e7bb      	b.n	8007158 <_reclaim_reent+0x1c>
 80071e0:	bd70      	pop	{r4, r5, r6, pc}
 80071e2:	bf00      	nop
 80071e4:	2000001c 	.word	0x2000001c

080071e8 <_lseek_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4d07      	ldr	r5, [pc, #28]	@ (8007208 <_lseek_r+0x20>)
 80071ec:	4604      	mov	r4, r0
 80071ee:	4608      	mov	r0, r1
 80071f0:	4611      	mov	r1, r2
 80071f2:	2200      	movs	r2, #0
 80071f4:	602a      	str	r2, [r5, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	f7fa f82c 	bl	8001254 <_lseek>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	d102      	bne.n	8007206 <_lseek_r+0x1e>
 8007200:	682b      	ldr	r3, [r5, #0]
 8007202:	b103      	cbz	r3, 8007206 <_lseek_r+0x1e>
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	bd38      	pop	{r3, r4, r5, pc}
 8007208:	20004c88 	.word	0x20004c88

0800720c <_read_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4d07      	ldr	r5, [pc, #28]	@ (800722c <_read_r+0x20>)
 8007210:	4604      	mov	r4, r0
 8007212:	4608      	mov	r0, r1
 8007214:	4611      	mov	r1, r2
 8007216:	2200      	movs	r2, #0
 8007218:	602a      	str	r2, [r5, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	f7f9 ffba 	bl	8001194 <_read>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d102      	bne.n	800722a <_read_r+0x1e>
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	b103      	cbz	r3, 800722a <_read_r+0x1e>
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	bd38      	pop	{r3, r4, r5, pc}
 800722c:	20004c88 	.word	0x20004c88

08007230 <_write_r>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	4d07      	ldr	r5, [pc, #28]	@ (8007250 <_write_r+0x20>)
 8007234:	4604      	mov	r4, r0
 8007236:	4608      	mov	r0, r1
 8007238:	4611      	mov	r1, r2
 800723a:	2200      	movs	r2, #0
 800723c:	602a      	str	r2, [r5, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	f7f9 ffc5 	bl	80011ce <_write>
 8007244:	1c43      	adds	r3, r0, #1
 8007246:	d102      	bne.n	800724e <_write_r+0x1e>
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	b103      	cbz	r3, 800724e <_write_r+0x1e>
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	bd38      	pop	{r3, r4, r5, pc}
 8007250:	20004c88 	.word	0x20004c88

08007254 <__errno>:
 8007254:	4b01      	ldr	r3, [pc, #4]	@ (800725c <__errno+0x8>)
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	2000001c 	.word	0x2000001c

08007260 <__libc_init_array>:
 8007260:	b570      	push	{r4, r5, r6, lr}
 8007262:	4d0d      	ldr	r5, [pc, #52]	@ (8007298 <__libc_init_array+0x38>)
 8007264:	4c0d      	ldr	r4, [pc, #52]	@ (800729c <__libc_init_array+0x3c>)
 8007266:	1b64      	subs	r4, r4, r5
 8007268:	10a4      	asrs	r4, r4, #2
 800726a:	2600      	movs	r6, #0
 800726c:	42a6      	cmp	r6, r4
 800726e:	d109      	bne.n	8007284 <__libc_init_array+0x24>
 8007270:	4d0b      	ldr	r5, [pc, #44]	@ (80072a0 <__libc_init_array+0x40>)
 8007272:	4c0c      	ldr	r4, [pc, #48]	@ (80072a4 <__libc_init_array+0x44>)
 8007274:	f000 fa62 	bl	800773c <_init>
 8007278:	1b64      	subs	r4, r4, r5
 800727a:	10a4      	asrs	r4, r4, #2
 800727c:	2600      	movs	r6, #0
 800727e:	42a6      	cmp	r6, r4
 8007280:	d105      	bne.n	800728e <__libc_init_array+0x2e>
 8007282:	bd70      	pop	{r4, r5, r6, pc}
 8007284:	f855 3b04 	ldr.w	r3, [r5], #4
 8007288:	4798      	blx	r3
 800728a:	3601      	adds	r6, #1
 800728c:	e7ee      	b.n	800726c <__libc_init_array+0xc>
 800728e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007292:	4798      	blx	r3
 8007294:	3601      	adds	r6, #1
 8007296:	e7f2      	b.n	800727e <__libc_init_array+0x1e>
 8007298:	0800789c 	.word	0x0800789c
 800729c:	0800789c 	.word	0x0800789c
 80072a0:	0800789c 	.word	0x0800789c
 80072a4:	080078a0 	.word	0x080078a0

080072a8 <__retarget_lock_init_recursive>:
 80072a8:	4770      	bx	lr

080072aa <__retarget_lock_acquire_recursive>:
 80072aa:	4770      	bx	lr

080072ac <__retarget_lock_release_recursive>:
 80072ac:	4770      	bx	lr

080072ae <memcpy>:
 80072ae:	440a      	add	r2, r1
 80072b0:	4291      	cmp	r1, r2
 80072b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80072b6:	d100      	bne.n	80072ba <memcpy+0xc>
 80072b8:	4770      	bx	lr
 80072ba:	b510      	push	{r4, lr}
 80072bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072c4:	4291      	cmp	r1, r2
 80072c6:	d1f9      	bne.n	80072bc <memcpy+0xe>
 80072c8:	bd10      	pop	{r4, pc}
	...

080072cc <_free_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4605      	mov	r5, r0
 80072d0:	2900      	cmp	r1, #0
 80072d2:	d041      	beq.n	8007358 <_free_r+0x8c>
 80072d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d8:	1f0c      	subs	r4, r1, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bfb8      	it	lt
 80072de:	18e4      	addlt	r4, r4, r3
 80072e0:	f000 f8e0 	bl	80074a4 <__malloc_lock>
 80072e4:	4a1d      	ldr	r2, [pc, #116]	@ (800735c <_free_r+0x90>)
 80072e6:	6813      	ldr	r3, [r2, #0]
 80072e8:	b933      	cbnz	r3, 80072f8 <_free_r+0x2c>
 80072ea:	6063      	str	r3, [r4, #4]
 80072ec:	6014      	str	r4, [r2, #0]
 80072ee:	4628      	mov	r0, r5
 80072f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072f4:	f000 b8dc 	b.w	80074b0 <__malloc_unlock>
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	d908      	bls.n	800730e <_free_r+0x42>
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	1821      	adds	r1, r4, r0
 8007300:	428b      	cmp	r3, r1
 8007302:	bf01      	itttt	eq
 8007304:	6819      	ldreq	r1, [r3, #0]
 8007306:	685b      	ldreq	r3, [r3, #4]
 8007308:	1809      	addeq	r1, r1, r0
 800730a:	6021      	streq	r1, [r4, #0]
 800730c:	e7ed      	b.n	80072ea <_free_r+0x1e>
 800730e:	461a      	mov	r2, r3
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	b10b      	cbz	r3, 8007318 <_free_r+0x4c>
 8007314:	42a3      	cmp	r3, r4
 8007316:	d9fa      	bls.n	800730e <_free_r+0x42>
 8007318:	6811      	ldr	r1, [r2, #0]
 800731a:	1850      	adds	r0, r2, r1
 800731c:	42a0      	cmp	r0, r4
 800731e:	d10b      	bne.n	8007338 <_free_r+0x6c>
 8007320:	6820      	ldr	r0, [r4, #0]
 8007322:	4401      	add	r1, r0
 8007324:	1850      	adds	r0, r2, r1
 8007326:	4283      	cmp	r3, r0
 8007328:	6011      	str	r1, [r2, #0]
 800732a:	d1e0      	bne.n	80072ee <_free_r+0x22>
 800732c:	6818      	ldr	r0, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	6053      	str	r3, [r2, #4]
 8007332:	4408      	add	r0, r1
 8007334:	6010      	str	r0, [r2, #0]
 8007336:	e7da      	b.n	80072ee <_free_r+0x22>
 8007338:	d902      	bls.n	8007340 <_free_r+0x74>
 800733a:	230c      	movs	r3, #12
 800733c:	602b      	str	r3, [r5, #0]
 800733e:	e7d6      	b.n	80072ee <_free_r+0x22>
 8007340:	6820      	ldr	r0, [r4, #0]
 8007342:	1821      	adds	r1, r4, r0
 8007344:	428b      	cmp	r3, r1
 8007346:	bf04      	itt	eq
 8007348:	6819      	ldreq	r1, [r3, #0]
 800734a:	685b      	ldreq	r3, [r3, #4]
 800734c:	6063      	str	r3, [r4, #4]
 800734e:	bf04      	itt	eq
 8007350:	1809      	addeq	r1, r1, r0
 8007352:	6021      	streq	r1, [r4, #0]
 8007354:	6054      	str	r4, [r2, #4]
 8007356:	e7ca      	b.n	80072ee <_free_r+0x22>
 8007358:	bd38      	pop	{r3, r4, r5, pc}
 800735a:	bf00      	nop
 800735c:	20004c94 	.word	0x20004c94

08007360 <sbrk_aligned>:
 8007360:	b570      	push	{r4, r5, r6, lr}
 8007362:	4e0f      	ldr	r6, [pc, #60]	@ (80073a0 <sbrk_aligned+0x40>)
 8007364:	460c      	mov	r4, r1
 8007366:	6831      	ldr	r1, [r6, #0]
 8007368:	4605      	mov	r5, r0
 800736a:	b911      	cbnz	r1, 8007372 <sbrk_aligned+0x12>
 800736c:	f000 f9d6 	bl	800771c <_sbrk_r>
 8007370:	6030      	str	r0, [r6, #0]
 8007372:	4621      	mov	r1, r4
 8007374:	4628      	mov	r0, r5
 8007376:	f000 f9d1 	bl	800771c <_sbrk_r>
 800737a:	1c43      	adds	r3, r0, #1
 800737c:	d103      	bne.n	8007386 <sbrk_aligned+0x26>
 800737e:	f04f 34ff 	mov.w	r4, #4294967295
 8007382:	4620      	mov	r0, r4
 8007384:	bd70      	pop	{r4, r5, r6, pc}
 8007386:	1cc4      	adds	r4, r0, #3
 8007388:	f024 0403 	bic.w	r4, r4, #3
 800738c:	42a0      	cmp	r0, r4
 800738e:	d0f8      	beq.n	8007382 <sbrk_aligned+0x22>
 8007390:	1a21      	subs	r1, r4, r0
 8007392:	4628      	mov	r0, r5
 8007394:	f000 f9c2 	bl	800771c <_sbrk_r>
 8007398:	3001      	adds	r0, #1
 800739a:	d1f2      	bne.n	8007382 <sbrk_aligned+0x22>
 800739c:	e7ef      	b.n	800737e <sbrk_aligned+0x1e>
 800739e:	bf00      	nop
 80073a0:	20004c90 	.word	0x20004c90

080073a4 <_malloc_r>:
 80073a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a8:	1ccd      	adds	r5, r1, #3
 80073aa:	f025 0503 	bic.w	r5, r5, #3
 80073ae:	3508      	adds	r5, #8
 80073b0:	2d0c      	cmp	r5, #12
 80073b2:	bf38      	it	cc
 80073b4:	250c      	movcc	r5, #12
 80073b6:	2d00      	cmp	r5, #0
 80073b8:	4606      	mov	r6, r0
 80073ba:	db01      	blt.n	80073c0 <_malloc_r+0x1c>
 80073bc:	42a9      	cmp	r1, r5
 80073be:	d904      	bls.n	80073ca <_malloc_r+0x26>
 80073c0:	230c      	movs	r3, #12
 80073c2:	6033      	str	r3, [r6, #0]
 80073c4:	2000      	movs	r0, #0
 80073c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074a0 <_malloc_r+0xfc>
 80073ce:	f000 f869 	bl	80074a4 <__malloc_lock>
 80073d2:	f8d8 3000 	ldr.w	r3, [r8]
 80073d6:	461c      	mov	r4, r3
 80073d8:	bb44      	cbnz	r4, 800742c <_malloc_r+0x88>
 80073da:	4629      	mov	r1, r5
 80073dc:	4630      	mov	r0, r6
 80073de:	f7ff ffbf 	bl	8007360 <sbrk_aligned>
 80073e2:	1c43      	adds	r3, r0, #1
 80073e4:	4604      	mov	r4, r0
 80073e6:	d158      	bne.n	800749a <_malloc_r+0xf6>
 80073e8:	f8d8 4000 	ldr.w	r4, [r8]
 80073ec:	4627      	mov	r7, r4
 80073ee:	2f00      	cmp	r7, #0
 80073f0:	d143      	bne.n	800747a <_malloc_r+0xd6>
 80073f2:	2c00      	cmp	r4, #0
 80073f4:	d04b      	beq.n	800748e <_malloc_r+0xea>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	4639      	mov	r1, r7
 80073fa:	4630      	mov	r0, r6
 80073fc:	eb04 0903 	add.w	r9, r4, r3
 8007400:	f000 f98c 	bl	800771c <_sbrk_r>
 8007404:	4581      	cmp	r9, r0
 8007406:	d142      	bne.n	800748e <_malloc_r+0xea>
 8007408:	6821      	ldr	r1, [r4, #0]
 800740a:	1a6d      	subs	r5, r5, r1
 800740c:	4629      	mov	r1, r5
 800740e:	4630      	mov	r0, r6
 8007410:	f7ff ffa6 	bl	8007360 <sbrk_aligned>
 8007414:	3001      	adds	r0, #1
 8007416:	d03a      	beq.n	800748e <_malloc_r+0xea>
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	442b      	add	r3, r5
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	f8d8 3000 	ldr.w	r3, [r8]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	bb62      	cbnz	r2, 8007480 <_malloc_r+0xdc>
 8007426:	f8c8 7000 	str.w	r7, [r8]
 800742a:	e00f      	b.n	800744c <_malloc_r+0xa8>
 800742c:	6822      	ldr	r2, [r4, #0]
 800742e:	1b52      	subs	r2, r2, r5
 8007430:	d420      	bmi.n	8007474 <_malloc_r+0xd0>
 8007432:	2a0b      	cmp	r2, #11
 8007434:	d917      	bls.n	8007466 <_malloc_r+0xc2>
 8007436:	1961      	adds	r1, r4, r5
 8007438:	42a3      	cmp	r3, r4
 800743a:	6025      	str	r5, [r4, #0]
 800743c:	bf18      	it	ne
 800743e:	6059      	strne	r1, [r3, #4]
 8007440:	6863      	ldr	r3, [r4, #4]
 8007442:	bf08      	it	eq
 8007444:	f8c8 1000 	streq.w	r1, [r8]
 8007448:	5162      	str	r2, [r4, r5]
 800744a:	604b      	str	r3, [r1, #4]
 800744c:	4630      	mov	r0, r6
 800744e:	f000 f82f 	bl	80074b0 <__malloc_unlock>
 8007452:	f104 000b 	add.w	r0, r4, #11
 8007456:	1d23      	adds	r3, r4, #4
 8007458:	f020 0007 	bic.w	r0, r0, #7
 800745c:	1ac2      	subs	r2, r0, r3
 800745e:	bf1c      	itt	ne
 8007460:	1a1b      	subne	r3, r3, r0
 8007462:	50a3      	strne	r3, [r4, r2]
 8007464:	e7af      	b.n	80073c6 <_malloc_r+0x22>
 8007466:	6862      	ldr	r2, [r4, #4]
 8007468:	42a3      	cmp	r3, r4
 800746a:	bf0c      	ite	eq
 800746c:	f8c8 2000 	streq.w	r2, [r8]
 8007470:	605a      	strne	r2, [r3, #4]
 8007472:	e7eb      	b.n	800744c <_malloc_r+0xa8>
 8007474:	4623      	mov	r3, r4
 8007476:	6864      	ldr	r4, [r4, #4]
 8007478:	e7ae      	b.n	80073d8 <_malloc_r+0x34>
 800747a:	463c      	mov	r4, r7
 800747c:	687f      	ldr	r7, [r7, #4]
 800747e:	e7b6      	b.n	80073ee <_malloc_r+0x4a>
 8007480:	461a      	mov	r2, r3
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	42a3      	cmp	r3, r4
 8007486:	d1fb      	bne.n	8007480 <_malloc_r+0xdc>
 8007488:	2300      	movs	r3, #0
 800748a:	6053      	str	r3, [r2, #4]
 800748c:	e7de      	b.n	800744c <_malloc_r+0xa8>
 800748e:	230c      	movs	r3, #12
 8007490:	6033      	str	r3, [r6, #0]
 8007492:	4630      	mov	r0, r6
 8007494:	f000 f80c 	bl	80074b0 <__malloc_unlock>
 8007498:	e794      	b.n	80073c4 <_malloc_r+0x20>
 800749a:	6005      	str	r5, [r0, #0]
 800749c:	e7d6      	b.n	800744c <_malloc_r+0xa8>
 800749e:	bf00      	nop
 80074a0:	20004c94 	.word	0x20004c94

080074a4 <__malloc_lock>:
 80074a4:	4801      	ldr	r0, [pc, #4]	@ (80074ac <__malloc_lock+0x8>)
 80074a6:	f7ff bf00 	b.w	80072aa <__retarget_lock_acquire_recursive>
 80074aa:	bf00      	nop
 80074ac:	20004c8c 	.word	0x20004c8c

080074b0 <__malloc_unlock>:
 80074b0:	4801      	ldr	r0, [pc, #4]	@ (80074b8 <__malloc_unlock+0x8>)
 80074b2:	f7ff befb 	b.w	80072ac <__retarget_lock_release_recursive>
 80074b6:	bf00      	nop
 80074b8:	20004c8c 	.word	0x20004c8c

080074bc <__sflush_r>:
 80074bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c4:	0716      	lsls	r6, r2, #28
 80074c6:	4605      	mov	r5, r0
 80074c8:	460c      	mov	r4, r1
 80074ca:	d454      	bmi.n	8007576 <__sflush_r+0xba>
 80074cc:	684b      	ldr	r3, [r1, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	dc02      	bgt.n	80074d8 <__sflush_r+0x1c>
 80074d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dd48      	ble.n	800756a <__sflush_r+0xae>
 80074d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074da:	2e00      	cmp	r6, #0
 80074dc:	d045      	beq.n	800756a <__sflush_r+0xae>
 80074de:	2300      	movs	r3, #0
 80074e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074e4:	682f      	ldr	r7, [r5, #0]
 80074e6:	6a21      	ldr	r1, [r4, #32]
 80074e8:	602b      	str	r3, [r5, #0]
 80074ea:	d030      	beq.n	800754e <__sflush_r+0x92>
 80074ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074ee:	89a3      	ldrh	r3, [r4, #12]
 80074f0:	0759      	lsls	r1, r3, #29
 80074f2:	d505      	bpl.n	8007500 <__sflush_r+0x44>
 80074f4:	6863      	ldr	r3, [r4, #4]
 80074f6:	1ad2      	subs	r2, r2, r3
 80074f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074fa:	b10b      	cbz	r3, 8007500 <__sflush_r+0x44>
 80074fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074fe:	1ad2      	subs	r2, r2, r3
 8007500:	2300      	movs	r3, #0
 8007502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007504:	6a21      	ldr	r1, [r4, #32]
 8007506:	4628      	mov	r0, r5
 8007508:	47b0      	blx	r6
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	d106      	bne.n	800751e <__sflush_r+0x62>
 8007510:	6829      	ldr	r1, [r5, #0]
 8007512:	291d      	cmp	r1, #29
 8007514:	d82b      	bhi.n	800756e <__sflush_r+0xb2>
 8007516:	4a2a      	ldr	r2, [pc, #168]	@ (80075c0 <__sflush_r+0x104>)
 8007518:	410a      	asrs	r2, r1
 800751a:	07d6      	lsls	r6, r2, #31
 800751c:	d427      	bmi.n	800756e <__sflush_r+0xb2>
 800751e:	2200      	movs	r2, #0
 8007520:	6062      	str	r2, [r4, #4]
 8007522:	04d9      	lsls	r1, r3, #19
 8007524:	6922      	ldr	r2, [r4, #16]
 8007526:	6022      	str	r2, [r4, #0]
 8007528:	d504      	bpl.n	8007534 <__sflush_r+0x78>
 800752a:	1c42      	adds	r2, r0, #1
 800752c:	d101      	bne.n	8007532 <__sflush_r+0x76>
 800752e:	682b      	ldr	r3, [r5, #0]
 8007530:	b903      	cbnz	r3, 8007534 <__sflush_r+0x78>
 8007532:	6560      	str	r0, [r4, #84]	@ 0x54
 8007534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007536:	602f      	str	r7, [r5, #0]
 8007538:	b1b9      	cbz	r1, 800756a <__sflush_r+0xae>
 800753a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800753e:	4299      	cmp	r1, r3
 8007540:	d002      	beq.n	8007548 <__sflush_r+0x8c>
 8007542:	4628      	mov	r0, r5
 8007544:	f7ff fec2 	bl	80072cc <_free_r>
 8007548:	2300      	movs	r3, #0
 800754a:	6363      	str	r3, [r4, #52]	@ 0x34
 800754c:	e00d      	b.n	800756a <__sflush_r+0xae>
 800754e:	2301      	movs	r3, #1
 8007550:	4628      	mov	r0, r5
 8007552:	47b0      	blx	r6
 8007554:	4602      	mov	r2, r0
 8007556:	1c50      	adds	r0, r2, #1
 8007558:	d1c9      	bne.n	80074ee <__sflush_r+0x32>
 800755a:	682b      	ldr	r3, [r5, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0c6      	beq.n	80074ee <__sflush_r+0x32>
 8007560:	2b1d      	cmp	r3, #29
 8007562:	d001      	beq.n	8007568 <__sflush_r+0xac>
 8007564:	2b16      	cmp	r3, #22
 8007566:	d11e      	bne.n	80075a6 <__sflush_r+0xea>
 8007568:	602f      	str	r7, [r5, #0]
 800756a:	2000      	movs	r0, #0
 800756c:	e022      	b.n	80075b4 <__sflush_r+0xf8>
 800756e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007572:	b21b      	sxth	r3, r3
 8007574:	e01b      	b.n	80075ae <__sflush_r+0xf2>
 8007576:	690f      	ldr	r7, [r1, #16]
 8007578:	2f00      	cmp	r7, #0
 800757a:	d0f6      	beq.n	800756a <__sflush_r+0xae>
 800757c:	0793      	lsls	r3, r2, #30
 800757e:	680e      	ldr	r6, [r1, #0]
 8007580:	bf08      	it	eq
 8007582:	694b      	ldreq	r3, [r1, #20]
 8007584:	600f      	str	r7, [r1, #0]
 8007586:	bf18      	it	ne
 8007588:	2300      	movne	r3, #0
 800758a:	eba6 0807 	sub.w	r8, r6, r7
 800758e:	608b      	str	r3, [r1, #8]
 8007590:	f1b8 0f00 	cmp.w	r8, #0
 8007594:	dde9      	ble.n	800756a <__sflush_r+0xae>
 8007596:	6a21      	ldr	r1, [r4, #32]
 8007598:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800759a:	4643      	mov	r3, r8
 800759c:	463a      	mov	r2, r7
 800759e:	4628      	mov	r0, r5
 80075a0:	47b0      	blx	r6
 80075a2:	2800      	cmp	r0, #0
 80075a4:	dc08      	bgt.n	80075b8 <__sflush_r+0xfc>
 80075a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075ae:	81a3      	strh	r3, [r4, #12]
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295
 80075b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b8:	4407      	add	r7, r0
 80075ba:	eba8 0800 	sub.w	r8, r8, r0
 80075be:	e7e7      	b.n	8007590 <__sflush_r+0xd4>
 80075c0:	dfbffffe 	.word	0xdfbffffe

080075c4 <_fflush_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	690b      	ldr	r3, [r1, #16]
 80075c8:	4605      	mov	r5, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	b913      	cbnz	r3, 80075d4 <_fflush_r+0x10>
 80075ce:	2500      	movs	r5, #0
 80075d0:	4628      	mov	r0, r5
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	b118      	cbz	r0, 80075de <_fflush_r+0x1a>
 80075d6:	6a03      	ldr	r3, [r0, #32]
 80075d8:	b90b      	cbnz	r3, 80075de <_fflush_r+0x1a>
 80075da:	f7ff fc2b 	bl	8006e34 <__sinit>
 80075de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0f3      	beq.n	80075ce <_fflush_r+0xa>
 80075e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075e8:	07d0      	lsls	r0, r2, #31
 80075ea:	d404      	bmi.n	80075f6 <_fflush_r+0x32>
 80075ec:	0599      	lsls	r1, r3, #22
 80075ee:	d402      	bmi.n	80075f6 <_fflush_r+0x32>
 80075f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075f2:	f7ff fe5a 	bl	80072aa <__retarget_lock_acquire_recursive>
 80075f6:	4628      	mov	r0, r5
 80075f8:	4621      	mov	r1, r4
 80075fa:	f7ff ff5f 	bl	80074bc <__sflush_r>
 80075fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007600:	07da      	lsls	r2, r3, #31
 8007602:	4605      	mov	r5, r0
 8007604:	d4e4      	bmi.n	80075d0 <_fflush_r+0xc>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	059b      	lsls	r3, r3, #22
 800760a:	d4e1      	bmi.n	80075d0 <_fflush_r+0xc>
 800760c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800760e:	f7ff fe4d 	bl	80072ac <__retarget_lock_release_recursive>
 8007612:	e7dd      	b.n	80075d0 <_fflush_r+0xc>

08007614 <__swhatbuf_r>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	460c      	mov	r4, r1
 8007618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761c:	2900      	cmp	r1, #0
 800761e:	b096      	sub	sp, #88	@ 0x58
 8007620:	4615      	mov	r5, r2
 8007622:	461e      	mov	r6, r3
 8007624:	da0d      	bge.n	8007642 <__swhatbuf_r+0x2e>
 8007626:	89a3      	ldrh	r3, [r4, #12]
 8007628:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800762c:	f04f 0100 	mov.w	r1, #0
 8007630:	bf14      	ite	ne
 8007632:	2340      	movne	r3, #64	@ 0x40
 8007634:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007638:	2000      	movs	r0, #0
 800763a:	6031      	str	r1, [r6, #0]
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	b016      	add	sp, #88	@ 0x58
 8007640:	bd70      	pop	{r4, r5, r6, pc}
 8007642:	466a      	mov	r2, sp
 8007644:	f000 f848 	bl	80076d8 <_fstat_r>
 8007648:	2800      	cmp	r0, #0
 800764a:	dbec      	blt.n	8007626 <__swhatbuf_r+0x12>
 800764c:	9901      	ldr	r1, [sp, #4]
 800764e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007652:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007656:	4259      	negs	r1, r3
 8007658:	4159      	adcs	r1, r3
 800765a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800765e:	e7eb      	b.n	8007638 <__swhatbuf_r+0x24>

08007660 <__smakebuf_r>:
 8007660:	898b      	ldrh	r3, [r1, #12]
 8007662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007664:	079d      	lsls	r5, r3, #30
 8007666:	4606      	mov	r6, r0
 8007668:	460c      	mov	r4, r1
 800766a:	d507      	bpl.n	800767c <__smakebuf_r+0x1c>
 800766c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	2301      	movs	r3, #1
 8007676:	6163      	str	r3, [r4, #20]
 8007678:	b003      	add	sp, #12
 800767a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800767c:	ab01      	add	r3, sp, #4
 800767e:	466a      	mov	r2, sp
 8007680:	f7ff ffc8 	bl	8007614 <__swhatbuf_r>
 8007684:	9f00      	ldr	r7, [sp, #0]
 8007686:	4605      	mov	r5, r0
 8007688:	4639      	mov	r1, r7
 800768a:	4630      	mov	r0, r6
 800768c:	f7ff fe8a 	bl	80073a4 <_malloc_r>
 8007690:	b948      	cbnz	r0, 80076a6 <__smakebuf_r+0x46>
 8007692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007696:	059a      	lsls	r2, r3, #22
 8007698:	d4ee      	bmi.n	8007678 <__smakebuf_r+0x18>
 800769a:	f023 0303 	bic.w	r3, r3, #3
 800769e:	f043 0302 	orr.w	r3, r3, #2
 80076a2:	81a3      	strh	r3, [r4, #12]
 80076a4:	e7e2      	b.n	800766c <__smakebuf_r+0xc>
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	6020      	str	r0, [r4, #0]
 80076aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ae:	81a3      	strh	r3, [r4, #12]
 80076b0:	9b01      	ldr	r3, [sp, #4]
 80076b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076b6:	b15b      	cbz	r3, 80076d0 <__smakebuf_r+0x70>
 80076b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076bc:	4630      	mov	r0, r6
 80076be:	f000 f81d 	bl	80076fc <_isatty_r>
 80076c2:	b128      	cbz	r0, 80076d0 <__smakebuf_r+0x70>
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	f023 0303 	bic.w	r3, r3, #3
 80076ca:	f043 0301 	orr.w	r3, r3, #1
 80076ce:	81a3      	strh	r3, [r4, #12]
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	431d      	orrs	r5, r3
 80076d4:	81a5      	strh	r5, [r4, #12]
 80076d6:	e7cf      	b.n	8007678 <__smakebuf_r+0x18>

080076d8 <_fstat_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d07      	ldr	r5, [pc, #28]	@ (80076f8 <_fstat_r+0x20>)
 80076dc:	2300      	movs	r3, #0
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	4611      	mov	r1, r2
 80076e4:	602b      	str	r3, [r5, #0]
 80076e6:	f7f9 fd9a 	bl	800121e <_fstat>
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	d102      	bne.n	80076f4 <_fstat_r+0x1c>
 80076ee:	682b      	ldr	r3, [r5, #0]
 80076f0:	b103      	cbz	r3, 80076f4 <_fstat_r+0x1c>
 80076f2:	6023      	str	r3, [r4, #0]
 80076f4:	bd38      	pop	{r3, r4, r5, pc}
 80076f6:	bf00      	nop
 80076f8:	20004c88 	.word	0x20004c88

080076fc <_isatty_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d06      	ldr	r5, [pc, #24]	@ (8007718 <_isatty_r+0x1c>)
 8007700:	2300      	movs	r3, #0
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	602b      	str	r3, [r5, #0]
 8007708:	f7f9 fd99 	bl	800123e <_isatty>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d102      	bne.n	8007716 <_isatty_r+0x1a>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	b103      	cbz	r3, 8007716 <_isatty_r+0x1a>
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	20004c88 	.word	0x20004c88

0800771c <_sbrk_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d06      	ldr	r5, [pc, #24]	@ (8007738 <_sbrk_r+0x1c>)
 8007720:	2300      	movs	r3, #0
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	602b      	str	r3, [r5, #0]
 8007728:	f7f9 fda2 	bl	8001270 <_sbrk>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_sbrk_r+0x1a>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	b103      	cbz	r3, 8007736 <_sbrk_r+0x1a>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	20004c88 	.word	0x20004c88

0800773c <_init>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	bf00      	nop
 8007740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007742:	bc08      	pop	{r3}
 8007744:	469e      	mov	lr, r3
 8007746:	4770      	bx	lr

08007748 <_fini>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	bf00      	nop
 800774c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774e:	bc08      	pop	{r3}
 8007750:	469e      	mov	lr, r3
 8007752:	4770      	bx	lr
