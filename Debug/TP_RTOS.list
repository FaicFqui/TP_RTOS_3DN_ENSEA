
TP_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c98  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08008e68  08008e68  00009e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009120  08009120  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009120  08009120  0000a120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009128  08009128  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009128  08009128  0000a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800912c  0800912c  0000a12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009130  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f88  20000074  080091a4  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ffc  080091a4  0000bffc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c5e3  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f4c  00000000  00000000  00027687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0002b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000113c  00000000  00000000  0002cc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000053df  00000000  00000000  0002dd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9b5  00000000  00000000  00033133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe0a6  00000000  00000000  0004fae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014db8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065e0  00000000  00000000  0014dbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001541b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008e50 	.word	0x08008e50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08008e50 	.word	0x08008e50

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b090      	sub	sp, #64	@ 0x40
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005b6:	4bad      	ldr	r3, [pc, #692]	@ (800086c <MX_GPIO_Init+0x2cc>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4aac      	ldr	r2, [pc, #688]	@ (800086c <MX_GPIO_Init+0x2cc>)
 80005bc:	f043 0310 	orr.w	r3, r3, #16
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4baa      	ldr	r3, [pc, #680]	@ (800086c <MX_GPIO_Init+0x2cc>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0310 	and.w	r3, r3, #16
 80005ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80005cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005ce:	4ba7      	ldr	r3, [pc, #668]	@ (800086c <MX_GPIO_Init+0x2cc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4aa6      	ldr	r2, [pc, #664]	@ (800086c <MX_GPIO_Init+0x2cc>)
 80005d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4ba4      	ldr	r3, [pc, #656]	@ (800086c <MX_GPIO_Init+0x2cc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80005e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	4ba1      	ldr	r3, [pc, #644]	@ (800086c <MX_GPIO_Init+0x2cc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4aa0      	ldr	r2, [pc, #640]	@ (800086c <MX_GPIO_Init+0x2cc>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b9e      	ldr	r3, [pc, #632]	@ (800086c <MX_GPIO_Init+0x2cc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
 80005fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fe:	4b9b      	ldr	r3, [pc, #620]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a9a      	ldr	r2, [pc, #616]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000604:	f043 0308 	orr.w	r3, r3, #8
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b98      	ldr	r3, [pc, #608]	@ (800086c <MX_GPIO_Init+0x2cc>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0308 	and.w	r3, r3, #8
 8000612:	61fb      	str	r3, [r7, #28]
 8000614:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b95      	ldr	r3, [pc, #596]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a94      	ldr	r2, [pc, #592]	@ (800086c <MX_GPIO_Init+0x2cc>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b92      	ldr	r3, [pc, #584]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	61bb      	str	r3, [r7, #24]
 800062c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b8f      	ldr	r3, [pc, #572]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a8e      	ldr	r2, [pc, #568]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b8c      	ldr	r3, [pc, #560]	@ (800086c <MX_GPIO_Init+0x2cc>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000646:	4b89      	ldr	r3, [pc, #548]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a88      	ldr	r2, [pc, #544]	@ (800086c <MX_GPIO_Init+0x2cc>)
 800064c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b86      	ldr	r3, [pc, #536]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800065e:	4b83      	ldr	r3, [pc, #524]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a82      	ldr	r2, [pc, #520]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b80      	ldr	r3, [pc, #512]	@ (800086c <MX_GPIO_Init+0x2cc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000676:	4b7d      	ldr	r3, [pc, #500]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a7c      	ldr	r2, [pc, #496]	@ (800086c <MX_GPIO_Init+0x2cc>)
 800067c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b7a      	ldr	r3, [pc, #488]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800068e:	4b77      	ldr	r3, [pc, #476]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a76      	ldr	r2, [pc, #472]	@ (800086c <MX_GPIO_Init+0x2cc>)
 8000694:	f043 0320 	orr.w	r3, r3, #32
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b74      	ldr	r3, [pc, #464]	@ (800086c <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0320 	and.w	r3, r3, #32
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b71      	ldr	r3, [pc, #452]	@ (800086c <MX_GPIO_Init+0x2cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	4a70      	ldr	r2, [pc, #448]	@ (800086c <MX_GPIO_Init+0x2cc>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b2:	4b6e      	ldr	r3, [pc, #440]	@ (800086c <MX_GPIO_Init+0x2cc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f241 010e 	movw	r1, #4110	@ 0x100e
 80006c4:	486a      	ldr	r0, [pc, #424]	@ (8000870 <MX_GPIO_Init+0x2d0>)
 80006c6:	f001 fad1 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2108      	movs	r1, #8
 80006ce:	4869      	ldr	r0, [pc, #420]	@ (8000874 <MX_GPIO_Init+0x2d4>)
 80006d0:	f001 facc 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006da:	4867      	ldr	r0, [pc, #412]	@ (8000878 <MX_GPIO_Init+0x2d8>)
 80006dc:	f001 fac6 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	21c8      	movs	r1, #200	@ 0xc8
 80006e4:	4865      	ldr	r0, [pc, #404]	@ (800087c <MX_GPIO_Init+0x2dc>)
 80006e6:	f001 fac1 	bl	8001c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 80006ea:	2310      	movs	r3, #16
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80006fa:	230e      	movs	r3, #14
 80006fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000702:	4619      	mov	r1, r3
 8000704:	485e      	ldr	r0, [pc, #376]	@ (8000880 <MX_GPIO_Init+0x2e0>)
 8000706:	f001 f905 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800070a:	2308      	movs	r3, #8
 800070c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070e:	2300      	movs	r3, #0
 8000710:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800071a:	4619      	mov	r1, r3
 800071c:	4858      	ldr	r0, [pc, #352]	@ (8000880 <MX_GPIO_Init+0x2e0>)
 800071e:	f001 f8f9 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000722:	2304      	movs	r3, #4
 8000724:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000732:	2309      	movs	r3, #9
 8000734:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800073a:	4619      	mov	r1, r3
 800073c:	4850      	ldr	r0, [pc, #320]	@ (8000880 <MX_GPIO_Init+0x2e0>)
 800073e:	f001 f8e9 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000742:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000754:	230b      	movs	r3, #11
 8000756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000758:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800075c:	4619      	mov	r1, r3
 800075e:	4847      	ldr	r0, [pc, #284]	@ (800087c <MX_GPIO_Init+0x2dc>)
 8000760:	f001 f8d8 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000764:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000776:	230c      	movs	r3, #12
 8000778:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800077a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800077e:	4619      	mov	r1, r3
 8000780:	483f      	ldr	r0, [pc, #252]	@ (8000880 <MX_GPIO_Init+0x2e0>)
 8000782:	f001 f8c7 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000786:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078c:	2312      	movs	r3, #18
 800078e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000798:	2304      	movs	r3, #4
 800079a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007a0:	4619      	mov	r1, r3
 80007a2:	4838      	ldr	r0, [pc, #224]	@ (8000884 <MX_GPIO_Init+0x2e4>)
 80007a4:	f001 f8b6 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80007a8:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80007ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80007ba:	230a      	movs	r3, #10
 80007bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007c2:	4619      	mov	r1, r3
 80007c4:	482f      	ldr	r0, [pc, #188]	@ (8000884 <MX_GPIO_Init+0x2e4>)
 80007c6:	f001 f8a5 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80007ca:	2310      	movs	r3, #16
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80007da:	2302      	movs	r3, #2
 80007dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007e2:	4619      	mov	r1, r3
 80007e4:	4827      	ldr	r0, [pc, #156]	@ (8000884 <MX_GPIO_Init+0x2e4>)
 80007e6:	f001 f895 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80007ea:	2380      	movs	r3, #128	@ 0x80
 80007ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80007fa:	2308      	movs	r3, #8
 80007fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000802:	4619      	mov	r1, r3
 8000804:	4820      	ldr	r0, [pc, #128]	@ (8000888 <MX_GPIO_Init+0x2e8>)
 8000806:	f001 f885 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800080a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800080e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800081c:	230c      	movs	r3, #12
 800081e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000820:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000824:	4619      	mov	r1, r3
 8000826:	4819      	ldr	r0, [pc, #100]	@ (800088c <MX_GPIO_Init+0x2ec>)
 8000828:	f001 f874 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800082c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800083e:	2301      	movs	r3, #1
 8000840:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000846:	4619      	mov	r1, r3
 8000848:	4811      	ldr	r0, [pc, #68]	@ (8000890 <MX_GPIO_Init+0x2f0>)
 800084a:	f001 f863 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800084e:	2360      	movs	r3, #96	@ 0x60
 8000850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800085e:	230d      	movs	r3, #13
 8000860:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000862:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000866:	4619      	mov	r1, r3
 8000868:	e014      	b.n	8000894 <MX_GPIO_Init+0x2f4>
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40022000 	.word	0x40022000
 8000874:	40022800 	.word	0x40022800
 8000878:	40021c00 	.word	0x40021c00
 800087c:	40021800 	.word	0x40021800
 8000880:	40021000 	.word	0x40021000
 8000884:	40020400 	.word	0x40020400
 8000888:	40020c00 	.word	0x40020c00
 800088c:	40020800 	.word	0x40020800
 8000890:	40020000 	.word	0x40020000
 8000894:	48bb      	ldr	r0, [pc, #748]	@ (8000b84 <MX_GPIO_Init+0x5e4>)
 8000896:	f001 f83d 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800089a:	2340      	movs	r3, #64	@ 0x40
 800089c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008aa:	230a      	movs	r3, #10
 80008ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008b2:	4619      	mov	r1, r3
 80008b4:	48b4      	ldr	r0, [pc, #720]	@ (8000b88 <MX_GPIO_Init+0x5e8>)
 80008b6:	f001 f82d 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80008ba:	f248 1333 	movw	r3, #33075	@ 0x8133
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008cc:	230c      	movs	r3, #12
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008d4:	4619      	mov	r1, r3
 80008d6:	48ad      	ldr	r0, [pc, #692]	@ (8000b8c <MX_GPIO_Init+0x5ec>)
 80008d8:	f001 f81c 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80008dc:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80008e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008ee:	230e      	movs	r3, #14
 80008f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80008f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f6:	4619      	mov	r1, r3
 80008f8:	48a5      	ldr	r0, [pc, #660]	@ (8000b90 <MX_GPIO_Init+0x5f0>)
 80008fa:	f001 f80b 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80008fe:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000910:	230c      	movs	r3, #12
 8000912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000914:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000918:	4619      	mov	r1, r3
 800091a:	489e      	ldr	r0, [pc, #632]	@ (8000b94 <MX_GPIO_Init+0x5f4>)
 800091c:	f000 fffa 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8000920:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000932:	230a      	movs	r3, #10
 8000934:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800093a:	4619      	mov	r1, r3
 800093c:	4896      	ldr	r0, [pc, #600]	@ (8000b98 <MX_GPIO_Init+0x5f8>)
 800093e:	f000 ffe9 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000942:	23f0      	movs	r3, #240	@ 0xf0
 8000944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000952:	230a      	movs	r3, #10
 8000954:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000956:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800095a:	4619      	mov	r1, r3
 800095c:	488f      	ldr	r0, [pc, #572]	@ (8000b9c <MX_GPIO_Init+0x5fc>)
 800095e:	f000 ffd9 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000962:	23f7      	movs	r3, #247	@ 0xf7
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000972:	230e      	movs	r3, #14
 8000974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000976:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800097a:	4619      	mov	r1, r3
 800097c:	4888      	ldr	r0, [pc, #544]	@ (8000ba0 <MX_GPIO_Init+0x600>)
 800097e:	f000 ffc9 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000982:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000994:	2309      	movs	r3, #9
 8000996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800099c:	4619      	mov	r1, r3
 800099e:	487b      	ldr	r0, [pc, #492]	@ (8000b8c <MX_GPIO_Init+0x5ec>)
 80009a0:	f000 ffb8 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80009a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009b6:	230a      	movs	r3, #10
 80009b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009be:	4619      	mov	r1, r3
 80009c0:	4872      	ldr	r0, [pc, #456]	@ (8000b8c <MX_GPIO_Init+0x5ec>)
 80009c2:	f000 ffa7 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009c6:	2320      	movs	r3, #32
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d6:	2307      	movs	r3, #7
 80009d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009de:	4619      	mov	r1, r3
 80009e0:	486c      	ldr	r0, [pc, #432]	@ (8000b94 <MX_GPIO_Init+0x5f4>)
 80009e2:	f000 ff97 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80009e6:	2308      	movs	r3, #8
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009f6:	230d      	movs	r3, #13
 80009f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009fe:	4619      	mov	r1, r3
 8000a00:	4864      	ldr	r0, [pc, #400]	@ (8000b94 <MX_GPIO_Init+0x5f4>)
 8000a02:	f000 ff87 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000a06:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	485f      	ldr	r0, [pc, #380]	@ (8000b9c <MX_GPIO_Init+0x5fc>)
 8000a20:	f000 ff78 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a36:	4619      	mov	r1, r3
 8000a38:	485a      	ldr	r0, [pc, #360]	@ (8000ba4 <MX_GPIO_Init+0x604>)
 8000a3a:	f000 ff6b 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a3e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a50:	230c      	movs	r3, #12
 8000a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4853      	ldr	r0, [pc, #332]	@ (8000ba8 <MX_GPIO_Init+0x608>)
 8000a5c:	f000 ff5a 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a60:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a72:	230e      	movs	r3, #14
 8000a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4847      	ldr	r0, [pc, #284]	@ (8000b9c <MX_GPIO_Init+0x5fc>)
 8000a7e:	f000 ff49 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a82:	2308      	movs	r3, #8
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a96:	4619      	mov	r1, r3
 8000a98:	4841      	ldr	r0, [pc, #260]	@ (8000ba0 <MX_GPIO_Init+0x600>)
 8000a9a:	f000 ff3b 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000a9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ab0:	230d      	movs	r3, #13
 8000ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4834      	ldr	r0, [pc, #208]	@ (8000b8c <MX_GPIO_Init+0x5ec>)
 8000abc:	f000 ff2a 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4830      	ldr	r0, [pc, #192]	@ (8000b94 <MX_GPIO_Init+0x5f4>)
 8000ad4:	f000 ff1e 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000af0:	4619      	mov	r1, r3
 8000af2:	4828      	ldr	r0, [pc, #160]	@ (8000b94 <MX_GPIO_Init+0x5f4>)
 8000af4:	f000 ff0e 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000af8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4827      	ldr	r0, [pc, #156]	@ (8000bac <MX_GPIO_Init+0x60c>)
 8000b0e:	f000 ff01 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4820      	ldr	r0, [pc, #128]	@ (8000bac <MX_GPIO_Init+0x60c>)
 8000b2c:	f000 fef2 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b30:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b42:	230d      	movs	r3, #13
 8000b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4817      	ldr	r0, [pc, #92]	@ (8000bac <MX_GPIO_Init+0x60c>)
 8000b4e:	f000 fee1 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000b52:	2301      	movs	r3, #1
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000b62:	2302      	movs	r3, #2
 8000b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480b      	ldr	r0, [pc, #44]	@ (8000b9c <MX_GPIO_Init+0x5fc>)
 8000b6e:	f000 fed1 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000b72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	e015      	b.n	8000bb0 <MX_GPIO_Init+0x610>
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40021800 	.word	0x40021800
 8000b90:	40022400 	.word	0x40022400
 8000b94:	40020c00 	.word	0x40020c00
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40022000 	.word	0x40022000
 8000ba0:	40022800 	.word	0x40022800
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40021400 	.word	0x40021400
 8000bac:	40021c00 	.word	0x40021c00
 8000bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4895      	ldr	r0, [pc, #596]	@ (8000e14 <MX_GPIO_Init+0x874>)
 8000bbe:	f000 fea9 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000bc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bc8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	488f      	ldr	r0, [pc, #572]	@ (8000e18 <MX_GPIO_Init+0x878>)
 8000bda:	f000 fe9b 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000bde:	23c0      	movs	r3, #192	@ 0xc0
 8000be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000bee:	2308      	movs	r3, #8
 8000bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4888      	ldr	r0, [pc, #544]	@ (8000e1c <MX_GPIO_Init+0x87c>)
 8000bfa:	f000 fe8b 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000bfe:	2310      	movs	r3, #16
 8000c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c0e:	230a      	movs	r3, #10
 8000c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c16:	4619      	mov	r1, r3
 8000c18:	4881      	ldr	r0, [pc, #516]	@ (8000e20 <MX_GPIO_Init+0x880>)
 8000c1a:	f000 fe7b 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c1e:	2328      	movs	r3, #40	@ 0x28
 8000c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c2e:	230c      	movs	r3, #12
 8000c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c36:	4619      	mov	r1, r3
 8000c38:	4879      	ldr	r0, [pc, #484]	@ (8000e20 <MX_GPIO_Init+0x880>)
 8000c3a:	f000 fe6b 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000c3e:	23c8      	movs	r3, #200	@ 0xc8
 8000c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c52:	4619      	mov	r1, r3
 8000c54:	4873      	ldr	r0, [pc, #460]	@ (8000e24 <MX_GPIO_Init+0x884>)
 8000c56:	f000 fe5d 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c5a:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c60:	2303      	movs	r3, #3
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	486e      	ldr	r0, [pc, #440]	@ (8000e28 <MX_GPIO_Init+0x888>)
 8000c70:	f000 fe50 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c74:	2308      	movs	r3, #8
 8000c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c84:	230c      	movs	r3, #12
 8000c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4863      	ldr	r0, [pc, #396]	@ (8000e1c <MX_GPIO_Init+0x87c>)
 8000c90:	f000 fe40 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000c94:	2305      	movs	r3, #5
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cac:	4619      	mov	r1, r3
 8000cae:	485b      	ldr	r0, [pc, #364]	@ (8000e1c <MX_GPIO_Init+0x87c>)
 8000cb0:	f000 fe30 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cb4:	2332      	movs	r3, #50	@ 0x32
 8000cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc4:	230b      	movs	r3, #11
 8000cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4853      	ldr	r0, [pc, #332]	@ (8000e1c <MX_GPIO_Init+0x87c>)
 8000cd0:	f000 fe20 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ce4:	2309      	movs	r3, #9
 8000ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cec:	4619      	mov	r1, r3
 8000cee:	484f      	ldr	r0, [pc, #316]	@ (8000e2c <MX_GPIO_Init+0x88c>)
 8000cf0:	f000 fe10 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000cf4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d06:	2309      	movs	r3, #9
 8000d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4847      	ldr	r0, [pc, #284]	@ (8000e30 <MX_GPIO_Init+0x890>)
 8000d12:	f000 fdff 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d16:	2304      	movs	r3, #4
 8000d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d26:	4619      	mov	r1, r3
 8000d28:	483e      	ldr	r0, [pc, #248]	@ (8000e24 <MX_GPIO_Init+0x884>)
 8000d2a:	f000 fdf3 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000d2e:	2382      	movs	r3, #130	@ 0x82
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3e:	230b      	movs	r3, #11
 8000d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d46:	4619      	mov	r1, r3
 8000d48:	4832      	ldr	r0, [pc, #200]	@ (8000e14 <MX_GPIO_Init+0x874>)
 8000d4a:	f000 fde3 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d52:	2303      	movs	r3, #3
 8000d54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	482c      	ldr	r0, [pc, #176]	@ (8000e14 <MX_GPIO_Init+0x874>)
 8000d62:	f000 fdd7 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000d66:	2310      	movs	r3, #16
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d76:	230d      	movs	r3, #13
 8000d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4824      	ldr	r0, [pc, #144]	@ (8000e14 <MX_GPIO_Init+0x874>)
 8000d82:	f000 fdc7 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000d86:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8c:	2312      	movs	r3, #18
 8000d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da0:	4619      	mov	r1, r3
 8000da2:	481f      	ldr	r0, [pc, #124]	@ (8000e20 <MX_GPIO_Init+0x880>)
 8000da4:	f000 fdb6 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_CLK_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin;
 8000da8:	2320      	movs	r3, #32
 8000daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000db8:	230a      	movs	r3, #10
 8000dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4814      	ldr	r0, [pc, #80]	@ (8000e14 <MX_GPIO_Init+0x874>)
 8000dc4:	f000 fda6 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000dc8:	2340      	movs	r3, #64	@ 0x40
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000dd8:	2309      	movs	r3, #9
 8000dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de0:	4619      	mov	r1, r3
 8000de2:	480f      	ldr	r0, [pc, #60]	@ (8000e20 <MX_GPIO_Init+0x880>)
 8000de4:	f000 fd96 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000de8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e02:	4619      	mov	r1, r3
 8000e04:	4809      	ldr	r0, [pc, #36]	@ (8000e2c <MX_GPIO_Init+0x88c>)
 8000e06:	f000 fd85 	bl	8001914 <HAL_GPIO_Init>

}
 8000e0a:	bf00      	nop
 8000e0c:	3740      	adds	r7, #64	@ 0x40
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40020000 	.word	0x40020000
 8000e18:	40022000 	.word	0x40022000
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	40021c00 	.word	0x40021c00
 8000e24:	40021800 	.word	0x40021800
 8000e28:	40021400 	.word	0x40021400
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40020c00 	.word	0x40020c00

08000e34 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e3c:	1d39      	adds	r1, r7, #4
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	2201      	movs	r2, #1
 8000e44:	4803      	ldr	r0, [pc, #12]	@ (8000e54 <__io_putchar+0x20>)
 8000e46:	f002 fb49 	bl	80034dc <HAL_UART_Transmit>
return ch;
 8000e4a:	687b      	ldr	r3, [r7, #4]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000043c 	.word	0x2000043c

08000e58 <fonction>:


h_shell_t shell;

int fonction(int argc, char ** argv)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	printf("Je suis une fonction bidon\r\n");
 8000e62:	4810      	ldr	r0, [pc, #64]	@ (8000ea4 <fonction+0x4c>)
 8000e64:	f006 ff50 	bl	8007d08 <puts>

	printf("Nombre d'arguments : %d\r\n", argc);
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	480f      	ldr	r0, [pc, #60]	@ (8000ea8 <fonction+0x50>)
 8000e6c:	f006 fee4 	bl	8007c38 <iprintf>

	    for (int i = 0; i < argc; i++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	e00c      	b.n	8000e90 <fonction+0x38>
	        printf("Arg[%d] = %s\r\n", i, argv[i]);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	68f9      	ldr	r1, [r7, #12]
 8000e84:	4809      	ldr	r0, [pc, #36]	@ (8000eac <fonction+0x54>)
 8000e86:	f006 fed7 	bl	8007c38 <iprintf>
	    for (int i = 0; i < argc; i++) {
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbee      	blt.n	8000e76 <fonction+0x1e>
	    }



	return 0;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08008e68 	.word	0x08008e68
 8000ea8:	08008e84 	.word	0x08008e84
 8000eac:	08008ea0 	.word	0x08008ea0

08000eb0 <addition>:

int addition(int argc, char ** argv)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
    if (argc < 3) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	dc05      	bgt.n	8000ecc <addition+0x1c>
        printf("Erreur : 2 paramètres requis\r\n");
 8000ec0:	4811      	ldr	r0, [pc, #68]	@ (8000f08 <addition+0x58>)
 8000ec2:	f006 ff21 	bl	8007d08 <puts>
        return -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e018      	b.n	8000efe <addition+0x4e>
    }

    int a = atoi(argv[1]);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	3304      	adds	r3, #4
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f006 fd66 	bl	80079a4 <atoi>
 8000ed8:	6178      	str	r0, [r7, #20]
    int b = atoi(argv[2]);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	3308      	adds	r3, #8
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f006 fd5f 	bl	80079a4 <atoi>
 8000ee6:	6138      	str	r0, [r7, #16]
    int result = a + b;
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4413      	add	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

    printf("Addition : %d + %d = %d\r\n", a, b, result);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	6979      	ldr	r1, [r7, #20]
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <addition+0x5c>)
 8000ef8:	f006 fe9e 	bl	8007c38 <iprintf>

    return 0;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	08008eb0 	.word	0x08008eb0
 8000f0c:	08008ed0 	.word	0x08008ed0

08000f10 <cmd_led_on>:

// allumer une led en dure, à améliorer pour choisir la led et le port, éteintre la led
int cmd_led_on(int argc, char **argv) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <cmd_led_on+0x24>)
 8000f20:	f000 fea4 	bl	8001c6c <HAL_GPIO_WritePin>
    printf("LED PIN1 GPIOI est allumée !\r\n");
 8000f24:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <cmd_led_on+0x28>)
 8000f26:	f006 feef 	bl	8007d08 <puts>
    return 0;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40022000 	.word	0x40022000
 8000f38:	08008eec 	.word	0x08008eec

08000f3c <ShellTask>:

void ShellTask(void *argument) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
    shell.io.drv_shell_transmit = drv_uart_transmit;
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <ShellTask+0x54>)
 8000f46:	4a13      	ldr	r2, [pc, #76]	@ (8000f94 <ShellTask+0x58>)
 8000f48:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    shell.io.drv_shell_receive  = drv_uart_receive;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <ShellTask+0x54>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	@ (8000f98 <ShellTask+0x5c>)
 8000f50:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358

    drv_uart_init_IT();  // // Lancement de la première réception en IT
 8000f54:	f006 fb0a 	bl	800756c <drv_uart_init_IT>

    shell_init(&shell);
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <ShellTask+0x54>)
 8000f5a:	f006 fbcd 	bl	80076f8 <shell_init>
    shell_add(&shell, 'f', fonction, "Une fonction inutile");
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <ShellTask+0x60>)
 8000f60:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <ShellTask+0x64>)
 8000f62:	2166      	movs	r1, #102	@ 0x66
 8000f64:	480a      	ldr	r0, [pc, #40]	@ (8000f90 <ShellTask+0x54>)
 8000f66:	f006 fbf7 	bl	8007758 <shell_add>
    shell_add(&shell, 'a', addition, "Addition de deux entiers");
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <ShellTask+0x68>)
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa8 <ShellTask+0x6c>)
 8000f6e:	2161      	movs	r1, #97	@ 0x61
 8000f70:	4807      	ldr	r0, [pc, #28]	@ (8000f90 <ShellTask+0x54>)
 8000f72:	f006 fbf1 	bl	8007758 <shell_add>
    shell_add(&shell, 'l', cmd_led_on, "Allumer LED (GPIOI_PIN1)");
 8000f76:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <ShellTask+0x70>)
 8000f78:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb0 <ShellTask+0x74>)
 8000f7a:	216c      	movs	r1, #108	@ 0x6c
 8000f7c:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <ShellTask+0x54>)
 8000f7e:	f006 fbeb 	bl	8007758 <shell_add>

    shell_run(&shell);  // éxécute une boucle while(1)
 8000f82:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <ShellTask+0x54>)
 8000f84:	f006 fc94 	bl	80078b0 <shell_run>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000090 	.word	0x20000090
 8000f94:	08007589 	.word	0x08007589
 8000f98:	080075bd 	.word	0x080075bd
 8000f9c:	08008f0c 	.word	0x08008f0c
 8000fa0:	08000e59 	.word	0x08000e59
 8000fa4:	08008f24 	.word	0x08008f24
 8000fa8:	08000eb1 	.word	0x08000eb1
 8000fac:	08008f40 	.word	0x08008f40
 8000fb0:	08000f11 	.word	0x08000f11

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fba:	f000 fb0a 	bl	80015d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbe:	f000 f817 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc2:	f7ff faed 	bl	80005a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fc6:	f000 fa21 	bl	800140c <MX_USART1_UART_Init>
  ret = xTaskCreate(task_bug, "Tache 2", STACK_SIZE, (void *) TASK2_DELAY, TASK2_PRIORITY, NULL);
  configASSERT(pdPASS == ret);*/



  	  xTaskCreate(ShellTask, "Shell", 512, NULL, 1, NULL);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd8:	4903      	ldr	r1, [pc, #12]	@ (8000fe8 <main+0x34>)
 8000fda:	4804      	ldr	r0, [pc, #16]	@ (8000fec <main+0x38>)
 8000fdc:	f004 fb82 	bl	80056e4 <xTaskCreate>

  	  /* Lancement du scheduler */
  	  vTaskStartScheduler();
 8000fe0:	f004 fce0 	bl	80059a4 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <main+0x30>
 8000fe8:	08008f5c 	.word	0x08008f5c
 8000fec:	08000f3d 	.word	0x08000f3d

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b094      	sub	sp, #80	@ 0x50
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0320 	add.w	r3, r7, #32
 8000ffa:	2230      	movs	r2, #48	@ 0x30
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f006 ff96 	bl	8007f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001014:	4b2b      	ldr	r3, [pc, #172]	@ (80010c4 <SystemClock_Config+0xd4>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	4a2a      	ldr	r2, [pc, #168]	@ (80010c4 <SystemClock_Config+0xd4>)
 800101a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001020:	4b28      	ldr	r3, [pc, #160]	@ (80010c4 <SystemClock_Config+0xd4>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800102c:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <SystemClock_Config+0xd8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a25      	ldr	r2, [pc, #148]	@ (80010c8 <SystemClock_Config+0xd8>)
 8001032:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <SystemClock_Config+0xd8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001044:	2301      	movs	r3, #1
 8001046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001048:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001052:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001058:	2319      	movs	r3, #25
 800105a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800105c:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001060:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001062:	2302      	movs	r3, #2
 8001064:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001066:	2302      	movs	r3, #2
 8001068:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106a:	f107 0320 	add.w	r3, r7, #32
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fe66 	bl	8001d40 <HAL_RCC_OscConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800107a:	f000 f839 	bl	80010f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800107e:	f000 fe0f 	bl	8001ca0 <HAL_PWREx_EnableOverDrive>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001088:	f000 f832 	bl	80010f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001090:	2302      	movs	r3, #2
 8001092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001098:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800109c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800109e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2107      	movs	r1, #7
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 f8ec 	bl	8002288 <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010b6:	f000 f81b 	bl	80010f0 <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3750      	adds	r7, #80	@ 0x50
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010de:	f000 fa85 	bl	80015ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40001000 	.word	0x40001000

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <Error_Handler+0x8>

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	4a10      	ldr	r2, [pc, #64]	@ (8001148 <HAL_MspInit+0x4c>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110c:	6413      	str	r3, [r2, #64]	@ 0x40
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <HAL_MspInit+0x4c>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <HAL_MspInit+0x4c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <HAL_MspInit+0x4c>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001124:	6453      	str	r3, [r2, #68]	@ 0x44
 8001126:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <HAL_MspInit+0x4c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	210f      	movs	r1, #15
 8001136:	f06f 0001 	mvn.w	r0, #1
 800113a:	f000 fb2f 	bl	800179c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800

0800114c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	@ 0x38
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800115c:	4b33      	ldr	r3, [pc, #204]	@ (800122c <HAL_InitTick+0xe0>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	4a32      	ldr	r2, [pc, #200]	@ (800122c <HAL_InitTick+0xe0>)
 8001162:	f043 0310 	orr.w	r3, r3, #16
 8001166:	6413      	str	r3, [r2, #64]	@ 0x40
 8001168:	4b30      	ldr	r3, [pc, #192]	@ (800122c <HAL_InitTick+0xe0>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	f003 0310 	and.w	r3, r3, #16
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001174:	f107 0210 	add.w	r2, r7, #16
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fa68 	bl	8002654 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800118e:	f001 fa39 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8001192:	6378      	str	r0, [r7, #52]	@ 0x34
 8001194:	e004      	b.n	80011a0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001196:	f001 fa35 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 800119a:	4603      	mov	r3, r0
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a2:	4a23      	ldr	r2, [pc, #140]	@ (8001230 <HAL_InitTick+0xe4>)
 80011a4:	fba2 2303 	umull	r2, r3, r2, r3
 80011a8:	0c9b      	lsrs	r3, r3, #18
 80011aa:	3b01      	subs	r3, #1
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <HAL_InitTick+0xe8>)
 80011b0:	4a21      	ldr	r2, [pc, #132]	@ (8001238 <HAL_InitTick+0xec>)
 80011b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <HAL_InitTick+0xe8>)
 80011b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <HAL_InitTick+0xe8>)
 80011be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <HAL_InitTick+0xe8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <HAL_InitTick+0xe8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ce:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <HAL_InitTick+0xe8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011d4:	4817      	ldr	r0, [pc, #92]	@ (8001234 <HAL_InitTick+0xe8>)
 80011d6:	f001 fe5f 	bl	8002e98 <HAL_TIM_Base_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80011e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d11b      	bne.n	8001220 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011e8:	4812      	ldr	r0, [pc, #72]	@ (8001234 <HAL_InitTick+0xe8>)
 80011ea:	f001 feb7 	bl	8002f5c <HAL_TIM_Base_Start_IT>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80011f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d111      	bne.n	8001220 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011fc:	2036      	movs	r0, #54	@ 0x36
 80011fe:	f000 fae9 	bl	80017d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d808      	bhi.n	800121a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	2036      	movs	r0, #54	@ 0x36
 800120e:	f000 fac5 	bl	800179c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <HAL_InitTick+0xf0>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e002      	b.n	8001220 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001220:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001224:	4618      	mov	r0, r3
 8001226:	3738      	adds	r7, #56	@ 0x38
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	431bde83 	.word	0x431bde83
 8001234:	200003ec 	.word	0x200003ec
 8001238:	40001000 	.word	0x40001000
 800123c:	20000004 	.word	0x20000004

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <NMI_Handler+0x4>

08001248 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <MemManage_Handler+0x4>

08001258 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <UsageFault_Handler+0x4>

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <USART1_IRQHandler+0x10>)
 800127e:	f002 f9fb 	bl	8003678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000043c 	.word	0x2000043c

0800128c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <TIM6_DAC_IRQHandler+0x10>)
 8001292:	f001 fedb 	bl	800304c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200003ec 	.word	0x200003ec

080012a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	e00a      	b.n	80012c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012b2:	f3af 8000 	nop.w
 80012b6:	4601      	mov	r1, r0
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	60ba      	str	r2, [r7, #8]
 80012be:	b2ca      	uxtb	r2, r1
 80012c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3301      	adds	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	dbf0      	blt.n	80012b2 <_read+0x12>
  }

  return len;
 80012d0:	687b      	ldr	r3, [r7, #4]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	e009      	b.n	8001300 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	60ba      	str	r2, [r7, #8]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fd9d 	bl	8000e34 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3301      	adds	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	dbf1      	blt.n	80012ec <_write+0x12>
  }
  return len;
 8001308:	687b      	ldr	r3, [r7, #4]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <_close>:

int _close(int file)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800133a:	605a      	str	r2, [r3, #4]
  return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <_isatty>:

int _isatty(int file)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001384:	4a14      	ldr	r2, [pc, #80]	@ (80013d8 <_sbrk+0x5c>)
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <_sbrk+0x60>)
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001390:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <_sbrk+0x64>)
 800139a:	4a12      	ldr	r2, [pc, #72]	@ (80013e4 <_sbrk+0x68>)
 800139c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d207      	bcs.n	80013bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ac:	f006 fe64 	bl	8008078 <__errno>
 80013b0:	4603      	mov	r3, r0
 80013b2:	220c      	movs	r2, #12
 80013b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	e009      	b.n	80013d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c2:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <_sbrk+0x64>)
 80013cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20050000 	.word	0x20050000
 80013dc:	00000400 	.word	0x00000400
 80013e0:	20000438 	.word	0x20000438
 80013e4:	20005000 	.word	0x20005000

080013e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <SystemInit+0x20>)
 80013ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013f2:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <SystemInit+0x20>)
 80013f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_USART1_UART_Init+0x58>)
 8001412:	4a15      	ldr	r2, [pc, #84]	@ (8001468 <MX_USART1_UART_Init+0x5c>)
 8001414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001416:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <MX_USART1_UART_Init+0x58>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_USART1_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_USART1_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_USART1_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_USART1_UART_Init+0x58>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <MX_USART1_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_USART1_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <MX_USART1_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_USART1_UART_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_USART1_UART_Init+0x58>)
 8001450:	f001 fff6 	bl	8003440 <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800145a:	f7ff fe49 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000043c 	.word	0x2000043c
 8001468:	40011000 	.word	0x40011000

0800146c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0ac      	sub	sp, #176	@ 0xb0
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	2284      	movs	r2, #132	@ 0x84
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f006 fd4f 	bl	8007f30 <memset>
  if(uartHandle->Instance==USART1)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a36      	ldr	r2, [pc, #216]	@ (8001570 <HAL_UART_MspInit+0x104>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d164      	bne.n	8001566 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800149c:	2340      	movs	r3, #64	@ 0x40
 800149e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014a0:	2300      	movs	r3, #0
 80014a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a4:	f107 0318 	add.w	r3, r7, #24
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 f905 	bl	80026b8 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014b4:	f7ff fe1c 	bl	80010f0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <HAL_UART_MspInit+0x108>)
 80014ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001574 <HAL_UART_MspInit+0x108>)
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001574 <HAL_UART_MspInit+0x108>)
 80014c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <HAL_UART_MspInit+0x108>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	4a27      	ldr	r2, [pc, #156]	@ (8001574 <HAL_UART_MspInit+0x108>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	6313      	str	r3, [r2, #48]	@ 0x30
 80014dc:	4b25      	ldr	r3, [pc, #148]	@ (8001574 <HAL_UART_MspInit+0x108>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	4b22      	ldr	r3, [pc, #136]	@ (8001574 <HAL_UART_MspInit+0x108>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ec:	4a21      	ldr	r2, [pc, #132]	@ (8001574 <HAL_UART_MspInit+0x108>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <HAL_UART_MspInit+0x108>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001518:	2307      	movs	r3, #7
 800151a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001522:	4619      	mov	r1, r3
 8001524:	4814      	ldr	r0, [pc, #80]	@ (8001578 <HAL_UART_MspInit+0x10c>)
 8001526:	f000 f9f5 	bl	8001914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800152a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800152e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001544:	2307      	movs	r3, #7
 8001546:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800154e:	4619      	mov	r1, r3
 8001550:	480a      	ldr	r0, [pc, #40]	@ (800157c <HAL_UART_MspInit+0x110>)
 8001552:	f000 f9df 	bl	8001914 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2105      	movs	r1, #5
 800155a:	2025      	movs	r0, #37	@ 0x25
 800155c:	f000 f91e 	bl	800179c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001560:	2025      	movs	r0, #37	@ 0x25
 8001562:	f000 f937 	bl	80017d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001566:	bf00      	nop
 8001568:	37b0      	adds	r7, #176	@ 0xb0
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40011000 	.word	0x40011000
 8001574:	40023800 	.word	0x40023800
 8001578:	40020400 	.word	0x40020400
 800157c:	40020000 	.word	0x40020000

08001580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001584:	f7ff ff30 	bl	80013e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158a:	490d      	ldr	r1, [pc, #52]	@ (80015c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800158c:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a0:	4c0a      	ldr	r4, [pc, #40]	@ (80015cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015ae:	f006 fd69 	bl	8008084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b2:	f7ff fcff 	bl	8000fb4 <main>
  bx  lr    
 80015b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80015c4:	08009130 	.word	0x08009130
  ldr r2, =_sbss
 80015c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80015cc:	20004ffc 	.word	0x20004ffc

080015d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC_IRQHandler>

080015d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d6:	2003      	movs	r0, #3
 80015d8:	f000 f8d5 	bl	8001786 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff fdb5 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e2:	f7ff fd8b 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008
 8001610:	200004c4 	.word	0x200004c4

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	200004c4 	.word	0x200004c4

0800162c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <__NVIC_SetPriorityGrouping+0x40>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	4313      	orrs	r3, r2
 8001658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165a:	4a04      	ldr	r2, [pc, #16]	@ (800166c <__NVIC_SetPriorityGrouping+0x40>)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	60d3      	str	r3, [r2, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00
 8001670:	05fa0000 	.word	0x05fa0000

08001674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b04      	ldr	r3, [pc, #16]	@ (800168c <__NVIC_GetPriorityGrouping+0x18>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 0307 	and.w	r3, r3, #7
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db0b      	blt.n	80016ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 021f 	and.w	r2, r3, #31
 80016a8:	4907      	ldr	r1, [pc, #28]	@ (80016c8 <__NVIC_EnableIRQ+0x38>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	2001      	movs	r0, #1
 80016b2:	fa00 f202 	lsl.w	r2, r0, r2
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	@ (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	@ (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	@ 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	@ 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ff4c 	bl	800162c <__NVIC_SetPriorityGrouping>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ae:	f7ff ff61 	bl	8001674 <__NVIC_GetPriorityGrouping>
 80017b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	68b9      	ldr	r1, [r7, #8]
 80017b8:	6978      	ldr	r0, [r7, #20]
 80017ba:	f7ff ffb1 	bl	8001720 <NVIC_EncodePriority>
 80017be:	4602      	mov	r2, r0
 80017c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff80 	bl	80016cc <__NVIC_SetPriority>
}
 80017cc:	bf00      	nop
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff54 	bl	8001690 <__NVIC_EnableIRQ>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017fe:	f7ff ff09 	bl	8001614 <HAL_GetTick>
 8001802:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d008      	beq.n	8001822 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2280      	movs	r2, #128	@ 0x80
 8001814:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e052      	b.n	80018c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0216 	bic.w	r2, r2, #22
 8001830:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001840:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	2b00      	cmp	r3, #0
 8001848:	d103      	bne.n	8001852 <HAL_DMA_Abort+0x62>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0208 	bic.w	r2, r2, #8
 8001860:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001872:	e013      	b.n	800189c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001874:	f7ff fece 	bl	8001614 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b05      	cmp	r3, #5
 8001880:	d90c      	bls.n	800189c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2220      	movs	r2, #32
 8001886:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2203      	movs	r2, #3
 800188c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e015      	b.n	80018c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1e4      	bne.n	8001874 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ae:	223f      	movs	r2, #63	@ 0x3f
 80018b0:	409a      	lsls	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d004      	beq.n	80018ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2280      	movs	r2, #128	@ 0x80
 80018e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00c      	b.n	8001908 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2205      	movs	r2, #5
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	@ 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	e175      	b.n	8001c20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	429a      	cmp	r2, r3
 800194e:	f040 8164 	bne.w	8001c1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d005      	beq.n	800196a <HAL_GPIO_Init+0x56>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d130      	bne.n	80019cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 0201 	and.w	r2, r3, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d017      	beq.n	8001a08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d123      	bne.n	8001a5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	08da      	lsrs	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3208      	adds	r2, #8
 8001a56:	69b9      	ldr	r1, [r7, #24]
 8001a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0203 	and.w	r2, r3, #3
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80be 	beq.w	8001c1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	4b66      	ldr	r3, [pc, #408]	@ (8001c38 <HAL_GPIO_Init+0x324>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	4a65      	ldr	r2, [pc, #404]	@ (8001c38 <HAL_GPIO_Init+0x324>)
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aaa:	4b63      	ldr	r3, [pc, #396]	@ (8001c38 <HAL_GPIO_Init+0x324>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ab6:	4a61      	ldr	r2, [pc, #388]	@ (8001c3c <HAL_GPIO_Init+0x328>)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	089b      	lsrs	r3, r3, #2
 8001abc:	3302      	adds	r3, #2
 8001abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a58      	ldr	r2, [pc, #352]	@ (8001c40 <HAL_GPIO_Init+0x32c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d037      	beq.n	8001b52 <HAL_GPIO_Init+0x23e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a57      	ldr	r2, [pc, #348]	@ (8001c44 <HAL_GPIO_Init+0x330>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d031      	beq.n	8001b4e <HAL_GPIO_Init+0x23a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a56      	ldr	r2, [pc, #344]	@ (8001c48 <HAL_GPIO_Init+0x334>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d02b      	beq.n	8001b4a <HAL_GPIO_Init+0x236>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a55      	ldr	r2, [pc, #340]	@ (8001c4c <HAL_GPIO_Init+0x338>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d025      	beq.n	8001b46 <HAL_GPIO_Init+0x232>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a54      	ldr	r2, [pc, #336]	@ (8001c50 <HAL_GPIO_Init+0x33c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d01f      	beq.n	8001b42 <HAL_GPIO_Init+0x22e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a53      	ldr	r2, [pc, #332]	@ (8001c54 <HAL_GPIO_Init+0x340>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d019      	beq.n	8001b3e <HAL_GPIO_Init+0x22a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a52      	ldr	r2, [pc, #328]	@ (8001c58 <HAL_GPIO_Init+0x344>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0x226>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a51      	ldr	r2, [pc, #324]	@ (8001c5c <HAL_GPIO_Init+0x348>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00d      	beq.n	8001b36 <HAL_GPIO_Init+0x222>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a50      	ldr	r2, [pc, #320]	@ (8001c60 <HAL_GPIO_Init+0x34c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_Init+0x21e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4f      	ldr	r2, [pc, #316]	@ (8001c64 <HAL_GPIO_Init+0x350>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_GPIO_Init+0x21a>
 8001b2a:	2309      	movs	r3, #9
 8001b2c:	e012      	b.n	8001b54 <HAL_GPIO_Init+0x240>
 8001b2e:	230a      	movs	r3, #10
 8001b30:	e010      	b.n	8001b54 <HAL_GPIO_Init+0x240>
 8001b32:	2308      	movs	r3, #8
 8001b34:	e00e      	b.n	8001b54 <HAL_GPIO_Init+0x240>
 8001b36:	2307      	movs	r3, #7
 8001b38:	e00c      	b.n	8001b54 <HAL_GPIO_Init+0x240>
 8001b3a:	2306      	movs	r3, #6
 8001b3c:	e00a      	b.n	8001b54 <HAL_GPIO_Init+0x240>
 8001b3e:	2305      	movs	r3, #5
 8001b40:	e008      	b.n	8001b54 <HAL_GPIO_Init+0x240>
 8001b42:	2304      	movs	r3, #4
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x240>
 8001b46:	2303      	movs	r3, #3
 8001b48:	e004      	b.n	8001b54 <HAL_GPIO_Init+0x240>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e002      	b.n	8001b54 <HAL_GPIO_Init+0x240>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x240>
 8001b52:	2300      	movs	r3, #0
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	f002 0203 	and.w	r2, r2, #3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b64:	4935      	ldr	r1, [pc, #212]	@ (8001c3c <HAL_GPIO_Init+0x328>)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b72:	4b3d      	ldr	r3, [pc, #244]	@ (8001c68 <HAL_GPIO_Init+0x354>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b96:	4a34      	ldr	r2, [pc, #208]	@ (8001c68 <HAL_GPIO_Init+0x354>)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b9c:	4b32      	ldr	r3, [pc, #200]	@ (8001c68 <HAL_GPIO_Init+0x354>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc0:	4a29      	ldr	r2, [pc, #164]	@ (8001c68 <HAL_GPIO_Init+0x354>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc6:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <HAL_GPIO_Init+0x354>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bea:	4a1f      	ldr	r2, [pc, #124]	@ (8001c68 <HAL_GPIO_Init+0x354>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <HAL_GPIO_Init+0x354>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c14:	4a14      	ldr	r2, [pc, #80]	@ (8001c68 <HAL_GPIO_Init+0x354>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b0f      	cmp	r3, #15
 8001c24:	f67f ae86 	bls.w	8001934 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3724      	adds	r7, #36	@ 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40013800 	.word	0x40013800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40020800 	.word	0x40020800
 8001c4c:	40020c00 	.word	0x40020c00
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40021400 	.word	0x40021400
 8001c58:	40021800 	.word	0x40021800
 8001c5c:	40021c00 	.word	0x40021c00
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40022400 	.word	0x40022400
 8001c68:	40013c00 	.word	0x40013c00

08001c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c88:	e003      	b.n	8001c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	619a      	str	r2, [r3, #24]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	4b23      	ldr	r3, [pc, #140]	@ (8001d38 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	4a22      	ldr	r2, [pc, #136]	@ (8001d38 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb6:	4b20      	ldr	r3, [pc, #128]	@ (8001d38 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cce:	f7ff fca1 	bl	8001614 <HAL_GetTick>
 8001cd2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cd4:	e009      	b.n	8001cea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cd6:	f7ff fc9d 	bl	8001614 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ce4:	d901      	bls.n	8001cea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e022      	b.n	8001d30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cea:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cf6:	d1ee      	bne.n	8001cd6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cf8:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8001d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d04:	f7ff fc86 	bl	8001614 <HAL_GetTick>
 8001d08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d0a:	e009      	b.n	8001d20 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d0c:	f7ff fc82 	bl	8001614 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d1a:	d901      	bls.n	8001d20 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e007      	b.n	8001d30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001d2c:	d1ee      	bne.n	8001d0c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40007000 	.word	0x40007000

08001d40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e291      	b.n	800227a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8087 	beq.w	8001e72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d64:	4b96      	ldr	r3, [pc, #600]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d00c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d70:	4b93      	ldr	r3, [pc, #588]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d112      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62>
 8001d7c:	4b90      	ldr	r3, [pc, #576]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d88:	d10b      	bne.n	8001da2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8a:	4b8d      	ldr	r3, [pc, #564]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d06c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x130>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d168      	bne.n	8001e70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e26b      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x7a>
 8001dac:	4b84      	ldr	r3, [pc, #528]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a83      	ldr	r2, [pc, #524]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	e02e      	b.n	8001e18 <HAL_RCC_OscConfig+0xd8>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x9c>
 8001dc2:	4b7f      	ldr	r3, [pc, #508]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a7e      	ldr	r2, [pc, #504]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b7c      	ldr	r3, [pc, #496]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a7b      	ldr	r2, [pc, #492]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001dd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e01d      	b.n	8001e18 <HAL_RCC_OscConfig+0xd8>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0xc0>
 8001de6:	4b76      	ldr	r3, [pc, #472]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a75      	ldr	r2, [pc, #468]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b73      	ldr	r3, [pc, #460]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a72      	ldr	r2, [pc, #456]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0xd8>
 8001e00:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a6e      	ldr	r2, [pc, #440]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b6c      	ldr	r3, [pc, #432]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a6b      	ldr	r2, [pc, #428]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff fbf8 	bl	8001614 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff fbf4 	bl	8001614 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	@ 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e21f      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b61      	ldr	r3, [pc, #388]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0xe8>
 8001e46:	e014      	b.n	8001e72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff fbe4 	bl	8001614 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e50:	f7ff fbe0 	bl	8001614 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	@ 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e20b      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e62:	4b57      	ldr	r3, [pc, #348]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x110>
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d069      	beq.n	8001f52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e7e:	4b50      	ldr	r3, [pc, #320]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e8a:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d11c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x190>
 8001e96:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d116      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	4b47      	ldr	r3, [pc, #284]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_RCC_OscConfig+0x17a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e1df      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b41      	ldr	r3, [pc, #260]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	493d      	ldr	r1, [pc, #244]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	e040      	b.n	8001f52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d023      	beq.n	8001f20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed8:	4b39      	ldr	r3, [pc, #228]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a38      	ldr	r2, [pc, #224]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fb96 	bl	8001614 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eec:	f7ff fb92 	bl	8001614 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1bd      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	4b30      	ldr	r3, [pc, #192]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4929      	ldr	r1, [pc, #164]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
 8001f1e:	e018      	b.n	8001f52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f20:	4b27      	ldr	r3, [pc, #156]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a26      	ldr	r2, [pc, #152]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fb72 	bl	8001614 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f34:	f7ff fb6e 	bl	8001614 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e199      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f46:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d038      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d019      	beq.n	8001f9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f66:	4b16      	ldr	r3, [pc, #88]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f6a:	4a15      	ldr	r2, [pc, #84]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7ff fb4f 	bl	8001614 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fb4b 	bl	8001614 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e176      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x23a>
 8001f98:	e01a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9a:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f9e:	4a08      	ldr	r2, [pc, #32]	@ (8001fc0 <HAL_RCC_OscConfig+0x280>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7ff fb35 	bl	8001614 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fae:	f7ff fb31 	bl	8001614 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d903      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e15c      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
 8001fc0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc4:	4b91      	ldr	r3, [pc, #580]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8001fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80a4 	beq.w	8002126 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fde:	4b8b      	ldr	r3, [pc, #556]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b88      	ldr	r3, [pc, #544]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	4a87      	ldr	r2, [pc, #540]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff6:	4b85      	ldr	r3, [pc, #532]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002006:	4b82      	ldr	r3, [pc, #520]	@ (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002012:	4b7f      	ldr	r3, [pc, #508]	@ (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7e      	ldr	r2, [pc, #504]	@ (8002210 <HAL_RCC_OscConfig+0x4d0>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7ff faf9 	bl	8001614 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7ff faf5 	bl	8001614 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b64      	cmp	r3, #100	@ 0x64
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e120      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002038:	4b75      	ldr	r3, [pc, #468]	@ (8002210 <HAL_RCC_OscConfig+0x4d0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x31a>
 800204c:	4b6f      	ldr	r3, [pc, #444]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002050:	4a6e      	ldr	r2, [pc, #440]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6713      	str	r3, [r2, #112]	@ 0x70
 8002058:	e02d      	b.n	80020b6 <HAL_RCC_OscConfig+0x376>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x33c>
 8002062:	4b6a      	ldr	r3, [pc, #424]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002066:	4a69      	ldr	r2, [pc, #420]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6713      	str	r3, [r2, #112]	@ 0x70
 800206e:	4b67      	ldr	r3, [pc, #412]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002072:	4a66      	ldr	r2, [pc, #408]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6713      	str	r3, [r2, #112]	@ 0x70
 800207a:	e01c      	b.n	80020b6 <HAL_RCC_OscConfig+0x376>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x35e>
 8002084:	4b61      	ldr	r3, [pc, #388]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002088:	4a60      	ldr	r2, [pc, #384]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002090:	4b5e      	ldr	r3, [pc, #376]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002094:	4a5d      	ldr	r2, [pc, #372]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6713      	str	r3, [r2, #112]	@ 0x70
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x376>
 800209e:	4b5b      	ldr	r3, [pc, #364]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a2:	4a5a      	ldr	r2, [pc, #360]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020aa:	4b58      	ldr	r3, [pc, #352]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ae:	4a57      	ldr	r2, [pc, #348]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d015      	beq.n	80020ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020be:	f7ff faa9 	bl	8001614 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7ff faa5 	bl	8001614 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0ce      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020dc:	4b4b      	ldr	r3, [pc, #300]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ee      	beq.n	80020c6 <HAL_RCC_OscConfig+0x386>
 80020e8:	e014      	b.n	8002114 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ea:	f7ff fa93 	bl	8001614 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7ff fa8f 	bl	8001614 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e0b8      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002108:	4b40      	ldr	r3, [pc, #256]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ee      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4b3c      	ldr	r3, [pc, #240]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	4a3b      	ldr	r2, [pc, #236]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 80a4 	beq.w	8002278 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002130:	4b36      	ldr	r3, [pc, #216]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d06b      	beq.n	8002214 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d149      	bne.n	80021d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b31      	ldr	r3, [pc, #196]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a30      	ldr	r2, [pc, #192]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 800214a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800214e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff fa60 	bl	8001614 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff fa5c 	bl	8001614 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e087      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	4b28      	ldr	r3, [pc, #160]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69da      	ldr	r2, [r3, #28]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	019b      	lsls	r3, r3, #6
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	3b01      	subs	r3, #1
 8002190:	041b      	lsls	r3, r3, #16
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002198:	061b      	lsls	r3, r3, #24
 800219a:	4313      	orrs	r3, r2
 800219c:	4a1b      	ldr	r2, [pc, #108]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 800219e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a18      	ldr	r2, [pc, #96]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 80021aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7ff fa30 	bl	8001614 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff fa2c 	bl	8001614 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e057      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x478>
 80021d6:	e04f      	b.n	8002278 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0b      	ldr	r2, [pc, #44]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 80021de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7ff fa16 	bl	8001614 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7ff fa12 	bl	8001614 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e03d      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	4b03      	ldr	r3, [pc, #12]	@ (800220c <HAL_RCC_OscConfig+0x4cc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x4ac>
 800220a:	e035      	b.n	8002278 <HAL_RCC_OscConfig+0x538>
 800220c:	40023800 	.word	0x40023800
 8002210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <HAL_RCC_OscConfig+0x544>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d028      	beq.n	8002274 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d121      	bne.n	8002274 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d11a      	bne.n	8002274 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002244:	4013      	ands	r3, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800224a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800224c:	4293      	cmp	r3, r2
 800224e:	d111      	bne.n	8002274 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	3b01      	subs	r3, #1
 800225e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d107      	bne.n	8002274 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800

08002288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0d0      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b6a      	ldr	r3, [pc, #424]	@ (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d910      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b67      	ldr	r3, [pc, #412]	@ (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 020f 	bic.w	r2, r3, #15
 80022b6:	4965      	ldr	r1, [pc, #404]	@ (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b63      	ldr	r3, [pc, #396]	@ (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0b8      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e8:	4b59      	ldr	r3, [pc, #356]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a58      	ldr	r2, [pc, #352]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 80022ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002300:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a52      	ldr	r2, [pc, #328]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 8002306:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800230a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	4b50      	ldr	r3, [pc, #320]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	494d      	ldr	r1, [pc, #308]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d040      	beq.n	80023ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b47      	ldr	r3, [pc, #284]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d115      	bne.n	800236a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e07f      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b41      	ldr	r3, [pc, #260]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e073      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b3d      	ldr	r3, [pc, #244]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e06b      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b39      	ldr	r3, [pc, #228]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4936      	ldr	r1, [pc, #216]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 8002378:	4313      	orrs	r3, r2
 800237a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800237c:	f7ff f94a 	bl	8001614 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7ff f946 	bl	8001614 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e053      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b2d      	ldr	r3, [pc, #180]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b27      	ldr	r3, [pc, #156]	@ (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d210      	bcs.n	80023dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b24      	ldr	r3, [pc, #144]	@ (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 020f 	bic.w	r2, r3, #15
 80023c2:	4922      	ldr	r1, [pc, #136]	@ (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b20      	ldr	r3, [pc, #128]	@ (800244c <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e032      	b.n	8002442 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4916      	ldr	r1, [pc, #88]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	490e      	ldr	r1, [pc, #56]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800241a:	f000 f821 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 800241e:	4602      	mov	r2, r0
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_RCC_ClockConfig+0x1c8>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	490a      	ldr	r1, [pc, #40]	@ (8002454 <HAL_RCC_ClockConfig+0x1cc>)
 800242c:	5ccb      	ldrb	r3, [r1, r3]
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	4a09      	ldr	r2, [pc, #36]	@ (8002458 <HAL_RCC_ClockConfig+0x1d0>)
 8002434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002436:	4b09      	ldr	r3, [pc, #36]	@ (800245c <HAL_RCC_ClockConfig+0x1d4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fe86 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023c00 	.word	0x40023c00
 8002450:	40023800 	.word	0x40023800
 8002454:	08008fd4 	.word	0x08008fd4
 8002458:	20000000 	.word	0x20000000
 800245c:	20000004 	.word	0x20000004

08002460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002464:	b090      	sub	sp, #64	@ 0x40
 8002466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	637b      	str	r3, [r7, #52]	@ 0x34
 800246c:	2300      	movs	r3, #0
 800246e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002470:	2300      	movs	r3, #0
 8002472:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002478:	4b59      	ldr	r3, [pc, #356]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b08      	cmp	r3, #8
 8002482:	d00d      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002484:	2b08      	cmp	r3, #8
 8002486:	f200 80a1 	bhi.w	80025cc <HAL_RCC_GetSysClockFreq+0x16c>
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x34>
 800248e:	2b04      	cmp	r3, #4
 8002490:	d003      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x3a>
 8002492:	e09b      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002494:	4b53      	ldr	r3, [pc, #332]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002496:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002498:	e09b      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800249a:	4b53      	ldr	r3, [pc, #332]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800249c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800249e:	e098      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a0:	4b4f      	ldr	r3, [pc, #316]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024aa:	4b4d      	ldr	r3, [pc, #308]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d028      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b6:	4b4a      	ldr	r3, [pc, #296]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	099b      	lsrs	r3, r3, #6
 80024bc:	2200      	movs	r2, #0
 80024be:	623b      	str	r3, [r7, #32]
 80024c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024c8:	2100      	movs	r1, #0
 80024ca:	4b47      	ldr	r3, [pc, #284]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80024cc:	fb03 f201 	mul.w	r2, r3, r1
 80024d0:	2300      	movs	r3, #0
 80024d2:	fb00 f303 	mul.w	r3, r0, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	4a43      	ldr	r2, [pc, #268]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80024da:	fba0 1202 	umull	r1, r2, r0, r2
 80024de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024e0:	460a      	mov	r2, r1
 80024e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80024e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024e6:	4413      	add	r3, r2
 80024e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ec:	2200      	movs	r2, #0
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	61fa      	str	r2, [r7, #28]
 80024f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024fa:	f7fd fed9 	bl	80002b0 <__aeabi_uldivmod>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4613      	mov	r3, r2
 8002504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002506:	e053      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002508:	4b35      	ldr	r3, [pc, #212]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	099b      	lsrs	r3, r3, #6
 800250e:	2200      	movs	r2, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	617a      	str	r2, [r7, #20]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800251a:	f04f 0b00 	mov.w	fp, #0
 800251e:	4652      	mov	r2, sl
 8002520:	465b      	mov	r3, fp
 8002522:	f04f 0000 	mov.w	r0, #0
 8002526:	f04f 0100 	mov.w	r1, #0
 800252a:	0159      	lsls	r1, r3, #5
 800252c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002530:	0150      	lsls	r0, r2, #5
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	ebb2 080a 	subs.w	r8, r2, sl
 800253a:	eb63 090b 	sbc.w	r9, r3, fp
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800254a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800254e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002552:	ebb2 0408 	subs.w	r4, r2, r8
 8002556:	eb63 0509 	sbc.w	r5, r3, r9
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	00eb      	lsls	r3, r5, #3
 8002564:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002568:	00e2      	lsls	r2, r4, #3
 800256a:	4614      	mov	r4, r2
 800256c:	461d      	mov	r5, r3
 800256e:	eb14 030a 	adds.w	r3, r4, sl
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	eb45 030b 	adc.w	r3, r5, fp
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002586:	4629      	mov	r1, r5
 8002588:	028b      	lsls	r3, r1, #10
 800258a:	4621      	mov	r1, r4
 800258c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002590:	4621      	mov	r1, r4
 8002592:	028a      	lsls	r2, r1, #10
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800259a:	2200      	movs	r2, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	60fa      	str	r2, [r7, #12]
 80025a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025a4:	f7fd fe84 	bl	80002b0 <__aeabi_uldivmod>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4613      	mov	r3, r2
 80025ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025b0:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	3301      	adds	r3, #1
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80025c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025ca:	e002      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025cc:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3740      	adds	r7, #64	@ 0x40
 80025d8:	46bd      	mov	sp, r7
 80025da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	00f42400 	.word	0x00f42400
 80025e8:	017d7840 	.word	0x017d7840

080025ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f0:	4b03      	ldr	r3, [pc, #12]	@ (8002600 <HAL_RCC_GetHCLKFreq+0x14>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000000 	.word	0x20000000

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002608:	f7ff fff0 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	0a9b      	lsrs	r3, r3, #10
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	@ (8002628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	08008fe4 	.word	0x08008fe4

0800262c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002630:	f7ff ffdc 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0b5b      	lsrs	r3, r3, #13
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	@ (8002650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	08008fe4 	.word	0x08008fe4

08002654 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	220f      	movs	r2, #15
 8002662:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002664:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002670:	4b0f      	ldr	r3, [pc, #60]	@ (80026b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800267c:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <HAL_RCC_GetClockConfig+0x5c>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002688:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_RCC_GetClockConfig+0x5c>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	08db      	lsrs	r3, r3, #3
 800268e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002696:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <HAL_RCC_GetClockConfig+0x60>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 020f 	and.w	r2, r3, #15
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	601a      	str	r2, [r3, #0]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40023c00 	.word	0x40023c00

080026b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d012      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026e0:	4b69      	ldr	r3, [pc, #420]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a68      	ldr	r2, [pc, #416]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026ea:	6093      	str	r3, [r2, #8]
 80026ec:	4b66      	ldr	r3, [pc, #408]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f4:	4964      	ldr	r1, [pc, #400]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d017      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002712:	4b5d      	ldr	r3, [pc, #372]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002718:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002720:	4959      	ldr	r1, [pc, #356]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002730:	d101      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800273e:	2301      	movs	r3, #1
 8002740:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d017      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800274e:	4b4e      	ldr	r3, [pc, #312]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002754:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	494a      	ldr	r1, [pc, #296]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800276c:	d101      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800276e:	2301      	movs	r3, #1
 8002770:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800278a:	2301      	movs	r3, #1
 800278c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 808b 	beq.w	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800279c:	4b3a      	ldr	r3, [pc, #232]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	4a39      	ldr	r2, [pc, #228]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a8:	4b37      	ldr	r3, [pc, #220]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027b4:	4b35      	ldr	r3, [pc, #212]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a34      	ldr	r2, [pc, #208]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c0:	f7fe ff28 	bl	8001614 <HAL_GetTick>
 80027c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c8:	f7fe ff24 	bl	8001614 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	@ 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e357      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027da:	4b2c      	ldr	r3, [pc, #176]	@ (800288c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027e6:	4b28      	ldr	r3, [pc, #160]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d035      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	429a      	cmp	r2, r3
 8002802:	d02e      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002804:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800280c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800280e:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002812:	4a1d      	ldr	r2, [pc, #116]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002818:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800281a:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281e:	4a1a      	ldr	r2, [pc, #104]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002820:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002824:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002826:	4a18      	ldr	r2, [pc, #96]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800282c:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	d114      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe feec 	bl	8001614 <HAL_GetTick>
 800283c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe fee8 	bl	8001614 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e319      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002856:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0ee      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800286a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800286e:	d111      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002870:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800287c:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800287e:	400b      	ands	r3, r1
 8002880:	4901      	ldr	r1, [pc, #4]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
 8002886:	e00b      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002888:	40023800 	.word	0x40023800
 800288c:	40007000 	.word	0x40007000
 8002890:	0ffffcff 	.word	0x0ffffcff
 8002894:	4baa      	ldr	r3, [pc, #680]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4aa9      	ldr	r2, [pc, #676]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800289a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800289e:	6093      	str	r3, [r2, #8]
 80028a0:	4ba7      	ldr	r3, [pc, #668]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ac:	49a4      	ldr	r1, [pc, #656]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d010      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028be:	4ba0      	ldr	r3, [pc, #640]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028c4:	4a9e      	ldr	r2, [pc, #632]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028ce:	4b9c      	ldr	r3, [pc, #624]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d8:	4999      	ldr	r1, [pc, #612]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ec:	4b94      	ldr	r3, [pc, #592]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028fa:	4991      	ldr	r1, [pc, #580]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800290e:	4b8c      	ldr	r3, [pc, #560]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002914:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800291c:	4988      	ldr	r1, [pc, #544]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002930:	4b83      	ldr	r3, [pc, #524]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002936:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800293e:	4980      	ldr	r1, [pc, #512]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002952:	4b7b      	ldr	r3, [pc, #492]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002958:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002960:	4977      	ldr	r1, [pc, #476]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002974:	4b72      	ldr	r3, [pc, #456]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800297a:	f023 0203 	bic.w	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	496f      	ldr	r1, [pc, #444]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002996:	4b6a      	ldr	r3, [pc, #424]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299c:	f023 020c 	bic.w	r2, r3, #12
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a4:	4966      	ldr	r1, [pc, #408]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029b8:	4b61      	ldr	r3, [pc, #388]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029be:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c6:	495e      	ldr	r1, [pc, #376]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029da:	4b59      	ldr	r3, [pc, #356]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e8:	4955      	ldr	r1, [pc, #340]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029fc:	4b50      	ldr	r3, [pc, #320]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a02:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0a:	494d      	ldr	r1, [pc, #308]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a1e:	4b48      	ldr	r3, [pc, #288]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a24:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2c:	4944      	ldr	r1, [pc, #272]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a40:	4b3f      	ldr	r3, [pc, #252]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a46:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4e:	493c      	ldr	r1, [pc, #240]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a62:	4b37      	ldr	r3, [pc, #220]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a70:	4933      	ldr	r1, [pc, #204]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a84:	4b2e      	ldr	r3, [pc, #184]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a92:	492b      	ldr	r1, [pc, #172]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d011      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002aa6:	4b26      	ldr	r3, [pc, #152]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aac:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ab4:	4922      	ldr	r1, [pc, #136]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ac0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ac4:	d101      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ae6:	4b16      	ldr	r3, [pc, #88]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af4:	4912      	ldr	r1, [pc, #72]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00b      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b08:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b18:	4909      	ldr	r1, [pc, #36]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d006      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80d9 	beq.w	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b34:	4b02      	ldr	r3, [pc, #8]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a01      	ldr	r2, [pc, #4]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b3e:	e001      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002b40:	40023800 	.word	0x40023800
 8002b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b46:	f7fe fd65 	bl	8001614 <HAL_GetTick>
 8002b4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b4e:	f7fe fd61 	bl	8001614 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b64      	cmp	r3, #100	@ 0x64
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e194      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b60:	4b6c      	ldr	r3, [pc, #432]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f0      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d021      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11d      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b80:	4b64      	ldr	r3, [pc, #400]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b86:	0c1b      	lsrs	r3, r3, #16
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b8e:	4b61      	ldr	r3, [pc, #388]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b94:	0e1b      	lsrs	r3, r3, #24
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	019a      	lsls	r2, r3, #6
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	041b      	lsls	r3, r3, #16
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	061b      	lsls	r3, r3, #24
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	071b      	lsls	r3, r3, #28
 8002bb4:	4957      	ldr	r1, [pc, #348]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d02e      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002be6:	d129      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002be8:	4b4a      	ldr	r3, [pc, #296]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bee:	0c1b      	lsrs	r3, r3, #16
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bf6:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bfc:	0f1b      	lsrs	r3, r3, #28
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	019a      	lsls	r2, r3, #6
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	431a      	orrs	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	071b      	lsls	r3, r3, #28
 8002c1c:	493d      	ldr	r1, [pc, #244]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c24:	4b3b      	ldr	r3, [pc, #236]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c2a:	f023 021f 	bic.w	r2, r3, #31
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	3b01      	subs	r3, #1
 8002c34:	4937      	ldr	r1, [pc, #220]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01d      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c48:	4b32      	ldr	r3, [pc, #200]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c4e:	0e1b      	lsrs	r3, r3, #24
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c56:	4b2f      	ldr	r3, [pc, #188]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c5c:	0f1b      	lsrs	r3, r3, #28
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	019a      	lsls	r2, r3, #6
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	041b      	lsls	r3, r3, #16
 8002c70:	431a      	orrs	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	431a      	orrs	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	071b      	lsls	r3, r3, #28
 8002c7c:	4925      	ldr	r1, [pc, #148]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d011      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	019a      	lsls	r2, r3, #6
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	041b      	lsls	r3, r3, #16
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	061b      	lsls	r3, r3, #24
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	071b      	lsls	r3, r3, #28
 8002cac:	4919      	ldr	r1, [pc, #100]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cb4:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a16      	ldr	r2, [pc, #88]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc0:	f7fe fca8 	bl	8001614 <HAL_GetTick>
 8002cc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cc8:	f7fe fca4 	bl	8001614 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e0d7      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cda:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	f040 80cd 	bne.w	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cee:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a08      	ldr	r2, [pc, #32]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfa:	f7fe fc8b 	bl	8001614 <HAL_GetTick>
 8002cfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d00:	e00a      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d02:	f7fe fc87 	bl	8001614 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	@ 0x64
 8002d0e:	d903      	bls.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e0ba      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002d14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d18:	4b5e      	ldr	r3, [pc, #376]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d24:	d0ed      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d02e      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d12a      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d4e:	4b51      	ldr	r3, [pc, #324]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d62:	0f1b      	lsrs	r3, r3, #28
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	019a      	lsls	r2, r3, #6
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	041b      	lsls	r3, r3, #16
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	061b      	lsls	r3, r3, #24
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	071b      	lsls	r3, r3, #28
 8002d82:	4944      	ldr	r1, [pc, #272]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d8a:	4b42      	ldr	r3, [pc, #264]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d90:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	493d      	ldr	r1, [pc, #244]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d022      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002db8:	d11d      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dba:	4b36      	ldr	r3, [pc, #216]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc0:	0e1b      	lsrs	r3, r3, #24
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dc8:	4b32      	ldr	r3, [pc, #200]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dce:	0f1b      	lsrs	r3, r3, #28
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	019a      	lsls	r2, r3, #6
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	041b      	lsls	r3, r3, #16
 8002de2:	431a      	orrs	r2, r3
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	061b      	lsls	r3, r3, #24
 8002de8:	431a      	orrs	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	071b      	lsls	r3, r3, #28
 8002dee:	4929      	ldr	r1, [pc, #164]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d028      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e02:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e08:	0e1b      	lsrs	r3, r3, #24
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e10:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e16:	0c1b      	lsrs	r3, r3, #16
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	019a      	lsls	r2, r3, #6
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	071b      	lsls	r3, r3, #28
 8002e36:	4917      	ldr	r1, [pc, #92]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e3e:	4b15      	ldr	r3, [pc, #84]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4c:	4911      	ldr	r1, [pc, #68]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e54:	4b0f      	ldr	r3, [pc, #60]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0e      	ldr	r2, [pc, #56]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e60:	f7fe fbd8 	bl	8001614 <HAL_GetTick>
 8002e64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e68:	f7fe fbd4 	bl	8001614 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	@ 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e007      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e7a:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e86:	d1ef      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800

08002e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e049      	b.n	8002f3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f841 	bl	8002f46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	f000 f9e8 	bl	80032ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d001      	beq.n	8002f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e054      	b.n	800301e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a26      	ldr	r2, [pc, #152]	@ (800302c <HAL_TIM_Base_Start_IT+0xd0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d022      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x80>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9e:	d01d      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x80>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a22      	ldr	r2, [pc, #136]	@ (8003030 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d018      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x80>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a21      	ldr	r2, [pc, #132]	@ (8003034 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d013      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x80>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00e      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x80>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <HAL_TIM_Base_Start_IT+0xe0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x80>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8003040 <HAL_TIM_Base_Start_IT+0xe4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0x80>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003044 <HAL_TIM_Base_Start_IT+0xe8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d115      	bne.n	8003008 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	4b19      	ldr	r3, [pc, #100]	@ (8003048 <HAL_TIM_Base_Start_IT+0xec>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d015      	beq.n	800301a <HAL_TIM_Base_Start_IT+0xbe>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff4:	d011      	beq.n	800301a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003006:	e008      	b.n	800301a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	e000      	b.n	800301c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40010000 	.word	0x40010000
 8003030:	40000400 	.word	0x40000400
 8003034:	40000800 	.word	0x40000800
 8003038:	40000c00 	.word	0x40000c00
 800303c:	40010400 	.word	0x40010400
 8003040:	40014000 	.word	0x40014000
 8003044:	40001800 	.word	0x40001800
 8003048:	00010007 	.word	0x00010007

0800304c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d020      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01b      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0202 	mvn.w	r2, #2
 8003080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f8e9 	bl	800326e <HAL_TIM_IC_CaptureCallback>
 800309c:	e005      	b.n	80030aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f8db 	bl	800325a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8ec 	bl	8003282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d020      	beq.n	80030fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01b      	beq.n	80030fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0204 	mvn.w	r2, #4
 80030cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2202      	movs	r2, #2
 80030d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f8c3 	bl	800326e <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f8b5 	bl	800325a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f8c6 	bl	8003282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d020      	beq.n	8003148 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01b      	beq.n	8003148 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0208 	mvn.w	r2, #8
 8003118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2204      	movs	r2, #4
 800311e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f89d 	bl	800326e <HAL_TIM_IC_CaptureCallback>
 8003134:	e005      	b.n	8003142 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f88f 	bl	800325a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f8a0 	bl	8003282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	d020      	beq.n	8003194 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01b      	beq.n	8003194 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0210 	mvn.w	r2, #16
 8003164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2208      	movs	r2, #8
 800316a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f877 	bl	800326e <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f869 	bl	800325a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f87a 	bl	8003282 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00c      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0201 	mvn.w	r2, #1
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fd ff8a 	bl	80010cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00c      	beq.n	80031e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80031de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f919 	bl	8003418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00c      	beq.n	800320a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f911 	bl	800342c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00c      	beq.n	800322e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f834 	bl	8003296 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00c      	beq.n	8003252 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f06f 0220 	mvn.w	r2, #32
 800324a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f8d9 	bl	8003404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a46      	ldr	r2, [pc, #280]	@ (80033d8 <TIM_Base_SetConfig+0x12c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d013      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ca:	d00f      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a43      	ldr	r2, [pc, #268]	@ (80033dc <TIM_Base_SetConfig+0x130>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00b      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a42      	ldr	r2, [pc, #264]	@ (80033e0 <TIM_Base_SetConfig+0x134>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d007      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a41      	ldr	r2, [pc, #260]	@ (80033e4 <TIM_Base_SetConfig+0x138>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a40      	ldr	r2, [pc, #256]	@ (80033e8 <TIM_Base_SetConfig+0x13c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d108      	bne.n	80032fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a35      	ldr	r2, [pc, #212]	@ (80033d8 <TIM_Base_SetConfig+0x12c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d02b      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800330c:	d027      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a32      	ldr	r2, [pc, #200]	@ (80033dc <TIM_Base_SetConfig+0x130>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d023      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a31      	ldr	r2, [pc, #196]	@ (80033e0 <TIM_Base_SetConfig+0x134>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01f      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a30      	ldr	r2, [pc, #192]	@ (80033e4 <TIM_Base_SetConfig+0x138>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01b      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a2f      	ldr	r2, [pc, #188]	@ (80033e8 <TIM_Base_SetConfig+0x13c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d017      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a2e      	ldr	r2, [pc, #184]	@ (80033ec <TIM_Base_SetConfig+0x140>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a2d      	ldr	r2, [pc, #180]	@ (80033f0 <TIM_Base_SetConfig+0x144>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00f      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a2c      	ldr	r2, [pc, #176]	@ (80033f4 <TIM_Base_SetConfig+0x148>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00b      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a2b      	ldr	r2, [pc, #172]	@ (80033f8 <TIM_Base_SetConfig+0x14c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a2a      	ldr	r2, [pc, #168]	@ (80033fc <TIM_Base_SetConfig+0x150>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a29      	ldr	r2, [pc, #164]	@ (8003400 <TIM_Base_SetConfig+0x154>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d108      	bne.n	8003370 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a10      	ldr	r2, [pc, #64]	@ (80033d8 <TIM_Base_SetConfig+0x12c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d003      	beq.n	80033a4 <TIM_Base_SetConfig+0xf8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a12      	ldr	r2, [pc, #72]	@ (80033e8 <TIM_Base_SetConfig+0x13c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d103      	bne.n	80033ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d105      	bne.n	80033ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f023 0201 	bic.w	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	611a      	str	r2, [r3, #16]
  }
}
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40010000 	.word	0x40010000
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40000800 	.word	0x40000800
 80033e4:	40000c00 	.word	0x40000c00
 80033e8:	40010400 	.word	0x40010400
 80033ec:	40014000 	.word	0x40014000
 80033f0:	40014400 	.word	0x40014400
 80033f4:	40014800 	.word	0x40014800
 80033f8:	40001800 	.word	0x40001800
 80033fc:	40001c00 	.word	0x40001c00
 8003400:	40002000 	.word	0x40002000

08003404 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e040      	b.n	80034d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fe f802 	bl	800146c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2224      	movs	r2, #36	@ 0x24
 800346c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fe4c 	bl	8004124 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fbe5 	bl	8003c5c <UART_SetConfig>
 8003492:	4603      	mov	r3, r0
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e01b      	b.n	80034d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fecb 	bl	8004268 <UART_CheckIdleState>
 80034d2:	4603      	mov	r3, r0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	@ 0x28
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d177      	bne.n	80035e4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_UART_Transmit+0x24>
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e070      	b.n	80035e6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2221      	movs	r2, #33	@ 0x21
 8003510:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003512:	f7fe f87f 	bl	8001614 <HAL_GetTick>
 8003516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	88fa      	ldrh	r2, [r7, #6]
 800351c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003530:	d108      	bne.n	8003544 <HAL_UART_Transmit+0x68>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d104      	bne.n	8003544 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	e003      	b.n	800354c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003548:	2300      	movs	r3, #0
 800354a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800354c:	e02f      	b.n	80035ae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	2180      	movs	r1, #128	@ 0x80
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fedc 	bl	8004316 <UART_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d004      	beq.n	800356e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e03b      	b.n	80035e6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003582:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	3302      	adds	r3, #2
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	e007      	b.n	800359c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3301      	adds	r3, #1
 800359a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1c9      	bne.n	800354e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2200      	movs	r2, #0
 80035c2:	2140      	movs	r1, #64	@ 0x40
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fea6 	bl	8004316 <UART_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e005      	b.n	80035e6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b08a      	sub	sp, #40	@ 0x28
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	4613      	mov	r3, r2
 80035fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003602:	2b20      	cmp	r3, #32
 8003604:	d132      	bne.n	800366c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_UART_Receive_IT+0x24>
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e02b      	b.n	800366e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d018      	beq.n	800365c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	613b      	str	r3, [r7, #16]
   return(result);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	623b      	str	r3, [r7, #32]
 800364a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	69f9      	ldr	r1, [r7, #28]
 800364e:	6a3a      	ldr	r2, [r7, #32]
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	61bb      	str	r3, [r7, #24]
   return(result);
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e6      	bne.n	800362a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	461a      	mov	r2, r3
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fec4 	bl	80043f0 <UART_Start_Receive_IT>
 8003668:	4603      	mov	r3, r0
 800366a:	e000      	b.n	800366e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3728      	adds	r7, #40	@ 0x28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b0ba      	sub	sp, #232	@ 0xe8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800369e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80036a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80036a6:	4013      	ands	r3, r2
 80036a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80036ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d115      	bne.n	80036e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80036b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00f      	beq.n	80036e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d009      	beq.n	80036e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8297 	beq.w	8003c04 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4798      	blx	r3
      }
      return;
 80036de:	e291      	b.n	8003c04 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8117 	beq.w	8003918 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80036ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80036f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80036fa:	4b85      	ldr	r3, [pc, #532]	@ (8003910 <HAL_UART_IRQHandler+0x298>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 810a 	beq.w	8003918 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d011      	beq.n	8003734 <HAL_UART_IRQHandler+0xbc>
 8003710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2201      	movs	r2, #1
 8003722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d011      	beq.n	8003764 <HAL_UART_IRQHandler+0xec>
 8003740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00b      	beq.n	8003764 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2202      	movs	r2, #2
 8003752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800375a:	f043 0204 	orr.w	r2, r3, #4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d011      	beq.n	8003794 <HAL_UART_IRQHandler+0x11c>
 8003770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2204      	movs	r2, #4
 8003782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800378a:	f043 0202 	orr.w	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d017      	beq.n	80037d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80037ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00b      	beq.n	80037d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2208      	movs	r2, #8
 80037be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c6:	f043 0208 	orr.w	r2, r3, #8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d012      	beq.n	8003802 <HAL_UART_IRQHandler+0x18a>
 80037dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037f8:	f043 0220 	orr.w	r2, r3, #32
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 81fd 	beq.w	8003c08 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800380e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800381a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800383c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384a:	2b40      	cmp	r3, #64	@ 0x40
 800384c:	d005      	beq.n	800385a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800384e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003852:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003856:	2b00      	cmp	r3, #0
 8003858:	d04f      	beq.n	80038fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fe8e 	bl	800457c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386a:	2b40      	cmp	r3, #64	@ 0x40
 800386c:	d141      	bne.n	80038f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3308      	adds	r3, #8
 8003874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800388c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3308      	adds	r3, #8
 8003896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800389a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800389e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80038a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1d9      	bne.n	800386e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d013      	beq.n	80038ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c6:	4a13      	ldr	r2, [pc, #76]	@ (8003914 <HAL_UART_IRQHandler+0x29c>)
 80038c8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fffe 	bl	80018d0 <HAL_DMA_Abort_IT>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d017      	beq.n	800390a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80038e4:	4610      	mov	r0, r2
 80038e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	e00f      	b.n	800390a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f9a0 	bl	8003c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f0:	e00b      	b.n	800390a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f99c 	bl	8003c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	e007      	b.n	800390a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f998 	bl	8003c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003908:	e17e      	b.n	8003c08 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390a:	bf00      	nop
    return;
 800390c:	e17c      	b.n	8003c08 <HAL_UART_IRQHandler+0x590>
 800390e:	bf00      	nop
 8003910:	04000120 	.word	0x04000120
 8003914:	08004645 	.word	0x08004645

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391c:	2b01      	cmp	r3, #1
 800391e:	f040 814c 	bne.w	8003bba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8145 	beq.w	8003bba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 813e 	beq.w	8003bba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2210      	movs	r2, #16
 8003944:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003950:	2b40      	cmp	r3, #64	@ 0x40
 8003952:	f040 80b6 	bne.w	8003ac2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003962:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8150 	beq.w	8003c0c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003976:	429a      	cmp	r2, r3
 8003978:	f080 8148 	bcs.w	8003c0c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003982:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003990:	f000 8086 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1da      	bne.n	8003994 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3308      	adds	r3, #8
 80039e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3308      	adds	r3, #8
 80039fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e1      	bne.n	80039de <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3308      	adds	r3, #8
 8003a20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e3      	bne.n	8003a1a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a70:	f023 0310 	bic.w	r3, r3, #16
 8003a74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e4      	bne.n	8003a60 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd fea8 	bl	80017f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8c2 	bl	8003c44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ac0:	e0a4      	b.n	8003c0c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 8096 	beq.w	8003c10 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8091 	beq.w	8003c10 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b18:	e841 2300 	strex	r3, r2, [r1]
 8003b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e4      	bne.n	8003aee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3308      	adds	r3, #8
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	623b      	str	r3, [r7, #32]
   return(result);
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3308      	adds	r3, #8
 8003b44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b48:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e3      	bne.n	8003b24 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f023 0310 	bic.w	r3, r3, #16
 8003b84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	69b9      	ldr	r1, [r7, #24]
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	617b      	str	r3, [r7, #20]
   return(result);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e4      	bne.n	8003b70 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f846 	bl	8003c44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bb8:	e02a      	b.n	8003c10 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00e      	beq.n	8003be4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d01c      	beq.n	8003c14 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
    }
    return;
 8003be2:	e017      	b.n	8003c14 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d012      	beq.n	8003c16 <HAL_UART_IRQHandler+0x59e>
 8003bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00c      	beq.n	8003c16 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fd37 	bl	8004670 <UART_EndTransmit_IT>
    return;
 8003c02:	e008      	b.n	8003c16 <HAL_UART_IRQHandler+0x59e>
      return;
 8003c04:	bf00      	nop
 8003c06:	e006      	b.n	8003c16 <HAL_UART_IRQHandler+0x59e>
    return;
 8003c08:	bf00      	nop
 8003c0a:	e004      	b.n	8003c16 <HAL_UART_IRQHandler+0x59e>
      return;
 8003c0c:	bf00      	nop
 8003c0e:	e002      	b.n	8003c16 <HAL_UART_IRQHandler+0x59e>
      return;
 8003c10:	bf00      	nop
 8003c12:	e000      	b.n	8003c16 <HAL_UART_IRQHandler+0x59e>
    return;
 8003c14:	bf00      	nop
  }

}
 8003c16:	37e8      	adds	r7, #232	@ 0xe8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4ba6      	ldr	r3, [pc, #664]	@ (8003f20 <UART_SetConfig+0x2c4>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	6979      	ldr	r1, [r7, #20]
 8003c90:	430b      	orrs	r3, r1
 8003c92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a94      	ldr	r2, [pc, #592]	@ (8003f24 <UART_SetConfig+0x2c8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d120      	bne.n	8003d1a <UART_SetConfig+0xbe>
 8003cd8:	4b93      	ldr	r3, [pc, #588]	@ (8003f28 <UART_SetConfig+0x2cc>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d816      	bhi.n	8003d14 <UART_SetConfig+0xb8>
 8003ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cec <UART_SetConfig+0x90>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003cfd 	.word	0x08003cfd
 8003cf0:	08003d09 	.word	0x08003d09
 8003cf4:	08003d03 	.word	0x08003d03
 8003cf8:	08003d0f 	.word	0x08003d0f
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e150      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003d02:	2302      	movs	r3, #2
 8003d04:	77fb      	strb	r3, [r7, #31]
 8003d06:	e14d      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	77fb      	strb	r3, [r7, #31]
 8003d0c:	e14a      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003d0e:	2308      	movs	r3, #8
 8003d10:	77fb      	strb	r3, [r7, #31]
 8003d12:	e147      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003d14:	2310      	movs	r3, #16
 8003d16:	77fb      	strb	r3, [r7, #31]
 8003d18:	e144      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a83      	ldr	r2, [pc, #524]	@ (8003f2c <UART_SetConfig+0x2d0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d132      	bne.n	8003d8a <UART_SetConfig+0x12e>
 8003d24:	4b80      	ldr	r3, [pc, #512]	@ (8003f28 <UART_SetConfig+0x2cc>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b0c      	cmp	r3, #12
 8003d30:	d828      	bhi.n	8003d84 <UART_SetConfig+0x128>
 8003d32:	a201      	add	r2, pc, #4	@ (adr r2, 8003d38 <UART_SetConfig+0xdc>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003d6d 	.word	0x08003d6d
 8003d3c:	08003d85 	.word	0x08003d85
 8003d40:	08003d85 	.word	0x08003d85
 8003d44:	08003d85 	.word	0x08003d85
 8003d48:	08003d79 	.word	0x08003d79
 8003d4c:	08003d85 	.word	0x08003d85
 8003d50:	08003d85 	.word	0x08003d85
 8003d54:	08003d85 	.word	0x08003d85
 8003d58:	08003d73 	.word	0x08003d73
 8003d5c:	08003d85 	.word	0x08003d85
 8003d60:	08003d85 	.word	0x08003d85
 8003d64:	08003d85 	.word	0x08003d85
 8003d68:	08003d7f 	.word	0x08003d7f
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	77fb      	strb	r3, [r7, #31]
 8003d70:	e118      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003d72:	2302      	movs	r3, #2
 8003d74:	77fb      	strb	r3, [r7, #31]
 8003d76:	e115      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	77fb      	strb	r3, [r7, #31]
 8003d7c:	e112      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003d7e:	2308      	movs	r3, #8
 8003d80:	77fb      	strb	r3, [r7, #31]
 8003d82:	e10f      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003d84:	2310      	movs	r3, #16
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e10c      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a68      	ldr	r2, [pc, #416]	@ (8003f30 <UART_SetConfig+0x2d4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d120      	bne.n	8003dd6 <UART_SetConfig+0x17a>
 8003d94:	4b64      	ldr	r3, [pc, #400]	@ (8003f28 <UART_SetConfig+0x2cc>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d9e:	2b30      	cmp	r3, #48	@ 0x30
 8003da0:	d013      	beq.n	8003dca <UART_SetConfig+0x16e>
 8003da2:	2b30      	cmp	r3, #48	@ 0x30
 8003da4:	d814      	bhi.n	8003dd0 <UART_SetConfig+0x174>
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d009      	beq.n	8003dbe <UART_SetConfig+0x162>
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d810      	bhi.n	8003dd0 <UART_SetConfig+0x174>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <UART_SetConfig+0x15c>
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d006      	beq.n	8003dc4 <UART_SetConfig+0x168>
 8003db6:	e00b      	b.n	8003dd0 <UART_SetConfig+0x174>
 8003db8:	2300      	movs	r3, #0
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e0f2      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e0ef      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	e0ec      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003dca:	2308      	movs	r3, #8
 8003dcc:	77fb      	strb	r3, [r7, #31]
 8003dce:	e0e9      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	77fb      	strb	r3, [r7, #31]
 8003dd4:	e0e6      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a56      	ldr	r2, [pc, #344]	@ (8003f34 <UART_SetConfig+0x2d8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d120      	bne.n	8003e22 <UART_SetConfig+0x1c6>
 8003de0:	4b51      	ldr	r3, [pc, #324]	@ (8003f28 <UART_SetConfig+0x2cc>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003dea:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dec:	d013      	beq.n	8003e16 <UART_SetConfig+0x1ba>
 8003dee:	2bc0      	cmp	r3, #192	@ 0xc0
 8003df0:	d814      	bhi.n	8003e1c <UART_SetConfig+0x1c0>
 8003df2:	2b80      	cmp	r3, #128	@ 0x80
 8003df4:	d009      	beq.n	8003e0a <UART_SetConfig+0x1ae>
 8003df6:	2b80      	cmp	r3, #128	@ 0x80
 8003df8:	d810      	bhi.n	8003e1c <UART_SetConfig+0x1c0>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <UART_SetConfig+0x1a8>
 8003dfe:	2b40      	cmp	r3, #64	@ 0x40
 8003e00:	d006      	beq.n	8003e10 <UART_SetConfig+0x1b4>
 8003e02:	e00b      	b.n	8003e1c <UART_SetConfig+0x1c0>
 8003e04:	2300      	movs	r3, #0
 8003e06:	77fb      	strb	r3, [r7, #31]
 8003e08:	e0cc      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	77fb      	strb	r3, [r7, #31]
 8003e0e:	e0c9      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003e10:	2304      	movs	r3, #4
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e0c6      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003e16:	2308      	movs	r3, #8
 8003e18:	77fb      	strb	r3, [r7, #31]
 8003e1a:	e0c3      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e0c0      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a44      	ldr	r2, [pc, #272]	@ (8003f38 <UART_SetConfig+0x2dc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d125      	bne.n	8003e78 <UART_SetConfig+0x21c>
 8003e2c:	4b3e      	ldr	r3, [pc, #248]	@ (8003f28 <UART_SetConfig+0x2cc>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e3a:	d017      	beq.n	8003e6c <UART_SetConfig+0x210>
 8003e3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e40:	d817      	bhi.n	8003e72 <UART_SetConfig+0x216>
 8003e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e46:	d00b      	beq.n	8003e60 <UART_SetConfig+0x204>
 8003e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e4c:	d811      	bhi.n	8003e72 <UART_SetConfig+0x216>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <UART_SetConfig+0x1fe>
 8003e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e56:	d006      	beq.n	8003e66 <UART_SetConfig+0x20a>
 8003e58:	e00b      	b.n	8003e72 <UART_SetConfig+0x216>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e0a1      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003e60:	2302      	movs	r3, #2
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e09e      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003e66:	2304      	movs	r3, #4
 8003e68:	77fb      	strb	r3, [r7, #31]
 8003e6a:	e09b      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003e6c:	2308      	movs	r3, #8
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e098      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003e72:	2310      	movs	r3, #16
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e095      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8003f3c <UART_SetConfig+0x2e0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d125      	bne.n	8003ece <UART_SetConfig+0x272>
 8003e82:	4b29      	ldr	r3, [pc, #164]	@ (8003f28 <UART_SetConfig+0x2cc>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e90:	d017      	beq.n	8003ec2 <UART_SetConfig+0x266>
 8003e92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e96:	d817      	bhi.n	8003ec8 <UART_SetConfig+0x26c>
 8003e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e9c:	d00b      	beq.n	8003eb6 <UART_SetConfig+0x25a>
 8003e9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ea2:	d811      	bhi.n	8003ec8 <UART_SetConfig+0x26c>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <UART_SetConfig+0x254>
 8003ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eac:	d006      	beq.n	8003ebc <UART_SetConfig+0x260>
 8003eae:	e00b      	b.n	8003ec8 <UART_SetConfig+0x26c>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e076      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e073      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e070      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e06d      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e06a      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f40 <UART_SetConfig+0x2e4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d138      	bne.n	8003f4a <UART_SetConfig+0x2ee>
 8003ed8:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <UART_SetConfig+0x2cc>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ede:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003ee2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ee6:	d017      	beq.n	8003f18 <UART_SetConfig+0x2bc>
 8003ee8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003eec:	d82a      	bhi.n	8003f44 <UART_SetConfig+0x2e8>
 8003eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ef2:	d00b      	beq.n	8003f0c <UART_SetConfig+0x2b0>
 8003ef4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ef8:	d824      	bhi.n	8003f44 <UART_SetConfig+0x2e8>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <UART_SetConfig+0x2aa>
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f02:	d006      	beq.n	8003f12 <UART_SetConfig+0x2b6>
 8003f04:	e01e      	b.n	8003f44 <UART_SetConfig+0x2e8>
 8003f06:	2300      	movs	r3, #0
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e04b      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e048      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003f12:	2304      	movs	r3, #4
 8003f14:	77fb      	strb	r3, [r7, #31]
 8003f16:	e045      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003f18:	2308      	movs	r3, #8
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e042      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003f1e:	bf00      	nop
 8003f20:	efff69f3 	.word	0xefff69f3
 8003f24:	40011000 	.word	0x40011000
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40004400 	.word	0x40004400
 8003f30:	40004800 	.word	0x40004800
 8003f34:	40004c00 	.word	0x40004c00
 8003f38:	40005000 	.word	0x40005000
 8003f3c:	40011400 	.word	0x40011400
 8003f40:	40007800 	.word	0x40007800
 8003f44:	2310      	movs	r3, #16
 8003f46:	77fb      	strb	r3, [r7, #31]
 8003f48:	e02c      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a72      	ldr	r2, [pc, #456]	@ (8004118 <UART_SetConfig+0x4bc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d125      	bne.n	8003fa0 <UART_SetConfig+0x344>
 8003f54:	4b71      	ldr	r3, [pc, #452]	@ (800411c <UART_SetConfig+0x4c0>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f5e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003f62:	d017      	beq.n	8003f94 <UART_SetConfig+0x338>
 8003f64:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003f68:	d817      	bhi.n	8003f9a <UART_SetConfig+0x33e>
 8003f6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f6e:	d00b      	beq.n	8003f88 <UART_SetConfig+0x32c>
 8003f70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f74:	d811      	bhi.n	8003f9a <UART_SetConfig+0x33e>
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <UART_SetConfig+0x326>
 8003f7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f7e:	d006      	beq.n	8003f8e <UART_SetConfig+0x332>
 8003f80:	e00b      	b.n	8003f9a <UART_SetConfig+0x33e>
 8003f82:	2300      	movs	r3, #0
 8003f84:	77fb      	strb	r3, [r7, #31]
 8003f86:	e00d      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	77fb      	strb	r3, [r7, #31]
 8003f8c:	e00a      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003f8e:	2304      	movs	r3, #4
 8003f90:	77fb      	strb	r3, [r7, #31]
 8003f92:	e007      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003f94:	2308      	movs	r3, #8
 8003f96:	77fb      	strb	r3, [r7, #31]
 8003f98:	e004      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003f9a:	2310      	movs	r3, #16
 8003f9c:	77fb      	strb	r3, [r7, #31]
 8003f9e:	e001      	b.n	8003fa4 <UART_SetConfig+0x348>
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fac:	d15b      	bne.n	8004066 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003fae:	7ffb      	ldrb	r3, [r7, #31]
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d828      	bhi.n	8004006 <UART_SetConfig+0x3aa>
 8003fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fbc <UART_SetConfig+0x360>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fe9 	.word	0x08003fe9
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08004007 	.word	0x08004007
 8003fcc:	08003ff7 	.word	0x08003ff7
 8003fd0:	08004007 	.word	0x08004007
 8003fd4:	08004007 	.word	0x08004007
 8003fd8:	08004007 	.word	0x08004007
 8003fdc:	08003fff 	.word	0x08003fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f7fe fb10 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8003fe4:	61b8      	str	r0, [r7, #24]
        break;
 8003fe6:	e013      	b.n	8004010 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe8:	f7fe fb20 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 8003fec:	61b8      	str	r0, [r7, #24]
        break;
 8003fee:	e00f      	b.n	8004010 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8004120 <UART_SetConfig+0x4c4>)
 8003ff2:	61bb      	str	r3, [r7, #24]
        break;
 8003ff4:	e00c      	b.n	8004010 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff6:	f7fe fa33 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 8003ffa:	61b8      	str	r0, [r7, #24]
        break;
 8003ffc:	e008      	b.n	8004010 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004002:	61bb      	str	r3, [r7, #24]
        break;
 8004004:	e004      	b.n	8004010 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	77bb      	strb	r3, [r7, #30]
        break;
 800400e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d074      	beq.n	8004100 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	005a      	lsls	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	441a      	add	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	fbb2 f3f3 	udiv	r3, r2, r3
 800402a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	d916      	bls.n	8004060 <UART_SetConfig+0x404>
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004038:	d212      	bcs.n	8004060 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f023 030f 	bic.w	r3, r3, #15
 8004042:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	b29b      	uxth	r3, r3
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	b29a      	uxth	r2, r3
 8004050:	89fb      	ldrh	r3, [r7, #14]
 8004052:	4313      	orrs	r3, r2
 8004054:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	89fa      	ldrh	r2, [r7, #14]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	e04f      	b.n	8004100 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	77bb      	strb	r3, [r7, #30]
 8004064:	e04c      	b.n	8004100 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004066:	7ffb      	ldrb	r3, [r7, #31]
 8004068:	2b08      	cmp	r3, #8
 800406a:	d828      	bhi.n	80040be <UART_SetConfig+0x462>
 800406c:	a201      	add	r2, pc, #4	@ (adr r2, 8004074 <UART_SetConfig+0x418>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004099 	.word	0x08004099
 8004078:	080040a1 	.word	0x080040a1
 800407c:	080040a9 	.word	0x080040a9
 8004080:	080040bf 	.word	0x080040bf
 8004084:	080040af 	.word	0x080040af
 8004088:	080040bf 	.word	0x080040bf
 800408c:	080040bf 	.word	0x080040bf
 8004090:	080040bf 	.word	0x080040bf
 8004094:	080040b7 	.word	0x080040b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004098:	f7fe fab4 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 800409c:	61b8      	str	r0, [r7, #24]
        break;
 800409e:	e013      	b.n	80040c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7fe fac4 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 80040a4:	61b8      	str	r0, [r7, #24]
        break;
 80040a6:	e00f      	b.n	80040c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <UART_SetConfig+0x4c4>)
 80040aa:	61bb      	str	r3, [r7, #24]
        break;
 80040ac:	e00c      	b.n	80040c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ae:	f7fe f9d7 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 80040b2:	61b8      	str	r0, [r7, #24]
        break;
 80040b4:	e008      	b.n	80040c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ba:	61bb      	str	r3, [r7, #24]
        break;
 80040bc:	e004      	b.n	80040c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	77bb      	strb	r3, [r7, #30]
        break;
 80040c6:	bf00      	nop
    }

    if (pclk != 0U)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d018      	beq.n	8004100 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	085a      	lsrs	r2, r3, #1
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	441a      	add	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b0f      	cmp	r3, #15
 80040e6:	d909      	bls.n	80040fc <UART_SetConfig+0x4a0>
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ee:	d205      	bcs.n	80040fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	e001      	b.n	8004100 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800410c:	7fbb      	ldrb	r3, [r7, #30]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3720      	adds	r7, #32
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40007c00 	.word	0x40007c00
 800411c:	40023800 	.word	0x40023800
 8004120:	00f42400 	.word	0x00f42400

08004124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01a      	beq.n	800423a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004222:	d10a      	bne.n	800423a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08c      	sub	sp, #48	@ 0x30
 800426c:	af02      	add	r7, sp, #8
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004278:	f7fd f9cc 	bl	8001614 <HAL_GetTick>
 800427c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b08      	cmp	r3, #8
 800428a:	d12e      	bne.n	80042ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800428c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	2200      	movs	r2, #0
 8004296:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f83b 	bl	8004316 <UART_WaitOnFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d021      	beq.n	80042ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042ba:	623b      	str	r3, [r7, #32]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	69b9      	ldr	r1, [r7, #24]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	617b      	str	r3, [r7, #20]
   return(result);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e6      	bne.n	80042a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e011      	b.n	800430e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3728      	adds	r7, #40	@ 0x28
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	4613      	mov	r3, r2
 8004324:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004326:	e04f      	b.n	80043c8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d04b      	beq.n	80043c8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004330:	f7fd f970 	bl	8001614 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	429a      	cmp	r2, r3
 800433e:	d302      	bcc.n	8004346 <UART_WaitOnFlagUntilTimeout+0x30>
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e04e      	b.n	80043e8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d037      	beq.n	80043c8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b80      	cmp	r3, #128	@ 0x80
 800435c:	d034      	beq.n	80043c8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b40      	cmp	r3, #64	@ 0x40
 8004362:	d031      	beq.n	80043c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b08      	cmp	r3, #8
 8004370:	d110      	bne.n	8004394 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2208      	movs	r2, #8
 8004378:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 f8fe 	bl	800457c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2208      	movs	r2, #8
 8004384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e029      	b.n	80043e8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800439e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043a2:	d111      	bne.n	80043c8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f8e4 	bl	800457c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e00f      	b.n	80043e8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4013      	ands	r3, r2
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d0a0      	beq.n	8004328 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b097      	sub	sp, #92	@ 0x5c
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	4613      	mov	r3, r2
 80043fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004422:	d10e      	bne.n	8004442 <UART_Start_Receive_IT+0x52>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d105      	bne.n	8004438 <UART_Start_Receive_IT+0x48>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004432:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004436:	e02d      	b.n	8004494 <UART_Start_Receive_IT+0xa4>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	22ff      	movs	r2, #255	@ 0xff
 800443c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004440:	e028      	b.n	8004494 <UART_Start_Receive_IT+0xa4>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10d      	bne.n	8004466 <UART_Start_Receive_IT+0x76>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <UART_Start_Receive_IT+0x6c>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	22ff      	movs	r2, #255	@ 0xff
 8004456:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800445a:	e01b      	b.n	8004494 <UART_Start_Receive_IT+0xa4>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	227f      	movs	r2, #127	@ 0x7f
 8004460:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004464:	e016      	b.n	8004494 <UART_Start_Receive_IT+0xa4>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800446e:	d10d      	bne.n	800448c <UART_Start_Receive_IT+0x9c>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d104      	bne.n	8004482 <UART_Start_Receive_IT+0x92>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	227f      	movs	r2, #127	@ 0x7f
 800447c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004480:	e008      	b.n	8004494 <UART_Start_Receive_IT+0xa4>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	223f      	movs	r2, #63	@ 0x3f
 8004486:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800448a:	e003      	b.n	8004494 <UART_Start_Receive_IT+0xa4>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2222      	movs	r2, #34	@ 0x22
 80044a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3308      	adds	r3, #8
 80044aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3308      	adds	r3, #8
 80044c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80044c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80044c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80044ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80044d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e5      	bne.n	80044a4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044e0:	d107      	bne.n	80044f2 <UART_Start_Receive_IT+0x102>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d103      	bne.n	80044f2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4a21      	ldr	r2, [pc, #132]	@ (8004574 <UART_Start_Receive_IT+0x184>)
 80044ee:	669a      	str	r2, [r3, #104]	@ 0x68
 80044f0:	e002      	b.n	80044f8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4a20      	ldr	r2, [pc, #128]	@ (8004578 <UART_Start_Receive_IT+0x188>)
 80044f6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d019      	beq.n	8004534 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004514:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800451e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004520:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004524:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800452c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e6      	bne.n	8004500 <UART_Start_Receive_IT+0x110>
 8004532:	e018      	b.n	8004566 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	613b      	str	r3, [r7, #16]
   return(result);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f043 0320 	orr.w	r3, r3, #32
 8004548:	653b      	str	r3, [r7, #80]	@ 0x50
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004552:	623b      	str	r3, [r7, #32]
 8004554:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	69f9      	ldr	r1, [r7, #28]
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e6      	bne.n	8004534 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	375c      	adds	r7, #92	@ 0x5c
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	0800486d 	.word	0x0800486d
 8004578:	080046c5 	.word	0x080046c5

0800457c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b095      	sub	sp, #84	@ 0x54
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004598:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80045a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e6      	bne.n	8004584 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3308      	adds	r3, #8
 80045bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3308      	adds	r3, #8
 80045d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e5      	bne.n	80045b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d118      	bne.n	8004624 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f023 0310 	bic.w	r3, r3, #16
 8004606:	647b      	str	r3, [r7, #68]	@ 0x44
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6979      	ldr	r1, [r7, #20]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	613b      	str	r3, [r7, #16]
   return(result);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e6      	bne.n	80045f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004638:	bf00      	nop
 800463a:	3754      	adds	r7, #84	@ 0x54
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004650:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff fae4 	bl	8003c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	60bb      	str	r3, [r7, #8]
   return(result);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	61bb      	str	r3, [r7, #24]
 8004698:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469a:	6979      	ldr	r1, [r7, #20]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	e841 2300 	strex	r3, r2, [r1]
 80046a2:	613b      	str	r3, [r7, #16]
   return(result);
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1e6      	bne.n	8004678 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2220      	movs	r2, #32
 80046ae:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff fab0 	bl	8003c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046bc:	bf00      	nop
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b09c      	sub	sp, #112	@ 0x70
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80046d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046dc:	2b22      	cmp	r3, #34	@ 0x22
 80046de:	f040 80b9 	bne.w	8004854 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046f0:	b2d9      	uxtb	r1, r3
 80046f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fc:	400a      	ands	r2, r1
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	f040 809c 	bne.w	8004864 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800473a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800473c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800474a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800474c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004750:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e6      	bne.n	800472c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3308      	adds	r3, #8
 8004764:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800476e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	667b      	str	r3, [r7, #100]	@ 0x64
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3308      	adds	r3, #8
 800477c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800477e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004780:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004784:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800478c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e5      	bne.n	800475e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d018      	beq.n	80047e6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	623b      	str	r3, [r7, #32]
   return(result);
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80047d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e6      	bne.n	80047b4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d12e      	bne.n	800484c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	60fb      	str	r3, [r7, #12]
   return(result);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f023 0310 	bic.w	r3, r3, #16
 8004808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	69b9      	ldr	r1, [r7, #24]
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	617b      	str	r3, [r7, #20]
   return(result);
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e6      	bne.n	80047f4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b10      	cmp	r3, #16
 8004832:	d103      	bne.n	800483c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2210      	movs	r2, #16
 800483a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff f9fd 	bl	8003c44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800484a:	e00b      	b.n	8004864 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f002 fed7 	bl	8007600 <HAL_UART_RxCpltCallback>
}
 8004852:	e007      	b.n	8004864 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0208 	orr.w	r2, r2, #8
 8004862:	619a      	str	r2, [r3, #24]
}
 8004864:	bf00      	nop
 8004866:	3770      	adds	r7, #112	@ 0x70
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b09c      	sub	sp, #112	@ 0x70
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800487a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004884:	2b22      	cmp	r3, #34	@ 0x22
 8004886:	f040 80b9 	bne.w	80049fc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004898:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800489a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800489e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80048a2:	4013      	ands	r3, r2
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ae:	1c9a      	adds	r2, r3, #2
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f040 809c 	bne.w	8004a0c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80048e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80048f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80048f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e6      	bne.n	80048d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3308      	adds	r3, #8
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	663b      	str	r3, [r7, #96]	@ 0x60
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3308      	adds	r3, #8
 8004924:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004926:	643a      	str	r2, [r7, #64]	@ 0x40
 8004928:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800492c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e5      	bne.n	8004906 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d018      	beq.n	800498e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	61fb      	str	r3, [r7, #28]
   return(result);
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004970:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800497a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800497c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e6      	bne.n	800495c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004992:	2b01      	cmp	r3, #1
 8004994:	d12e      	bne.n	80049f4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	e853 3f00 	ldrex	r3, [r3]
 80049a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f023 0310 	bic.w	r3, r3, #16
 80049b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049ba:	61bb      	str	r3, [r7, #24]
 80049bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6979      	ldr	r1, [r7, #20]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	613b      	str	r3, [r7, #16]
   return(result);
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e6      	bne.n	800499c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d103      	bne.n	80049e4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2210      	movs	r2, #16
 80049e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80049ea:	4619      	mov	r1, r3
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff f929 	bl	8003c44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049f2:	e00b      	b.n	8004a0c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f002 fe03 	bl	8007600 <HAL_UART_RxCpltCallback>
}
 80049fa:	e007      	b.n	8004a0c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0208 	orr.w	r2, r2, #8
 8004a0a:	619a      	str	r2, [r3, #24]
}
 8004a0c:	bf00      	nop
 8004a0e:	3770      	adds	r7, #112	@ 0x70
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a07      	ldr	r2, [pc, #28]	@ (8004a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4a06      	ldr	r2, [pc, #24]	@ (8004a44 <vApplicationGetIdleTaskMemory+0x30>)
 8004a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2280      	movs	r2, #128	@ 0x80
 8004a30:	601a      	str	r2, [r3, #0]
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	200004c8 	.word	0x200004c8
 8004a44:	20000570 	.word	0x20000570

08004a48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4a07      	ldr	r2, [pc, #28]	@ (8004a74 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4a06      	ldr	r2, [pc, #24]	@ (8004a78 <vApplicationGetTimerTaskMemory+0x30>)
 8004a5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a66:	601a      	str	r2, [r3, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	20000770 	.word	0x20000770
 8004a78:	20000818 	.word	0x20000818

08004a7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f103 0208 	add.w	r2, r3, #8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295
 8004a94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f103 0208 	add.w	r2, r3, #8
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f103 0208 	add.w	r2, r3, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b34:	d103      	bne.n	8004b3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e00c      	b.n	8004b58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3308      	adds	r3, #8
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	e002      	b.n	8004b4c <vListInsert+0x2e>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d2f6      	bcs.n	8004b46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	601a      	str	r2, [r3, #0]
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6892      	ldr	r2, [r2, #8]
 8004ba6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6852      	ldr	r2, [r2, #4]
 8004bb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d103      	bne.n	8004bc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1e5a      	subs	r2, r3, #1
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10d      	bne.n	8004c14 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfc:	b672      	cpsid	i
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	b662      	cpsie	i
 8004c0c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c0e:	bf00      	nop
 8004c10:	bf00      	nop
 8004c12:	e7fd      	b.n	8004c10 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004c14:	f002 f992 	bl	8006f3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c20:	68f9      	ldr	r1, [r7, #12]
 8004c22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	441a      	add	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c44:	3b01      	subs	r3, #1
 8004c46:	68f9      	ldr	r1, [r7, #12]
 8004c48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c4a:	fb01 f303 	mul.w	r3, r1, r3
 8004c4e:	441a      	add	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	22ff      	movs	r2, #255	@ 0xff
 8004c58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	22ff      	movs	r2, #255	@ 0xff
 8004c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d114      	bne.n	8004c94 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01a      	beq.n	8004ca8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3310      	adds	r3, #16
 8004c76:	4618      	mov	r0, r3
 8004c78:	f001 f940 	bl	8005efc <xTaskRemoveFromEventList>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d012      	beq.n	8004ca8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c82:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb8 <xQueueGenericReset+0xd4>)
 8004c84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	e009      	b.n	8004ca8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3310      	adds	r3, #16
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff feef 	bl	8004a7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3324      	adds	r3, #36	@ 0x24
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff feea 	bl	8004a7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ca8:	f002 f97e 	bl	8006fa8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004cac:	2301      	movs	r3, #1
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08e      	sub	sp, #56	@ 0x38
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10d      	bne.n	8004cec <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd4:	b672      	cpsid	i
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	b662      	cpsie	i
 8004ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ce6:	bf00      	nop
 8004ce8:	bf00      	nop
 8004cea:	e7fd      	b.n	8004ce8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10d      	bne.n	8004d0e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	b672      	cpsid	i
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	b662      	cpsie	i
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	e7fd      	b.n	8004d0a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <xQueueGenericCreateStatic+0x5e>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <xQueueGenericCreateStatic+0x62>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <xQueueGenericCreateStatic+0x64>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10d      	bne.n	8004d40 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d28:	b672      	cpsid	i
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	b662      	cpsie	i
 8004d38:	623b      	str	r3, [r7, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	bf00      	nop
 8004d3e:	e7fd      	b.n	8004d3c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <xQueueGenericCreateStatic+0x90>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <xQueueGenericCreateStatic+0x94>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <xQueueGenericCreateStatic+0x96>
 8004d50:	2300      	movs	r3, #0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10d      	bne.n	8004d72 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5a:	b672      	cpsid	i
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	b662      	cpsie	i
 8004d6a:	61fb      	str	r3, [r7, #28]
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d72:	2350      	movs	r3, #80	@ 0x50
 8004d74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b50      	cmp	r3, #80	@ 0x50
 8004d7a:	d00d      	beq.n	8004d98 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d80:	b672      	cpsid	i
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	b662      	cpsie	i
 8004d90:	61bb      	str	r3, [r7, #24]
}
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00d      	beq.n	8004dc0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f805 	bl	8004dca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3730      	adds	r7, #48	@ 0x30
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	607a      	str	r2, [r7, #4]
 8004dd6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d103      	bne.n	8004de6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e002      	b.n	8004dec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004df8:	2101      	movs	r1, #1
 8004dfa:	69b8      	ldr	r0, [r7, #24]
 8004dfc:	f7ff fef2 	bl	8004be4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08e      	sub	sp, #56	@ 0x38
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10d      	bne.n	8004e48 <xQueueGenericSend+0x38>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	b672      	cpsid	i
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	b662      	cpsie	i
 8004e40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e42:	bf00      	nop
 8004e44:	bf00      	nop
 8004e46:	e7fd      	b.n	8004e44 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d103      	bne.n	8004e56 <xQueueGenericSend+0x46>
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <xQueueGenericSend+0x4a>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <xQueueGenericSend+0x4c>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10d      	bne.n	8004e7c <xQueueGenericSend+0x6c>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e64:	b672      	cpsid	i
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	b662      	cpsie	i
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e76:	bf00      	nop
 8004e78:	bf00      	nop
 8004e7a:	e7fd      	b.n	8004e78 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d103      	bne.n	8004e8a <xQueueGenericSend+0x7a>
 8004e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <xQueueGenericSend+0x7e>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <xQueueGenericSend+0x80>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10d      	bne.n	8004eb0 <xQueueGenericSend+0xa0>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e98:	b672      	cpsid	i
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	b662      	cpsie	i
 8004ea8:	623b      	str	r3, [r7, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	e7fd      	b.n	8004eac <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eb0:	f001 fa02 	bl	80062b8 <xTaskGetSchedulerState>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <xQueueGenericSend+0xb0>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <xQueueGenericSend+0xb4>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <xQueueGenericSend+0xb6>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10d      	bne.n	8004ee6 <xQueueGenericSend+0xd6>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ece:	b672      	cpsid	i
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	b662      	cpsie	i
 8004ede:	61fb      	str	r3, [r7, #28]
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	e7fd      	b.n	8004ee2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ee6:	f002 f829 	bl	8006f3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d302      	bcc.n	8004efc <xQueueGenericSend+0xec>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d129      	bne.n	8004f50 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f02:	f000 fa1b 	bl	800533c <prvCopyDataToQueue>
 8004f06:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d010      	beq.n	8004f32 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f12:	3324      	adds	r3, #36	@ 0x24
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fff1 	bl	8005efc <xTaskRemoveFromEventList>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d013      	beq.n	8004f48 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f20:	4b3f      	ldr	r3, [pc, #252]	@ (8005020 <xQueueGenericSend+0x210>)
 8004f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	e00a      	b.n	8004f48 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f38:	4b39      	ldr	r3, [pc, #228]	@ (8005020 <xQueueGenericSend+0x210>)
 8004f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f48:	f002 f82e 	bl	8006fa8 <vPortExitCritical>
				return pdPASS;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e063      	b.n	8005018 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f56:	f002 f827 	bl	8006fa8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e05c      	b.n	8005018 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d106      	bne.n	8004f72 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f64:	f107 0314 	add.w	r3, r7, #20
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f001 f82d 	bl	8005fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f72:	f002 f819 	bl	8006fa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f76:	f000 fd89 	bl	8005a8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f7a:	f001 ffdf 	bl	8006f3c <vPortEnterCritical>
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f84:	b25b      	sxtb	r3, r3
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d103      	bne.n	8004f94 <xQueueGenericSend+0x184>
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d103      	bne.n	8004faa <xQueueGenericSend+0x19a>
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004faa:	f001 fffd 	bl	8006fa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fae:	1d3a      	adds	r2, r7, #4
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f001 f81c 	bl	8005ff4 <xTaskCheckForTimeOut>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d124      	bne.n	800500c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004fc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fc4:	f000 fab2 	bl	800552c <prvIsQueueFull>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d018      	beq.n	8005000 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	3310      	adds	r3, #16
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 ff3a 	bl	8005e50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004fdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fde:	f000 fa3d 	bl	800545c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004fe2:	f000 fd61 	bl	8005aa8 <xTaskResumeAll>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f47f af7c 	bne.w	8004ee6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8004fee:	4b0c      	ldr	r3, [pc, #48]	@ (8005020 <xQueueGenericSend+0x210>)
 8004ff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	e772      	b.n	8004ee6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005000:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005002:	f000 fa2b 	bl	800545c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005006:	f000 fd4f 	bl	8005aa8 <xTaskResumeAll>
 800500a:	e76c      	b.n	8004ee6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800500c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800500e:	f000 fa25 	bl	800545c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005012:	f000 fd49 	bl	8005aa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005016:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005018:	4618      	mov	r0, r3
 800501a:	3738      	adds	r7, #56	@ 0x38
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	e000ed04 	.word	0xe000ed04

08005024 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08e      	sub	sp, #56	@ 0x38
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10d      	bne.n	8005058 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005040:	b672      	cpsid	i
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	b662      	cpsie	i
 8005050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d103      	bne.n	8005066 <xQueueGenericSendFromISR+0x42>
 800505e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <xQueueGenericSendFromISR+0x46>
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <xQueueGenericSendFromISR+0x48>
 800506a:	2300      	movs	r3, #0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10d      	bne.n	800508c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005074:	b672      	cpsid	i
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	b662      	cpsie	i
 8005084:	623b      	str	r3, [r7, #32]
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	e7fd      	b.n	8005088 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d103      	bne.n	800509a <xQueueGenericSendFromISR+0x76>
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <xQueueGenericSendFromISR+0x7a>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <xQueueGenericSendFromISR+0x7c>
 800509e:	2300      	movs	r3, #0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10d      	bne.n	80050c0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a8:	b672      	cpsid	i
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	b662      	cpsie	i
 80050b8:	61fb      	str	r3, [r7, #28]
}
 80050ba:	bf00      	nop
 80050bc:	bf00      	nop
 80050be:	e7fd      	b.n	80050bc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050c0:	f002 f824 	bl	800710c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050c4:	f3ef 8211 	mrs	r2, BASEPRI
 80050c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050cc:	b672      	cpsid	i
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	b662      	cpsie	i
 80050dc:	61ba      	str	r2, [r7, #24]
 80050de:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80050e0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d302      	bcc.n	80050f6 <xQueueGenericSendFromISR+0xd2>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d12c      	bne.n	8005150 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005106:	f000 f919 	bl	800533c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800510a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005112:	d112      	bne.n	800513a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005118:	2b00      	cmp	r3, #0
 800511a:	d016      	beq.n	800514a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800511c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511e:	3324      	adds	r3, #36	@ 0x24
 8005120:	4618      	mov	r0, r3
 8005122:	f000 feeb 	bl	8005efc <xTaskRemoveFromEventList>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00e      	beq.n	800514a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00b      	beq.n	800514a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	e007      	b.n	800514a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800513a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800513e:	3301      	adds	r3, #1
 8005140:	b2db      	uxtb	r3, r3
 8005142:	b25a      	sxtb	r2, r3
 8005144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005146:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800514a:	2301      	movs	r3, #1
 800514c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800514e:	e001      	b.n	8005154 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005150:	2300      	movs	r3, #0
 8005152:	637b      	str	r3, [r7, #52]	@ 0x34
 8005154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005156:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800515e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005162:	4618      	mov	r0, r3
 8005164:	3738      	adds	r7, #56	@ 0x38
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08c      	sub	sp, #48	@ 0x30
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005178:	2300      	movs	r3, #0
 800517a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <xQueueReceive+0x36>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518a:	b672      	cpsid	i
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	b662      	cpsie	i
 800519a:	623b      	str	r3, [r7, #32]
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	e7fd      	b.n	800519e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d103      	bne.n	80051b0 <xQueueReceive+0x44>
 80051a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <xQueueReceive+0x48>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <xQueueReceive+0x4a>
 80051b4:	2300      	movs	r3, #0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10d      	bne.n	80051d6 <xQueueReceive+0x6a>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051be:	b672      	cpsid	i
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	b662      	cpsie	i
 80051ce:	61fb      	str	r3, [r7, #28]
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	e7fd      	b.n	80051d2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051d6:	f001 f86f 	bl	80062b8 <xTaskGetSchedulerState>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d102      	bne.n	80051e6 <xQueueReceive+0x7a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <xQueueReceive+0x7e>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <xQueueReceive+0x80>
 80051ea:	2300      	movs	r3, #0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10d      	bne.n	800520c <xQueueReceive+0xa0>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	b672      	cpsid	i
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	b662      	cpsie	i
 8005204:	61bb      	str	r3, [r7, #24]
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800520c:	f001 fe96 	bl	8006f3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005214:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01f      	beq.n	800525c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005220:	f000 f8f6 	bl	8005410 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005226:	1e5a      	subs	r2, r3, #1
 8005228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00f      	beq.n	8005254 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005236:	3310      	adds	r3, #16
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fe5f 	bl	8005efc <xTaskRemoveFromEventList>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d007      	beq.n	8005254 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005244:	4b3c      	ldr	r3, [pc, #240]	@ (8005338 <xQueueReceive+0x1cc>)
 8005246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005254:	f001 fea8 	bl	8006fa8 <vPortExitCritical>
				return pdPASS;
 8005258:	2301      	movs	r3, #1
 800525a:	e069      	b.n	8005330 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005262:	f001 fea1 	bl	8006fa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005266:	2300      	movs	r3, #0
 8005268:	e062      	b.n	8005330 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800526a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d106      	bne.n	800527e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005270:	f107 0310 	add.w	r3, r7, #16
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fea7 	bl	8005fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800527a:	2301      	movs	r3, #1
 800527c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800527e:	f001 fe93 	bl	8006fa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005282:	f000 fc03 	bl	8005a8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005286:	f001 fe59 	bl	8006f3c <vPortEnterCritical>
 800528a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005290:	b25b      	sxtb	r3, r3
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d103      	bne.n	80052a0 <xQueueReceive+0x134>
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052a6:	b25b      	sxtb	r3, r3
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ac:	d103      	bne.n	80052b6 <xQueueReceive+0x14a>
 80052ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052b6:	f001 fe77 	bl	8006fa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052ba:	1d3a      	adds	r2, r7, #4
 80052bc:	f107 0310 	add.w	r3, r7, #16
 80052c0:	4611      	mov	r1, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fe96 	bl	8005ff4 <xTaskCheckForTimeOut>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d123      	bne.n	8005316 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052d0:	f000 f916 	bl	8005500 <prvIsQueueEmpty>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d017      	beq.n	800530a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052dc:	3324      	adds	r3, #36	@ 0x24
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fdb4 	bl	8005e50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052ea:	f000 f8b7 	bl	800545c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052ee:	f000 fbdb 	bl	8005aa8 <xTaskResumeAll>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d189      	bne.n	800520c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80052f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005338 <xQueueReceive+0x1cc>)
 80052fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	e780      	b.n	800520c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800530a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800530c:	f000 f8a6 	bl	800545c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005310:	f000 fbca 	bl	8005aa8 <xTaskResumeAll>
 8005314:	e77a      	b.n	800520c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005316:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005318:	f000 f8a0 	bl	800545c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800531c:	f000 fbc4 	bl	8005aa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005320:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005322:	f000 f8ed 	bl	8005500 <prvIsQueueEmpty>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	f43f af6f 	beq.w	800520c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800532e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005330:	4618      	mov	r0, r3
 8005332:	3730      	adds	r7, #48	@ 0x30
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	e000ed04 	.word	0xe000ed04

0800533c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005350:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10d      	bne.n	8005376 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d14d      	bne.n	80053fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	4618      	mov	r0, r3
 8005368:	f000 ffc4 	bl	80062f4 <xTaskPriorityDisinherit>
 800536c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	609a      	str	r2, [r3, #8]
 8005374:	e043      	b.n	80053fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d119      	bne.n	80053b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6858      	ldr	r0, [r3, #4]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005384:	461a      	mov	r2, r3
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	f002 fea3 	bl	80080d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005394:	441a      	add	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d32b      	bcc.n	80053fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	e026      	b.n	80053fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68d8      	ldr	r0, [r3, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b8:	461a      	mov	r2, r3
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	f002 fe89 	bl	80080d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c8:	425b      	negs	r3, r3
 80053ca:	441a      	add	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d207      	bcs.n	80053ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e4:	425b      	negs	r3, r3
 80053e6:	441a      	add	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d105      	bne.n	80053fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005406:	697b      	ldr	r3, [r7, #20]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d018      	beq.n	8005454 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542a:	441a      	add	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	429a      	cmp	r2, r3
 800543a:	d303      	bcc.n	8005444 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68d9      	ldr	r1, [r3, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544c:	461a      	mov	r2, r3
 800544e:	6838      	ldr	r0, [r7, #0]
 8005450:	f002 fe3f 	bl	80080d2 <memcpy>
	}
}
 8005454:	bf00      	nop
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005464:	f001 fd6a 	bl	8006f3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800546e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005470:	e011      	b.n	8005496 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005476:	2b00      	cmp	r3, #0
 8005478:	d012      	beq.n	80054a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3324      	adds	r3, #36	@ 0x24
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fd3c 	bl	8005efc <xTaskRemoveFromEventList>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800548a:	f000 fe1b 	bl	80060c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800548e:	7bfb      	ldrb	r3, [r7, #15]
 8005490:	3b01      	subs	r3, #1
 8005492:	b2db      	uxtb	r3, r3
 8005494:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800549a:	2b00      	cmp	r3, #0
 800549c:	dce9      	bgt.n	8005472 <prvUnlockQueue+0x16>
 800549e:	e000      	b.n	80054a2 <prvUnlockQueue+0x46>
					break;
 80054a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	22ff      	movs	r2, #255	@ 0xff
 80054a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80054aa:	f001 fd7d 	bl	8006fa8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054ae:	f001 fd45 	bl	8006f3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054ba:	e011      	b.n	80054e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d012      	beq.n	80054ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3310      	adds	r3, #16
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fd17 	bl	8005efc <xTaskRemoveFromEventList>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80054d4:	f000 fdf6 	bl	80060c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80054d8:	7bbb      	ldrb	r3, [r7, #14]
 80054da:	3b01      	subs	r3, #1
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	dce9      	bgt.n	80054bc <prvUnlockQueue+0x60>
 80054e8:	e000      	b.n	80054ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80054ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	22ff      	movs	r2, #255	@ 0xff
 80054f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80054f4:	f001 fd58 	bl	8006fa8 <vPortExitCritical>
}
 80054f8:	bf00      	nop
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005508:	f001 fd18 	bl	8006f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	e001      	b.n	800551e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800551e:	f001 fd43 	bl	8006fa8 <vPortExitCritical>

	return xReturn;
 8005522:	68fb      	ldr	r3, [r7, #12]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005534:	f001 fd02 	bl	8006f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005540:	429a      	cmp	r2, r3
 8005542:	d102      	bne.n	800554a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005544:	2301      	movs	r3, #1
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	e001      	b.n	800554e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800554e:	f001 fd2b 	bl	8006fa8 <vPortExitCritical>

	return xReturn;
 8005552:	68fb      	ldr	r3, [r7, #12]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	e014      	b.n	8005596 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800556c:	4a0f      	ldr	r2, [pc, #60]	@ (80055ac <vQueueAddToRegistry+0x50>)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10b      	bne.n	8005590 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005578:	490c      	ldr	r1, [pc, #48]	@ (80055ac <vQueueAddToRegistry+0x50>)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005582:	4a0a      	ldr	r2, [pc, #40]	@ (80055ac <vQueueAddToRegistry+0x50>)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4413      	add	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800558e:	e006      	b.n	800559e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3301      	adds	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b07      	cmp	r3, #7
 800559a:	d9e7      	bls.n	800556c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800559c:	bf00      	nop
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	20000c18 	.word	0x20000c18

080055b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80055c0:	f001 fcbc 	bl	8006f3c <vPortEnterCritical>
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055ca:	b25b      	sxtb	r3, r3
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d103      	bne.n	80055da <vQueueWaitForMessageRestricted+0x2a>
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055e0:	b25b      	sxtb	r3, r3
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e6:	d103      	bne.n	80055f0 <vQueueWaitForMessageRestricted+0x40>
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055f0:	f001 fcda 	bl	8006fa8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d106      	bne.n	800560a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3324      	adds	r3, #36	@ 0x24
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fc4b 	bl	8005ea0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800560a:	6978      	ldr	r0, [r7, #20]
 800560c:	f7ff ff26 	bl	800545c <prvUnlockQueue>
	}
 8005610:	bf00      	nop
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08e      	sub	sp, #56	@ 0x38
 800561c:	af04      	add	r7, sp, #16
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10d      	bne.n	8005648 <xTaskCreateStatic+0x30>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005630:	b672      	cpsid	i
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	b662      	cpsie	i
 8005640:	623b      	str	r3, [r7, #32]
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	e7fd      	b.n	8005644 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10d      	bne.n	800566a <xTaskCreateStatic+0x52>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005652:	b672      	cpsid	i
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	b662      	cpsie	i
 8005662:	61fb      	str	r3, [r7, #28]
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800566a:	23a8      	movs	r3, #168	@ 0xa8
 800566c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2ba8      	cmp	r3, #168	@ 0xa8
 8005672:	d00d      	beq.n	8005690 <xTaskCreateStatic+0x78>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005678:	b672      	cpsid	i
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	b662      	cpsie	i
 8005688:	61bb      	str	r3, [r7, #24]
}
 800568a:	bf00      	nop
 800568c:	bf00      	nop
 800568e:	e7fd      	b.n	800568c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005690:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01e      	beq.n	80056d6 <xTaskCreateStatic+0xbe>
 8005698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01b      	beq.n	80056d6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056b0:	2300      	movs	r3, #0
 80056b2:	9303      	str	r3, [sp, #12]
 80056b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b6:	9302      	str	r3, [sp, #8]
 80056b8:	f107 0314 	add.w	r3, r7, #20
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f851 	bl	8005770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056d0:	f000 f8f8 	bl	80058c4 <prvAddNewTaskToReadyList>
 80056d4:	e001      	b.n	80056da <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056da:	697b      	ldr	r3, [r7, #20]
	}
 80056dc:	4618      	mov	r0, r3
 80056de:	3728      	adds	r7, #40	@ 0x28
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08c      	sub	sp, #48	@ 0x30
 80056e8:	af04      	add	r7, sp, #16
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	4613      	mov	r3, r2
 80056f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056f4:	88fb      	ldrh	r3, [r7, #6]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 fd4d 	bl	8007198 <pvPortMalloc>
 80056fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00e      	beq.n	8005724 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005706:	20a8      	movs	r0, #168	@ 0xa8
 8005708:	f001 fd46 	bl	8007198 <pvPortMalloc>
 800570c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	631a      	str	r2, [r3, #48]	@ 0x30
 800571a:	e005      	b.n	8005728 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800571c:	6978      	ldr	r0, [r7, #20]
 800571e:	f001 fe09 	bl	8007334 <vPortFree>
 8005722:	e001      	b.n	8005728 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d017      	beq.n	800575e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005736:	88fa      	ldrh	r2, [r7, #6]
 8005738:	2300      	movs	r3, #0
 800573a:	9303      	str	r3, [sp, #12]
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	9302      	str	r3, [sp, #8]
 8005740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 f80f 	bl	8005770 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005752:	69f8      	ldr	r0, [r7, #28]
 8005754:	f000 f8b6 	bl	80058c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005758:	2301      	movs	r3, #1
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	e002      	b.n	8005764 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800575e:	f04f 33ff 	mov.w	r3, #4294967295
 8005762:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005764:	69bb      	ldr	r3, [r7, #24]
	}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005780:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	461a      	mov	r2, r3
 8005788:	21a5      	movs	r1, #165	@ 0xa5
 800578a:	f002 fbd1 	bl	8007f30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005798:	440b      	add	r3, r1
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	f023 0307 	bic.w	r3, r3, #7
 80057a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <prvInitialiseNewTask+0x5e>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b6:	b672      	cpsid	i
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	b662      	cpsie	i
 80057c6:	617b      	str	r3, [r7, #20]
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	e7fd      	b.n	80057ca <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01f      	beq.n	8005814 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057d4:	2300      	movs	r3, #0
 80057d6:	61fb      	str	r3, [r7, #28]
 80057d8:	e012      	b.n	8005800 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	7819      	ldrb	r1, [r3, #0]
 80057e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	4413      	add	r3, r2
 80057e8:	3334      	adds	r3, #52	@ 0x34
 80057ea:	460a      	mov	r2, r1
 80057ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	4413      	add	r3, r2
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d006      	beq.n	8005808 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3301      	adds	r3, #1
 80057fe:	61fb      	str	r3, [r7, #28]
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	2b0f      	cmp	r3, #15
 8005804:	d9e9      	bls.n	80057da <prvInitialiseNewTask+0x6a>
 8005806:	e000      	b.n	800580a <prvInitialiseNewTask+0x9a>
			{
				break;
 8005808:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005812:	e003      	b.n	800581c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800581c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581e:	2b37      	cmp	r3, #55	@ 0x37
 8005820:	d901      	bls.n	8005826 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005822:	2337      	movs	r3, #55	@ 0x37
 8005824:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800582a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005830:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005834:	2200      	movs	r2, #0
 8005836:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583a:	3304      	adds	r3, #4
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff f93d 	bl	8004abc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005844:	3318      	adds	r3, #24
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff f938 	bl	8004abc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800584c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005850:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005854:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800585c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005860:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005864:	2200      	movs	r2, #0
 8005866:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586c:	2200      	movs	r2, #0
 800586e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005874:	3354      	adds	r3, #84	@ 0x54
 8005876:	224c      	movs	r2, #76	@ 0x4c
 8005878:	2100      	movs	r1, #0
 800587a:	4618      	mov	r0, r3
 800587c:	f002 fb58 	bl	8007f30 <memset>
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005882:	4a0d      	ldr	r2, [pc, #52]	@ (80058b8 <prvInitialiseNewTask+0x148>)
 8005884:	659a      	str	r2, [r3, #88]	@ 0x58
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	4a0c      	ldr	r2, [pc, #48]	@ (80058bc <prvInitialiseNewTask+0x14c>)
 800588a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800588c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588e:	4a0c      	ldr	r2, [pc, #48]	@ (80058c0 <prvInitialiseNewTask+0x150>)
 8005890:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	68f9      	ldr	r1, [r7, #12]
 8005896:	69b8      	ldr	r0, [r7, #24]
 8005898:	f001 fa44 	bl	8006d24 <pxPortInitialiseStack>
 800589c:	4602      	mov	r2, r0
 800589e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ae:	bf00      	nop
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20004eb0 	.word	0x20004eb0
 80058bc:	20004f18 	.word	0x20004f18
 80058c0:	20004f80 	.word	0x20004f80

080058c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058cc:	f001 fb36 	bl	8006f3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005988 <prvAddNewTaskToReadyList+0xc4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005988 <prvAddNewTaskToReadyList+0xc4>)
 80058d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058da:	4b2c      	ldr	r3, [pc, #176]	@ (800598c <prvAddNewTaskToReadyList+0xc8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d109      	bne.n	80058f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058e2:	4a2a      	ldr	r2, [pc, #168]	@ (800598c <prvAddNewTaskToReadyList+0xc8>)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058e8:	4b27      	ldr	r3, [pc, #156]	@ (8005988 <prvAddNewTaskToReadyList+0xc4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d110      	bne.n	8005912 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058f0:	f000 fc0c 	bl	800610c <prvInitialiseTaskLists>
 80058f4:	e00d      	b.n	8005912 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058f6:	4b26      	ldr	r3, [pc, #152]	@ (8005990 <prvAddNewTaskToReadyList+0xcc>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058fe:	4b23      	ldr	r3, [pc, #140]	@ (800598c <prvAddNewTaskToReadyList+0xc8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005908:	429a      	cmp	r2, r3
 800590a:	d802      	bhi.n	8005912 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800590c:	4a1f      	ldr	r2, [pc, #124]	@ (800598c <prvAddNewTaskToReadyList+0xc8>)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005912:	4b20      	ldr	r3, [pc, #128]	@ (8005994 <prvAddNewTaskToReadyList+0xd0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3301      	adds	r3, #1
 8005918:	4a1e      	ldr	r2, [pc, #120]	@ (8005994 <prvAddNewTaskToReadyList+0xd0>)
 800591a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800591c:	4b1d      	ldr	r3, [pc, #116]	@ (8005994 <prvAddNewTaskToReadyList+0xd0>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005928:	4b1b      	ldr	r3, [pc, #108]	@ (8005998 <prvAddNewTaskToReadyList+0xd4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d903      	bls.n	8005938 <prvAddNewTaskToReadyList+0x74>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005934:	4a18      	ldr	r2, [pc, #96]	@ (8005998 <prvAddNewTaskToReadyList+0xd4>)
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4a15      	ldr	r2, [pc, #84]	@ (800599c <prvAddNewTaskToReadyList+0xd8>)
 8005946:	441a      	add	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f7ff f8c1 	bl	8004ad6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005954:	f001 fb28 	bl	8006fa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005958:	4b0d      	ldr	r3, [pc, #52]	@ (8005990 <prvAddNewTaskToReadyList+0xcc>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00e      	beq.n	800597e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005960:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <prvAddNewTaskToReadyList+0xc8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	429a      	cmp	r2, r3
 800596c:	d207      	bcs.n	800597e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800596e:	4b0c      	ldr	r3, [pc, #48]	@ (80059a0 <prvAddNewTaskToReadyList+0xdc>)
 8005970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800597e:	bf00      	nop
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	2000112c 	.word	0x2000112c
 800598c:	20000c58 	.word	0x20000c58
 8005990:	20001138 	.word	0x20001138
 8005994:	20001148 	.word	0x20001148
 8005998:	20001134 	.word	0x20001134
 800599c:	20000c5c 	.word	0x20000c5c
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	@ 0x28
 80059a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059b2:	463a      	mov	r2, r7
 80059b4:	1d39      	adds	r1, r7, #4
 80059b6:	f107 0308 	add.w	r3, r7, #8
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff f82a 	bl	8004a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	9202      	str	r2, [sp, #8]
 80059c8:	9301      	str	r3, [sp, #4]
 80059ca:	2300      	movs	r3, #0
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	2300      	movs	r3, #0
 80059d0:	460a      	mov	r2, r1
 80059d2:	4926      	ldr	r1, [pc, #152]	@ (8005a6c <vTaskStartScheduler+0xc8>)
 80059d4:	4826      	ldr	r0, [pc, #152]	@ (8005a70 <vTaskStartScheduler+0xcc>)
 80059d6:	f7ff fe1f 	bl	8005618 <xTaskCreateStatic>
 80059da:	4603      	mov	r3, r0
 80059dc:	4a25      	ldr	r2, [pc, #148]	@ (8005a74 <vTaskStartScheduler+0xd0>)
 80059de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059e0:	4b24      	ldr	r3, [pc, #144]	@ (8005a74 <vTaskStartScheduler+0xd0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059e8:	2301      	movs	r3, #1
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	e001      	b.n	80059f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d102      	bne.n	80059fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80059f8:	f000 fe2c 	bl	8006654 <xTimerCreateTimerTask>
 80059fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d11d      	bne.n	8005a40 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a08:	b672      	cpsid	i
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	b662      	cpsie	i
 8005a18:	613b      	str	r3, [r7, #16]
}
 8005a1a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a1c:	4b16      	ldr	r3, [pc, #88]	@ (8005a78 <vTaskStartScheduler+0xd4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3354      	adds	r3, #84	@ 0x54
 8005a22:	4a16      	ldr	r2, [pc, #88]	@ (8005a7c <vTaskStartScheduler+0xd8>)
 8005a24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a26:	4b16      	ldr	r3, [pc, #88]	@ (8005a80 <vTaskStartScheduler+0xdc>)
 8005a28:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a2e:	4b15      	ldr	r3, [pc, #84]	@ (8005a84 <vTaskStartScheduler+0xe0>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a34:	4b14      	ldr	r3, [pc, #80]	@ (8005a88 <vTaskStartScheduler+0xe4>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a3a:	f001 fa01 	bl	8006e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a3e:	e011      	b.n	8005a64 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d10d      	bne.n	8005a64 <vTaskStartScheduler+0xc0>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4c:	b672      	cpsid	i
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	b662      	cpsie	i
 8005a5c:	60fb      	str	r3, [r7, #12]
}
 8005a5e:	bf00      	nop
 8005a60:	bf00      	nop
 8005a62:	e7fd      	b.n	8005a60 <vTaskStartScheduler+0xbc>
}
 8005a64:	bf00      	nop
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	08008f64 	.word	0x08008f64
 8005a70:	080060dd 	.word	0x080060dd
 8005a74:	20001150 	.word	0x20001150
 8005a78:	20000c58 	.word	0x20000c58
 8005a7c:	20000024 	.word	0x20000024
 8005a80:	2000114c 	.word	0x2000114c
 8005a84:	20001138 	.word	0x20001138
 8005a88:	20001130 	.word	0x20001130

08005a8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a90:	4b04      	ldr	r3, [pc, #16]	@ (8005aa4 <vTaskSuspendAll+0x18>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3301      	adds	r3, #1
 8005a96:	4a03      	ldr	r2, [pc, #12]	@ (8005aa4 <vTaskSuspendAll+0x18>)
 8005a98:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005a9a:	bf00      	nop
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	20001154 	.word	0x20001154

08005aa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ab6:	4b43      	ldr	r3, [pc, #268]	@ (8005bc4 <xTaskResumeAll+0x11c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10d      	bne.n	8005ada <xTaskResumeAll+0x32>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac2:	b672      	cpsid	i
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	b662      	cpsie	i
 8005ad2:	603b      	str	r3, [r7, #0]
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	e7fd      	b.n	8005ad6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ada:	f001 fa2f 	bl	8006f3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ade:	4b39      	ldr	r3, [pc, #228]	@ (8005bc4 <xTaskResumeAll+0x11c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	4a37      	ldr	r2, [pc, #220]	@ (8005bc4 <xTaskResumeAll+0x11c>)
 8005ae6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ae8:	4b36      	ldr	r3, [pc, #216]	@ (8005bc4 <xTaskResumeAll+0x11c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d162      	bne.n	8005bb6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005af0:	4b35      	ldr	r3, [pc, #212]	@ (8005bc8 <xTaskResumeAll+0x120>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d05e      	beq.n	8005bb6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005af8:	e02f      	b.n	8005b5a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005afa:	4b34      	ldr	r3, [pc, #208]	@ (8005bcc <xTaskResumeAll+0x124>)
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3318      	adds	r3, #24
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff f842 	bl	8004b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff f83d 	bl	8004b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8005bd0 <xTaskResumeAll+0x128>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d903      	bls.n	8005b2a <xTaskResumeAll+0x82>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b26:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd0 <xTaskResumeAll+0x128>)
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4a27      	ldr	r2, [pc, #156]	@ (8005bd4 <xTaskResumeAll+0x12c>)
 8005b38:	441a      	add	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f7fe ffc8 	bl	8004ad6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b4a:	4b23      	ldr	r3, [pc, #140]	@ (8005bd8 <xTaskResumeAll+0x130>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d302      	bcc.n	8005b5a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8005b54:	4b21      	ldr	r3, [pc, #132]	@ (8005bdc <xTaskResumeAll+0x134>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8005bcc <xTaskResumeAll+0x124>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1cb      	bne.n	8005afa <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b68:	f000 fb76 	bl	8006258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005be0 <xTaskResumeAll+0x138>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d010      	beq.n	8005b9a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b78:	f000 f846 	bl	8005c08 <xTaskIncrementTick>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8005b82:	4b16      	ldr	r3, [pc, #88]	@ (8005bdc <xTaskResumeAll+0x134>)
 8005b84:	2201      	movs	r2, #1
 8005b86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f1      	bne.n	8005b78 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8005b94:	4b12      	ldr	r3, [pc, #72]	@ (8005be0 <xTaskResumeAll+0x138>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b9a:	4b10      	ldr	r3, [pc, #64]	@ (8005bdc <xTaskResumeAll+0x134>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d009      	beq.n	8005bb6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8005be4 <xTaskResumeAll+0x13c>)
 8005ba8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bb6:	f001 f9f7 	bl	8006fa8 <vPortExitCritical>

	return xAlreadyYielded;
 8005bba:	68bb      	ldr	r3, [r7, #8]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20001154 	.word	0x20001154
 8005bc8:	2000112c 	.word	0x2000112c
 8005bcc:	200010ec 	.word	0x200010ec
 8005bd0:	20001134 	.word	0x20001134
 8005bd4:	20000c5c 	.word	0x20000c5c
 8005bd8:	20000c58 	.word	0x20000c58
 8005bdc:	20001140 	.word	0x20001140
 8005be0:	2000113c 	.word	0x2000113c
 8005be4:	e000ed04 	.word	0xe000ed04

08005be8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005bee:	4b05      	ldr	r3, [pc, #20]	@ (8005c04 <xTaskGetTickCount+0x1c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005bf4:	687b      	ldr	r3, [r7, #4]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20001130 	.word	0x20001130

08005c08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c12:	4b50      	ldr	r3, [pc, #320]	@ (8005d54 <xTaskIncrementTick+0x14c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 808c 	bne.w	8005d34 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c1c:	4b4e      	ldr	r3, [pc, #312]	@ (8005d58 <xTaskIncrementTick+0x150>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c24:	4a4c      	ldr	r2, [pc, #304]	@ (8005d58 <xTaskIncrementTick+0x150>)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d123      	bne.n	8005c78 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c30:	4b4a      	ldr	r3, [pc, #296]	@ (8005d5c <xTaskIncrementTick+0x154>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00d      	beq.n	8005c56 <xTaskIncrementTick+0x4e>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3e:	b672      	cpsid	i
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	b662      	cpsie	i
 8005c4e:	603b      	str	r3, [r7, #0]
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <xTaskIncrementTick+0x4a>
 8005c56:	4b41      	ldr	r3, [pc, #260]	@ (8005d5c <xTaskIncrementTick+0x154>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	4b40      	ldr	r3, [pc, #256]	@ (8005d60 <xTaskIncrementTick+0x158>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a3e      	ldr	r2, [pc, #248]	@ (8005d5c <xTaskIncrementTick+0x154>)
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	4a3e      	ldr	r2, [pc, #248]	@ (8005d60 <xTaskIncrementTick+0x158>)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d64 <xTaskIncrementTick+0x15c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	4a3c      	ldr	r2, [pc, #240]	@ (8005d64 <xTaskIncrementTick+0x15c>)
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	f000 faf0 	bl	8006258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c78:	4b3b      	ldr	r3, [pc, #236]	@ (8005d68 <xTaskIncrementTick+0x160>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d349      	bcc.n	8005d16 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c82:	4b36      	ldr	r3, [pc, #216]	@ (8005d5c <xTaskIncrementTick+0x154>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d104      	bne.n	8005c96 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c8c:	4b36      	ldr	r3, [pc, #216]	@ (8005d68 <xTaskIncrementTick+0x160>)
 8005c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c92:	601a      	str	r2, [r3, #0]
					break;
 8005c94:	e03f      	b.n	8005d16 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c96:	4b31      	ldr	r3, [pc, #196]	@ (8005d5c <xTaskIncrementTick+0x154>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d203      	bcs.n	8005cb6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cae:	4a2e      	ldr	r2, [pc, #184]	@ (8005d68 <xTaskIncrementTick+0x160>)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cb4:	e02f      	b.n	8005d16 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe ff68 	bl	8004b90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	3318      	adds	r3, #24
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe ff5f 	bl	8004b90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd6:	4b25      	ldr	r3, [pc, #148]	@ (8005d6c <xTaskIncrementTick+0x164>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d903      	bls.n	8005ce6 <xTaskIncrementTick+0xde>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	4a22      	ldr	r2, [pc, #136]	@ (8005d6c <xTaskIncrementTick+0x164>)
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8005d70 <xTaskIncrementTick+0x168>)
 8005cf4:	441a      	add	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	f7fe feea 	bl	8004ad6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d06:	4b1b      	ldr	r3, [pc, #108]	@ (8005d74 <xTaskIncrementTick+0x16c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d3b8      	bcc.n	8005c82 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d14:	e7b5      	b.n	8005c82 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d16:	4b17      	ldr	r3, [pc, #92]	@ (8005d74 <xTaskIncrementTick+0x16c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1c:	4914      	ldr	r1, [pc, #80]	@ (8005d70 <xTaskIncrementTick+0x168>)
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d907      	bls.n	8005d3e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	e004      	b.n	8005d3e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d34:	4b10      	ldr	r3, [pc, #64]	@ (8005d78 <xTaskIncrementTick+0x170>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8005d78 <xTaskIncrementTick+0x170>)
 8005d3c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8005d7c <xTaskIncrementTick+0x174>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005d46:	2301      	movs	r3, #1
 8005d48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d4a:	697b      	ldr	r3, [r7, #20]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20001154 	.word	0x20001154
 8005d58:	20001130 	.word	0x20001130
 8005d5c:	200010e4 	.word	0x200010e4
 8005d60:	200010e8 	.word	0x200010e8
 8005d64:	20001144 	.word	0x20001144
 8005d68:	2000114c 	.word	0x2000114c
 8005d6c:	20001134 	.word	0x20001134
 8005d70:	20000c5c 	.word	0x20000c5c
 8005d74:	20000c58 	.word	0x20000c58
 8005d78:	2000113c 	.word	0x2000113c
 8005d7c:	20001140 	.word	0x20001140

08005d80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d86:	4b2c      	ldr	r3, [pc, #176]	@ (8005e38 <vTaskSwitchContext+0xb8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8005e3c <vTaskSwitchContext+0xbc>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d94:	e049      	b.n	8005e2a <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8005d96:	4b29      	ldr	r3, [pc, #164]	@ (8005e3c <vTaskSwitchContext+0xbc>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d9c:	4b28      	ldr	r3, [pc, #160]	@ (8005e40 <vTaskSwitchContext+0xc0>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e013      	b.n	8005dcc <vTaskSwitchContext+0x4c>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <vTaskSwitchContext+0x46>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dae:	b672      	cpsid	i
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	b662      	cpsie	i
 8005dbe:	607b      	str	r3, [r7, #4]
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	e7fd      	b.n	8005dc2 <vTaskSwitchContext+0x42>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	491d      	ldr	r1, [pc, #116]	@ (8005e44 <vTaskSwitchContext+0xc4>)
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0e1      	beq.n	8005da4 <vTaskSwitchContext+0x24>
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4a16      	ldr	r2, [pc, #88]	@ (8005e44 <vTaskSwitchContext+0xc4>)
 8005dec:	4413      	add	r3, r2
 8005dee:	60bb      	str	r3, [r7, #8]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	3308      	adds	r3, #8
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d104      	bne.n	8005e10 <vTaskSwitchContext+0x90>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	605a      	str	r2, [r3, #4]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	4a0c      	ldr	r2, [pc, #48]	@ (8005e48 <vTaskSwitchContext+0xc8>)
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4a09      	ldr	r2, [pc, #36]	@ (8005e40 <vTaskSwitchContext+0xc0>)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e20:	4b09      	ldr	r3, [pc, #36]	@ (8005e48 <vTaskSwitchContext+0xc8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3354      	adds	r3, #84	@ 0x54
 8005e26:	4a09      	ldr	r2, [pc, #36]	@ (8005e4c <vTaskSwitchContext+0xcc>)
 8005e28:	6013      	str	r3, [r2, #0]
}
 8005e2a:	bf00      	nop
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20001154 	.word	0x20001154
 8005e3c:	20001140 	.word	0x20001140
 8005e40:	20001134 	.word	0x20001134
 8005e44:	20000c5c 	.word	0x20000c5c
 8005e48:	20000c58 	.word	0x20000c58
 8005e4c:	20000024 	.word	0x20000024

08005e50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10d      	bne.n	8005e7c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e64:	b672      	cpsid	i
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	b662      	cpsie	i
 8005e74:	60fb      	str	r3, [r7, #12]
}
 8005e76:	bf00      	nop
 8005e78:	bf00      	nop
 8005e7a:	e7fd      	b.n	8005e78 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e7c:	4b07      	ldr	r3, [pc, #28]	@ (8005e9c <vTaskPlaceOnEventList+0x4c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3318      	adds	r3, #24
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7fe fe4a 	bl	8004b1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	6838      	ldr	r0, [r7, #0]
 8005e8e:	f000 fb8d 	bl	80065ac <prvAddCurrentTaskToDelayedList>
}
 8005e92:	bf00      	nop
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20000c58 	.word	0x20000c58

08005ea0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10d      	bne.n	8005ece <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb6:	b672      	cpsid	i
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	b662      	cpsie	i
 8005ec6:	617b      	str	r3, [r7, #20]
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	e7fd      	b.n	8005eca <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ece:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef8 <vTaskPlaceOnEventListRestricted+0x58>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3318      	adds	r3, #24
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7fe fdfd 	bl	8004ad6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8005ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	68b8      	ldr	r0, [r7, #8]
 8005eec:	f000 fb5e 	bl	80065ac <prvAddCurrentTaskToDelayedList>
	}
 8005ef0:	bf00      	nop
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	20000c58 	.word	0x20000c58

08005efc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10d      	bne.n	8005f2e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f16:	b672      	cpsid	i
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	b662      	cpsie	i
 8005f26:	60fb      	str	r3, [r7, #12]
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	e7fd      	b.n	8005f2a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	3318      	adds	r3, #24
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fe fe2c 	bl	8004b90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f38:	4b1d      	ldr	r3, [pc, #116]	@ (8005fb0 <xTaskRemoveFromEventList+0xb4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d11d      	bne.n	8005f7c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	3304      	adds	r3, #4
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fe fe23 	bl	8004b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f4e:	4b19      	ldr	r3, [pc, #100]	@ (8005fb4 <xTaskRemoveFromEventList+0xb8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d903      	bls.n	8005f5e <xTaskRemoveFromEventList+0x62>
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5a:	4a16      	ldr	r2, [pc, #88]	@ (8005fb4 <xTaskRemoveFromEventList+0xb8>)
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4a13      	ldr	r2, [pc, #76]	@ (8005fb8 <xTaskRemoveFromEventList+0xbc>)
 8005f6c:	441a      	add	r2, r3
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3304      	adds	r3, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f7fe fdae 	bl	8004ad6 <vListInsertEnd>
 8005f7a:	e005      	b.n	8005f88 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	3318      	adds	r3, #24
 8005f80:	4619      	mov	r1, r3
 8005f82:	480e      	ldr	r0, [pc, #56]	@ (8005fbc <xTaskRemoveFromEventList+0xc0>)
 8005f84:	f7fe fda7 	bl	8004ad6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc0 <xTaskRemoveFromEventList+0xc4>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d905      	bls.n	8005fa2 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f96:	2301      	movs	r3, #1
 8005f98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc4 <xTaskRemoveFromEventList+0xc8>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e001      	b.n	8005fa6 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fa6:	697b      	ldr	r3, [r7, #20]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20001154 	.word	0x20001154
 8005fb4:	20001134 	.word	0x20001134
 8005fb8:	20000c5c 	.word	0x20000c5c
 8005fbc:	200010ec 	.word	0x200010ec
 8005fc0:	20000c58 	.word	0x20000c58
 8005fc4:	20001140 	.word	0x20001140

08005fc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fd0:	4b06      	ldr	r3, [pc, #24]	@ (8005fec <vTaskInternalSetTimeOutState+0x24>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fd8:	4b05      	ldr	r3, [pc, #20]	@ (8005ff0 <vTaskInternalSetTimeOutState+0x28>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	605a      	str	r2, [r3, #4]
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	20001144 	.word	0x20001144
 8005ff0:	20001130 	.word	0x20001130

08005ff4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10d      	bne.n	8006020 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006008:	b672      	cpsid	i
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	b662      	cpsie	i
 8006018:	613b      	str	r3, [r7, #16]
}
 800601a:	bf00      	nop
 800601c:	bf00      	nop
 800601e:	e7fd      	b.n	800601c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10d      	bne.n	8006042 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602a:	b672      	cpsid	i
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	b662      	cpsie	i
 800603a:	60fb      	str	r3, [r7, #12]
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	e7fd      	b.n	800603e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006042:	f000 ff7b 	bl	8006f3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006046:	4b1d      	ldr	r3, [pc, #116]	@ (80060bc <xTaskCheckForTimeOut+0xc8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d102      	bne.n	8006066 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006060:	2300      	movs	r3, #0
 8006062:	61fb      	str	r3, [r7, #28]
 8006064:	e023      	b.n	80060ae <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b15      	ldr	r3, [pc, #84]	@ (80060c0 <xTaskCheckForTimeOut+0xcc>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	d007      	beq.n	8006082 <xTaskCheckForTimeOut+0x8e>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	429a      	cmp	r2, r3
 800607a:	d302      	bcc.n	8006082 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800607c:	2301      	movs	r3, #1
 800607e:	61fb      	str	r3, [r7, #28]
 8006080:	e015      	b.n	80060ae <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	429a      	cmp	r2, r3
 800608a:	d20b      	bcs.n	80060a4 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	1ad2      	subs	r2, r2, r3
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff ff95 	bl	8005fc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	e004      	b.n	80060ae <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2200      	movs	r2, #0
 80060a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060aa:	2301      	movs	r3, #1
 80060ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060ae:	f000 ff7b 	bl	8006fa8 <vPortExitCritical>

	return xReturn;
 80060b2:	69fb      	ldr	r3, [r7, #28]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20001130 	.word	0x20001130
 80060c0:	20001144 	.word	0x20001144

080060c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060c8:	4b03      	ldr	r3, [pc, #12]	@ (80060d8 <vTaskMissedYield+0x14>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	601a      	str	r2, [r3, #0]
}
 80060ce:	bf00      	nop
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	20001140 	.word	0x20001140

080060dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060e4:	f000 f852 	bl	800618c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060e8:	4b06      	ldr	r3, [pc, #24]	@ (8006104 <prvIdleTask+0x28>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d9f9      	bls.n	80060e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060f0:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <prvIdleTask+0x2c>)
 80060f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006100:	e7f0      	b.n	80060e4 <prvIdleTask+0x8>
 8006102:	bf00      	nop
 8006104:	20000c5c 	.word	0x20000c5c
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006112:	2300      	movs	r3, #0
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	e00c      	b.n	8006132 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4a12      	ldr	r2, [pc, #72]	@ (800616c <prvInitialiseTaskLists+0x60>)
 8006124:	4413      	add	r3, r2
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fca8 	bl	8004a7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3301      	adds	r3, #1
 8006130:	607b      	str	r3, [r7, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b37      	cmp	r3, #55	@ 0x37
 8006136:	d9ef      	bls.n	8006118 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006138:	480d      	ldr	r0, [pc, #52]	@ (8006170 <prvInitialiseTaskLists+0x64>)
 800613a:	f7fe fc9f 	bl	8004a7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800613e:	480d      	ldr	r0, [pc, #52]	@ (8006174 <prvInitialiseTaskLists+0x68>)
 8006140:	f7fe fc9c 	bl	8004a7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006144:	480c      	ldr	r0, [pc, #48]	@ (8006178 <prvInitialiseTaskLists+0x6c>)
 8006146:	f7fe fc99 	bl	8004a7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800614a:	480c      	ldr	r0, [pc, #48]	@ (800617c <prvInitialiseTaskLists+0x70>)
 800614c:	f7fe fc96 	bl	8004a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006150:	480b      	ldr	r0, [pc, #44]	@ (8006180 <prvInitialiseTaskLists+0x74>)
 8006152:	f7fe fc93 	bl	8004a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006156:	4b0b      	ldr	r3, [pc, #44]	@ (8006184 <prvInitialiseTaskLists+0x78>)
 8006158:	4a05      	ldr	r2, [pc, #20]	@ (8006170 <prvInitialiseTaskLists+0x64>)
 800615a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800615c:	4b0a      	ldr	r3, [pc, #40]	@ (8006188 <prvInitialiseTaskLists+0x7c>)
 800615e:	4a05      	ldr	r2, [pc, #20]	@ (8006174 <prvInitialiseTaskLists+0x68>)
 8006160:	601a      	str	r2, [r3, #0]
}
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000c5c 	.word	0x20000c5c
 8006170:	200010bc 	.word	0x200010bc
 8006174:	200010d0 	.word	0x200010d0
 8006178:	200010ec 	.word	0x200010ec
 800617c:	20001100 	.word	0x20001100
 8006180:	20001118 	.word	0x20001118
 8006184:	200010e4 	.word	0x200010e4
 8006188:	200010e8 	.word	0x200010e8

0800618c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006192:	e019      	b.n	80061c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006194:	f000 fed2 	bl	8006f3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006198:	4b10      	ldr	r3, [pc, #64]	@ (80061dc <prvCheckTasksWaitingTermination+0x50>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fe fcf3 	bl	8004b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061aa:	4b0d      	ldr	r3, [pc, #52]	@ (80061e0 <prvCheckTasksWaitingTermination+0x54>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	4a0b      	ldr	r2, [pc, #44]	@ (80061e0 <prvCheckTasksWaitingTermination+0x54>)
 80061b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061b4:	4b0b      	ldr	r3, [pc, #44]	@ (80061e4 <prvCheckTasksWaitingTermination+0x58>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	4a0a      	ldr	r2, [pc, #40]	@ (80061e4 <prvCheckTasksWaitingTermination+0x58>)
 80061bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061be:	f000 fef3 	bl	8006fa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f810 	bl	80061e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061c8:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <prvCheckTasksWaitingTermination+0x58>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e1      	bne.n	8006194 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20001100 	.word	0x20001100
 80061e0:	2000112c 	.word	0x2000112c
 80061e4:	20001114 	.word	0x20001114

080061e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3354      	adds	r3, #84	@ 0x54
 80061f4:	4618      	mov	r0, r3
 80061f6:	f001 feb3 	bl	8007f60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006200:	2b00      	cmp	r3, #0
 8006202:	d108      	bne.n	8006216 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006208:	4618      	mov	r0, r3
 800620a:	f001 f893 	bl	8007334 <vPortFree>
				vPortFree( pxTCB );
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 f890 	bl	8007334 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006214:	e01b      	b.n	800624e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800621c:	2b01      	cmp	r3, #1
 800621e:	d103      	bne.n	8006228 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 f887 	bl	8007334 <vPortFree>
	}
 8006226:	e012      	b.n	800624e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800622e:	2b02      	cmp	r3, #2
 8006230:	d00d      	beq.n	800624e <prvDeleteTCB+0x66>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006236:	b672      	cpsid	i
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	b662      	cpsie	i
 8006246:	60fb      	str	r3, [r7, #12]
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	e7fd      	b.n	800624a <prvDeleteTCB+0x62>
	}
 800624e:	bf00      	nop
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800625e:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <prvResetNextTaskUnblockTime+0x38>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d104      	bne.n	8006272 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006268:	4b0a      	ldr	r3, [pc, #40]	@ (8006294 <prvResetNextTaskUnblockTime+0x3c>)
 800626a:	f04f 32ff 	mov.w	r2, #4294967295
 800626e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006270:	e008      	b.n	8006284 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006272:	4b07      	ldr	r3, [pc, #28]	@ (8006290 <prvResetNextTaskUnblockTime+0x38>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	4a04      	ldr	r2, [pc, #16]	@ (8006294 <prvResetNextTaskUnblockTime+0x3c>)
 8006282:	6013      	str	r3, [r2, #0]
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	200010e4 	.word	0x200010e4
 8006294:	2000114c 	.word	0x2000114c

08006298 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800629e:	4b05      	ldr	r3, [pc, #20]	@ (80062b4 <xTaskGetCurrentTaskHandle+0x1c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80062a4:	687b      	ldr	r3, [r7, #4]
	}
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20000c58 	.word	0x20000c58

080062b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062be:	4b0b      	ldr	r3, [pc, #44]	@ (80062ec <xTaskGetSchedulerState+0x34>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062c6:	2301      	movs	r3, #1
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	e008      	b.n	80062de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062cc:	4b08      	ldr	r3, [pc, #32]	@ (80062f0 <xTaskGetSchedulerState+0x38>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062d4:	2302      	movs	r3, #2
 80062d6:	607b      	str	r3, [r7, #4]
 80062d8:	e001      	b.n	80062de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062da:	2300      	movs	r3, #0
 80062dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062de:	687b      	ldr	r3, [r7, #4]
	}
 80062e0:	4618      	mov	r0, r3
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	20001138 	.word	0x20001138
 80062f0:	20001154 	.word	0x20001154

080062f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006300:	2300      	movs	r3, #0
 8006302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d05c      	beq.n	80063c4 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800630a:	4b31      	ldr	r3, [pc, #196]	@ (80063d0 <xTaskPriorityDisinherit+0xdc>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	429a      	cmp	r2, r3
 8006312:	d00d      	beq.n	8006330 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006318:	b672      	cpsid	i
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	b662      	cpsie	i
 8006328:	60fb      	str	r3, [r7, #12]
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	e7fd      	b.n	800632c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10d      	bne.n	8006354 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633c:	b672      	cpsid	i
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	b662      	cpsie	i
 800634c:	60bb      	str	r3, [r7, #8]
}
 800634e:	bf00      	nop
 8006350:	bf00      	nop
 8006352:	e7fd      	b.n	8006350 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006358:	1e5a      	subs	r2, r3, #1
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006366:	429a      	cmp	r2, r3
 8006368:	d02c      	beq.n	80063c4 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800636e:	2b00      	cmp	r3, #0
 8006370:	d128      	bne.n	80063c4 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	3304      	adds	r3, #4
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe fc0a 	bl	8004b90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006388:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006394:	4b0f      	ldr	r3, [pc, #60]	@ (80063d4 <xTaskPriorityDisinherit+0xe0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d903      	bls.n	80063a4 <xTaskPriorityDisinherit+0xb0>
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	4a0c      	ldr	r2, [pc, #48]	@ (80063d4 <xTaskPriorityDisinherit+0xe0>)
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4a09      	ldr	r2, [pc, #36]	@ (80063d8 <xTaskPriorityDisinherit+0xe4>)
 80063b2:	441a      	add	r2, r3
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	3304      	adds	r3, #4
 80063b8:	4619      	mov	r1, r3
 80063ba:	4610      	mov	r0, r2
 80063bc:	f7fe fb8b 	bl	8004ad6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063c0:	2301      	movs	r3, #1
 80063c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063c4:	697b      	ldr	r3, [r7, #20]
	}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000c58 	.word	0x20000c58
 80063d4:	20001134 	.word	0x20001134
 80063d8:	20000c5c 	.word	0x20000c5c

080063dc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80063e6:	f000 fda9 	bl	8006f3c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80063ea:	4b20      	ldr	r3, [pc, #128]	@ (800646c <ulTaskNotifyTake+0x90>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d113      	bne.n	800641e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80063f6:	4b1d      	ldr	r3, [pc, #116]	@ (800646c <ulTaskNotifyTake+0x90>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00b      	beq.n	800641e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006406:	2101      	movs	r1, #1
 8006408:	6838      	ldr	r0, [r7, #0]
 800640a:	f000 f8cf 	bl	80065ac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800640e:	4b18      	ldr	r3, [pc, #96]	@ (8006470 <ulTaskNotifyTake+0x94>)
 8006410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800641e:	f000 fdc3 	bl	8006fa8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006422:	f000 fd8b 	bl	8006f3c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006426:	4b11      	ldr	r3, [pc, #68]	@ (800646c <ulTaskNotifyTake+0x90>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800642e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00e      	beq.n	8006454 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800643c:	4b0b      	ldr	r3, [pc, #44]	@ (800646c <ulTaskNotifyTake+0x90>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2200      	movs	r2, #0
 8006442:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8006446:	e005      	b.n	8006454 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006448:	4b08      	ldr	r3, [pc, #32]	@ (800646c <ulTaskNotifyTake+0x90>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	3a01      	subs	r2, #1
 8006450:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006454:	4b05      	ldr	r3, [pc, #20]	@ (800646c <ulTaskNotifyTake+0x90>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800645e:	f000 fda3 	bl	8006fa8 <vPortExitCritical>

		return ulReturn;
 8006462:	68fb      	ldr	r3, [r7, #12]
	}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20000c58 	.word	0x20000c58
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08a      	sub	sp, #40	@ 0x28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10d      	bne.n	80064a0 <vTaskNotifyGiveFromISR+0x2c>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006488:	b672      	cpsid	i
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	b662      	cpsie	i
 8006498:	61bb      	str	r3, [r7, #24]
}
 800649a:	bf00      	nop
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <vTaskNotifyGiveFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064a0:	f000 fe34 	bl	800710c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 80064a8:	f3ef 8211 	mrs	r2, BASEPRI
 80064ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b0:	b672      	cpsid	i
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	b662      	cpsie	i
 80064c0:	617a      	str	r2, [r7, #20]
 80064c2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80064c4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064c6:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80064ce:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80064e6:	7ffb      	ldrb	r3, [r7, #31]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d149      	bne.n	8006580 <vTaskNotifyGiveFromISR+0x10c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00d      	beq.n	8006510 <vTaskNotifyGiveFromISR+0x9c>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f8:	b672      	cpsid	i
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	b662      	cpsie	i
 8006508:	60fb      	str	r3, [r7, #12]
}
 800650a:	bf00      	nop
 800650c:	bf00      	nop
 800650e:	e7fd      	b.n	800650c <vTaskNotifyGiveFromISR+0x98>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006510:	4b20      	ldr	r3, [pc, #128]	@ (8006594 <vTaskNotifyGiveFromISR+0x120>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d11d      	bne.n	8006554 <vTaskNotifyGiveFromISR+0xe0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	3304      	adds	r3, #4
 800651c:	4618      	mov	r0, r3
 800651e:	f7fe fb37 	bl	8004b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006526:	4b1c      	ldr	r3, [pc, #112]	@ (8006598 <vTaskNotifyGiveFromISR+0x124>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d903      	bls.n	8006536 <vTaskNotifyGiveFromISR+0xc2>
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006532:	4a19      	ldr	r2, [pc, #100]	@ (8006598 <vTaskNotifyGiveFromISR+0x124>)
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4a16      	ldr	r2, [pc, #88]	@ (800659c <vTaskNotifyGiveFromISR+0x128>)
 8006544:	441a      	add	r2, r3
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	3304      	adds	r3, #4
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f7fe fac2 	bl	8004ad6 <vListInsertEnd>
 8006552:	e005      	b.n	8006560 <vTaskNotifyGiveFromISR+0xec>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	3318      	adds	r3, #24
 8006558:	4619      	mov	r1, r3
 800655a:	4811      	ldr	r0, [pc, #68]	@ (80065a0 <vTaskNotifyGiveFromISR+0x12c>)
 800655c:	f7fe fabb 	bl	8004ad6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006564:	4b0f      	ldr	r3, [pc, #60]	@ (80065a4 <vTaskNotifyGiveFromISR+0x130>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656a:	429a      	cmp	r2, r3
 800656c:	d908      	bls.n	8006580 <vTaskNotifyGiveFromISR+0x10c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <vTaskNotifyGiveFromISR+0x106>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800657a:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <vTaskNotifyGiveFromISR+0x134>)
 800657c:	2201      	movs	r2, #1
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f383 8811 	msr	BASEPRI, r3
}
 800658a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800658c:	bf00      	nop
 800658e:	3728      	adds	r7, #40	@ 0x28
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20001154 	.word	0x20001154
 8006598:	20001134 	.word	0x20001134
 800659c:	20000c5c 	.word	0x20000c5c
 80065a0:	200010ec 	.word	0x200010ec
 80065a4:	20000c58 	.word	0x20000c58
 80065a8:	20001140 	.word	0x20001140

080065ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065b6:	4b21      	ldr	r3, [pc, #132]	@ (800663c <prvAddCurrentTaskToDelayedList+0x90>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065bc:	4b20      	ldr	r3, [pc, #128]	@ (8006640 <prvAddCurrentTaskToDelayedList+0x94>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3304      	adds	r3, #4
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fae4 	bl	8004b90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d10a      	bne.n	80065e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006640 <prvAddCurrentTaskToDelayedList+0x94>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3304      	adds	r3, #4
 80065dc:	4619      	mov	r1, r3
 80065de:	4819      	ldr	r0, [pc, #100]	@ (8006644 <prvAddCurrentTaskToDelayedList+0x98>)
 80065e0:	f7fe fa79 	bl	8004ad6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065e4:	e026      	b.n	8006634 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4413      	add	r3, r2
 80065ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065ee:	4b14      	ldr	r3, [pc, #80]	@ (8006640 <prvAddCurrentTaskToDelayedList+0x94>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d209      	bcs.n	8006612 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065fe:	4b12      	ldr	r3, [pc, #72]	@ (8006648 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	4b0f      	ldr	r3, [pc, #60]	@ (8006640 <prvAddCurrentTaskToDelayedList+0x94>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3304      	adds	r3, #4
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f7fe fa87 	bl	8004b1e <vListInsert>
}
 8006610:	e010      	b.n	8006634 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006612:	4b0e      	ldr	r3, [pc, #56]	@ (800664c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4b0a      	ldr	r3, [pc, #40]	@ (8006640 <prvAddCurrentTaskToDelayedList+0x94>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3304      	adds	r3, #4
 800661c:	4619      	mov	r1, r3
 800661e:	4610      	mov	r0, r2
 8006620:	f7fe fa7d 	bl	8004b1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006624:	4b0a      	ldr	r3, [pc, #40]	@ (8006650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	429a      	cmp	r2, r3
 800662c:	d202      	bcs.n	8006634 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800662e:	4a08      	ldr	r2, [pc, #32]	@ (8006650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6013      	str	r3, [r2, #0]
}
 8006634:	bf00      	nop
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20001130 	.word	0x20001130
 8006640:	20000c58 	.word	0x20000c58
 8006644:	20001118 	.word	0x20001118
 8006648:	200010e8 	.word	0x200010e8
 800664c:	200010e4 	.word	0x200010e4
 8006650:	2000114c 	.word	0x2000114c

08006654 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08a      	sub	sp, #40	@ 0x28
 8006658:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800665a:	2300      	movs	r3, #0
 800665c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800665e:	f000 fb21 	bl	8006ca4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006662:	4b1e      	ldr	r3, [pc, #120]	@ (80066dc <xTimerCreateTimerTask+0x88>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d021      	beq.n	80066ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006672:	1d3a      	adds	r2, r7, #4
 8006674:	f107 0108 	add.w	r1, r7, #8
 8006678:	f107 030c 	add.w	r3, r7, #12
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe f9e3 	bl	8004a48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	9202      	str	r2, [sp, #8]
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	2302      	movs	r3, #2
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	2300      	movs	r3, #0
 8006692:	460a      	mov	r2, r1
 8006694:	4912      	ldr	r1, [pc, #72]	@ (80066e0 <xTimerCreateTimerTask+0x8c>)
 8006696:	4813      	ldr	r0, [pc, #76]	@ (80066e4 <xTimerCreateTimerTask+0x90>)
 8006698:	f7fe ffbe 	bl	8005618 <xTaskCreateStatic>
 800669c:	4603      	mov	r3, r0
 800669e:	4a12      	ldr	r2, [pc, #72]	@ (80066e8 <xTimerCreateTimerTask+0x94>)
 80066a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80066a2:	4b11      	ldr	r3, [pc, #68]	@ (80066e8 <xTimerCreateTimerTask+0x94>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80066aa:	2301      	movs	r3, #1
 80066ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10d      	bne.n	80066d0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b8:	b672      	cpsid	i
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	b662      	cpsie	i
 80066c8:	613b      	str	r3, [r7, #16]
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	e7fd      	b.n	80066cc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80066d0:	697b      	ldr	r3, [r7, #20]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3718      	adds	r7, #24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20001188 	.word	0x20001188
 80066e0:	08008f6c 	.word	0x08008f6c
 80066e4:	0800682d 	.word	0x0800682d
 80066e8:	2000118c 	.word	0x2000118c

080066ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	@ 0x28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10d      	bne.n	8006720 <xTimerGenericCommand+0x34>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006708:	b672      	cpsid	i
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	b662      	cpsie	i
 8006718:	623b      	str	r3, [r7, #32]
}
 800671a:	bf00      	nop
 800671c:	bf00      	nop
 800671e:	e7fd      	b.n	800671c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006720:	4b19      	ldr	r3, [pc, #100]	@ (8006788 <xTimerGenericCommand+0x9c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d02a      	beq.n	800677e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b05      	cmp	r3, #5
 8006738:	dc18      	bgt.n	800676c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800673a:	f7ff fdbd 	bl	80062b8 <xTaskGetSchedulerState>
 800673e:	4603      	mov	r3, r0
 8006740:	2b02      	cmp	r3, #2
 8006742:	d109      	bne.n	8006758 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006744:	4b10      	ldr	r3, [pc, #64]	@ (8006788 <xTimerGenericCommand+0x9c>)
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	f107 0110 	add.w	r1, r7, #16
 800674c:	2300      	movs	r3, #0
 800674e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006750:	f7fe fb5e 	bl	8004e10 <xQueueGenericSend>
 8006754:	6278      	str	r0, [r7, #36]	@ 0x24
 8006756:	e012      	b.n	800677e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006758:	4b0b      	ldr	r3, [pc, #44]	@ (8006788 <xTimerGenericCommand+0x9c>)
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	f107 0110 	add.w	r1, r7, #16
 8006760:	2300      	movs	r3, #0
 8006762:	2200      	movs	r2, #0
 8006764:	f7fe fb54 	bl	8004e10 <xQueueGenericSend>
 8006768:	6278      	str	r0, [r7, #36]	@ 0x24
 800676a:	e008      	b.n	800677e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800676c:	4b06      	ldr	r3, [pc, #24]	@ (8006788 <xTimerGenericCommand+0x9c>)
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	f107 0110 	add.w	r1, r7, #16
 8006774:	2300      	movs	r3, #0
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	f7fe fc54 	bl	8005024 <xQueueGenericSendFromISR>
 800677c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006780:	4618      	mov	r0, r3
 8006782:	3728      	adds	r7, #40	@ 0x28
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20001188 	.word	0x20001188

0800678c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af02      	add	r7, sp, #8
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006796:	4b24      	ldr	r3, [pc, #144]	@ (8006828 <prvProcessExpiredTimer+0x9c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	3304      	adds	r3, #4
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fe f9f3 	bl	8004b90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d025      	beq.n	8006804 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	699a      	ldr	r2, [r3, #24]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	18d1      	adds	r1, r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	6978      	ldr	r0, [r7, #20]
 80067c6:	f000 f8d7 	bl	8006978 <prvInsertTimerInActiveList>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d022      	beq.n	8006816 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067d0:	2300      	movs	r3, #0
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	2300      	movs	r3, #0
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	2100      	movs	r1, #0
 80067da:	6978      	ldr	r0, [r7, #20]
 80067dc:	f7ff ff86 	bl	80066ec <xTimerGenericCommand>
 80067e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d116      	bne.n	8006816 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ec:	b672      	cpsid	i
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	b662      	cpsie	i
 80067fc:	60fb      	str	r3, [r7, #12]
}
 80067fe:	bf00      	nop
 8006800:	bf00      	nop
 8006802:	e7fd      	b.n	8006800 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800680a:	f023 0301 	bic.w	r3, r3, #1
 800680e:	b2da      	uxtb	r2, r3
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	6978      	ldr	r0, [r7, #20]
 800681c:	4798      	blx	r3
}
 800681e:	bf00      	nop
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20001180 	.word	0x20001180

0800682c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006834:	f107 0308 	add.w	r3, r7, #8
 8006838:	4618      	mov	r0, r3
 800683a:	f000 f859 	bl	80068f0 <prvGetNextExpireTime>
 800683e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4619      	mov	r1, r3
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f805 	bl	8006854 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800684a:	f000 f8d7 	bl	80069fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800684e:	bf00      	nop
 8006850:	e7f0      	b.n	8006834 <prvTimerTask+0x8>
	...

08006854 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800685e:	f7ff f915 	bl	8005a8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006862:	f107 0308 	add.w	r3, r7, #8
 8006866:	4618      	mov	r0, r3
 8006868:	f000 f866 	bl	8006938 <prvSampleTimeNow>
 800686c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d130      	bne.n	80068d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <prvProcessTimerOrBlockTask+0x3c>
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	429a      	cmp	r2, r3
 8006880:	d806      	bhi.n	8006890 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006882:	f7ff f911 	bl	8005aa8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006886:	68f9      	ldr	r1, [r7, #12]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff ff7f 	bl	800678c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800688e:	e024      	b.n	80068da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d008      	beq.n	80068a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006896:	4b13      	ldr	r3, [pc, #76]	@ (80068e4 <prvProcessTimerOrBlockTask+0x90>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <prvProcessTimerOrBlockTask+0x50>
 80068a0:	2301      	movs	r3, #1
 80068a2:	e000      	b.n	80068a6 <prvProcessTimerOrBlockTask+0x52>
 80068a4:	2300      	movs	r3, #0
 80068a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068a8:	4b0f      	ldr	r3, [pc, #60]	@ (80068e8 <prvProcessTimerOrBlockTask+0x94>)
 80068aa:	6818      	ldr	r0, [r3, #0]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	4619      	mov	r1, r3
 80068b6:	f7fe fe7b 	bl	80055b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068ba:	f7ff f8f5 	bl	8005aa8 <xTaskResumeAll>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80068c4:	4b09      	ldr	r3, [pc, #36]	@ (80068ec <prvProcessTimerOrBlockTask+0x98>)
 80068c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	f3bf 8f6f 	isb	sy
}
 80068d4:	e001      	b.n	80068da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80068d6:	f7ff f8e7 	bl	8005aa8 <xTaskResumeAll>
}
 80068da:	bf00      	nop
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20001184 	.word	0x20001184
 80068e8:	20001188 	.word	0x20001188
 80068ec:	e000ed04 	.word	0xe000ed04

080068f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068f8:	4b0e      	ldr	r3, [pc, #56]	@ (8006934 <prvGetNextExpireTime+0x44>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <prvGetNextExpireTime+0x16>
 8006902:	2201      	movs	r2, #1
 8006904:	e000      	b.n	8006908 <prvGetNextExpireTime+0x18>
 8006906:	2200      	movs	r2, #0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d105      	bne.n	8006920 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006914:	4b07      	ldr	r3, [pc, #28]	@ (8006934 <prvGetNextExpireTime+0x44>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	e001      	b.n	8006924 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006924:	68fb      	ldr	r3, [r7, #12]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20001180 	.word	0x20001180

08006938 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006940:	f7ff f952 	bl	8005be8 <xTaskGetTickCount>
 8006944:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006946:	4b0b      	ldr	r3, [pc, #44]	@ (8006974 <prvSampleTimeNow+0x3c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	429a      	cmp	r2, r3
 800694e:	d205      	bcs.n	800695c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006950:	f000 f940 	bl	8006bd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	e002      	b.n	8006962 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006962:	4a04      	ldr	r2, [pc, #16]	@ (8006974 <prvSampleTimeNow+0x3c>)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006968:	68fb      	ldr	r3, [r7, #12]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20001190 	.word	0x20001190

08006978 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006986:	2300      	movs	r3, #0
 8006988:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	429a      	cmp	r2, r3
 800699c:	d812      	bhi.n	80069c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	1ad2      	subs	r2, r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d302      	bcc.n	80069b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80069ac:	2301      	movs	r3, #1
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	e01b      	b.n	80069ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069b2:	4b10      	ldr	r3, [pc, #64]	@ (80069f4 <prvInsertTimerInActiveList+0x7c>)
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3304      	adds	r3, #4
 80069ba:	4619      	mov	r1, r3
 80069bc:	4610      	mov	r0, r2
 80069be:	f7fe f8ae 	bl	8004b1e <vListInsert>
 80069c2:	e012      	b.n	80069ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d206      	bcs.n	80069da <prvInsertTimerInActiveList+0x62>
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d302      	bcc.n	80069da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80069d4:	2301      	movs	r3, #1
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	e007      	b.n	80069ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069da:	4b07      	ldr	r3, [pc, #28]	@ (80069f8 <prvInsertTimerInActiveList+0x80>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3304      	adds	r3, #4
 80069e2:	4619      	mov	r1, r3
 80069e4:	4610      	mov	r0, r2
 80069e6:	f7fe f89a 	bl	8004b1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069ea:	697b      	ldr	r3, [r7, #20]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20001184 	.word	0x20001184
 80069f8:	20001180 	.word	0x20001180

080069fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08e      	sub	sp, #56	@ 0x38
 8006a00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a02:	e0d4      	b.n	8006bae <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	da1b      	bge.n	8006a42 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a0a:	1d3b      	adds	r3, r7, #4
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10d      	bne.n	8006a32 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	b672      	cpsid	i
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	b662      	cpsie	i
 8006a2a:	61fb      	str	r3, [r7, #28]
}
 8006a2c:	bf00      	nop
 8006a2e:	bf00      	nop
 8006a30:	e7fd      	b.n	8006a2e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a38:	6850      	ldr	r0, [r2, #4]
 8006a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a3c:	6892      	ldr	r2, [r2, #8]
 8006a3e:	4611      	mov	r1, r2
 8006a40:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f2c0 80b2 	blt.w	8006bae <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe f898 	bl	8004b90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a60:	463b      	mov	r3, r7
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff ff68 	bl	8006938 <prvSampleTimeNow>
 8006a68:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b09      	cmp	r3, #9
 8006a6e:	f200 809b 	bhi.w	8006ba8 <prvProcessReceivedCommands+0x1ac>
 8006a72:	a201      	add	r2, pc, #4	@ (adr r2, 8006a78 <prvProcessReceivedCommands+0x7c>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006aa1 	.word	0x08006aa1
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa1 	.word	0x08006aa1
 8006a84:	08006b1b 	.word	0x08006b1b
 8006a88:	08006b2f 	.word	0x08006b2f
 8006a8c:	08006b7f 	.word	0x08006b7f
 8006a90:	08006aa1 	.word	0x08006aa1
 8006a94:	08006aa1 	.word	0x08006aa1
 8006a98:	08006b1b 	.word	0x08006b1b
 8006a9c:	08006b2f 	.word	0x08006b2f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	18d1      	adds	r1, r2, r3
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006abe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ac0:	f7ff ff5a 	bl	8006978 <prvInsertTimerInActiveList>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d070      	beq.n	8006bac <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ad0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d065      	beq.n	8006bac <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	441a      	add	r2, r3
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	2300      	movs	r3, #0
 8006aee:	2100      	movs	r1, #0
 8006af0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006af2:	f7ff fdfb 	bl	80066ec <xTimerGenericCommand>
 8006af6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d156      	bne.n	8006bac <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b02:	b672      	cpsid	i
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	b662      	cpsie	i
 8006b12:	61bb      	str	r3, [r7, #24]
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop
 8006b18:	e7fd      	b.n	8006b16 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006b2c:	e03f      	b.n	8006bae <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b34:	f043 0301 	orr.w	r3, r3, #1
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b44:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10d      	bne.n	8006b6a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b52:	b672      	cpsid	i
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	b662      	cpsie	i
 8006b62:	617b      	str	r3, [r7, #20]
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	e7fd      	b.n	8006b66 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	18d1      	adds	r1, r2, r3
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b78:	f7ff fefe 	bl	8006978 <prvInsertTimerInActiveList>
					break;
 8006b7c:	e017      	b.n	8006bae <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d103      	bne.n	8006b94 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8006b8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b8e:	f000 fbd1 	bl	8007334 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b92:	e00c      	b.n	8006bae <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b9a:	f023 0301 	bic.w	r3, r3, #1
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006ba6:	e002      	b.n	8006bae <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8006ba8:	bf00      	nop
 8006baa:	e000      	b.n	8006bae <prvProcessReceivedCommands+0x1b2>
					break;
 8006bac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bae:	4b08      	ldr	r3, [pc, #32]	@ (8006bd0 <prvProcessReceivedCommands+0x1d4>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	1d39      	adds	r1, r7, #4
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe fad8 	bl	800516c <xQueueReceive>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f47f af20 	bne.w	8006a04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop
 8006bc8:	3730      	adds	r7, #48	@ 0x30
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20001188 	.word	0x20001188

08006bd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bda:	e04b      	b.n	8006c74 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8006c9c <prvSwitchTimerLists+0xc8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006be6:	4b2d      	ldr	r3, [pc, #180]	@ (8006c9c <prvSwitchTimerLists+0xc8>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fd ffcb 	bl	8004b90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d031      	beq.n	8006c74 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4413      	add	r3, r2
 8006c18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d90e      	bls.n	8006c40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8006c9c <prvSwitchTimerLists+0xc8>)
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3304      	adds	r3, #4
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f7fd ff70 	bl	8004b1e <vListInsert>
 8006c3e:	e019      	b.n	8006c74 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c40:	2300      	movs	r3, #0
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	2300      	movs	r3, #0
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	2100      	movs	r1, #0
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f7ff fd4e 	bl	80066ec <xTimerGenericCommand>
 8006c50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10d      	bne.n	8006c74 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5c:	b672      	cpsid	i
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	b662      	cpsie	i
 8006c6c:	603b      	str	r3, [r7, #0]
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	e7fd      	b.n	8006c70 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c74:	4b09      	ldr	r3, [pc, #36]	@ (8006c9c <prvSwitchTimerLists+0xc8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1ae      	bne.n	8006bdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c7e:	4b07      	ldr	r3, [pc, #28]	@ (8006c9c <prvSwitchTimerLists+0xc8>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c84:	4b06      	ldr	r3, [pc, #24]	@ (8006ca0 <prvSwitchTimerLists+0xcc>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a04      	ldr	r2, [pc, #16]	@ (8006c9c <prvSwitchTimerLists+0xc8>)
 8006c8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c8c:	4a04      	ldr	r2, [pc, #16]	@ (8006ca0 <prvSwitchTimerLists+0xcc>)
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	6013      	str	r3, [r2, #0]
}
 8006c92:	bf00      	nop
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20001180 	.word	0x20001180
 8006ca0:	20001184 	.word	0x20001184

08006ca4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006caa:	f000 f947 	bl	8006f3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006cae:	4b15      	ldr	r3, [pc, #84]	@ (8006d04 <prvCheckForValidListAndQueue+0x60>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d120      	bne.n	8006cf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006cb6:	4814      	ldr	r0, [pc, #80]	@ (8006d08 <prvCheckForValidListAndQueue+0x64>)
 8006cb8:	f7fd fee0 	bl	8004a7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006cbc:	4813      	ldr	r0, [pc, #76]	@ (8006d0c <prvCheckForValidListAndQueue+0x68>)
 8006cbe:	f7fd fedd 	bl	8004a7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006cc2:	4b13      	ldr	r3, [pc, #76]	@ (8006d10 <prvCheckForValidListAndQueue+0x6c>)
 8006cc4:	4a10      	ldr	r2, [pc, #64]	@ (8006d08 <prvCheckForValidListAndQueue+0x64>)
 8006cc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006cc8:	4b12      	ldr	r3, [pc, #72]	@ (8006d14 <prvCheckForValidListAndQueue+0x70>)
 8006cca:	4a10      	ldr	r2, [pc, #64]	@ (8006d0c <prvCheckForValidListAndQueue+0x68>)
 8006ccc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006cce:	2300      	movs	r3, #0
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	4b11      	ldr	r3, [pc, #68]	@ (8006d18 <prvCheckForValidListAndQueue+0x74>)
 8006cd4:	4a11      	ldr	r2, [pc, #68]	@ (8006d1c <prvCheckForValidListAndQueue+0x78>)
 8006cd6:	2110      	movs	r1, #16
 8006cd8:	200a      	movs	r0, #10
 8006cda:	f7fd ffef 	bl	8004cbc <xQueueGenericCreateStatic>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	4a08      	ldr	r2, [pc, #32]	@ (8006d04 <prvCheckForValidListAndQueue+0x60>)
 8006ce2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ce4:	4b07      	ldr	r3, [pc, #28]	@ (8006d04 <prvCheckForValidListAndQueue+0x60>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006cec:	4b05      	ldr	r3, [pc, #20]	@ (8006d04 <prvCheckForValidListAndQueue+0x60>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	490b      	ldr	r1, [pc, #44]	@ (8006d20 <prvCheckForValidListAndQueue+0x7c>)
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe fc32 	bl	800555c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cf8:	f000 f956 	bl	8006fa8 <vPortExitCritical>
}
 8006cfc:	bf00      	nop
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20001188 	.word	0x20001188
 8006d08:	20001158 	.word	0x20001158
 8006d0c:	2000116c 	.word	0x2000116c
 8006d10:	20001180 	.word	0x20001180
 8006d14:	20001184 	.word	0x20001184
 8006d18:	20001234 	.word	0x20001234
 8006d1c:	20001194 	.word	0x20001194
 8006d20:	08008f74 	.word	0x08008f74

08006d24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3b04      	subs	r3, #4
 8006d34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3b04      	subs	r3, #4
 8006d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f023 0201 	bic.w	r2, r3, #1
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3b04      	subs	r3, #4
 8006d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d54:	4a0c      	ldr	r2, [pc, #48]	@ (8006d88 <pxPortInitialiseStack+0x64>)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3b14      	subs	r3, #20
 8006d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3b04      	subs	r3, #4
 8006d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f06f 0202 	mvn.w	r2, #2
 8006d72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3b20      	subs	r3, #32
 8006d78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	08006d8d 	.word	0x08006d8d

08006d8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d96:	4b15      	ldr	r3, [pc, #84]	@ (8006dec <prvTaskExitError+0x60>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	d00d      	beq.n	8006dbc <prvTaskExitError+0x30>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da4:	b672      	cpsid	i
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	b662      	cpsie	i
 8006db4:	60fb      	str	r3, [r7, #12]
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	e7fd      	b.n	8006db8 <prvTaskExitError+0x2c>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	b672      	cpsid	i
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	b662      	cpsie	i
 8006dd0:	60bb      	str	r3, [r7, #8]
}
 8006dd2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006dd4:	bf00      	nop
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0fc      	beq.n	8006dd6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	2000000c 	.word	0x2000000c

08006df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006df0:	4b07      	ldr	r3, [pc, #28]	@ (8006e10 <pxCurrentTCBConst2>)
 8006df2:	6819      	ldr	r1, [r3, #0]
 8006df4:	6808      	ldr	r0, [r1, #0]
 8006df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfa:	f380 8809 	msr	PSP, r0
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f04f 0000 	mov.w	r0, #0
 8006e06:	f380 8811 	msr	BASEPRI, r0
 8006e0a:	4770      	bx	lr
 8006e0c:	f3af 8000 	nop.w

08006e10 <pxCurrentTCBConst2>:
 8006e10:	20000c58 	.word	0x20000c58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop

08006e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e18:	4808      	ldr	r0, [pc, #32]	@ (8006e3c <prvPortStartFirstTask+0x24>)
 8006e1a:	6800      	ldr	r0, [r0, #0]
 8006e1c:	6800      	ldr	r0, [r0, #0]
 8006e1e:	f380 8808 	msr	MSP, r0
 8006e22:	f04f 0000 	mov.w	r0, #0
 8006e26:	f380 8814 	msr	CONTROL, r0
 8006e2a:	b662      	cpsie	i
 8006e2c:	b661      	cpsie	f
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	df00      	svc	0
 8006e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e3a:	bf00      	nop
 8006e3c:	e000ed08 	.word	0xe000ed08

08006e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e46:	4b37      	ldr	r3, [pc, #220]	@ (8006f24 <xPortStartScheduler+0xe4>)
 8006e48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	22ff      	movs	r2, #255	@ 0xff
 8006e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8006f28 <xPortStartScheduler+0xe8>)
 8006e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8006f2c <xPortStartScheduler+0xec>)
 8006e70:	2207      	movs	r2, #7
 8006e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e74:	e009      	b.n	8006e8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006e76:	4b2d      	ldr	r3, [pc, #180]	@ (8006f2c <xPortStartScheduler+0xec>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8006f2c <xPortStartScheduler+0xec>)
 8006e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e92:	2b80      	cmp	r3, #128	@ 0x80
 8006e94:	d0ef      	beq.n	8006e76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e96:	4b25      	ldr	r3, [pc, #148]	@ (8006f2c <xPortStartScheduler+0xec>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f1c3 0307 	rsb	r3, r3, #7
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d00d      	beq.n	8006ebe <xPortStartScheduler+0x7e>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea6:	b672      	cpsid	i
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	b662      	cpsie	i
 8006eb6:	60bb      	str	r3, [r7, #8]
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	e7fd      	b.n	8006eba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8006f2c <xPortStartScheduler+0xec>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	4a19      	ldr	r2, [pc, #100]	@ (8006f2c <xPortStartScheduler+0xec>)
 8006ec6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ec8:	4b18      	ldr	r3, [pc, #96]	@ (8006f2c <xPortStartScheduler+0xec>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ed0:	4a16      	ldr	r2, [pc, #88]	@ (8006f2c <xPortStartScheduler+0xec>)
 8006ed2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006edc:	4b14      	ldr	r3, [pc, #80]	@ (8006f30 <xPortStartScheduler+0xf0>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a13      	ldr	r2, [pc, #76]	@ (8006f30 <xPortStartScheduler+0xf0>)
 8006ee2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ee6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ee8:	4b11      	ldr	r3, [pc, #68]	@ (8006f30 <xPortStartScheduler+0xf0>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a10      	ldr	r2, [pc, #64]	@ (8006f30 <xPortStartScheduler+0xf0>)
 8006eee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ef2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ef4:	f000 f8dc 	bl	80070b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f34 <xPortStartScheduler+0xf4>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006efe:	f000 f8fb 	bl	80070f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f02:	4b0d      	ldr	r3, [pc, #52]	@ (8006f38 <xPortStartScheduler+0xf8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a0c      	ldr	r2, [pc, #48]	@ (8006f38 <xPortStartScheduler+0xf8>)
 8006f08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006f0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f0e:	f7ff ff83 	bl	8006e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f12:	f7fe ff35 	bl	8005d80 <vTaskSwitchContext>
	prvTaskExitError();
 8006f16:	f7ff ff39 	bl	8006d8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	e000e400 	.word	0xe000e400
 8006f28:	20001284 	.word	0x20001284
 8006f2c:	20001288 	.word	0x20001288
 8006f30:	e000ed20 	.word	0xe000ed20
 8006f34:	2000000c 	.word	0x2000000c
 8006f38:	e000ef34 	.word	0xe000ef34

08006f3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f46:	b672      	cpsid	i
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	b662      	cpsie	i
 8006f56:	607b      	str	r3, [r7, #4]
}
 8006f58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f5a:	4b11      	ldr	r3, [pc, #68]	@ (8006fa0 <vPortEnterCritical+0x64>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	4a0f      	ldr	r2, [pc, #60]	@ (8006fa0 <vPortEnterCritical+0x64>)
 8006f62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f64:	4b0e      	ldr	r3, [pc, #56]	@ (8006fa0 <vPortEnterCritical+0x64>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d112      	bne.n	8006f92 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa4 <vPortEnterCritical+0x68>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00d      	beq.n	8006f92 <vPortEnterCritical+0x56>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7a:	b672      	cpsid	i
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	b662      	cpsie	i
 8006f8a:	603b      	str	r3, [r7, #0]
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	e7fd      	b.n	8006f8e <vPortEnterCritical+0x52>
	}
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	2000000c 	.word	0x2000000c
 8006fa4:	e000ed04 	.word	0xe000ed04

08006fa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fae:	4b13      	ldr	r3, [pc, #76]	@ (8006ffc <vPortExitCritical+0x54>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10d      	bne.n	8006fd2 <vPortExitCritical+0x2a>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fba:	b672      	cpsid	i
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	b662      	cpsie	i
 8006fca:	607b      	str	r3, [r7, #4]
}
 8006fcc:	bf00      	nop
 8006fce:	bf00      	nop
 8006fd0:	e7fd      	b.n	8006fce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006ffc <vPortExitCritical+0x54>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	4a08      	ldr	r2, [pc, #32]	@ (8006ffc <vPortExitCritical+0x54>)
 8006fda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fdc:	4b07      	ldr	r3, [pc, #28]	@ (8006ffc <vPortExitCritical+0x54>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d105      	bne.n	8006ff0 <vPortExitCritical+0x48>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	f383 8811 	msr	BASEPRI, r3
}
 8006fee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	2000000c 	.word	0x2000000c

08007000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007000:	f3ef 8009 	mrs	r0, PSP
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	4b15      	ldr	r3, [pc, #84]	@ (8007060 <pxCurrentTCBConst>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	f01e 0f10 	tst.w	lr, #16
 8007010:	bf08      	it	eq
 8007012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701a:	6010      	str	r0, [r2, #0]
 800701c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007020:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007024:	b672      	cpsid	i
 8007026:	f380 8811 	msr	BASEPRI, r0
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	b662      	cpsie	i
 8007034:	f7fe fea4 	bl	8005d80 <vTaskSwitchContext>
 8007038:	f04f 0000 	mov.w	r0, #0
 800703c:	f380 8811 	msr	BASEPRI, r0
 8007040:	bc09      	pop	{r0, r3}
 8007042:	6819      	ldr	r1, [r3, #0]
 8007044:	6808      	ldr	r0, [r1, #0]
 8007046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704a:	f01e 0f10 	tst.w	lr, #16
 800704e:	bf08      	it	eq
 8007050:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007054:	f380 8809 	msr	PSP, r0
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop

08007060 <pxCurrentTCBConst>:
 8007060:	20000c58 	.word	0x20000c58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop

08007068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007072:	b672      	cpsid	i
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	b662      	cpsie	i
 8007082:	607b      	str	r3, [r7, #4]
}
 8007084:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007086:	f7fe fdbf 	bl	8005c08 <xTaskIncrementTick>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007090:	4b06      	ldr	r3, [pc, #24]	@ (80070ac <SysTick_Handler+0x44>)
 8007092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	2300      	movs	r3, #0
 800709a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	f383 8811 	msr	BASEPRI, r3
}
 80070a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	e000ed04 	.word	0xe000ed04

080070b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070b4:	4b0b      	ldr	r3, [pc, #44]	@ (80070e4 <vPortSetupTimerInterrupt+0x34>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070ba:	4b0b      	ldr	r3, [pc, #44]	@ (80070e8 <vPortSetupTimerInterrupt+0x38>)
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070c0:	4b0a      	ldr	r3, [pc, #40]	@ (80070ec <vPortSetupTimerInterrupt+0x3c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a0a      	ldr	r2, [pc, #40]	@ (80070f0 <vPortSetupTimerInterrupt+0x40>)
 80070c6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ca:	099b      	lsrs	r3, r3, #6
 80070cc:	4a09      	ldr	r2, [pc, #36]	@ (80070f4 <vPortSetupTimerInterrupt+0x44>)
 80070ce:	3b01      	subs	r3, #1
 80070d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070d2:	4b04      	ldr	r3, [pc, #16]	@ (80070e4 <vPortSetupTimerInterrupt+0x34>)
 80070d4:	2207      	movs	r2, #7
 80070d6:	601a      	str	r2, [r3, #0]
}
 80070d8:	bf00      	nop
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	e000e010 	.word	0xe000e010
 80070e8:	e000e018 	.word	0xe000e018
 80070ec:	20000000 	.word	0x20000000
 80070f0:	10624dd3 	.word	0x10624dd3
 80070f4:	e000e014 	.word	0xe000e014

080070f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007108 <vPortEnableVFP+0x10>
 80070fc:	6801      	ldr	r1, [r0, #0]
 80070fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007102:	6001      	str	r1, [r0, #0]
 8007104:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007106:	bf00      	nop
 8007108:	e000ed88 	.word	0xe000ed88

0800710c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007112:	f3ef 8305 	mrs	r3, IPSR
 8007116:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b0f      	cmp	r3, #15
 800711c:	d917      	bls.n	800714e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800711e:	4a1a      	ldr	r2, [pc, #104]	@ (8007188 <vPortValidateInterruptPriority+0x7c>)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4413      	add	r3, r2
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007128:	4b18      	ldr	r3, [pc, #96]	@ (800718c <vPortValidateInterruptPriority+0x80>)
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	7afa      	ldrb	r2, [r7, #11]
 800712e:	429a      	cmp	r2, r3
 8007130:	d20d      	bcs.n	800714e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007136:	b672      	cpsid	i
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	b662      	cpsie	i
 8007146:	607b      	str	r3, [r7, #4]
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	e7fd      	b.n	800714a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800714e:	4b10      	ldr	r3, [pc, #64]	@ (8007190 <vPortValidateInterruptPriority+0x84>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007156:	4b0f      	ldr	r3, [pc, #60]	@ (8007194 <vPortValidateInterruptPriority+0x88>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d90d      	bls.n	800717a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007162:	b672      	cpsid	i
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	b662      	cpsie	i
 8007172:	603b      	str	r3, [r7, #0]
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop
 8007178:	e7fd      	b.n	8007176 <vPortValidateInterruptPriority+0x6a>
	}
 800717a:	bf00      	nop
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	e000e3f0 	.word	0xe000e3f0
 800718c:	20001284 	.word	0x20001284
 8007190:	e000ed0c 	.word	0xe000ed0c
 8007194:	20001288 	.word	0x20001288

08007198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08a      	sub	sp, #40	@ 0x28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071a4:	f7fe fc72 	bl	8005a8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071a8:	4b5d      	ldr	r3, [pc, #372]	@ (8007320 <pvPortMalloc+0x188>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071b0:	f000 f920 	bl	80073f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007324 <pvPortMalloc+0x18c>)
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4013      	ands	r3, r2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 8094 	bne.w	80072ea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d020      	beq.n	800720a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80071c8:	2208      	movs	r2, #8
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4413      	add	r3, r2
 80071ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d017      	beq.n	800720a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f023 0307 	bic.w	r3, r3, #7
 80071e0:	3308      	adds	r3, #8
 80071e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00d      	beq.n	800720a <pvPortMalloc+0x72>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f2:	b672      	cpsid	i
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	b662      	cpsie	i
 8007202:	617b      	str	r3, [r7, #20]
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	e7fd      	b.n	8007206 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d06c      	beq.n	80072ea <pvPortMalloc+0x152>
 8007210:	4b45      	ldr	r3, [pc, #276]	@ (8007328 <pvPortMalloc+0x190>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	429a      	cmp	r2, r3
 8007218:	d867      	bhi.n	80072ea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800721a:	4b44      	ldr	r3, [pc, #272]	@ (800732c <pvPortMalloc+0x194>)
 800721c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800721e:	4b43      	ldr	r3, [pc, #268]	@ (800732c <pvPortMalloc+0x194>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007224:	e004      	b.n	8007230 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	429a      	cmp	r2, r3
 8007238:	d903      	bls.n	8007242 <pvPortMalloc+0xaa>
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f1      	bne.n	8007226 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007242:	4b37      	ldr	r3, [pc, #220]	@ (8007320 <pvPortMalloc+0x188>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007248:	429a      	cmp	r2, r3
 800724a:	d04e      	beq.n	80072ea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2208      	movs	r2, #8
 8007252:	4413      	add	r3, r2
 8007254:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	1ad2      	subs	r2, r2, r3
 8007266:	2308      	movs	r3, #8
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	429a      	cmp	r2, r3
 800726c:	d922      	bls.n	80072b4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800726e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4413      	add	r3, r2
 8007274:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00d      	beq.n	800729c <pvPortMalloc+0x104>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007284:	b672      	cpsid	i
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	b662      	cpsie	i
 8007294:	613b      	str	r3, [r7, #16]
}
 8007296:	bf00      	nop
 8007298:	bf00      	nop
 800729a:	e7fd      	b.n	8007298 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	1ad2      	subs	r2, r2, r3
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072ae:	69b8      	ldr	r0, [r7, #24]
 80072b0:	f000 f902 	bl	80074b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007328 <pvPortMalloc+0x190>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	4a1a      	ldr	r2, [pc, #104]	@ (8007328 <pvPortMalloc+0x190>)
 80072c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072c2:	4b19      	ldr	r3, [pc, #100]	@ (8007328 <pvPortMalloc+0x190>)
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007330 <pvPortMalloc+0x198>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d203      	bcs.n	80072d6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072ce:	4b16      	ldr	r3, [pc, #88]	@ (8007328 <pvPortMalloc+0x190>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a17      	ldr	r2, [pc, #92]	@ (8007330 <pvPortMalloc+0x198>)
 80072d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	4b12      	ldr	r3, [pc, #72]	@ (8007324 <pvPortMalloc+0x18c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	431a      	orrs	r2, r3
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072ea:	f7fe fbdd 	bl	8005aa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	f003 0307 	and.w	r3, r3, #7
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00d      	beq.n	8007314 <pvPortMalloc+0x17c>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fc:	b672      	cpsid	i
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	b662      	cpsie	i
 800730c:	60fb      	str	r3, [r7, #12]
}
 800730e:	bf00      	nop
 8007310:	bf00      	nop
 8007312:	e7fd      	b.n	8007310 <pvPortMalloc+0x178>
	return pvReturn;
 8007314:	69fb      	ldr	r3, [r7, #28]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3728      	adds	r7, #40	@ 0x28
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20004e94 	.word	0x20004e94
 8007324:	20004ea0 	.word	0x20004ea0
 8007328:	20004e98 	.word	0x20004e98
 800732c:	20004e8c 	.word	0x20004e8c
 8007330:	20004e9c 	.word	0x20004e9c

08007334 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d04e      	beq.n	80073e4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007346:	2308      	movs	r3, #8
 8007348:	425b      	negs	r3, r3
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	4413      	add	r3, r2
 800734e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	4b24      	ldr	r3, [pc, #144]	@ (80073ec <vPortFree+0xb8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4013      	ands	r3, r2
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10d      	bne.n	800737e <vPortFree+0x4a>
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007366:	b672      	cpsid	i
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	b662      	cpsie	i
 8007376:	60fb      	str	r3, [r7, #12]
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	e7fd      	b.n	800737a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00d      	beq.n	80073a2 <vPortFree+0x6e>
	__asm volatile
 8007386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738a:	b672      	cpsid	i
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	b662      	cpsie	i
 800739a:	60bb      	str	r3, [r7, #8]
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	e7fd      	b.n	800739e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	4b11      	ldr	r3, [pc, #68]	@ (80073ec <vPortFree+0xb8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d019      	beq.n	80073e4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d115      	bne.n	80073e4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	4b0b      	ldr	r3, [pc, #44]	@ (80073ec <vPortFree+0xb8>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	43db      	mvns	r3, r3
 80073c2:	401a      	ands	r2, r3
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073c8:	f7fe fb60 	bl	8005a8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	4b07      	ldr	r3, [pc, #28]	@ (80073f0 <vPortFree+0xbc>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4413      	add	r3, r2
 80073d6:	4a06      	ldr	r2, [pc, #24]	@ (80073f0 <vPortFree+0xbc>)
 80073d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073da:	6938      	ldr	r0, [r7, #16]
 80073dc:	f000 f86c 	bl	80074b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80073e0:	f7fe fb62 	bl	8005aa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073e4:	bf00      	nop
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20004ea0 	.word	0x20004ea0
 80073f0:	20004e98 	.word	0x20004e98

080073f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073fa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80073fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007400:	4b27      	ldr	r3, [pc, #156]	@ (80074a0 <prvHeapInit+0xac>)
 8007402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00c      	beq.n	8007428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3307      	adds	r3, #7
 8007412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 0307 	bic.w	r3, r3, #7
 800741a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	4a1f      	ldr	r2, [pc, #124]	@ (80074a0 <prvHeapInit+0xac>)
 8007424:	4413      	add	r3, r2
 8007426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800742c:	4a1d      	ldr	r2, [pc, #116]	@ (80074a4 <prvHeapInit+0xb0>)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007432:	4b1c      	ldr	r3, [pc, #112]	@ (80074a4 <prvHeapInit+0xb0>)
 8007434:	2200      	movs	r2, #0
 8007436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	4413      	add	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007440:	2208      	movs	r2, #8
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	1a9b      	subs	r3, r3, r2
 8007446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0307 	bic.w	r3, r3, #7
 800744e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4a15      	ldr	r2, [pc, #84]	@ (80074a8 <prvHeapInit+0xb4>)
 8007454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007456:	4b14      	ldr	r3, [pc, #80]	@ (80074a8 <prvHeapInit+0xb4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2200      	movs	r2, #0
 800745c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800745e:	4b12      	ldr	r3, [pc, #72]	@ (80074a8 <prvHeapInit+0xb4>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	1ad2      	subs	r2, r2, r3
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007474:	4b0c      	ldr	r3, [pc, #48]	@ (80074a8 <prvHeapInit+0xb4>)
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	4a0a      	ldr	r2, [pc, #40]	@ (80074ac <prvHeapInit+0xb8>)
 8007482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	4a09      	ldr	r2, [pc, #36]	@ (80074b0 <prvHeapInit+0xbc>)
 800748a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800748c:	4b09      	ldr	r3, [pc, #36]	@ (80074b4 <prvHeapInit+0xc0>)
 800748e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007492:	601a      	str	r2, [r3, #0]
}
 8007494:	bf00      	nop
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	2000128c 	.word	0x2000128c
 80074a4:	20004e8c 	.word	0x20004e8c
 80074a8:	20004e94 	.word	0x20004e94
 80074ac:	20004e9c 	.word	0x20004e9c
 80074b0:	20004e98 	.word	0x20004e98
 80074b4:	20004ea0 	.word	0x20004ea0

080074b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074c0:	4b28      	ldr	r3, [pc, #160]	@ (8007564 <prvInsertBlockIntoFreeList+0xac>)
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	e002      	b.n	80074cc <prvInsertBlockIntoFreeList+0x14>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d8f7      	bhi.n	80074c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	4413      	add	r3, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d108      	bne.n	80074fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	441a      	add	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	441a      	add	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d118      	bne.n	8007540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	4b15      	ldr	r3, [pc, #84]	@ (8007568 <prvInsertBlockIntoFreeList+0xb0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d00d      	beq.n	8007536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	441a      	add	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	e008      	b.n	8007548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007536:	4b0c      	ldr	r3, [pc, #48]	@ (8007568 <prvInsertBlockIntoFreeList+0xb0>)
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	e003      	b.n	8007548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	429a      	cmp	r2, r3
 800754e:	d002      	beq.n	8007556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007556:	bf00      	nop
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	20004e8c 	.word	0x20004e8c
 8007568:	20004e94 	.word	0x20004e94

0800756c <drv_uart_init_IT>:
extern UART_HandleTypeDef huart1;

static TaskHandle_t rxTaskHandle = NULL;   // Tâche à notifier quand un caractère arrive
static uint8_t rxBuffer;                   // Buffer pour 1 caractère reçu

void drv_uart_init_IT(void) {
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
    // Lancement de la première réception en IT
    HAL_UART_Receive_IT(&huart1, &rxBuffer, 1);
 8007570:	2201      	movs	r2, #1
 8007572:	4903      	ldr	r1, [pc, #12]	@ (8007580 <drv_uart_init_IT+0x14>)
 8007574:	4803      	ldr	r0, [pc, #12]	@ (8007584 <drv_uart_init_IT+0x18>)
 8007576:	f7fc f83a 	bl	80035ee <HAL_UART_Receive_IT>
}
 800757a:	bf00      	nop
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20004ea8 	.word	0x20004ea8
 8007584:	2000043c 	.word	0x2000043c

08007588 <drv_uart_transmit>:

uint8_t drv_uart_transmit(char *pData, uint16_t size) {
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	807b      	strh	r3, [r7, #2]
    return (HAL_UART_Transmit(&huart1, (uint8_t *)pData, size, HAL_MAX_DELAY) == HAL_OK) ? 0 : 1;
 8007594:	887a      	ldrh	r2, [r7, #2]
 8007596:	f04f 33ff 	mov.w	r3, #4294967295
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	4806      	ldr	r0, [pc, #24]	@ (80075b8 <drv_uart_transmit+0x30>)
 800759e:	f7fb ff9d 	bl	80034dc <HAL_UART_Transmit>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	bf14      	ite	ne
 80075a8:	2301      	movne	r3, #1
 80075aa:	2300      	moveq	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	2000043c 	.word	0x2000043c

080075bc <drv_uart_receive>:

uint8_t drv_uart_receive(char *pData, uint16_t size) {
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	807b      	strh	r3, [r7, #2]
    if (size != 1) return 1;
 80075c8:	887b      	ldrh	r3, [r7, #2]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d001      	beq.n	80075d2 <drv_uart_receive+0x16>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e00e      	b.n	80075f0 <drv_uart_receive+0x34>

    // Enregistrement la tâche courante pour notification
    rxTaskHandle = xTaskGetCurrentTaskHandle();
 80075d2:	f7fe fe61 	bl	8006298 <xTaskGetCurrentTaskHandle>
 80075d6:	4603      	mov	r3, r0
 80075d8:	4a07      	ldr	r2, [pc, #28]	@ (80075f8 <drv_uart_receive+0x3c>)
 80075da:	6013      	str	r3, [r2, #0]

    // Attente de la notification de réception
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80075dc:	f04f 31ff 	mov.w	r1, #4294967295
 80075e0:	2001      	movs	r0, #1
 80075e2:	f7fe fefb 	bl	80063dc <ulTaskNotifyTake>

    *pData = rxBuffer;
 80075e6:	4b05      	ldr	r3, [pc, #20]	@ (80075fc <drv_uart_receive+0x40>)
 80075e8:	781a      	ldrb	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	701a      	strb	r2, [r3, #0]
    return 0;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	20004ea4 	.word	0x20004ea4
 80075fc:	20004ea8 	.word	0x20004ea8

08007600 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1 && rxTaskHandle != NULL) {
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a13      	ldr	r2, [pc, #76]	@ (800765c <HAL_UART_RxCpltCallback+0x5c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d120      	bne.n	8007654 <HAL_UART_RxCpltCallback+0x54>
 8007612:	4b13      	ldr	r3, [pc, #76]	@ (8007660 <HAL_UART_RxCpltCallback+0x60>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d01c      	beq.n	8007654 <HAL_UART_RxCpltCallback+0x54>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]

        // Pour debug
        //HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);

        vTaskNotifyGiveFromISR(rxTaskHandle, &xHigherPriorityTaskWoken);
 800761e:	4b10      	ldr	r3, [pc, #64]	@ (8007660 <HAL_UART_RxCpltCallback+0x60>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f107 020c 	add.w	r2, r7, #12
 8007626:	4611      	mov	r1, r2
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe ff23 	bl	8006474 <vTaskNotifyGiveFromISR>
        rxTaskHandle = NULL;
 800762e:	4b0c      	ldr	r3, [pc, #48]	@ (8007660 <HAL_UART_RxCpltCallback+0x60>)
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]

        HAL_UART_Receive_IT(huart, &rxBuffer, 1);
 8007634:	2201      	movs	r2, #1
 8007636:	490b      	ldr	r1, [pc, #44]	@ (8007664 <HAL_UART_RxCpltCallback+0x64>)
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7fb ffd8 	bl	80035ee <HAL_UART_Receive_IT>

        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d007      	beq.n	8007654 <HAL_UART_RxCpltCallback+0x54>
 8007644:	4b08      	ldr	r3, [pc, #32]	@ (8007668 <HAL_UART_RxCpltCallback+0x68>)
 8007646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	f3bf 8f6f 	isb	sy
    }
}
 8007654:	bf00      	nop
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	40011000 	.word	0x40011000
 8007660:	20004ea4 	.word	0x20004ea4
 8007664:	20004ea8 	.word	0x20004ea8
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <sh_help>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";


int sh_help(int argc, char **argv) {
 800766c:	b590      	push	{r4, r7, lr}
 800766e:	b087      	sub	sp, #28
 8007670:	af02      	add	r7, sp, #8
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < shell_global->shell_func_list_size; i++) {
 8007676:	2300      	movs	r3, #0
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	e02e      	b.n	80076da <sh_help+0x6e>
        int size = snprintf(shell_global->print_buffer, BUFFER_SIZE, "%c: %s\r\n",
 800767c:	4b1c      	ldr	r3, [pc, #112]	@ (80076f0 <sh_help+0x84>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f503 7041 	add.w	r0, r3, #772	@ 0x304
                            shell_global->shell_func_list[i].c,
 8007684:	4b1a      	ldr	r3, [pc, #104]	@ (80076f0 <sh_help+0x84>)
 8007686:	6819      	ldr	r1, [r3, #0]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4613      	mov	r3, r2
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	3304      	adds	r3, #4
 8007696:	781b      	ldrb	r3, [r3, #0]
        int size = snprintf(shell_global->print_buffer, BUFFER_SIZE, "%c: %s\r\n",
 8007698:	461c      	mov	r4, r3
                            shell_global->shell_func_list[i].description);
 800769a:	4b15      	ldr	r3, [pc, #84]	@ (80076f0 <sh_help+0x84>)
 800769c:	6819      	ldr	r1, [r3, #0]
        int size = snprintf(shell_global->print_buffer, BUFFER_SIZE, "%c: %s\r\n",
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	4613      	mov	r3, r2
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	440b      	add	r3, r1
 80076aa:	330c      	adds	r3, #12
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	4623      	mov	r3, r4
 80076b2:	4a10      	ldr	r2, [pc, #64]	@ (80076f4 <sh_help+0x88>)
 80076b4:	2128      	movs	r1, #40	@ 0x28
 80076b6:	f000 fb2f 	bl	8007d18 <sniprintf>
 80076ba:	60b8      	str	r0, [r7, #8]
        shell_global->io.drv_shell_transmit(shell_global->print_buffer, size);
 80076bc:	4b0c      	ldr	r3, [pc, #48]	@ (80076f0 <sh_help+0x84>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80076c4:	4a0a      	ldr	r2, [pc, #40]	@ (80076f0 <sh_help+0x84>)
 80076c6:	6812      	ldr	r2, [r2, #0]
 80076c8:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80076cc:	68b9      	ldr	r1, [r7, #8]
 80076ce:	b289      	uxth	r1, r1
 80076d0:	4610      	mov	r0, r2
 80076d2:	4798      	blx	r3
    for (int i = 0; i < shell_global->shell_func_list_size; i++) {
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	3301      	adds	r3, #1
 80076d8:	60fb      	str	r3, [r7, #12]
 80076da:	4b05      	ldr	r3, [pc, #20]	@ (80076f0 <sh_help+0x84>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	dbca      	blt.n	800767c <sh_help+0x10>
    }
    return 0;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd90      	pop	{r4, r7, pc}
 80076f0:	20004eac 	.word	0x20004eac
 80076f4:	08008f7c 	.word	0x08008f7c

080076f8 <shell_init>:

void shell_init(h_shell_t *shell) {
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
    shell_global = shell;  // Initialise le pointeur global
 8007700:	4a11      	ldr	r2, [pc, #68]	@ (8007748 <shell_init+0x50>)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6013      	str	r3, [r2, #0]

    shell->shell_func_list_size = 0;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

    int size = snprintf(shell->print_buffer, BUFFER_SIZE,
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8007712:	4a0e      	ldr	r2, [pc, #56]	@ (800774c <shell_init+0x54>)
 8007714:	2128      	movs	r1, #40	@ 0x28
 8007716:	4618      	mov	r0, r3
 8007718:	f000 fafe 	bl	8007d18 <sniprintf>
 800771c:	60f8      	str	r0, [r7, #12]
                        "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
    shell->io.drv_shell_transmit(shell->print_buffer, size);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800772a:	68f9      	ldr	r1, [r7, #12]
 800772c:	b289      	uxth	r1, r1
 800772e:	4610      	mov	r0, r2
 8007730:	4798      	blx	r3

    shell_add(shell, 'h', sh_help, "Help");
 8007732:	4b07      	ldr	r3, [pc, #28]	@ (8007750 <shell_init+0x58>)
 8007734:	4a07      	ldr	r2, [pc, #28]	@ (8007754 <shell_init+0x5c>)
 8007736:	2168      	movs	r1, #104	@ 0x68
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f80d 	bl	8007758 <shell_add>
}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20004eac 	.word	0x20004eac
 800774c:	08008f88 	.word	0x08008f88
 8007750:	08008fb0 	.word	0x08008fb0
 8007754:	0800766d 	.word	0x0800766d

08007758 <shell_add>:

int shell_add(h_shell_t *shell, char c,
              int (*pfunc)(int, char **),
              char *description) {
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	607a      	str	r2, [r7, #4]
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	460b      	mov	r3, r1
 8007766:	72fb      	strb	r3, [r7, #11]
    if (shell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b3f      	cmp	r3, #63	@ 0x3f
 800776e:	dc27      	bgt.n	80077c0 <shell_add+0x68>
        shell->shell_func_list[shell->shell_func_list_size].c = c;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68f9      	ldr	r1, [r7, #12]
 8007776:	4613      	mov	r3, r2
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	3304      	adds	r3, #4
 8007782:	7afa      	ldrb	r2, [r7, #11]
 8007784:	701a      	strb	r2, [r3, #0]
        shell->shell_func_list[shell->shell_func_list_size].func = pfunc;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	68f9      	ldr	r1, [r7, #12]
 800778c:	4613      	mov	r3, r2
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	3308      	adds	r3, #8
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	601a      	str	r2, [r3, #0]
        shell->shell_func_list[shell->shell_func_list_size].description = description;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68f9      	ldr	r1, [r7, #12]
 80077a2:	4613      	mov	r3, r2
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	440b      	add	r3, r1
 80077ac:	330c      	adds	r3, #12
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	601a      	str	r2, [r3, #0]
        shell->shell_func_list_size++;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	601a      	str	r2, [r3, #0]
        return 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	e001      	b.n	80077c4 <shell_add+0x6c>
    }
    return -1;
 80077c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <shell_exec>:

static int shell_exec(h_shell_t *shell, char *buf) {
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b090      	sub	sp, #64	@ 0x40
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
    char c = buf[0];
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    int argc = 1;
 80077e2:	2301      	movs	r3, #1
 80077e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char *argv[ARGC_MAX];
    argv[0] = buf;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	60fb      	str	r3, [r7, #12]

    for (char *p = buf; *p != '\0' && argc < ARGC_MAX; p++) {
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077ee:	e013      	b.n	8007818 <shell_exec+0x48>
        if (*p == ' ') {
 80077f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d10c      	bne.n	8007812 <shell_exec+0x42>
            *p = '\0';
 80077f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fa:	2200      	movs	r2, #0
 80077fc:	701a      	strb	r2, [r3, #0]
            argv[argc++] = p + 1;
 80077fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007804:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007806:	3201      	adds	r2, #1
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	3340      	adds	r3, #64	@ 0x40
 800780c:	443b      	add	r3, r7
 800780e:	f843 2c34 	str.w	r2, [r3, #-52]
    for (char *p = buf; *p != '\0' && argc < ARGC_MAX; p++) {
 8007812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007814:	3301      	adds	r3, #1
 8007816:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <shell_exec+0x56>
 8007820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007822:	2b07      	cmp	r3, #7
 8007824:	dde4      	ble.n	80077f0 <shell_exec+0x20>
        }
    }

    for (int i = 0; i < shell->shell_func_list_size; i++) {
 8007826:	2300      	movs	r3, #0
 8007828:	637b      	str	r3, [r7, #52]	@ 0x34
 800782a:	e01f      	b.n	800786c <shell_exec+0x9c>
        if (shell->shell_func_list[i].c == c) {
 800782c:	6879      	ldr	r1, [r7, #4]
 800782e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007830:	4613      	mov	r3, r2
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	440b      	add	r3, r1
 800783a:	3304      	adds	r3, #4
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007842:	429a      	cmp	r2, r3
 8007844:	d10f      	bne.n	8007866 <shell_exec+0x96>
            return shell->shell_func_list[i].func(argc, argv);
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800784a:	4613      	mov	r3, r2
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	440b      	add	r3, r1
 8007854:	3308      	adds	r3, #8
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f107 020c 	add.w	r2, r7, #12
 800785c:	4611      	mov	r1, r2
 800785e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007860:	4798      	blx	r3
 8007862:	4603      	mov	r3, r0
 8007864:	e01d      	b.n	80078a2 <shell_exec+0xd2>
    for (int i = 0; i < shell->shell_func_list_size; i++) {
 8007866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007868:	3301      	adds	r3, #1
 800786a:	637b      	str	r3, [r7, #52]	@ 0x34
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007872:	429a      	cmp	r2, r3
 8007874:	dbda      	blt.n	800782c <shell_exec+0x5c>
        }
    }

    int size = snprintf(shell->print_buffer, BUFFER_SIZE,
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800787c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007880:	4a0a      	ldr	r2, [pc, #40]	@ (80078ac <shell_exec+0xdc>)
 8007882:	2128      	movs	r1, #40	@ 0x28
 8007884:	f000 fa48 	bl	8007d18 <sniprintf>
 8007888:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        "%c: no such command\r\n", c);
    shell->io.drv_shell_transmit(shell->print_buffer, size);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8007896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007898:	b289      	uxth	r1, r1
 800789a:	4610      	mov	r0, r2
 800789c:	4798      	blx	r3
    return -1;
 800789e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3740      	adds	r7, #64	@ 0x40
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	08008fb8 	.word	0x08008fb8

080078b0 <shell_run>:

int shell_run(h_shell_t *shell) {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
    int reading = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	617b      	str	r3, [r7, #20]
    int pos = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	613b      	str	r3, [r7, #16]

    while (1) {
        shell->io.drv_shell_transmit(prompt, 2);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80078c6:	2102      	movs	r1, #2
 80078c8:	4833      	ldr	r0, [pc, #204]	@ (8007998 <shell_run+0xe8>)
 80078ca:	4798      	blx	r3
        reading = 1;
 80078cc:	2301      	movs	r3, #1
 80078ce:	617b      	str	r3, [r7, #20]

        while (reading) {
 80078d0:	e05d      	b.n	800798e <shell_run+0xde>
            char c;
            if (shell->io.drv_shell_receive(&c, 1) != 0)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80078d8:	f107 020b 	add.w	r2, r7, #11
 80078dc:	2101      	movs	r1, #1
 80078de:	4610      	mov	r0, r2
 80078e0:	4798      	blx	r3
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d14d      	bne.n	8007984 <shell_run+0xd4>
                continue;

            int size;
            switch (c) {
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	2b08      	cmp	r3, #8
 80078ec:	d028      	beq.n	8007940 <shell_run+0x90>
 80078ee:	2b0d      	cmp	r3, #13
 80078f0:	d133      	bne.n	800795a <shell_run+0xaa>
            case '\r':
                size = snprintf(shell->print_buffer, BUFFER_SIZE, "\r\n");
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80078f8:	4a28      	ldr	r2, [pc, #160]	@ (800799c <shell_run+0xec>)
 80078fa:	2128      	movs	r1, #40	@ 0x28
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 fa0b 	bl	8007d18 <sniprintf>
 8007902:	60f8      	str	r0, [r7, #12]
                shell->io.drv_shell_transmit(shell->print_buffer, size);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8007910:	68f9      	ldr	r1, [r7, #12]
 8007912:	b289      	uxth	r1, r1
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
                shell->cmd_buffer[pos++] = 0;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	613a      	str	r2, [r7, #16]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	4413      	add	r3, r2
 8007922:	2200      	movs	r2, #0
 8007924:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
                shell_exec(shell, shell->cmd_buffer);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff ff4d 	bl	80077d0 <shell_exec>
                reading = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
                pos = 0;
 800793a:	2300      	movs	r3, #0
 800793c:	613b      	str	r3, [r7, #16]
                break;
 800793e:	e026      	b.n	800798e <shell_run+0xde>

            case '\b':
                if (pos > 0) {
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	dd20      	ble.n	8007988 <shell_run+0xd8>
                    pos--;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	3b01      	subs	r3, #1
 800794a:	613b      	str	r3, [r7, #16]
                    shell->io.drv_shell_transmit(backspace, 3);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8007952:	2103      	movs	r1, #3
 8007954:	4812      	ldr	r0, [pc, #72]	@ (80079a0 <shell_run+0xf0>)
 8007956:	4798      	blx	r3
                }
                break;
 8007958:	e016      	b.n	8007988 <shell_run+0xd8>

            default:
                if (pos < BUFFER_SIZE - 1) {
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2b26      	cmp	r3, #38	@ 0x26
 800795e:	dc15      	bgt.n	800798c <shell_run+0xdc>
                    shell->io.drv_shell_transmit(&c, 1);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8007966:	f107 020b 	add.w	r2, r7, #11
 800796a:	2101      	movs	r1, #1
 800796c:	4610      	mov	r0, r2
 800796e:	4798      	blx	r3
                    shell->cmd_buffer[pos++] = c;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	613a      	str	r2, [r7, #16]
 8007976:	7af9      	ldrb	r1, [r7, #11]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	4413      	add	r3, r2
 800797c:	460a      	mov	r2, r1
 800797e:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
                }
                break;
 8007982:	e003      	b.n	800798c <shell_run+0xdc>
                continue;
 8007984:	bf00      	nop
 8007986:	e002      	b.n	800798e <shell_run+0xde>
                break;
 8007988:	bf00      	nop
 800798a:	e000      	b.n	800798e <shell_run+0xde>
                break;
 800798c:	bf00      	nop
        while (reading) {
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d19e      	bne.n	80078d2 <shell_run+0x22>
        shell->io.drv_shell_transmit(prompt, 2);
 8007994:	e794      	b.n	80078c0 <shell_run+0x10>
 8007996:	bf00      	nop
 8007998:	20000014 	.word	0x20000014
 800799c:	08008fd0 	.word	0x08008fd0
 80079a0:	20000010 	.word	0x20000010

080079a4 <atoi>:
 80079a4:	220a      	movs	r2, #10
 80079a6:	2100      	movs	r1, #0
 80079a8:	f000 b87a 	b.w	8007aa0 <strtol>

080079ac <_strtol_l.constprop.0>:
 80079ac:	2b24      	cmp	r3, #36	@ 0x24
 80079ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b2:	4686      	mov	lr, r0
 80079b4:	4690      	mov	r8, r2
 80079b6:	d801      	bhi.n	80079bc <_strtol_l.constprop.0+0x10>
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d106      	bne.n	80079ca <_strtol_l.constprop.0+0x1e>
 80079bc:	f000 fb5c 	bl	8008078 <__errno>
 80079c0:	2316      	movs	r3, #22
 80079c2:	6003      	str	r3, [r0, #0]
 80079c4:	2000      	movs	r0, #0
 80079c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ca:	4834      	ldr	r0, [pc, #208]	@ (8007a9c <_strtol_l.constprop.0+0xf0>)
 80079cc:	460d      	mov	r5, r1
 80079ce:	462a      	mov	r2, r5
 80079d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079d4:	5d06      	ldrb	r6, [r0, r4]
 80079d6:	f016 0608 	ands.w	r6, r6, #8
 80079da:	d1f8      	bne.n	80079ce <_strtol_l.constprop.0+0x22>
 80079dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80079de:	d12d      	bne.n	8007a3c <_strtol_l.constprop.0+0x90>
 80079e0:	782c      	ldrb	r4, [r5, #0]
 80079e2:	2601      	movs	r6, #1
 80079e4:	1c95      	adds	r5, r2, #2
 80079e6:	f033 0210 	bics.w	r2, r3, #16
 80079ea:	d109      	bne.n	8007a00 <_strtol_l.constprop.0+0x54>
 80079ec:	2c30      	cmp	r4, #48	@ 0x30
 80079ee:	d12a      	bne.n	8007a46 <_strtol_l.constprop.0+0x9a>
 80079f0:	782a      	ldrb	r2, [r5, #0]
 80079f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80079f6:	2a58      	cmp	r2, #88	@ 0x58
 80079f8:	d125      	bne.n	8007a46 <_strtol_l.constprop.0+0x9a>
 80079fa:	786c      	ldrb	r4, [r5, #1]
 80079fc:	2310      	movs	r3, #16
 80079fe:	3502      	adds	r5, #2
 8007a00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007a04:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007a08:	2200      	movs	r2, #0
 8007a0a:	fbbc f9f3 	udiv	r9, ip, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	fb03 ca19 	mls	sl, r3, r9, ip
 8007a14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007a18:	2f09      	cmp	r7, #9
 8007a1a:	d81b      	bhi.n	8007a54 <_strtol_l.constprop.0+0xa8>
 8007a1c:	463c      	mov	r4, r7
 8007a1e:	42a3      	cmp	r3, r4
 8007a20:	dd27      	ble.n	8007a72 <_strtol_l.constprop.0+0xc6>
 8007a22:	1c57      	adds	r7, r2, #1
 8007a24:	d007      	beq.n	8007a36 <_strtol_l.constprop.0+0x8a>
 8007a26:	4581      	cmp	r9, r0
 8007a28:	d320      	bcc.n	8007a6c <_strtol_l.constprop.0+0xc0>
 8007a2a:	d101      	bne.n	8007a30 <_strtol_l.constprop.0+0x84>
 8007a2c:	45a2      	cmp	sl, r4
 8007a2e:	db1d      	blt.n	8007a6c <_strtol_l.constprop.0+0xc0>
 8007a30:	fb00 4003 	mla	r0, r0, r3, r4
 8007a34:	2201      	movs	r2, #1
 8007a36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a3a:	e7eb      	b.n	8007a14 <_strtol_l.constprop.0+0x68>
 8007a3c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007a3e:	bf04      	itt	eq
 8007a40:	782c      	ldrbeq	r4, [r5, #0]
 8007a42:	1c95      	addeq	r5, r2, #2
 8007a44:	e7cf      	b.n	80079e6 <_strtol_l.constprop.0+0x3a>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1da      	bne.n	8007a00 <_strtol_l.constprop.0+0x54>
 8007a4a:	2c30      	cmp	r4, #48	@ 0x30
 8007a4c:	bf0c      	ite	eq
 8007a4e:	2308      	moveq	r3, #8
 8007a50:	230a      	movne	r3, #10
 8007a52:	e7d5      	b.n	8007a00 <_strtol_l.constprop.0+0x54>
 8007a54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007a58:	2f19      	cmp	r7, #25
 8007a5a:	d801      	bhi.n	8007a60 <_strtol_l.constprop.0+0xb4>
 8007a5c:	3c37      	subs	r4, #55	@ 0x37
 8007a5e:	e7de      	b.n	8007a1e <_strtol_l.constprop.0+0x72>
 8007a60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007a64:	2f19      	cmp	r7, #25
 8007a66:	d804      	bhi.n	8007a72 <_strtol_l.constprop.0+0xc6>
 8007a68:	3c57      	subs	r4, #87	@ 0x57
 8007a6a:	e7d8      	b.n	8007a1e <_strtol_l.constprop.0+0x72>
 8007a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a70:	e7e1      	b.n	8007a36 <_strtol_l.constprop.0+0x8a>
 8007a72:	1c53      	adds	r3, r2, #1
 8007a74:	d108      	bne.n	8007a88 <_strtol_l.constprop.0+0xdc>
 8007a76:	2322      	movs	r3, #34	@ 0x22
 8007a78:	f8ce 3000 	str.w	r3, [lr]
 8007a7c:	4660      	mov	r0, ip
 8007a7e:	f1b8 0f00 	cmp.w	r8, #0
 8007a82:	d0a0      	beq.n	80079c6 <_strtol_l.constprop.0+0x1a>
 8007a84:	1e69      	subs	r1, r5, #1
 8007a86:	e006      	b.n	8007a96 <_strtol_l.constprop.0+0xea>
 8007a88:	b106      	cbz	r6, 8007a8c <_strtol_l.constprop.0+0xe0>
 8007a8a:	4240      	negs	r0, r0
 8007a8c:	f1b8 0f00 	cmp.w	r8, #0
 8007a90:	d099      	beq.n	80079c6 <_strtol_l.constprop.0+0x1a>
 8007a92:	2a00      	cmp	r2, #0
 8007a94:	d1f6      	bne.n	8007a84 <_strtol_l.constprop.0+0xd8>
 8007a96:	f8c8 1000 	str.w	r1, [r8]
 8007a9a:	e794      	b.n	80079c6 <_strtol_l.constprop.0+0x1a>
 8007a9c:	08008fed 	.word	0x08008fed

08007aa0 <strtol>:
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	460a      	mov	r2, r1
 8007aa4:	4601      	mov	r1, r0
 8007aa6:	4802      	ldr	r0, [pc, #8]	@ (8007ab0 <strtol+0x10>)
 8007aa8:	6800      	ldr	r0, [r0, #0]
 8007aaa:	f7ff bf7f 	b.w	80079ac <_strtol_l.constprop.0>
 8007aae:	bf00      	nop
 8007ab0:	20000024 	.word	0x20000024

08007ab4 <std>:
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	b510      	push	{r4, lr}
 8007ab8:	4604      	mov	r4, r0
 8007aba:	e9c0 3300 	strd	r3, r3, [r0]
 8007abe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ac2:	6083      	str	r3, [r0, #8]
 8007ac4:	8181      	strh	r1, [r0, #12]
 8007ac6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ac8:	81c2      	strh	r2, [r0, #14]
 8007aca:	6183      	str	r3, [r0, #24]
 8007acc:	4619      	mov	r1, r3
 8007ace:	2208      	movs	r2, #8
 8007ad0:	305c      	adds	r0, #92	@ 0x5c
 8007ad2:	f000 fa2d 	bl	8007f30 <memset>
 8007ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8007b0c <std+0x58>)
 8007ad8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ada:	4b0d      	ldr	r3, [pc, #52]	@ (8007b10 <std+0x5c>)
 8007adc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ade:	4b0d      	ldr	r3, [pc, #52]	@ (8007b14 <std+0x60>)
 8007ae0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b18 <std+0x64>)
 8007ae4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8007b1c <std+0x68>)
 8007ae8:	6224      	str	r4, [r4, #32]
 8007aea:	429c      	cmp	r4, r3
 8007aec:	d006      	beq.n	8007afc <std+0x48>
 8007aee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007af2:	4294      	cmp	r4, r2
 8007af4:	d002      	beq.n	8007afc <std+0x48>
 8007af6:	33d0      	adds	r3, #208	@ 0xd0
 8007af8:	429c      	cmp	r4, r3
 8007afa:	d105      	bne.n	8007b08 <std+0x54>
 8007afc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b04:	f000 bae2 	b.w	80080cc <__retarget_lock_init_recursive>
 8007b08:	bd10      	pop	{r4, pc}
 8007b0a:	bf00      	nop
 8007b0c:	08007d81 	.word	0x08007d81
 8007b10:	08007da3 	.word	0x08007da3
 8007b14:	08007ddb 	.word	0x08007ddb
 8007b18:	08007dff 	.word	0x08007dff
 8007b1c:	20004eb0 	.word	0x20004eb0

08007b20 <stdio_exit_handler>:
 8007b20:	4a02      	ldr	r2, [pc, #8]	@ (8007b2c <stdio_exit_handler+0xc>)
 8007b22:	4903      	ldr	r1, [pc, #12]	@ (8007b30 <stdio_exit_handler+0x10>)
 8007b24:	4803      	ldr	r0, [pc, #12]	@ (8007b34 <stdio_exit_handler+0x14>)
 8007b26:	f000 b869 	b.w	8007bfc <_fwalk_sglue>
 8007b2a:	bf00      	nop
 8007b2c:	20000018 	.word	0x20000018
 8007b30:	08008c39 	.word	0x08008c39
 8007b34:	20000028 	.word	0x20000028

08007b38 <cleanup_stdio>:
 8007b38:	6841      	ldr	r1, [r0, #4]
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b6c <cleanup_stdio+0x34>)
 8007b3c:	4299      	cmp	r1, r3
 8007b3e:	b510      	push	{r4, lr}
 8007b40:	4604      	mov	r4, r0
 8007b42:	d001      	beq.n	8007b48 <cleanup_stdio+0x10>
 8007b44:	f001 f878 	bl	8008c38 <_fflush_r>
 8007b48:	68a1      	ldr	r1, [r4, #8]
 8007b4a:	4b09      	ldr	r3, [pc, #36]	@ (8007b70 <cleanup_stdio+0x38>)
 8007b4c:	4299      	cmp	r1, r3
 8007b4e:	d002      	beq.n	8007b56 <cleanup_stdio+0x1e>
 8007b50:	4620      	mov	r0, r4
 8007b52:	f001 f871 	bl	8008c38 <_fflush_r>
 8007b56:	68e1      	ldr	r1, [r4, #12]
 8007b58:	4b06      	ldr	r3, [pc, #24]	@ (8007b74 <cleanup_stdio+0x3c>)
 8007b5a:	4299      	cmp	r1, r3
 8007b5c:	d004      	beq.n	8007b68 <cleanup_stdio+0x30>
 8007b5e:	4620      	mov	r0, r4
 8007b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b64:	f001 b868 	b.w	8008c38 <_fflush_r>
 8007b68:	bd10      	pop	{r4, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20004eb0 	.word	0x20004eb0
 8007b70:	20004f18 	.word	0x20004f18
 8007b74:	20004f80 	.word	0x20004f80

08007b78 <global_stdio_init.part.0>:
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba8 <global_stdio_init.part.0+0x30>)
 8007b7c:	4c0b      	ldr	r4, [pc, #44]	@ (8007bac <global_stdio_init.part.0+0x34>)
 8007b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8007bb0 <global_stdio_init.part.0+0x38>)
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	4620      	mov	r0, r4
 8007b84:	2200      	movs	r2, #0
 8007b86:	2104      	movs	r1, #4
 8007b88:	f7ff ff94 	bl	8007ab4 <std>
 8007b8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b90:	2201      	movs	r2, #1
 8007b92:	2109      	movs	r1, #9
 8007b94:	f7ff ff8e 	bl	8007ab4 <std>
 8007b98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ba2:	2112      	movs	r1, #18
 8007ba4:	f7ff bf86 	b.w	8007ab4 <std>
 8007ba8:	20004fe8 	.word	0x20004fe8
 8007bac:	20004eb0 	.word	0x20004eb0
 8007bb0:	08007b21 	.word	0x08007b21

08007bb4 <__sfp_lock_acquire>:
 8007bb4:	4801      	ldr	r0, [pc, #4]	@ (8007bbc <__sfp_lock_acquire+0x8>)
 8007bb6:	f000 ba8a 	b.w	80080ce <__retarget_lock_acquire_recursive>
 8007bba:	bf00      	nop
 8007bbc:	20004ff1 	.word	0x20004ff1

08007bc0 <__sfp_lock_release>:
 8007bc0:	4801      	ldr	r0, [pc, #4]	@ (8007bc8 <__sfp_lock_release+0x8>)
 8007bc2:	f000 ba85 	b.w	80080d0 <__retarget_lock_release_recursive>
 8007bc6:	bf00      	nop
 8007bc8:	20004ff1 	.word	0x20004ff1

08007bcc <__sinit>:
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	4604      	mov	r4, r0
 8007bd0:	f7ff fff0 	bl	8007bb4 <__sfp_lock_acquire>
 8007bd4:	6a23      	ldr	r3, [r4, #32]
 8007bd6:	b11b      	cbz	r3, 8007be0 <__sinit+0x14>
 8007bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bdc:	f7ff bff0 	b.w	8007bc0 <__sfp_lock_release>
 8007be0:	4b04      	ldr	r3, [pc, #16]	@ (8007bf4 <__sinit+0x28>)
 8007be2:	6223      	str	r3, [r4, #32]
 8007be4:	4b04      	ldr	r3, [pc, #16]	@ (8007bf8 <__sinit+0x2c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1f5      	bne.n	8007bd8 <__sinit+0xc>
 8007bec:	f7ff ffc4 	bl	8007b78 <global_stdio_init.part.0>
 8007bf0:	e7f2      	b.n	8007bd8 <__sinit+0xc>
 8007bf2:	bf00      	nop
 8007bf4:	08007b39 	.word	0x08007b39
 8007bf8:	20004fe8 	.word	0x20004fe8

08007bfc <_fwalk_sglue>:
 8007bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c00:	4607      	mov	r7, r0
 8007c02:	4688      	mov	r8, r1
 8007c04:	4614      	mov	r4, r2
 8007c06:	2600      	movs	r6, #0
 8007c08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c0c:	f1b9 0901 	subs.w	r9, r9, #1
 8007c10:	d505      	bpl.n	8007c1e <_fwalk_sglue+0x22>
 8007c12:	6824      	ldr	r4, [r4, #0]
 8007c14:	2c00      	cmp	r4, #0
 8007c16:	d1f7      	bne.n	8007c08 <_fwalk_sglue+0xc>
 8007c18:	4630      	mov	r0, r6
 8007c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c1e:	89ab      	ldrh	r3, [r5, #12]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d907      	bls.n	8007c34 <_fwalk_sglue+0x38>
 8007c24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	d003      	beq.n	8007c34 <_fwalk_sglue+0x38>
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	4638      	mov	r0, r7
 8007c30:	47c0      	blx	r8
 8007c32:	4306      	orrs	r6, r0
 8007c34:	3568      	adds	r5, #104	@ 0x68
 8007c36:	e7e9      	b.n	8007c0c <_fwalk_sglue+0x10>

08007c38 <iprintf>:
 8007c38:	b40f      	push	{r0, r1, r2, r3}
 8007c3a:	b507      	push	{r0, r1, r2, lr}
 8007c3c:	4906      	ldr	r1, [pc, #24]	@ (8007c58 <iprintf+0x20>)
 8007c3e:	ab04      	add	r3, sp, #16
 8007c40:	6808      	ldr	r0, [r1, #0]
 8007c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c46:	6881      	ldr	r1, [r0, #8]
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	f000 fccb 	bl	80085e4 <_vfiprintf_r>
 8007c4e:	b003      	add	sp, #12
 8007c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c54:	b004      	add	sp, #16
 8007c56:	4770      	bx	lr
 8007c58:	20000024 	.word	0x20000024

08007c5c <_puts_r>:
 8007c5c:	6a03      	ldr	r3, [r0, #32]
 8007c5e:	b570      	push	{r4, r5, r6, lr}
 8007c60:	6884      	ldr	r4, [r0, #8]
 8007c62:	4605      	mov	r5, r0
 8007c64:	460e      	mov	r6, r1
 8007c66:	b90b      	cbnz	r3, 8007c6c <_puts_r+0x10>
 8007c68:	f7ff ffb0 	bl	8007bcc <__sinit>
 8007c6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c6e:	07db      	lsls	r3, r3, #31
 8007c70:	d405      	bmi.n	8007c7e <_puts_r+0x22>
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	0598      	lsls	r0, r3, #22
 8007c76:	d402      	bmi.n	8007c7e <_puts_r+0x22>
 8007c78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c7a:	f000 fa28 	bl	80080ce <__retarget_lock_acquire_recursive>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	0719      	lsls	r1, r3, #28
 8007c82:	d502      	bpl.n	8007c8a <_puts_r+0x2e>
 8007c84:	6923      	ldr	r3, [r4, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d135      	bne.n	8007cf6 <_puts_r+0x9a>
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f000 f8f9 	bl	8007e84 <__swsetup_r>
 8007c92:	b380      	cbz	r0, 8007cf6 <_puts_r+0x9a>
 8007c94:	f04f 35ff 	mov.w	r5, #4294967295
 8007c98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c9a:	07da      	lsls	r2, r3, #31
 8007c9c:	d405      	bmi.n	8007caa <_puts_r+0x4e>
 8007c9e:	89a3      	ldrh	r3, [r4, #12]
 8007ca0:	059b      	lsls	r3, r3, #22
 8007ca2:	d402      	bmi.n	8007caa <_puts_r+0x4e>
 8007ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ca6:	f000 fa13 	bl	80080d0 <__retarget_lock_release_recursive>
 8007caa:	4628      	mov	r0, r5
 8007cac:	bd70      	pop	{r4, r5, r6, pc}
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	da04      	bge.n	8007cbc <_puts_r+0x60>
 8007cb2:	69a2      	ldr	r2, [r4, #24]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	dc17      	bgt.n	8007ce8 <_puts_r+0x8c>
 8007cb8:	290a      	cmp	r1, #10
 8007cba:	d015      	beq.n	8007ce8 <_puts_r+0x8c>
 8007cbc:	6823      	ldr	r3, [r4, #0]
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	6022      	str	r2, [r4, #0]
 8007cc2:	7019      	strb	r1, [r3, #0]
 8007cc4:	68a3      	ldr	r3, [r4, #8]
 8007cc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	60a3      	str	r3, [r4, #8]
 8007cce:	2900      	cmp	r1, #0
 8007cd0:	d1ed      	bne.n	8007cae <_puts_r+0x52>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da11      	bge.n	8007cfa <_puts_r+0x9e>
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	210a      	movs	r1, #10
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 f893 	bl	8007e06 <__swbuf_r>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d0d7      	beq.n	8007c94 <_puts_r+0x38>
 8007ce4:	250a      	movs	r5, #10
 8007ce6:	e7d7      	b.n	8007c98 <_puts_r+0x3c>
 8007ce8:	4622      	mov	r2, r4
 8007cea:	4628      	mov	r0, r5
 8007cec:	f000 f88b 	bl	8007e06 <__swbuf_r>
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d1e7      	bne.n	8007cc4 <_puts_r+0x68>
 8007cf4:	e7ce      	b.n	8007c94 <_puts_r+0x38>
 8007cf6:	3e01      	subs	r6, #1
 8007cf8:	e7e4      	b.n	8007cc4 <_puts_r+0x68>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	1c5a      	adds	r2, r3, #1
 8007cfe:	6022      	str	r2, [r4, #0]
 8007d00:	220a      	movs	r2, #10
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	e7ee      	b.n	8007ce4 <_puts_r+0x88>
	...

08007d08 <puts>:
 8007d08:	4b02      	ldr	r3, [pc, #8]	@ (8007d14 <puts+0xc>)
 8007d0a:	4601      	mov	r1, r0
 8007d0c:	6818      	ldr	r0, [r3, #0]
 8007d0e:	f7ff bfa5 	b.w	8007c5c <_puts_r>
 8007d12:	bf00      	nop
 8007d14:	20000024 	.word	0x20000024

08007d18 <sniprintf>:
 8007d18:	b40c      	push	{r2, r3}
 8007d1a:	b530      	push	{r4, r5, lr}
 8007d1c:	4b17      	ldr	r3, [pc, #92]	@ (8007d7c <sniprintf+0x64>)
 8007d1e:	1e0c      	subs	r4, r1, #0
 8007d20:	681d      	ldr	r5, [r3, #0]
 8007d22:	b09d      	sub	sp, #116	@ 0x74
 8007d24:	da08      	bge.n	8007d38 <sniprintf+0x20>
 8007d26:	238b      	movs	r3, #139	@ 0x8b
 8007d28:	602b      	str	r3, [r5, #0]
 8007d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2e:	b01d      	add	sp, #116	@ 0x74
 8007d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d34:	b002      	add	sp, #8
 8007d36:	4770      	bx	lr
 8007d38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007d3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d40:	bf14      	ite	ne
 8007d42:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d46:	4623      	moveq	r3, r4
 8007d48:	9304      	str	r3, [sp, #16]
 8007d4a:	9307      	str	r3, [sp, #28]
 8007d4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d50:	9002      	str	r0, [sp, #8]
 8007d52:	9006      	str	r0, [sp, #24]
 8007d54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007d5a:	ab21      	add	r3, sp, #132	@ 0x84
 8007d5c:	a902      	add	r1, sp, #8
 8007d5e:	4628      	mov	r0, r5
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	f000 fb19 	bl	8008398 <_svfiprintf_r>
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	bfbc      	itt	lt
 8007d6a:	238b      	movlt	r3, #139	@ 0x8b
 8007d6c:	602b      	strlt	r3, [r5, #0]
 8007d6e:	2c00      	cmp	r4, #0
 8007d70:	d0dd      	beq.n	8007d2e <sniprintf+0x16>
 8007d72:	9b02      	ldr	r3, [sp, #8]
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
 8007d78:	e7d9      	b.n	8007d2e <sniprintf+0x16>
 8007d7a:	bf00      	nop
 8007d7c:	20000024 	.word	0x20000024

08007d80 <__sread>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	460c      	mov	r4, r1
 8007d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d88:	f000 f952 	bl	8008030 <_read_r>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	bfab      	itete	ge
 8007d90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d92:	89a3      	ldrhlt	r3, [r4, #12]
 8007d94:	181b      	addge	r3, r3, r0
 8007d96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d9a:	bfac      	ite	ge
 8007d9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d9e:	81a3      	strhlt	r3, [r4, #12]
 8007da0:	bd10      	pop	{r4, pc}

08007da2 <__swrite>:
 8007da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da6:	461f      	mov	r7, r3
 8007da8:	898b      	ldrh	r3, [r1, #12]
 8007daa:	05db      	lsls	r3, r3, #23
 8007dac:	4605      	mov	r5, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	4616      	mov	r6, r2
 8007db2:	d505      	bpl.n	8007dc0 <__swrite+0x1e>
 8007db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db8:	2302      	movs	r3, #2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f000 f926 	bl	800800c <_lseek_r>
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	4632      	mov	r2, r6
 8007dce:	463b      	mov	r3, r7
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd6:	f000 b93d 	b.w	8008054 <_write_r>

08007dda <__sseek>:
 8007dda:	b510      	push	{r4, lr}
 8007ddc:	460c      	mov	r4, r1
 8007dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de2:	f000 f913 	bl	800800c <_lseek_r>
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	bf15      	itete	ne
 8007dec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007dee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007df2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007df6:	81a3      	strheq	r3, [r4, #12]
 8007df8:	bf18      	it	ne
 8007dfa:	81a3      	strhne	r3, [r4, #12]
 8007dfc:	bd10      	pop	{r4, pc}

08007dfe <__sclose>:
 8007dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e02:	f000 b89d 	b.w	8007f40 <_close_r>

08007e06 <__swbuf_r>:
 8007e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e08:	460e      	mov	r6, r1
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	b118      	cbz	r0, 8007e18 <__swbuf_r+0x12>
 8007e10:	6a03      	ldr	r3, [r0, #32]
 8007e12:	b90b      	cbnz	r3, 8007e18 <__swbuf_r+0x12>
 8007e14:	f7ff feda 	bl	8007bcc <__sinit>
 8007e18:	69a3      	ldr	r3, [r4, #24]
 8007e1a:	60a3      	str	r3, [r4, #8]
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	071a      	lsls	r2, r3, #28
 8007e20:	d501      	bpl.n	8007e26 <__swbuf_r+0x20>
 8007e22:	6923      	ldr	r3, [r4, #16]
 8007e24:	b943      	cbnz	r3, 8007e38 <__swbuf_r+0x32>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f000 f82b 	bl	8007e84 <__swsetup_r>
 8007e2e:	b118      	cbz	r0, 8007e38 <__swbuf_r+0x32>
 8007e30:	f04f 37ff 	mov.w	r7, #4294967295
 8007e34:	4638      	mov	r0, r7
 8007e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	6922      	ldr	r2, [r4, #16]
 8007e3c:	1a98      	subs	r0, r3, r2
 8007e3e:	6963      	ldr	r3, [r4, #20]
 8007e40:	b2f6      	uxtb	r6, r6
 8007e42:	4283      	cmp	r3, r0
 8007e44:	4637      	mov	r7, r6
 8007e46:	dc05      	bgt.n	8007e54 <__swbuf_r+0x4e>
 8007e48:	4621      	mov	r1, r4
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	f000 fef4 	bl	8008c38 <_fflush_r>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d1ed      	bne.n	8007e30 <__swbuf_r+0x2a>
 8007e54:	68a3      	ldr	r3, [r4, #8]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	60a3      	str	r3, [r4, #8]
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	6022      	str	r2, [r4, #0]
 8007e60:	701e      	strb	r6, [r3, #0]
 8007e62:	6962      	ldr	r2, [r4, #20]
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d004      	beq.n	8007e74 <__swbuf_r+0x6e>
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	07db      	lsls	r3, r3, #31
 8007e6e:	d5e1      	bpl.n	8007e34 <__swbuf_r+0x2e>
 8007e70:	2e0a      	cmp	r6, #10
 8007e72:	d1df      	bne.n	8007e34 <__swbuf_r+0x2e>
 8007e74:	4621      	mov	r1, r4
 8007e76:	4628      	mov	r0, r5
 8007e78:	f000 fede 	bl	8008c38 <_fflush_r>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d0d9      	beq.n	8007e34 <__swbuf_r+0x2e>
 8007e80:	e7d6      	b.n	8007e30 <__swbuf_r+0x2a>
	...

08007e84 <__swsetup_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	4b29      	ldr	r3, [pc, #164]	@ (8007f2c <__swsetup_r+0xa8>)
 8007e88:	4605      	mov	r5, r0
 8007e8a:	6818      	ldr	r0, [r3, #0]
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	b118      	cbz	r0, 8007e98 <__swsetup_r+0x14>
 8007e90:	6a03      	ldr	r3, [r0, #32]
 8007e92:	b90b      	cbnz	r3, 8007e98 <__swsetup_r+0x14>
 8007e94:	f7ff fe9a 	bl	8007bcc <__sinit>
 8007e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e9c:	0719      	lsls	r1, r3, #28
 8007e9e:	d422      	bmi.n	8007ee6 <__swsetup_r+0x62>
 8007ea0:	06da      	lsls	r2, r3, #27
 8007ea2:	d407      	bmi.n	8007eb4 <__swsetup_r+0x30>
 8007ea4:	2209      	movs	r2, #9
 8007ea6:	602a      	str	r2, [r5, #0]
 8007ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eac:	81a3      	strh	r3, [r4, #12]
 8007eae:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb2:	e033      	b.n	8007f1c <__swsetup_r+0x98>
 8007eb4:	0758      	lsls	r0, r3, #29
 8007eb6:	d512      	bpl.n	8007ede <__swsetup_r+0x5a>
 8007eb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007eba:	b141      	cbz	r1, 8007ece <__swsetup_r+0x4a>
 8007ebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ec0:	4299      	cmp	r1, r3
 8007ec2:	d002      	beq.n	8007eca <__swsetup_r+0x46>
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f000 f913 	bl	80080f0 <_free_r>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	6063      	str	r3, [r4, #4]
 8007eda:	6923      	ldr	r3, [r4, #16]
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	f043 0308 	orr.w	r3, r3, #8
 8007ee4:	81a3      	strh	r3, [r4, #12]
 8007ee6:	6923      	ldr	r3, [r4, #16]
 8007ee8:	b94b      	cbnz	r3, 8007efe <__swsetup_r+0x7a>
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ef4:	d003      	beq.n	8007efe <__swsetup_r+0x7a>
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f000 feeb 	bl	8008cd4 <__smakebuf_r>
 8007efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f02:	f013 0201 	ands.w	r2, r3, #1
 8007f06:	d00a      	beq.n	8007f1e <__swsetup_r+0x9a>
 8007f08:	2200      	movs	r2, #0
 8007f0a:	60a2      	str	r2, [r4, #8]
 8007f0c:	6962      	ldr	r2, [r4, #20]
 8007f0e:	4252      	negs	r2, r2
 8007f10:	61a2      	str	r2, [r4, #24]
 8007f12:	6922      	ldr	r2, [r4, #16]
 8007f14:	b942      	cbnz	r2, 8007f28 <__swsetup_r+0xa4>
 8007f16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f1a:	d1c5      	bne.n	8007ea8 <__swsetup_r+0x24>
 8007f1c:	bd38      	pop	{r3, r4, r5, pc}
 8007f1e:	0799      	lsls	r1, r3, #30
 8007f20:	bf58      	it	pl
 8007f22:	6962      	ldrpl	r2, [r4, #20]
 8007f24:	60a2      	str	r2, [r4, #8]
 8007f26:	e7f4      	b.n	8007f12 <__swsetup_r+0x8e>
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e7f7      	b.n	8007f1c <__swsetup_r+0x98>
 8007f2c:	20000024 	.word	0x20000024

08007f30 <memset>:
 8007f30:	4402      	add	r2, r0
 8007f32:	4603      	mov	r3, r0
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d100      	bne.n	8007f3a <memset+0xa>
 8007f38:	4770      	bx	lr
 8007f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f3e:	e7f9      	b.n	8007f34 <memset+0x4>

08007f40 <_close_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4d06      	ldr	r5, [pc, #24]	@ (8007f5c <_close_r+0x1c>)
 8007f44:	2300      	movs	r3, #0
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	602b      	str	r3, [r5, #0]
 8007f4c:	f7f9 f9e1 	bl	8001312 <_close>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_close_r+0x1a>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_close_r+0x1a>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	20004fec 	.word	0x20004fec

08007f60 <_reclaim_reent>:
 8007f60:	4b29      	ldr	r3, [pc, #164]	@ (8008008 <_reclaim_reent+0xa8>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4283      	cmp	r3, r0
 8007f66:	b570      	push	{r4, r5, r6, lr}
 8007f68:	4604      	mov	r4, r0
 8007f6a:	d04b      	beq.n	8008004 <_reclaim_reent+0xa4>
 8007f6c:	69c3      	ldr	r3, [r0, #28]
 8007f6e:	b1ab      	cbz	r3, 8007f9c <_reclaim_reent+0x3c>
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	b16b      	cbz	r3, 8007f90 <_reclaim_reent+0x30>
 8007f74:	2500      	movs	r5, #0
 8007f76:	69e3      	ldr	r3, [r4, #28]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	5959      	ldr	r1, [r3, r5]
 8007f7c:	2900      	cmp	r1, #0
 8007f7e:	d13b      	bne.n	8007ff8 <_reclaim_reent+0x98>
 8007f80:	3504      	adds	r5, #4
 8007f82:	2d80      	cmp	r5, #128	@ 0x80
 8007f84:	d1f7      	bne.n	8007f76 <_reclaim_reent+0x16>
 8007f86:	69e3      	ldr	r3, [r4, #28]
 8007f88:	4620      	mov	r0, r4
 8007f8a:	68d9      	ldr	r1, [r3, #12]
 8007f8c:	f000 f8b0 	bl	80080f0 <_free_r>
 8007f90:	69e3      	ldr	r3, [r4, #28]
 8007f92:	6819      	ldr	r1, [r3, #0]
 8007f94:	b111      	cbz	r1, 8007f9c <_reclaim_reent+0x3c>
 8007f96:	4620      	mov	r0, r4
 8007f98:	f000 f8aa 	bl	80080f0 <_free_r>
 8007f9c:	6961      	ldr	r1, [r4, #20]
 8007f9e:	b111      	cbz	r1, 8007fa6 <_reclaim_reent+0x46>
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 f8a5 	bl	80080f0 <_free_r>
 8007fa6:	69e1      	ldr	r1, [r4, #28]
 8007fa8:	b111      	cbz	r1, 8007fb0 <_reclaim_reent+0x50>
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 f8a0 	bl	80080f0 <_free_r>
 8007fb0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007fb2:	b111      	cbz	r1, 8007fba <_reclaim_reent+0x5a>
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f000 f89b 	bl	80080f0 <_free_r>
 8007fba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fbc:	b111      	cbz	r1, 8007fc4 <_reclaim_reent+0x64>
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f000 f896 	bl	80080f0 <_free_r>
 8007fc4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007fc6:	b111      	cbz	r1, 8007fce <_reclaim_reent+0x6e>
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 f891 	bl	80080f0 <_free_r>
 8007fce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007fd0:	b111      	cbz	r1, 8007fd8 <_reclaim_reent+0x78>
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 f88c 	bl	80080f0 <_free_r>
 8007fd8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007fda:	b111      	cbz	r1, 8007fe2 <_reclaim_reent+0x82>
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f000 f887 	bl	80080f0 <_free_r>
 8007fe2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007fe4:	b111      	cbz	r1, 8007fec <_reclaim_reent+0x8c>
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 f882 	bl	80080f0 <_free_r>
 8007fec:	6a23      	ldr	r3, [r4, #32]
 8007fee:	b14b      	cbz	r3, 8008004 <_reclaim_reent+0xa4>
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ff6:	4718      	bx	r3
 8007ff8:	680e      	ldr	r6, [r1, #0]
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f000 f878 	bl	80080f0 <_free_r>
 8008000:	4631      	mov	r1, r6
 8008002:	e7bb      	b.n	8007f7c <_reclaim_reent+0x1c>
 8008004:	bd70      	pop	{r4, r5, r6, pc}
 8008006:	bf00      	nop
 8008008:	20000024 	.word	0x20000024

0800800c <_lseek_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4d07      	ldr	r5, [pc, #28]	@ (800802c <_lseek_r+0x20>)
 8008010:	4604      	mov	r4, r0
 8008012:	4608      	mov	r0, r1
 8008014:	4611      	mov	r1, r2
 8008016:	2200      	movs	r2, #0
 8008018:	602a      	str	r2, [r5, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	f7f9 f9a0 	bl	8001360 <_lseek>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	d102      	bne.n	800802a <_lseek_r+0x1e>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	b103      	cbz	r3, 800802a <_lseek_r+0x1e>
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	20004fec 	.word	0x20004fec

08008030 <_read_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d07      	ldr	r5, [pc, #28]	@ (8008050 <_read_r+0x20>)
 8008034:	4604      	mov	r4, r0
 8008036:	4608      	mov	r0, r1
 8008038:	4611      	mov	r1, r2
 800803a:	2200      	movs	r2, #0
 800803c:	602a      	str	r2, [r5, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	f7f9 f92e 	bl	80012a0 <_read>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_read_r+0x1e>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	b103      	cbz	r3, 800804e <_read_r+0x1e>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	20004fec 	.word	0x20004fec

08008054 <_write_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4d07      	ldr	r5, [pc, #28]	@ (8008074 <_write_r+0x20>)
 8008058:	4604      	mov	r4, r0
 800805a:	4608      	mov	r0, r1
 800805c:	4611      	mov	r1, r2
 800805e:	2200      	movs	r2, #0
 8008060:	602a      	str	r2, [r5, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	f7f9 f939 	bl	80012da <_write>
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	d102      	bne.n	8008072 <_write_r+0x1e>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	b103      	cbz	r3, 8008072 <_write_r+0x1e>
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	20004fec 	.word	0x20004fec

08008078 <__errno>:
 8008078:	4b01      	ldr	r3, [pc, #4]	@ (8008080 <__errno+0x8>)
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20000024 	.word	0x20000024

08008084 <__libc_init_array>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	4d0d      	ldr	r5, [pc, #52]	@ (80080bc <__libc_init_array+0x38>)
 8008088:	4c0d      	ldr	r4, [pc, #52]	@ (80080c0 <__libc_init_array+0x3c>)
 800808a:	1b64      	subs	r4, r4, r5
 800808c:	10a4      	asrs	r4, r4, #2
 800808e:	2600      	movs	r6, #0
 8008090:	42a6      	cmp	r6, r4
 8008092:	d109      	bne.n	80080a8 <__libc_init_array+0x24>
 8008094:	4d0b      	ldr	r5, [pc, #44]	@ (80080c4 <__libc_init_array+0x40>)
 8008096:	4c0c      	ldr	r4, [pc, #48]	@ (80080c8 <__libc_init_array+0x44>)
 8008098:	f000 feda 	bl	8008e50 <_init>
 800809c:	1b64      	subs	r4, r4, r5
 800809e:	10a4      	asrs	r4, r4, #2
 80080a0:	2600      	movs	r6, #0
 80080a2:	42a6      	cmp	r6, r4
 80080a4:	d105      	bne.n	80080b2 <__libc_init_array+0x2e>
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
 80080a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ac:	4798      	blx	r3
 80080ae:	3601      	adds	r6, #1
 80080b0:	e7ee      	b.n	8008090 <__libc_init_array+0xc>
 80080b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b6:	4798      	blx	r3
 80080b8:	3601      	adds	r6, #1
 80080ba:	e7f2      	b.n	80080a2 <__libc_init_array+0x1e>
 80080bc:	08009128 	.word	0x08009128
 80080c0:	08009128 	.word	0x08009128
 80080c4:	08009128 	.word	0x08009128
 80080c8:	0800912c 	.word	0x0800912c

080080cc <__retarget_lock_init_recursive>:
 80080cc:	4770      	bx	lr

080080ce <__retarget_lock_acquire_recursive>:
 80080ce:	4770      	bx	lr

080080d0 <__retarget_lock_release_recursive>:
 80080d0:	4770      	bx	lr

080080d2 <memcpy>:
 80080d2:	440a      	add	r2, r1
 80080d4:	4291      	cmp	r1, r2
 80080d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80080da:	d100      	bne.n	80080de <memcpy+0xc>
 80080dc:	4770      	bx	lr
 80080de:	b510      	push	{r4, lr}
 80080e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080e8:	4291      	cmp	r1, r2
 80080ea:	d1f9      	bne.n	80080e0 <memcpy+0xe>
 80080ec:	bd10      	pop	{r4, pc}
	...

080080f0 <_free_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4605      	mov	r5, r0
 80080f4:	2900      	cmp	r1, #0
 80080f6:	d041      	beq.n	800817c <_free_r+0x8c>
 80080f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080fc:	1f0c      	subs	r4, r1, #4
 80080fe:	2b00      	cmp	r3, #0
 8008100:	bfb8      	it	lt
 8008102:	18e4      	addlt	r4, r4, r3
 8008104:	f000 f8e0 	bl	80082c8 <__malloc_lock>
 8008108:	4a1d      	ldr	r2, [pc, #116]	@ (8008180 <_free_r+0x90>)
 800810a:	6813      	ldr	r3, [r2, #0]
 800810c:	b933      	cbnz	r3, 800811c <_free_r+0x2c>
 800810e:	6063      	str	r3, [r4, #4]
 8008110:	6014      	str	r4, [r2, #0]
 8008112:	4628      	mov	r0, r5
 8008114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008118:	f000 b8dc 	b.w	80082d4 <__malloc_unlock>
 800811c:	42a3      	cmp	r3, r4
 800811e:	d908      	bls.n	8008132 <_free_r+0x42>
 8008120:	6820      	ldr	r0, [r4, #0]
 8008122:	1821      	adds	r1, r4, r0
 8008124:	428b      	cmp	r3, r1
 8008126:	bf01      	itttt	eq
 8008128:	6819      	ldreq	r1, [r3, #0]
 800812a:	685b      	ldreq	r3, [r3, #4]
 800812c:	1809      	addeq	r1, r1, r0
 800812e:	6021      	streq	r1, [r4, #0]
 8008130:	e7ed      	b.n	800810e <_free_r+0x1e>
 8008132:	461a      	mov	r2, r3
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	b10b      	cbz	r3, 800813c <_free_r+0x4c>
 8008138:	42a3      	cmp	r3, r4
 800813a:	d9fa      	bls.n	8008132 <_free_r+0x42>
 800813c:	6811      	ldr	r1, [r2, #0]
 800813e:	1850      	adds	r0, r2, r1
 8008140:	42a0      	cmp	r0, r4
 8008142:	d10b      	bne.n	800815c <_free_r+0x6c>
 8008144:	6820      	ldr	r0, [r4, #0]
 8008146:	4401      	add	r1, r0
 8008148:	1850      	adds	r0, r2, r1
 800814a:	4283      	cmp	r3, r0
 800814c:	6011      	str	r1, [r2, #0]
 800814e:	d1e0      	bne.n	8008112 <_free_r+0x22>
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	6053      	str	r3, [r2, #4]
 8008156:	4408      	add	r0, r1
 8008158:	6010      	str	r0, [r2, #0]
 800815a:	e7da      	b.n	8008112 <_free_r+0x22>
 800815c:	d902      	bls.n	8008164 <_free_r+0x74>
 800815e:	230c      	movs	r3, #12
 8008160:	602b      	str	r3, [r5, #0]
 8008162:	e7d6      	b.n	8008112 <_free_r+0x22>
 8008164:	6820      	ldr	r0, [r4, #0]
 8008166:	1821      	adds	r1, r4, r0
 8008168:	428b      	cmp	r3, r1
 800816a:	bf04      	itt	eq
 800816c:	6819      	ldreq	r1, [r3, #0]
 800816e:	685b      	ldreq	r3, [r3, #4]
 8008170:	6063      	str	r3, [r4, #4]
 8008172:	bf04      	itt	eq
 8008174:	1809      	addeq	r1, r1, r0
 8008176:	6021      	streq	r1, [r4, #0]
 8008178:	6054      	str	r4, [r2, #4]
 800817a:	e7ca      	b.n	8008112 <_free_r+0x22>
 800817c:	bd38      	pop	{r3, r4, r5, pc}
 800817e:	bf00      	nop
 8008180:	20004ff8 	.word	0x20004ff8

08008184 <sbrk_aligned>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	4e0f      	ldr	r6, [pc, #60]	@ (80081c4 <sbrk_aligned+0x40>)
 8008188:	460c      	mov	r4, r1
 800818a:	6831      	ldr	r1, [r6, #0]
 800818c:	4605      	mov	r5, r0
 800818e:	b911      	cbnz	r1, 8008196 <sbrk_aligned+0x12>
 8008190:	f000 fe18 	bl	8008dc4 <_sbrk_r>
 8008194:	6030      	str	r0, [r6, #0]
 8008196:	4621      	mov	r1, r4
 8008198:	4628      	mov	r0, r5
 800819a:	f000 fe13 	bl	8008dc4 <_sbrk_r>
 800819e:	1c43      	adds	r3, r0, #1
 80081a0:	d103      	bne.n	80081aa <sbrk_aligned+0x26>
 80081a2:	f04f 34ff 	mov.w	r4, #4294967295
 80081a6:	4620      	mov	r0, r4
 80081a8:	bd70      	pop	{r4, r5, r6, pc}
 80081aa:	1cc4      	adds	r4, r0, #3
 80081ac:	f024 0403 	bic.w	r4, r4, #3
 80081b0:	42a0      	cmp	r0, r4
 80081b2:	d0f8      	beq.n	80081a6 <sbrk_aligned+0x22>
 80081b4:	1a21      	subs	r1, r4, r0
 80081b6:	4628      	mov	r0, r5
 80081b8:	f000 fe04 	bl	8008dc4 <_sbrk_r>
 80081bc:	3001      	adds	r0, #1
 80081be:	d1f2      	bne.n	80081a6 <sbrk_aligned+0x22>
 80081c0:	e7ef      	b.n	80081a2 <sbrk_aligned+0x1e>
 80081c2:	bf00      	nop
 80081c4:	20004ff4 	.word	0x20004ff4

080081c8 <_malloc_r>:
 80081c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081cc:	1ccd      	adds	r5, r1, #3
 80081ce:	f025 0503 	bic.w	r5, r5, #3
 80081d2:	3508      	adds	r5, #8
 80081d4:	2d0c      	cmp	r5, #12
 80081d6:	bf38      	it	cc
 80081d8:	250c      	movcc	r5, #12
 80081da:	2d00      	cmp	r5, #0
 80081dc:	4606      	mov	r6, r0
 80081de:	db01      	blt.n	80081e4 <_malloc_r+0x1c>
 80081e0:	42a9      	cmp	r1, r5
 80081e2:	d904      	bls.n	80081ee <_malloc_r+0x26>
 80081e4:	230c      	movs	r3, #12
 80081e6:	6033      	str	r3, [r6, #0]
 80081e8:	2000      	movs	r0, #0
 80081ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082c4 <_malloc_r+0xfc>
 80081f2:	f000 f869 	bl	80082c8 <__malloc_lock>
 80081f6:	f8d8 3000 	ldr.w	r3, [r8]
 80081fa:	461c      	mov	r4, r3
 80081fc:	bb44      	cbnz	r4, 8008250 <_malloc_r+0x88>
 80081fe:	4629      	mov	r1, r5
 8008200:	4630      	mov	r0, r6
 8008202:	f7ff ffbf 	bl	8008184 <sbrk_aligned>
 8008206:	1c43      	adds	r3, r0, #1
 8008208:	4604      	mov	r4, r0
 800820a:	d158      	bne.n	80082be <_malloc_r+0xf6>
 800820c:	f8d8 4000 	ldr.w	r4, [r8]
 8008210:	4627      	mov	r7, r4
 8008212:	2f00      	cmp	r7, #0
 8008214:	d143      	bne.n	800829e <_malloc_r+0xd6>
 8008216:	2c00      	cmp	r4, #0
 8008218:	d04b      	beq.n	80082b2 <_malloc_r+0xea>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	4639      	mov	r1, r7
 800821e:	4630      	mov	r0, r6
 8008220:	eb04 0903 	add.w	r9, r4, r3
 8008224:	f000 fdce 	bl	8008dc4 <_sbrk_r>
 8008228:	4581      	cmp	r9, r0
 800822a:	d142      	bne.n	80082b2 <_malloc_r+0xea>
 800822c:	6821      	ldr	r1, [r4, #0]
 800822e:	1a6d      	subs	r5, r5, r1
 8008230:	4629      	mov	r1, r5
 8008232:	4630      	mov	r0, r6
 8008234:	f7ff ffa6 	bl	8008184 <sbrk_aligned>
 8008238:	3001      	adds	r0, #1
 800823a:	d03a      	beq.n	80082b2 <_malloc_r+0xea>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	442b      	add	r3, r5
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	f8d8 3000 	ldr.w	r3, [r8]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	bb62      	cbnz	r2, 80082a4 <_malloc_r+0xdc>
 800824a:	f8c8 7000 	str.w	r7, [r8]
 800824e:	e00f      	b.n	8008270 <_malloc_r+0xa8>
 8008250:	6822      	ldr	r2, [r4, #0]
 8008252:	1b52      	subs	r2, r2, r5
 8008254:	d420      	bmi.n	8008298 <_malloc_r+0xd0>
 8008256:	2a0b      	cmp	r2, #11
 8008258:	d917      	bls.n	800828a <_malloc_r+0xc2>
 800825a:	1961      	adds	r1, r4, r5
 800825c:	42a3      	cmp	r3, r4
 800825e:	6025      	str	r5, [r4, #0]
 8008260:	bf18      	it	ne
 8008262:	6059      	strne	r1, [r3, #4]
 8008264:	6863      	ldr	r3, [r4, #4]
 8008266:	bf08      	it	eq
 8008268:	f8c8 1000 	streq.w	r1, [r8]
 800826c:	5162      	str	r2, [r4, r5]
 800826e:	604b      	str	r3, [r1, #4]
 8008270:	4630      	mov	r0, r6
 8008272:	f000 f82f 	bl	80082d4 <__malloc_unlock>
 8008276:	f104 000b 	add.w	r0, r4, #11
 800827a:	1d23      	adds	r3, r4, #4
 800827c:	f020 0007 	bic.w	r0, r0, #7
 8008280:	1ac2      	subs	r2, r0, r3
 8008282:	bf1c      	itt	ne
 8008284:	1a1b      	subne	r3, r3, r0
 8008286:	50a3      	strne	r3, [r4, r2]
 8008288:	e7af      	b.n	80081ea <_malloc_r+0x22>
 800828a:	6862      	ldr	r2, [r4, #4]
 800828c:	42a3      	cmp	r3, r4
 800828e:	bf0c      	ite	eq
 8008290:	f8c8 2000 	streq.w	r2, [r8]
 8008294:	605a      	strne	r2, [r3, #4]
 8008296:	e7eb      	b.n	8008270 <_malloc_r+0xa8>
 8008298:	4623      	mov	r3, r4
 800829a:	6864      	ldr	r4, [r4, #4]
 800829c:	e7ae      	b.n	80081fc <_malloc_r+0x34>
 800829e:	463c      	mov	r4, r7
 80082a0:	687f      	ldr	r7, [r7, #4]
 80082a2:	e7b6      	b.n	8008212 <_malloc_r+0x4a>
 80082a4:	461a      	mov	r2, r3
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	d1fb      	bne.n	80082a4 <_malloc_r+0xdc>
 80082ac:	2300      	movs	r3, #0
 80082ae:	6053      	str	r3, [r2, #4]
 80082b0:	e7de      	b.n	8008270 <_malloc_r+0xa8>
 80082b2:	230c      	movs	r3, #12
 80082b4:	6033      	str	r3, [r6, #0]
 80082b6:	4630      	mov	r0, r6
 80082b8:	f000 f80c 	bl	80082d4 <__malloc_unlock>
 80082bc:	e794      	b.n	80081e8 <_malloc_r+0x20>
 80082be:	6005      	str	r5, [r0, #0]
 80082c0:	e7d6      	b.n	8008270 <_malloc_r+0xa8>
 80082c2:	bf00      	nop
 80082c4:	20004ff8 	.word	0x20004ff8

080082c8 <__malloc_lock>:
 80082c8:	4801      	ldr	r0, [pc, #4]	@ (80082d0 <__malloc_lock+0x8>)
 80082ca:	f7ff bf00 	b.w	80080ce <__retarget_lock_acquire_recursive>
 80082ce:	bf00      	nop
 80082d0:	20004ff0 	.word	0x20004ff0

080082d4 <__malloc_unlock>:
 80082d4:	4801      	ldr	r0, [pc, #4]	@ (80082dc <__malloc_unlock+0x8>)
 80082d6:	f7ff befb 	b.w	80080d0 <__retarget_lock_release_recursive>
 80082da:	bf00      	nop
 80082dc:	20004ff0 	.word	0x20004ff0

080082e0 <__ssputs_r>:
 80082e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e4:	688e      	ldr	r6, [r1, #8]
 80082e6:	461f      	mov	r7, r3
 80082e8:	42be      	cmp	r6, r7
 80082ea:	680b      	ldr	r3, [r1, #0]
 80082ec:	4682      	mov	sl, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	4690      	mov	r8, r2
 80082f2:	d82d      	bhi.n	8008350 <__ssputs_r+0x70>
 80082f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082fc:	d026      	beq.n	800834c <__ssputs_r+0x6c>
 80082fe:	6965      	ldr	r5, [r4, #20]
 8008300:	6909      	ldr	r1, [r1, #16]
 8008302:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008306:	eba3 0901 	sub.w	r9, r3, r1
 800830a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800830e:	1c7b      	adds	r3, r7, #1
 8008310:	444b      	add	r3, r9
 8008312:	106d      	asrs	r5, r5, #1
 8008314:	429d      	cmp	r5, r3
 8008316:	bf38      	it	cc
 8008318:	461d      	movcc	r5, r3
 800831a:	0553      	lsls	r3, r2, #21
 800831c:	d527      	bpl.n	800836e <__ssputs_r+0x8e>
 800831e:	4629      	mov	r1, r5
 8008320:	f7ff ff52 	bl	80081c8 <_malloc_r>
 8008324:	4606      	mov	r6, r0
 8008326:	b360      	cbz	r0, 8008382 <__ssputs_r+0xa2>
 8008328:	6921      	ldr	r1, [r4, #16]
 800832a:	464a      	mov	r2, r9
 800832c:	f7ff fed1 	bl	80080d2 <memcpy>
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	6126      	str	r6, [r4, #16]
 800833e:	6165      	str	r5, [r4, #20]
 8008340:	444e      	add	r6, r9
 8008342:	eba5 0509 	sub.w	r5, r5, r9
 8008346:	6026      	str	r6, [r4, #0]
 8008348:	60a5      	str	r5, [r4, #8]
 800834a:	463e      	mov	r6, r7
 800834c:	42be      	cmp	r6, r7
 800834e:	d900      	bls.n	8008352 <__ssputs_r+0x72>
 8008350:	463e      	mov	r6, r7
 8008352:	6820      	ldr	r0, [r4, #0]
 8008354:	4632      	mov	r2, r6
 8008356:	4641      	mov	r1, r8
 8008358:	f000 fcf8 	bl	8008d4c <memmove>
 800835c:	68a3      	ldr	r3, [r4, #8]
 800835e:	1b9b      	subs	r3, r3, r6
 8008360:	60a3      	str	r3, [r4, #8]
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	4433      	add	r3, r6
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	2000      	movs	r0, #0
 800836a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800836e:	462a      	mov	r2, r5
 8008370:	f000 fd38 	bl	8008de4 <_realloc_r>
 8008374:	4606      	mov	r6, r0
 8008376:	2800      	cmp	r0, #0
 8008378:	d1e0      	bne.n	800833c <__ssputs_r+0x5c>
 800837a:	6921      	ldr	r1, [r4, #16]
 800837c:	4650      	mov	r0, sl
 800837e:	f7ff feb7 	bl	80080f0 <_free_r>
 8008382:	230c      	movs	r3, #12
 8008384:	f8ca 3000 	str.w	r3, [sl]
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800838e:	81a3      	strh	r3, [r4, #12]
 8008390:	f04f 30ff 	mov.w	r0, #4294967295
 8008394:	e7e9      	b.n	800836a <__ssputs_r+0x8a>
	...

08008398 <_svfiprintf_r>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	4698      	mov	r8, r3
 800839e:	898b      	ldrh	r3, [r1, #12]
 80083a0:	061b      	lsls	r3, r3, #24
 80083a2:	b09d      	sub	sp, #116	@ 0x74
 80083a4:	4607      	mov	r7, r0
 80083a6:	460d      	mov	r5, r1
 80083a8:	4614      	mov	r4, r2
 80083aa:	d510      	bpl.n	80083ce <_svfiprintf_r+0x36>
 80083ac:	690b      	ldr	r3, [r1, #16]
 80083ae:	b973      	cbnz	r3, 80083ce <_svfiprintf_r+0x36>
 80083b0:	2140      	movs	r1, #64	@ 0x40
 80083b2:	f7ff ff09 	bl	80081c8 <_malloc_r>
 80083b6:	6028      	str	r0, [r5, #0]
 80083b8:	6128      	str	r0, [r5, #16]
 80083ba:	b930      	cbnz	r0, 80083ca <_svfiprintf_r+0x32>
 80083bc:	230c      	movs	r3, #12
 80083be:	603b      	str	r3, [r7, #0]
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	b01d      	add	sp, #116	@ 0x74
 80083c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ca:	2340      	movs	r3, #64	@ 0x40
 80083cc:	616b      	str	r3, [r5, #20]
 80083ce:	2300      	movs	r3, #0
 80083d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80083d2:	2320      	movs	r3, #32
 80083d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80083dc:	2330      	movs	r3, #48	@ 0x30
 80083de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800857c <_svfiprintf_r+0x1e4>
 80083e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083e6:	f04f 0901 	mov.w	r9, #1
 80083ea:	4623      	mov	r3, r4
 80083ec:	469a      	mov	sl, r3
 80083ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f2:	b10a      	cbz	r2, 80083f8 <_svfiprintf_r+0x60>
 80083f4:	2a25      	cmp	r2, #37	@ 0x25
 80083f6:	d1f9      	bne.n	80083ec <_svfiprintf_r+0x54>
 80083f8:	ebba 0b04 	subs.w	fp, sl, r4
 80083fc:	d00b      	beq.n	8008416 <_svfiprintf_r+0x7e>
 80083fe:	465b      	mov	r3, fp
 8008400:	4622      	mov	r2, r4
 8008402:	4629      	mov	r1, r5
 8008404:	4638      	mov	r0, r7
 8008406:	f7ff ff6b 	bl	80082e0 <__ssputs_r>
 800840a:	3001      	adds	r0, #1
 800840c:	f000 80a7 	beq.w	800855e <_svfiprintf_r+0x1c6>
 8008410:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008412:	445a      	add	r2, fp
 8008414:	9209      	str	r2, [sp, #36]	@ 0x24
 8008416:	f89a 3000 	ldrb.w	r3, [sl]
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 809f 	beq.w	800855e <_svfiprintf_r+0x1c6>
 8008420:	2300      	movs	r3, #0
 8008422:	f04f 32ff 	mov.w	r2, #4294967295
 8008426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800842a:	f10a 0a01 	add.w	sl, sl, #1
 800842e:	9304      	str	r3, [sp, #16]
 8008430:	9307      	str	r3, [sp, #28]
 8008432:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008436:	931a      	str	r3, [sp, #104]	@ 0x68
 8008438:	4654      	mov	r4, sl
 800843a:	2205      	movs	r2, #5
 800843c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008440:	484e      	ldr	r0, [pc, #312]	@ (800857c <_svfiprintf_r+0x1e4>)
 8008442:	f7f7 fee5 	bl	8000210 <memchr>
 8008446:	9a04      	ldr	r2, [sp, #16]
 8008448:	b9d8      	cbnz	r0, 8008482 <_svfiprintf_r+0xea>
 800844a:	06d0      	lsls	r0, r2, #27
 800844c:	bf44      	itt	mi
 800844e:	2320      	movmi	r3, #32
 8008450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008454:	0711      	lsls	r1, r2, #28
 8008456:	bf44      	itt	mi
 8008458:	232b      	movmi	r3, #43	@ 0x2b
 800845a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800845e:	f89a 3000 	ldrb.w	r3, [sl]
 8008462:	2b2a      	cmp	r3, #42	@ 0x2a
 8008464:	d015      	beq.n	8008492 <_svfiprintf_r+0xfa>
 8008466:	9a07      	ldr	r2, [sp, #28]
 8008468:	4654      	mov	r4, sl
 800846a:	2000      	movs	r0, #0
 800846c:	f04f 0c0a 	mov.w	ip, #10
 8008470:	4621      	mov	r1, r4
 8008472:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008476:	3b30      	subs	r3, #48	@ 0x30
 8008478:	2b09      	cmp	r3, #9
 800847a:	d94b      	bls.n	8008514 <_svfiprintf_r+0x17c>
 800847c:	b1b0      	cbz	r0, 80084ac <_svfiprintf_r+0x114>
 800847e:	9207      	str	r2, [sp, #28]
 8008480:	e014      	b.n	80084ac <_svfiprintf_r+0x114>
 8008482:	eba0 0308 	sub.w	r3, r0, r8
 8008486:	fa09 f303 	lsl.w	r3, r9, r3
 800848a:	4313      	orrs	r3, r2
 800848c:	9304      	str	r3, [sp, #16]
 800848e:	46a2      	mov	sl, r4
 8008490:	e7d2      	b.n	8008438 <_svfiprintf_r+0xa0>
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	1d19      	adds	r1, r3, #4
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	9103      	str	r1, [sp, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	bfbb      	ittet	lt
 800849e:	425b      	neglt	r3, r3
 80084a0:	f042 0202 	orrlt.w	r2, r2, #2
 80084a4:	9307      	strge	r3, [sp, #28]
 80084a6:	9307      	strlt	r3, [sp, #28]
 80084a8:	bfb8      	it	lt
 80084aa:	9204      	strlt	r2, [sp, #16]
 80084ac:	7823      	ldrb	r3, [r4, #0]
 80084ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80084b0:	d10a      	bne.n	80084c8 <_svfiprintf_r+0x130>
 80084b2:	7863      	ldrb	r3, [r4, #1]
 80084b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80084b6:	d132      	bne.n	800851e <_svfiprintf_r+0x186>
 80084b8:	9b03      	ldr	r3, [sp, #12]
 80084ba:	1d1a      	adds	r2, r3, #4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	9203      	str	r2, [sp, #12]
 80084c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084c4:	3402      	adds	r4, #2
 80084c6:	9305      	str	r3, [sp, #20]
 80084c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800858c <_svfiprintf_r+0x1f4>
 80084cc:	7821      	ldrb	r1, [r4, #0]
 80084ce:	2203      	movs	r2, #3
 80084d0:	4650      	mov	r0, sl
 80084d2:	f7f7 fe9d 	bl	8000210 <memchr>
 80084d6:	b138      	cbz	r0, 80084e8 <_svfiprintf_r+0x150>
 80084d8:	9b04      	ldr	r3, [sp, #16]
 80084da:	eba0 000a 	sub.w	r0, r0, sl
 80084de:	2240      	movs	r2, #64	@ 0x40
 80084e0:	4082      	lsls	r2, r0
 80084e2:	4313      	orrs	r3, r2
 80084e4:	3401      	adds	r4, #1
 80084e6:	9304      	str	r3, [sp, #16]
 80084e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ec:	4824      	ldr	r0, [pc, #144]	@ (8008580 <_svfiprintf_r+0x1e8>)
 80084ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084f2:	2206      	movs	r2, #6
 80084f4:	f7f7 fe8c 	bl	8000210 <memchr>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	d036      	beq.n	800856a <_svfiprintf_r+0x1d2>
 80084fc:	4b21      	ldr	r3, [pc, #132]	@ (8008584 <_svfiprintf_r+0x1ec>)
 80084fe:	bb1b      	cbnz	r3, 8008548 <_svfiprintf_r+0x1b0>
 8008500:	9b03      	ldr	r3, [sp, #12]
 8008502:	3307      	adds	r3, #7
 8008504:	f023 0307 	bic.w	r3, r3, #7
 8008508:	3308      	adds	r3, #8
 800850a:	9303      	str	r3, [sp, #12]
 800850c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800850e:	4433      	add	r3, r6
 8008510:	9309      	str	r3, [sp, #36]	@ 0x24
 8008512:	e76a      	b.n	80083ea <_svfiprintf_r+0x52>
 8008514:	fb0c 3202 	mla	r2, ip, r2, r3
 8008518:	460c      	mov	r4, r1
 800851a:	2001      	movs	r0, #1
 800851c:	e7a8      	b.n	8008470 <_svfiprintf_r+0xd8>
 800851e:	2300      	movs	r3, #0
 8008520:	3401      	adds	r4, #1
 8008522:	9305      	str	r3, [sp, #20]
 8008524:	4619      	mov	r1, r3
 8008526:	f04f 0c0a 	mov.w	ip, #10
 800852a:	4620      	mov	r0, r4
 800852c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008530:	3a30      	subs	r2, #48	@ 0x30
 8008532:	2a09      	cmp	r2, #9
 8008534:	d903      	bls.n	800853e <_svfiprintf_r+0x1a6>
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0c6      	beq.n	80084c8 <_svfiprintf_r+0x130>
 800853a:	9105      	str	r1, [sp, #20]
 800853c:	e7c4      	b.n	80084c8 <_svfiprintf_r+0x130>
 800853e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008542:	4604      	mov	r4, r0
 8008544:	2301      	movs	r3, #1
 8008546:	e7f0      	b.n	800852a <_svfiprintf_r+0x192>
 8008548:	ab03      	add	r3, sp, #12
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	462a      	mov	r2, r5
 800854e:	4b0e      	ldr	r3, [pc, #56]	@ (8008588 <_svfiprintf_r+0x1f0>)
 8008550:	a904      	add	r1, sp, #16
 8008552:	4638      	mov	r0, r7
 8008554:	f3af 8000 	nop.w
 8008558:	1c42      	adds	r2, r0, #1
 800855a:	4606      	mov	r6, r0
 800855c:	d1d6      	bne.n	800850c <_svfiprintf_r+0x174>
 800855e:	89ab      	ldrh	r3, [r5, #12]
 8008560:	065b      	lsls	r3, r3, #25
 8008562:	f53f af2d 	bmi.w	80083c0 <_svfiprintf_r+0x28>
 8008566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008568:	e72c      	b.n	80083c4 <_svfiprintf_r+0x2c>
 800856a:	ab03      	add	r3, sp, #12
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	462a      	mov	r2, r5
 8008570:	4b05      	ldr	r3, [pc, #20]	@ (8008588 <_svfiprintf_r+0x1f0>)
 8008572:	a904      	add	r1, sp, #16
 8008574:	4638      	mov	r0, r7
 8008576:	f000 f9bb 	bl	80088f0 <_printf_i>
 800857a:	e7ed      	b.n	8008558 <_svfiprintf_r+0x1c0>
 800857c:	080090ed 	.word	0x080090ed
 8008580:	080090f7 	.word	0x080090f7
 8008584:	00000000 	.word	0x00000000
 8008588:	080082e1 	.word	0x080082e1
 800858c:	080090f3 	.word	0x080090f3

08008590 <__sfputc_r>:
 8008590:	6893      	ldr	r3, [r2, #8]
 8008592:	3b01      	subs	r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	b410      	push	{r4}
 8008598:	6093      	str	r3, [r2, #8]
 800859a:	da08      	bge.n	80085ae <__sfputc_r+0x1e>
 800859c:	6994      	ldr	r4, [r2, #24]
 800859e:	42a3      	cmp	r3, r4
 80085a0:	db01      	blt.n	80085a6 <__sfputc_r+0x16>
 80085a2:	290a      	cmp	r1, #10
 80085a4:	d103      	bne.n	80085ae <__sfputc_r+0x1e>
 80085a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085aa:	f7ff bc2c 	b.w	8007e06 <__swbuf_r>
 80085ae:	6813      	ldr	r3, [r2, #0]
 80085b0:	1c58      	adds	r0, r3, #1
 80085b2:	6010      	str	r0, [r2, #0]
 80085b4:	7019      	strb	r1, [r3, #0]
 80085b6:	4608      	mov	r0, r1
 80085b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085bc:	4770      	bx	lr

080085be <__sfputs_r>:
 80085be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c0:	4606      	mov	r6, r0
 80085c2:	460f      	mov	r7, r1
 80085c4:	4614      	mov	r4, r2
 80085c6:	18d5      	adds	r5, r2, r3
 80085c8:	42ac      	cmp	r4, r5
 80085ca:	d101      	bne.n	80085d0 <__sfputs_r+0x12>
 80085cc:	2000      	movs	r0, #0
 80085ce:	e007      	b.n	80085e0 <__sfputs_r+0x22>
 80085d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d4:	463a      	mov	r2, r7
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff ffda 	bl	8008590 <__sfputc_r>
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	d1f3      	bne.n	80085c8 <__sfputs_r+0xa>
 80085e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085e4 <_vfiprintf_r>:
 80085e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e8:	460d      	mov	r5, r1
 80085ea:	b09d      	sub	sp, #116	@ 0x74
 80085ec:	4614      	mov	r4, r2
 80085ee:	4698      	mov	r8, r3
 80085f0:	4606      	mov	r6, r0
 80085f2:	b118      	cbz	r0, 80085fc <_vfiprintf_r+0x18>
 80085f4:	6a03      	ldr	r3, [r0, #32]
 80085f6:	b90b      	cbnz	r3, 80085fc <_vfiprintf_r+0x18>
 80085f8:	f7ff fae8 	bl	8007bcc <__sinit>
 80085fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085fe:	07d9      	lsls	r1, r3, #31
 8008600:	d405      	bmi.n	800860e <_vfiprintf_r+0x2a>
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	059a      	lsls	r2, r3, #22
 8008606:	d402      	bmi.n	800860e <_vfiprintf_r+0x2a>
 8008608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800860a:	f7ff fd60 	bl	80080ce <__retarget_lock_acquire_recursive>
 800860e:	89ab      	ldrh	r3, [r5, #12]
 8008610:	071b      	lsls	r3, r3, #28
 8008612:	d501      	bpl.n	8008618 <_vfiprintf_r+0x34>
 8008614:	692b      	ldr	r3, [r5, #16]
 8008616:	b99b      	cbnz	r3, 8008640 <_vfiprintf_r+0x5c>
 8008618:	4629      	mov	r1, r5
 800861a:	4630      	mov	r0, r6
 800861c:	f7ff fc32 	bl	8007e84 <__swsetup_r>
 8008620:	b170      	cbz	r0, 8008640 <_vfiprintf_r+0x5c>
 8008622:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008624:	07dc      	lsls	r4, r3, #31
 8008626:	d504      	bpl.n	8008632 <_vfiprintf_r+0x4e>
 8008628:	f04f 30ff 	mov.w	r0, #4294967295
 800862c:	b01d      	add	sp, #116	@ 0x74
 800862e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008632:	89ab      	ldrh	r3, [r5, #12]
 8008634:	0598      	lsls	r0, r3, #22
 8008636:	d4f7      	bmi.n	8008628 <_vfiprintf_r+0x44>
 8008638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800863a:	f7ff fd49 	bl	80080d0 <__retarget_lock_release_recursive>
 800863e:	e7f3      	b.n	8008628 <_vfiprintf_r+0x44>
 8008640:	2300      	movs	r3, #0
 8008642:	9309      	str	r3, [sp, #36]	@ 0x24
 8008644:	2320      	movs	r3, #32
 8008646:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800864a:	f8cd 800c 	str.w	r8, [sp, #12]
 800864e:	2330      	movs	r3, #48	@ 0x30
 8008650:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008800 <_vfiprintf_r+0x21c>
 8008654:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008658:	f04f 0901 	mov.w	r9, #1
 800865c:	4623      	mov	r3, r4
 800865e:	469a      	mov	sl, r3
 8008660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008664:	b10a      	cbz	r2, 800866a <_vfiprintf_r+0x86>
 8008666:	2a25      	cmp	r2, #37	@ 0x25
 8008668:	d1f9      	bne.n	800865e <_vfiprintf_r+0x7a>
 800866a:	ebba 0b04 	subs.w	fp, sl, r4
 800866e:	d00b      	beq.n	8008688 <_vfiprintf_r+0xa4>
 8008670:	465b      	mov	r3, fp
 8008672:	4622      	mov	r2, r4
 8008674:	4629      	mov	r1, r5
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff ffa1 	bl	80085be <__sfputs_r>
 800867c:	3001      	adds	r0, #1
 800867e:	f000 80a7 	beq.w	80087d0 <_vfiprintf_r+0x1ec>
 8008682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008684:	445a      	add	r2, fp
 8008686:	9209      	str	r2, [sp, #36]	@ 0x24
 8008688:	f89a 3000 	ldrb.w	r3, [sl]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 809f 	beq.w	80087d0 <_vfiprintf_r+0x1ec>
 8008692:	2300      	movs	r3, #0
 8008694:	f04f 32ff 	mov.w	r2, #4294967295
 8008698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800869c:	f10a 0a01 	add.w	sl, sl, #1
 80086a0:	9304      	str	r3, [sp, #16]
 80086a2:	9307      	str	r3, [sp, #28]
 80086a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80086aa:	4654      	mov	r4, sl
 80086ac:	2205      	movs	r2, #5
 80086ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086b2:	4853      	ldr	r0, [pc, #332]	@ (8008800 <_vfiprintf_r+0x21c>)
 80086b4:	f7f7 fdac 	bl	8000210 <memchr>
 80086b8:	9a04      	ldr	r2, [sp, #16]
 80086ba:	b9d8      	cbnz	r0, 80086f4 <_vfiprintf_r+0x110>
 80086bc:	06d1      	lsls	r1, r2, #27
 80086be:	bf44      	itt	mi
 80086c0:	2320      	movmi	r3, #32
 80086c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086c6:	0713      	lsls	r3, r2, #28
 80086c8:	bf44      	itt	mi
 80086ca:	232b      	movmi	r3, #43	@ 0x2b
 80086cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086d0:	f89a 3000 	ldrb.w	r3, [sl]
 80086d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80086d6:	d015      	beq.n	8008704 <_vfiprintf_r+0x120>
 80086d8:	9a07      	ldr	r2, [sp, #28]
 80086da:	4654      	mov	r4, sl
 80086dc:	2000      	movs	r0, #0
 80086de:	f04f 0c0a 	mov.w	ip, #10
 80086e2:	4621      	mov	r1, r4
 80086e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086e8:	3b30      	subs	r3, #48	@ 0x30
 80086ea:	2b09      	cmp	r3, #9
 80086ec:	d94b      	bls.n	8008786 <_vfiprintf_r+0x1a2>
 80086ee:	b1b0      	cbz	r0, 800871e <_vfiprintf_r+0x13a>
 80086f0:	9207      	str	r2, [sp, #28]
 80086f2:	e014      	b.n	800871e <_vfiprintf_r+0x13a>
 80086f4:	eba0 0308 	sub.w	r3, r0, r8
 80086f8:	fa09 f303 	lsl.w	r3, r9, r3
 80086fc:	4313      	orrs	r3, r2
 80086fe:	9304      	str	r3, [sp, #16]
 8008700:	46a2      	mov	sl, r4
 8008702:	e7d2      	b.n	80086aa <_vfiprintf_r+0xc6>
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	1d19      	adds	r1, r3, #4
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	9103      	str	r1, [sp, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	bfbb      	ittet	lt
 8008710:	425b      	neglt	r3, r3
 8008712:	f042 0202 	orrlt.w	r2, r2, #2
 8008716:	9307      	strge	r3, [sp, #28]
 8008718:	9307      	strlt	r3, [sp, #28]
 800871a:	bfb8      	it	lt
 800871c:	9204      	strlt	r2, [sp, #16]
 800871e:	7823      	ldrb	r3, [r4, #0]
 8008720:	2b2e      	cmp	r3, #46	@ 0x2e
 8008722:	d10a      	bne.n	800873a <_vfiprintf_r+0x156>
 8008724:	7863      	ldrb	r3, [r4, #1]
 8008726:	2b2a      	cmp	r3, #42	@ 0x2a
 8008728:	d132      	bne.n	8008790 <_vfiprintf_r+0x1ac>
 800872a:	9b03      	ldr	r3, [sp, #12]
 800872c:	1d1a      	adds	r2, r3, #4
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	9203      	str	r2, [sp, #12]
 8008732:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008736:	3402      	adds	r4, #2
 8008738:	9305      	str	r3, [sp, #20]
 800873a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008810 <_vfiprintf_r+0x22c>
 800873e:	7821      	ldrb	r1, [r4, #0]
 8008740:	2203      	movs	r2, #3
 8008742:	4650      	mov	r0, sl
 8008744:	f7f7 fd64 	bl	8000210 <memchr>
 8008748:	b138      	cbz	r0, 800875a <_vfiprintf_r+0x176>
 800874a:	9b04      	ldr	r3, [sp, #16]
 800874c:	eba0 000a 	sub.w	r0, r0, sl
 8008750:	2240      	movs	r2, #64	@ 0x40
 8008752:	4082      	lsls	r2, r0
 8008754:	4313      	orrs	r3, r2
 8008756:	3401      	adds	r4, #1
 8008758:	9304      	str	r3, [sp, #16]
 800875a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800875e:	4829      	ldr	r0, [pc, #164]	@ (8008804 <_vfiprintf_r+0x220>)
 8008760:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008764:	2206      	movs	r2, #6
 8008766:	f7f7 fd53 	bl	8000210 <memchr>
 800876a:	2800      	cmp	r0, #0
 800876c:	d03f      	beq.n	80087ee <_vfiprintf_r+0x20a>
 800876e:	4b26      	ldr	r3, [pc, #152]	@ (8008808 <_vfiprintf_r+0x224>)
 8008770:	bb1b      	cbnz	r3, 80087ba <_vfiprintf_r+0x1d6>
 8008772:	9b03      	ldr	r3, [sp, #12]
 8008774:	3307      	adds	r3, #7
 8008776:	f023 0307 	bic.w	r3, r3, #7
 800877a:	3308      	adds	r3, #8
 800877c:	9303      	str	r3, [sp, #12]
 800877e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008780:	443b      	add	r3, r7
 8008782:	9309      	str	r3, [sp, #36]	@ 0x24
 8008784:	e76a      	b.n	800865c <_vfiprintf_r+0x78>
 8008786:	fb0c 3202 	mla	r2, ip, r2, r3
 800878a:	460c      	mov	r4, r1
 800878c:	2001      	movs	r0, #1
 800878e:	e7a8      	b.n	80086e2 <_vfiprintf_r+0xfe>
 8008790:	2300      	movs	r3, #0
 8008792:	3401      	adds	r4, #1
 8008794:	9305      	str	r3, [sp, #20]
 8008796:	4619      	mov	r1, r3
 8008798:	f04f 0c0a 	mov.w	ip, #10
 800879c:	4620      	mov	r0, r4
 800879e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087a2:	3a30      	subs	r2, #48	@ 0x30
 80087a4:	2a09      	cmp	r2, #9
 80087a6:	d903      	bls.n	80087b0 <_vfiprintf_r+0x1cc>
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d0c6      	beq.n	800873a <_vfiprintf_r+0x156>
 80087ac:	9105      	str	r1, [sp, #20]
 80087ae:	e7c4      	b.n	800873a <_vfiprintf_r+0x156>
 80087b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80087b4:	4604      	mov	r4, r0
 80087b6:	2301      	movs	r3, #1
 80087b8:	e7f0      	b.n	800879c <_vfiprintf_r+0x1b8>
 80087ba:	ab03      	add	r3, sp, #12
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	462a      	mov	r2, r5
 80087c0:	4b12      	ldr	r3, [pc, #72]	@ (800880c <_vfiprintf_r+0x228>)
 80087c2:	a904      	add	r1, sp, #16
 80087c4:	4630      	mov	r0, r6
 80087c6:	f3af 8000 	nop.w
 80087ca:	4607      	mov	r7, r0
 80087cc:	1c78      	adds	r0, r7, #1
 80087ce:	d1d6      	bne.n	800877e <_vfiprintf_r+0x19a>
 80087d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087d2:	07d9      	lsls	r1, r3, #31
 80087d4:	d405      	bmi.n	80087e2 <_vfiprintf_r+0x1fe>
 80087d6:	89ab      	ldrh	r3, [r5, #12]
 80087d8:	059a      	lsls	r2, r3, #22
 80087da:	d402      	bmi.n	80087e2 <_vfiprintf_r+0x1fe>
 80087dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087de:	f7ff fc77 	bl	80080d0 <__retarget_lock_release_recursive>
 80087e2:	89ab      	ldrh	r3, [r5, #12]
 80087e4:	065b      	lsls	r3, r3, #25
 80087e6:	f53f af1f 	bmi.w	8008628 <_vfiprintf_r+0x44>
 80087ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087ec:	e71e      	b.n	800862c <_vfiprintf_r+0x48>
 80087ee:	ab03      	add	r3, sp, #12
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	462a      	mov	r2, r5
 80087f4:	4b05      	ldr	r3, [pc, #20]	@ (800880c <_vfiprintf_r+0x228>)
 80087f6:	a904      	add	r1, sp, #16
 80087f8:	4630      	mov	r0, r6
 80087fa:	f000 f879 	bl	80088f0 <_printf_i>
 80087fe:	e7e4      	b.n	80087ca <_vfiprintf_r+0x1e6>
 8008800:	080090ed 	.word	0x080090ed
 8008804:	080090f7 	.word	0x080090f7
 8008808:	00000000 	.word	0x00000000
 800880c:	080085bf 	.word	0x080085bf
 8008810:	080090f3 	.word	0x080090f3

08008814 <_printf_common>:
 8008814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008818:	4616      	mov	r6, r2
 800881a:	4698      	mov	r8, r3
 800881c:	688a      	ldr	r2, [r1, #8]
 800881e:	690b      	ldr	r3, [r1, #16]
 8008820:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008824:	4293      	cmp	r3, r2
 8008826:	bfb8      	it	lt
 8008828:	4613      	movlt	r3, r2
 800882a:	6033      	str	r3, [r6, #0]
 800882c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008830:	4607      	mov	r7, r0
 8008832:	460c      	mov	r4, r1
 8008834:	b10a      	cbz	r2, 800883a <_printf_common+0x26>
 8008836:	3301      	adds	r3, #1
 8008838:	6033      	str	r3, [r6, #0]
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	0699      	lsls	r1, r3, #26
 800883e:	bf42      	ittt	mi
 8008840:	6833      	ldrmi	r3, [r6, #0]
 8008842:	3302      	addmi	r3, #2
 8008844:	6033      	strmi	r3, [r6, #0]
 8008846:	6825      	ldr	r5, [r4, #0]
 8008848:	f015 0506 	ands.w	r5, r5, #6
 800884c:	d106      	bne.n	800885c <_printf_common+0x48>
 800884e:	f104 0a19 	add.w	sl, r4, #25
 8008852:	68e3      	ldr	r3, [r4, #12]
 8008854:	6832      	ldr	r2, [r6, #0]
 8008856:	1a9b      	subs	r3, r3, r2
 8008858:	42ab      	cmp	r3, r5
 800885a:	dc26      	bgt.n	80088aa <_printf_common+0x96>
 800885c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008860:	6822      	ldr	r2, [r4, #0]
 8008862:	3b00      	subs	r3, #0
 8008864:	bf18      	it	ne
 8008866:	2301      	movne	r3, #1
 8008868:	0692      	lsls	r2, r2, #26
 800886a:	d42b      	bmi.n	80088c4 <_printf_common+0xb0>
 800886c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008870:	4641      	mov	r1, r8
 8008872:	4638      	mov	r0, r7
 8008874:	47c8      	blx	r9
 8008876:	3001      	adds	r0, #1
 8008878:	d01e      	beq.n	80088b8 <_printf_common+0xa4>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	6922      	ldr	r2, [r4, #16]
 800887e:	f003 0306 	and.w	r3, r3, #6
 8008882:	2b04      	cmp	r3, #4
 8008884:	bf02      	ittt	eq
 8008886:	68e5      	ldreq	r5, [r4, #12]
 8008888:	6833      	ldreq	r3, [r6, #0]
 800888a:	1aed      	subeq	r5, r5, r3
 800888c:	68a3      	ldr	r3, [r4, #8]
 800888e:	bf0c      	ite	eq
 8008890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008894:	2500      	movne	r5, #0
 8008896:	4293      	cmp	r3, r2
 8008898:	bfc4      	itt	gt
 800889a:	1a9b      	subgt	r3, r3, r2
 800889c:	18ed      	addgt	r5, r5, r3
 800889e:	2600      	movs	r6, #0
 80088a0:	341a      	adds	r4, #26
 80088a2:	42b5      	cmp	r5, r6
 80088a4:	d11a      	bne.n	80088dc <_printf_common+0xc8>
 80088a6:	2000      	movs	r0, #0
 80088a8:	e008      	b.n	80088bc <_printf_common+0xa8>
 80088aa:	2301      	movs	r3, #1
 80088ac:	4652      	mov	r2, sl
 80088ae:	4641      	mov	r1, r8
 80088b0:	4638      	mov	r0, r7
 80088b2:	47c8      	blx	r9
 80088b4:	3001      	adds	r0, #1
 80088b6:	d103      	bne.n	80088c0 <_printf_common+0xac>
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c0:	3501      	adds	r5, #1
 80088c2:	e7c6      	b.n	8008852 <_printf_common+0x3e>
 80088c4:	18e1      	adds	r1, r4, r3
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	2030      	movs	r0, #48	@ 0x30
 80088ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80088ce:	4422      	add	r2, r4
 80088d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80088d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80088d8:	3302      	adds	r3, #2
 80088da:	e7c7      	b.n	800886c <_printf_common+0x58>
 80088dc:	2301      	movs	r3, #1
 80088de:	4622      	mov	r2, r4
 80088e0:	4641      	mov	r1, r8
 80088e2:	4638      	mov	r0, r7
 80088e4:	47c8      	blx	r9
 80088e6:	3001      	adds	r0, #1
 80088e8:	d0e6      	beq.n	80088b8 <_printf_common+0xa4>
 80088ea:	3601      	adds	r6, #1
 80088ec:	e7d9      	b.n	80088a2 <_printf_common+0x8e>
	...

080088f0 <_printf_i>:
 80088f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088f4:	7e0f      	ldrb	r7, [r1, #24]
 80088f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088f8:	2f78      	cmp	r7, #120	@ 0x78
 80088fa:	4691      	mov	r9, r2
 80088fc:	4680      	mov	r8, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	469a      	mov	sl, r3
 8008902:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008906:	d807      	bhi.n	8008918 <_printf_i+0x28>
 8008908:	2f62      	cmp	r7, #98	@ 0x62
 800890a:	d80a      	bhi.n	8008922 <_printf_i+0x32>
 800890c:	2f00      	cmp	r7, #0
 800890e:	f000 80d2 	beq.w	8008ab6 <_printf_i+0x1c6>
 8008912:	2f58      	cmp	r7, #88	@ 0x58
 8008914:	f000 80b9 	beq.w	8008a8a <_printf_i+0x19a>
 8008918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800891c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008920:	e03a      	b.n	8008998 <_printf_i+0xa8>
 8008922:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008926:	2b15      	cmp	r3, #21
 8008928:	d8f6      	bhi.n	8008918 <_printf_i+0x28>
 800892a:	a101      	add	r1, pc, #4	@ (adr r1, 8008930 <_printf_i+0x40>)
 800892c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008930:	08008989 	.word	0x08008989
 8008934:	0800899d 	.word	0x0800899d
 8008938:	08008919 	.word	0x08008919
 800893c:	08008919 	.word	0x08008919
 8008940:	08008919 	.word	0x08008919
 8008944:	08008919 	.word	0x08008919
 8008948:	0800899d 	.word	0x0800899d
 800894c:	08008919 	.word	0x08008919
 8008950:	08008919 	.word	0x08008919
 8008954:	08008919 	.word	0x08008919
 8008958:	08008919 	.word	0x08008919
 800895c:	08008a9d 	.word	0x08008a9d
 8008960:	080089c7 	.word	0x080089c7
 8008964:	08008a57 	.word	0x08008a57
 8008968:	08008919 	.word	0x08008919
 800896c:	08008919 	.word	0x08008919
 8008970:	08008abf 	.word	0x08008abf
 8008974:	08008919 	.word	0x08008919
 8008978:	080089c7 	.word	0x080089c7
 800897c:	08008919 	.word	0x08008919
 8008980:	08008919 	.word	0x08008919
 8008984:	08008a5f 	.word	0x08008a5f
 8008988:	6833      	ldr	r3, [r6, #0]
 800898a:	1d1a      	adds	r2, r3, #4
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6032      	str	r2, [r6, #0]
 8008990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008994:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008998:	2301      	movs	r3, #1
 800899a:	e09d      	b.n	8008ad8 <_printf_i+0x1e8>
 800899c:	6833      	ldr	r3, [r6, #0]
 800899e:	6820      	ldr	r0, [r4, #0]
 80089a0:	1d19      	adds	r1, r3, #4
 80089a2:	6031      	str	r1, [r6, #0]
 80089a4:	0606      	lsls	r6, r0, #24
 80089a6:	d501      	bpl.n	80089ac <_printf_i+0xbc>
 80089a8:	681d      	ldr	r5, [r3, #0]
 80089aa:	e003      	b.n	80089b4 <_printf_i+0xc4>
 80089ac:	0645      	lsls	r5, r0, #25
 80089ae:	d5fb      	bpl.n	80089a8 <_printf_i+0xb8>
 80089b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80089b4:	2d00      	cmp	r5, #0
 80089b6:	da03      	bge.n	80089c0 <_printf_i+0xd0>
 80089b8:	232d      	movs	r3, #45	@ 0x2d
 80089ba:	426d      	negs	r5, r5
 80089bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089c0:	4859      	ldr	r0, [pc, #356]	@ (8008b28 <_printf_i+0x238>)
 80089c2:	230a      	movs	r3, #10
 80089c4:	e011      	b.n	80089ea <_printf_i+0xfa>
 80089c6:	6821      	ldr	r1, [r4, #0]
 80089c8:	6833      	ldr	r3, [r6, #0]
 80089ca:	0608      	lsls	r0, r1, #24
 80089cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80089d0:	d402      	bmi.n	80089d8 <_printf_i+0xe8>
 80089d2:	0649      	lsls	r1, r1, #25
 80089d4:	bf48      	it	mi
 80089d6:	b2ad      	uxthmi	r5, r5
 80089d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80089da:	4853      	ldr	r0, [pc, #332]	@ (8008b28 <_printf_i+0x238>)
 80089dc:	6033      	str	r3, [r6, #0]
 80089de:	bf14      	ite	ne
 80089e0:	230a      	movne	r3, #10
 80089e2:	2308      	moveq	r3, #8
 80089e4:	2100      	movs	r1, #0
 80089e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80089ea:	6866      	ldr	r6, [r4, #4]
 80089ec:	60a6      	str	r6, [r4, #8]
 80089ee:	2e00      	cmp	r6, #0
 80089f0:	bfa2      	ittt	ge
 80089f2:	6821      	ldrge	r1, [r4, #0]
 80089f4:	f021 0104 	bicge.w	r1, r1, #4
 80089f8:	6021      	strge	r1, [r4, #0]
 80089fa:	b90d      	cbnz	r5, 8008a00 <_printf_i+0x110>
 80089fc:	2e00      	cmp	r6, #0
 80089fe:	d04b      	beq.n	8008a98 <_printf_i+0x1a8>
 8008a00:	4616      	mov	r6, r2
 8008a02:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a06:	fb03 5711 	mls	r7, r3, r1, r5
 8008a0a:	5dc7      	ldrb	r7, [r0, r7]
 8008a0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a10:	462f      	mov	r7, r5
 8008a12:	42bb      	cmp	r3, r7
 8008a14:	460d      	mov	r5, r1
 8008a16:	d9f4      	bls.n	8008a02 <_printf_i+0x112>
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d10b      	bne.n	8008a34 <_printf_i+0x144>
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	07df      	lsls	r7, r3, #31
 8008a20:	d508      	bpl.n	8008a34 <_printf_i+0x144>
 8008a22:	6923      	ldr	r3, [r4, #16]
 8008a24:	6861      	ldr	r1, [r4, #4]
 8008a26:	4299      	cmp	r1, r3
 8008a28:	bfde      	ittt	le
 8008a2a:	2330      	movle	r3, #48	@ 0x30
 8008a2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a34:	1b92      	subs	r2, r2, r6
 8008a36:	6122      	str	r2, [r4, #16]
 8008a38:	f8cd a000 	str.w	sl, [sp]
 8008a3c:	464b      	mov	r3, r9
 8008a3e:	aa03      	add	r2, sp, #12
 8008a40:	4621      	mov	r1, r4
 8008a42:	4640      	mov	r0, r8
 8008a44:	f7ff fee6 	bl	8008814 <_printf_common>
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d14a      	bne.n	8008ae2 <_printf_i+0x1f2>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	b004      	add	sp, #16
 8008a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	f043 0320 	orr.w	r3, r3, #32
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	4833      	ldr	r0, [pc, #204]	@ (8008b2c <_printf_i+0x23c>)
 8008a60:	2778      	movs	r7, #120	@ 0x78
 8008a62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	6831      	ldr	r1, [r6, #0]
 8008a6a:	061f      	lsls	r7, r3, #24
 8008a6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a70:	d402      	bmi.n	8008a78 <_printf_i+0x188>
 8008a72:	065f      	lsls	r7, r3, #25
 8008a74:	bf48      	it	mi
 8008a76:	b2ad      	uxthmi	r5, r5
 8008a78:	6031      	str	r1, [r6, #0]
 8008a7a:	07d9      	lsls	r1, r3, #31
 8008a7c:	bf44      	itt	mi
 8008a7e:	f043 0320 	orrmi.w	r3, r3, #32
 8008a82:	6023      	strmi	r3, [r4, #0]
 8008a84:	b11d      	cbz	r5, 8008a8e <_printf_i+0x19e>
 8008a86:	2310      	movs	r3, #16
 8008a88:	e7ac      	b.n	80089e4 <_printf_i+0xf4>
 8008a8a:	4827      	ldr	r0, [pc, #156]	@ (8008b28 <_printf_i+0x238>)
 8008a8c:	e7e9      	b.n	8008a62 <_printf_i+0x172>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	f023 0320 	bic.w	r3, r3, #32
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	e7f6      	b.n	8008a86 <_printf_i+0x196>
 8008a98:	4616      	mov	r6, r2
 8008a9a:	e7bd      	b.n	8008a18 <_printf_i+0x128>
 8008a9c:	6833      	ldr	r3, [r6, #0]
 8008a9e:	6825      	ldr	r5, [r4, #0]
 8008aa0:	6961      	ldr	r1, [r4, #20]
 8008aa2:	1d18      	adds	r0, r3, #4
 8008aa4:	6030      	str	r0, [r6, #0]
 8008aa6:	062e      	lsls	r6, r5, #24
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	d501      	bpl.n	8008ab0 <_printf_i+0x1c0>
 8008aac:	6019      	str	r1, [r3, #0]
 8008aae:	e002      	b.n	8008ab6 <_printf_i+0x1c6>
 8008ab0:	0668      	lsls	r0, r5, #25
 8008ab2:	d5fb      	bpl.n	8008aac <_printf_i+0x1bc>
 8008ab4:	8019      	strh	r1, [r3, #0]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	4616      	mov	r6, r2
 8008abc:	e7bc      	b.n	8008a38 <_printf_i+0x148>
 8008abe:	6833      	ldr	r3, [r6, #0]
 8008ac0:	1d1a      	adds	r2, r3, #4
 8008ac2:	6032      	str	r2, [r6, #0]
 8008ac4:	681e      	ldr	r6, [r3, #0]
 8008ac6:	6862      	ldr	r2, [r4, #4]
 8008ac8:	2100      	movs	r1, #0
 8008aca:	4630      	mov	r0, r6
 8008acc:	f7f7 fba0 	bl	8000210 <memchr>
 8008ad0:	b108      	cbz	r0, 8008ad6 <_printf_i+0x1e6>
 8008ad2:	1b80      	subs	r0, r0, r6
 8008ad4:	6060      	str	r0, [r4, #4]
 8008ad6:	6863      	ldr	r3, [r4, #4]
 8008ad8:	6123      	str	r3, [r4, #16]
 8008ada:	2300      	movs	r3, #0
 8008adc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ae0:	e7aa      	b.n	8008a38 <_printf_i+0x148>
 8008ae2:	6923      	ldr	r3, [r4, #16]
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	4640      	mov	r0, r8
 8008aea:	47d0      	blx	sl
 8008aec:	3001      	adds	r0, #1
 8008aee:	d0ad      	beq.n	8008a4c <_printf_i+0x15c>
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	079b      	lsls	r3, r3, #30
 8008af4:	d413      	bmi.n	8008b1e <_printf_i+0x22e>
 8008af6:	68e0      	ldr	r0, [r4, #12]
 8008af8:	9b03      	ldr	r3, [sp, #12]
 8008afa:	4298      	cmp	r0, r3
 8008afc:	bfb8      	it	lt
 8008afe:	4618      	movlt	r0, r3
 8008b00:	e7a6      	b.n	8008a50 <_printf_i+0x160>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4632      	mov	r2, r6
 8008b06:	4649      	mov	r1, r9
 8008b08:	4640      	mov	r0, r8
 8008b0a:	47d0      	blx	sl
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d09d      	beq.n	8008a4c <_printf_i+0x15c>
 8008b10:	3501      	adds	r5, #1
 8008b12:	68e3      	ldr	r3, [r4, #12]
 8008b14:	9903      	ldr	r1, [sp, #12]
 8008b16:	1a5b      	subs	r3, r3, r1
 8008b18:	42ab      	cmp	r3, r5
 8008b1a:	dcf2      	bgt.n	8008b02 <_printf_i+0x212>
 8008b1c:	e7eb      	b.n	8008af6 <_printf_i+0x206>
 8008b1e:	2500      	movs	r5, #0
 8008b20:	f104 0619 	add.w	r6, r4, #25
 8008b24:	e7f5      	b.n	8008b12 <_printf_i+0x222>
 8008b26:	bf00      	nop
 8008b28:	080090fe 	.word	0x080090fe
 8008b2c:	0800910f 	.word	0x0800910f

08008b30 <__sflush_r>:
 8008b30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b38:	0716      	lsls	r6, r2, #28
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	d454      	bmi.n	8008bea <__sflush_r+0xba>
 8008b40:	684b      	ldr	r3, [r1, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	dc02      	bgt.n	8008b4c <__sflush_r+0x1c>
 8008b46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	dd48      	ble.n	8008bde <__sflush_r+0xae>
 8008b4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b4e:	2e00      	cmp	r6, #0
 8008b50:	d045      	beq.n	8008bde <__sflush_r+0xae>
 8008b52:	2300      	movs	r3, #0
 8008b54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b58:	682f      	ldr	r7, [r5, #0]
 8008b5a:	6a21      	ldr	r1, [r4, #32]
 8008b5c:	602b      	str	r3, [r5, #0]
 8008b5e:	d030      	beq.n	8008bc2 <__sflush_r+0x92>
 8008b60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	0759      	lsls	r1, r3, #29
 8008b66:	d505      	bpl.n	8008b74 <__sflush_r+0x44>
 8008b68:	6863      	ldr	r3, [r4, #4]
 8008b6a:	1ad2      	subs	r2, r2, r3
 8008b6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b6e:	b10b      	cbz	r3, 8008b74 <__sflush_r+0x44>
 8008b70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b72:	1ad2      	subs	r2, r2, r3
 8008b74:	2300      	movs	r3, #0
 8008b76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b78:	6a21      	ldr	r1, [r4, #32]
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	47b0      	blx	r6
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	d106      	bne.n	8008b92 <__sflush_r+0x62>
 8008b84:	6829      	ldr	r1, [r5, #0]
 8008b86:	291d      	cmp	r1, #29
 8008b88:	d82b      	bhi.n	8008be2 <__sflush_r+0xb2>
 8008b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8008c34 <__sflush_r+0x104>)
 8008b8c:	410a      	asrs	r2, r1
 8008b8e:	07d6      	lsls	r6, r2, #31
 8008b90:	d427      	bmi.n	8008be2 <__sflush_r+0xb2>
 8008b92:	2200      	movs	r2, #0
 8008b94:	6062      	str	r2, [r4, #4]
 8008b96:	04d9      	lsls	r1, r3, #19
 8008b98:	6922      	ldr	r2, [r4, #16]
 8008b9a:	6022      	str	r2, [r4, #0]
 8008b9c:	d504      	bpl.n	8008ba8 <__sflush_r+0x78>
 8008b9e:	1c42      	adds	r2, r0, #1
 8008ba0:	d101      	bne.n	8008ba6 <__sflush_r+0x76>
 8008ba2:	682b      	ldr	r3, [r5, #0]
 8008ba4:	b903      	cbnz	r3, 8008ba8 <__sflush_r+0x78>
 8008ba6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ba8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008baa:	602f      	str	r7, [r5, #0]
 8008bac:	b1b9      	cbz	r1, 8008bde <__sflush_r+0xae>
 8008bae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	d002      	beq.n	8008bbc <__sflush_r+0x8c>
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	f7ff fa9a 	bl	80080f0 <_free_r>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bc0:	e00d      	b.n	8008bde <__sflush_r+0xae>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b0      	blx	r6
 8008bc8:	4602      	mov	r2, r0
 8008bca:	1c50      	adds	r0, r2, #1
 8008bcc:	d1c9      	bne.n	8008b62 <__sflush_r+0x32>
 8008bce:	682b      	ldr	r3, [r5, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d0c6      	beq.n	8008b62 <__sflush_r+0x32>
 8008bd4:	2b1d      	cmp	r3, #29
 8008bd6:	d001      	beq.n	8008bdc <__sflush_r+0xac>
 8008bd8:	2b16      	cmp	r3, #22
 8008bda:	d11e      	bne.n	8008c1a <__sflush_r+0xea>
 8008bdc:	602f      	str	r7, [r5, #0]
 8008bde:	2000      	movs	r0, #0
 8008be0:	e022      	b.n	8008c28 <__sflush_r+0xf8>
 8008be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008be6:	b21b      	sxth	r3, r3
 8008be8:	e01b      	b.n	8008c22 <__sflush_r+0xf2>
 8008bea:	690f      	ldr	r7, [r1, #16]
 8008bec:	2f00      	cmp	r7, #0
 8008bee:	d0f6      	beq.n	8008bde <__sflush_r+0xae>
 8008bf0:	0793      	lsls	r3, r2, #30
 8008bf2:	680e      	ldr	r6, [r1, #0]
 8008bf4:	bf08      	it	eq
 8008bf6:	694b      	ldreq	r3, [r1, #20]
 8008bf8:	600f      	str	r7, [r1, #0]
 8008bfa:	bf18      	it	ne
 8008bfc:	2300      	movne	r3, #0
 8008bfe:	eba6 0807 	sub.w	r8, r6, r7
 8008c02:	608b      	str	r3, [r1, #8]
 8008c04:	f1b8 0f00 	cmp.w	r8, #0
 8008c08:	dde9      	ble.n	8008bde <__sflush_r+0xae>
 8008c0a:	6a21      	ldr	r1, [r4, #32]
 8008c0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c0e:	4643      	mov	r3, r8
 8008c10:	463a      	mov	r2, r7
 8008c12:	4628      	mov	r0, r5
 8008c14:	47b0      	blx	r6
 8008c16:	2800      	cmp	r0, #0
 8008c18:	dc08      	bgt.n	8008c2c <__sflush_r+0xfc>
 8008c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c22:	81a3      	strh	r3, [r4, #12]
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c2c:	4407      	add	r7, r0
 8008c2e:	eba8 0800 	sub.w	r8, r8, r0
 8008c32:	e7e7      	b.n	8008c04 <__sflush_r+0xd4>
 8008c34:	dfbffffe 	.word	0xdfbffffe

08008c38 <_fflush_r>:
 8008c38:	b538      	push	{r3, r4, r5, lr}
 8008c3a:	690b      	ldr	r3, [r1, #16]
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	460c      	mov	r4, r1
 8008c40:	b913      	cbnz	r3, 8008c48 <_fflush_r+0x10>
 8008c42:	2500      	movs	r5, #0
 8008c44:	4628      	mov	r0, r5
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	b118      	cbz	r0, 8008c52 <_fflush_r+0x1a>
 8008c4a:	6a03      	ldr	r3, [r0, #32]
 8008c4c:	b90b      	cbnz	r3, 8008c52 <_fflush_r+0x1a>
 8008c4e:	f7fe ffbd 	bl	8007bcc <__sinit>
 8008c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0f3      	beq.n	8008c42 <_fflush_r+0xa>
 8008c5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c5c:	07d0      	lsls	r0, r2, #31
 8008c5e:	d404      	bmi.n	8008c6a <_fflush_r+0x32>
 8008c60:	0599      	lsls	r1, r3, #22
 8008c62:	d402      	bmi.n	8008c6a <_fflush_r+0x32>
 8008c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c66:	f7ff fa32 	bl	80080ce <__retarget_lock_acquire_recursive>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	f7ff ff5f 	bl	8008b30 <__sflush_r>
 8008c72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c74:	07da      	lsls	r2, r3, #31
 8008c76:	4605      	mov	r5, r0
 8008c78:	d4e4      	bmi.n	8008c44 <_fflush_r+0xc>
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	059b      	lsls	r3, r3, #22
 8008c7e:	d4e1      	bmi.n	8008c44 <_fflush_r+0xc>
 8008c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c82:	f7ff fa25 	bl	80080d0 <__retarget_lock_release_recursive>
 8008c86:	e7dd      	b.n	8008c44 <_fflush_r+0xc>

08008c88 <__swhatbuf_r>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c90:	2900      	cmp	r1, #0
 8008c92:	b096      	sub	sp, #88	@ 0x58
 8008c94:	4615      	mov	r5, r2
 8008c96:	461e      	mov	r6, r3
 8008c98:	da0d      	bge.n	8008cb6 <__swhatbuf_r+0x2e>
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ca0:	f04f 0100 	mov.w	r1, #0
 8008ca4:	bf14      	ite	ne
 8008ca6:	2340      	movne	r3, #64	@ 0x40
 8008ca8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008cac:	2000      	movs	r0, #0
 8008cae:	6031      	str	r1, [r6, #0]
 8008cb0:	602b      	str	r3, [r5, #0]
 8008cb2:	b016      	add	sp, #88	@ 0x58
 8008cb4:	bd70      	pop	{r4, r5, r6, pc}
 8008cb6:	466a      	mov	r2, sp
 8008cb8:	f000 f862 	bl	8008d80 <_fstat_r>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	dbec      	blt.n	8008c9a <__swhatbuf_r+0x12>
 8008cc0:	9901      	ldr	r1, [sp, #4]
 8008cc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008cca:	4259      	negs	r1, r3
 8008ccc:	4159      	adcs	r1, r3
 8008cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cd2:	e7eb      	b.n	8008cac <__swhatbuf_r+0x24>

08008cd4 <__smakebuf_r>:
 8008cd4:	898b      	ldrh	r3, [r1, #12]
 8008cd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cd8:	079d      	lsls	r5, r3, #30
 8008cda:	4606      	mov	r6, r0
 8008cdc:	460c      	mov	r4, r1
 8008cde:	d507      	bpl.n	8008cf0 <__smakebuf_r+0x1c>
 8008ce0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	6123      	str	r3, [r4, #16]
 8008ce8:	2301      	movs	r3, #1
 8008cea:	6163      	str	r3, [r4, #20]
 8008cec:	b003      	add	sp, #12
 8008cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf0:	ab01      	add	r3, sp, #4
 8008cf2:	466a      	mov	r2, sp
 8008cf4:	f7ff ffc8 	bl	8008c88 <__swhatbuf_r>
 8008cf8:	9f00      	ldr	r7, [sp, #0]
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f7ff fa62 	bl	80081c8 <_malloc_r>
 8008d04:	b948      	cbnz	r0, 8008d1a <__smakebuf_r+0x46>
 8008d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0a:	059a      	lsls	r2, r3, #22
 8008d0c:	d4ee      	bmi.n	8008cec <__smakebuf_r+0x18>
 8008d0e:	f023 0303 	bic.w	r3, r3, #3
 8008d12:	f043 0302 	orr.w	r3, r3, #2
 8008d16:	81a3      	strh	r3, [r4, #12]
 8008d18:	e7e2      	b.n	8008ce0 <__smakebuf_r+0xc>
 8008d1a:	89a3      	ldrh	r3, [r4, #12]
 8008d1c:	6020      	str	r0, [r4, #0]
 8008d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	9b01      	ldr	r3, [sp, #4]
 8008d26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d2a:	b15b      	cbz	r3, 8008d44 <__smakebuf_r+0x70>
 8008d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d30:	4630      	mov	r0, r6
 8008d32:	f000 f837 	bl	8008da4 <_isatty_r>
 8008d36:	b128      	cbz	r0, 8008d44 <__smakebuf_r+0x70>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	f043 0301 	orr.w	r3, r3, #1
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	431d      	orrs	r5, r3
 8008d48:	81a5      	strh	r5, [r4, #12]
 8008d4a:	e7cf      	b.n	8008cec <__smakebuf_r+0x18>

08008d4c <memmove>:
 8008d4c:	4288      	cmp	r0, r1
 8008d4e:	b510      	push	{r4, lr}
 8008d50:	eb01 0402 	add.w	r4, r1, r2
 8008d54:	d902      	bls.n	8008d5c <memmove+0x10>
 8008d56:	4284      	cmp	r4, r0
 8008d58:	4623      	mov	r3, r4
 8008d5a:	d807      	bhi.n	8008d6c <memmove+0x20>
 8008d5c:	1e43      	subs	r3, r0, #1
 8008d5e:	42a1      	cmp	r1, r4
 8008d60:	d008      	beq.n	8008d74 <memmove+0x28>
 8008d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d6a:	e7f8      	b.n	8008d5e <memmove+0x12>
 8008d6c:	4402      	add	r2, r0
 8008d6e:	4601      	mov	r1, r0
 8008d70:	428a      	cmp	r2, r1
 8008d72:	d100      	bne.n	8008d76 <memmove+0x2a>
 8008d74:	bd10      	pop	{r4, pc}
 8008d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d7e:	e7f7      	b.n	8008d70 <memmove+0x24>

08008d80 <_fstat_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4d07      	ldr	r5, [pc, #28]	@ (8008da0 <_fstat_r+0x20>)
 8008d84:	2300      	movs	r3, #0
 8008d86:	4604      	mov	r4, r0
 8008d88:	4608      	mov	r0, r1
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	602b      	str	r3, [r5, #0]
 8008d8e:	f7f8 facc 	bl	800132a <_fstat>
 8008d92:	1c43      	adds	r3, r0, #1
 8008d94:	d102      	bne.n	8008d9c <_fstat_r+0x1c>
 8008d96:	682b      	ldr	r3, [r5, #0]
 8008d98:	b103      	cbz	r3, 8008d9c <_fstat_r+0x1c>
 8008d9a:	6023      	str	r3, [r4, #0]
 8008d9c:	bd38      	pop	{r3, r4, r5, pc}
 8008d9e:	bf00      	nop
 8008da0:	20004fec 	.word	0x20004fec

08008da4 <_isatty_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4d06      	ldr	r5, [pc, #24]	@ (8008dc0 <_isatty_r+0x1c>)
 8008da8:	2300      	movs	r3, #0
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	602b      	str	r3, [r5, #0]
 8008db0:	f7f8 facb 	bl	800134a <_isatty>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_isatty_r+0x1a>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_isatty_r+0x1a>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	20004fec 	.word	0x20004fec

08008dc4 <_sbrk_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4d06      	ldr	r5, [pc, #24]	@ (8008de0 <_sbrk_r+0x1c>)
 8008dc8:	2300      	movs	r3, #0
 8008dca:	4604      	mov	r4, r0
 8008dcc:	4608      	mov	r0, r1
 8008dce:	602b      	str	r3, [r5, #0]
 8008dd0:	f7f8 fad4 	bl	800137c <_sbrk>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_sbrk_r+0x1a>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_sbrk_r+0x1a>
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	20004fec 	.word	0x20004fec

08008de4 <_realloc_r>:
 8008de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de8:	4680      	mov	r8, r0
 8008dea:	4615      	mov	r5, r2
 8008dec:	460c      	mov	r4, r1
 8008dee:	b921      	cbnz	r1, 8008dfa <_realloc_r+0x16>
 8008df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008df4:	4611      	mov	r1, r2
 8008df6:	f7ff b9e7 	b.w	80081c8 <_malloc_r>
 8008dfa:	b92a      	cbnz	r2, 8008e08 <_realloc_r+0x24>
 8008dfc:	f7ff f978 	bl	80080f0 <_free_r>
 8008e00:	2400      	movs	r4, #0
 8008e02:	4620      	mov	r0, r4
 8008e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e08:	f000 f81a 	bl	8008e40 <_malloc_usable_size_r>
 8008e0c:	4285      	cmp	r5, r0
 8008e0e:	4606      	mov	r6, r0
 8008e10:	d802      	bhi.n	8008e18 <_realloc_r+0x34>
 8008e12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008e16:	d8f4      	bhi.n	8008e02 <_realloc_r+0x1e>
 8008e18:	4629      	mov	r1, r5
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	f7ff f9d4 	bl	80081c8 <_malloc_r>
 8008e20:	4607      	mov	r7, r0
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d0ec      	beq.n	8008e00 <_realloc_r+0x1c>
 8008e26:	42b5      	cmp	r5, r6
 8008e28:	462a      	mov	r2, r5
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	bf28      	it	cs
 8008e2e:	4632      	movcs	r2, r6
 8008e30:	f7ff f94f 	bl	80080d2 <memcpy>
 8008e34:	4621      	mov	r1, r4
 8008e36:	4640      	mov	r0, r8
 8008e38:	f7ff f95a 	bl	80080f0 <_free_r>
 8008e3c:	463c      	mov	r4, r7
 8008e3e:	e7e0      	b.n	8008e02 <_realloc_r+0x1e>

08008e40 <_malloc_usable_size_r>:
 8008e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e44:	1f18      	subs	r0, r3, #4
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	bfbc      	itt	lt
 8008e4a:	580b      	ldrlt	r3, [r1, r0]
 8008e4c:	18c0      	addlt	r0, r0, r3
 8008e4e:	4770      	bx	lr

08008e50 <_init>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr

08008e5c <_fini>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	bf00      	nop
 8008e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e62:	bc08      	pop	{r3}
 8008e64:	469e      	mov	lr, r3
 8008e66:	4770      	bx	lr
