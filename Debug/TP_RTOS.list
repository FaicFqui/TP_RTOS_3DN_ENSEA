
TP_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c78  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08007e48  08007e48  00008e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008014  08008014  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008014  08008014  00009014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800801c  0800801c  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800801c  0800801c  0000901c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008020  08008020  00009020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008024  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c30  2000006c  08008090  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c9c  08008090  0000ac9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af22  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a5f  00000000  00000000  00024fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  00028a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001087  00000000  00000000  00029f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ccf  00000000  00000000  0002aff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aef4  00000000  00000000  00054cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdc27  00000000  00000000  0006fbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016d7e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006004  00000000  00000000  0016d824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00173828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e30 	.word	0x08007e30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08007e30 	.word	0x08007e30

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <MX_FREERTOS_Init+0x18>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4804      	ldr	r0, [pc, #16]	@ (80005bc <MX_FREERTOS_Init+0x1c>)
 80005aa:	f003 fc13 	bl	8003dd4 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a03      	ldr	r2, [pc, #12]	@ (80005c0 <MX_FREERTOS_Init+0x20>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	08007fa4 	.word	0x08007fa4
 80005bc:	080005c5 	.word	0x080005c5
 80005c0:	20000088 	.word	0x20000088

080005c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f003 fca7 	bl	8003f20 <osDelay>
 80005d2:	e7fb      	b.n	80005cc <StartDefaultTask+0x8>

080005d4 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b090      	sub	sp, #64	@ 0x40
 80005d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ea:	4bad      	ldr	r3, [pc, #692]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4aac      	ldr	r2, [pc, #688]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80005f0:	f043 0310 	orr.w	r3, r3, #16
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4baa      	ldr	r3, [pc, #680]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0310 	and.w	r3, r3, #16
 80005fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000602:	4ba7      	ldr	r3, [pc, #668]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4aa6      	ldr	r2, [pc, #664]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4ba4      	ldr	r3, [pc, #656]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000616:	627b      	str	r3, [r7, #36]	@ 0x24
 8000618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4ba1      	ldr	r3, [pc, #644]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4aa0      	ldr	r2, [pc, #640]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b9e      	ldr	r3, [pc, #632]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	623b      	str	r3, [r7, #32]
 8000630:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000632:	4b9b      	ldr	r3, [pc, #620]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	4a9a      	ldr	r2, [pc, #616]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	6313      	str	r3, [r2, #48]	@ 0x30
 800063e:	4b98      	ldr	r3, [pc, #608]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b95      	ldr	r3, [pc, #596]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a94      	ldr	r2, [pc, #592]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b92      	ldr	r3, [pc, #584]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	61bb      	str	r3, [r7, #24]
 8000660:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b8f      	ldr	r3, [pc, #572]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a8e      	ldr	r2, [pc, #568]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b8c      	ldr	r3, [pc, #560]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800067a:	4b89      	ldr	r3, [pc, #548]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a88      	ldr	r2, [pc, #544]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000680:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b86      	ldr	r3, [pc, #536]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000692:	4b83      	ldr	r3, [pc, #524]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a82      	ldr	r2, [pc, #520]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 8000698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b80      	ldr	r3, [pc, #512]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006aa:	4b7d      	ldr	r3, [pc, #500]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a7c      	ldr	r2, [pc, #496]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b7a      	ldr	r3, [pc, #488]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c2:	4b77      	ldr	r3, [pc, #476]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	4a76      	ldr	r2, [pc, #472]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006c8:	f043 0320 	orr.w	r3, r3, #32
 80006cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ce:	4b74      	ldr	r3, [pc, #464]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	f003 0320 	and.w	r3, r3, #32
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	4b71      	ldr	r3, [pc, #452]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a70      	ldr	r2, [pc, #448]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b6e      	ldr	r3, [pc, #440]	@ (80008a0 <MX_GPIO_Init+0x2cc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f241 010e 	movw	r1, #4110	@ 0x100e
 80006f8:	486a      	ldr	r0, [pc, #424]	@ (80008a4 <MX_GPIO_Init+0x2d0>)
 80006fa:	f001 fa09 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2108      	movs	r1, #8
 8000702:	4869      	ldr	r0, [pc, #420]	@ (80008a8 <MX_GPIO_Init+0x2d4>)
 8000704:	f001 fa04 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800070e:	4867      	ldr	r0, [pc, #412]	@ (80008ac <MX_GPIO_Init+0x2d8>)
 8000710:	f001 f9fe 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	21c8      	movs	r1, #200	@ 0xc8
 8000718:	4865      	ldr	r0, [pc, #404]	@ (80008b0 <MX_GPIO_Init+0x2dc>)
 800071a:	f001 f9f9 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800071e:	2310      	movs	r3, #16
 8000720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800072e:	230e      	movs	r3, #14
 8000730:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000736:	4619      	mov	r1, r3
 8000738:	485e      	ldr	r0, [pc, #376]	@ (80008b4 <MX_GPIO_Init+0x2e0>)
 800073a:	f001 f83d 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800073e:	2308      	movs	r3, #8
 8000740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000742:	2300      	movs	r3, #0
 8000744:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800074e:	4619      	mov	r1, r3
 8000750:	4858      	ldr	r0, [pc, #352]	@ (80008b4 <MX_GPIO_Init+0x2e0>)
 8000752:	f001 f831 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000756:	2304      	movs	r3, #4
 8000758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000766:	2309      	movs	r3, #9
 8000768:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800076e:	4619      	mov	r1, r3
 8000770:	4850      	ldr	r0, [pc, #320]	@ (80008b4 <MX_GPIO_Init+0x2e0>)
 8000772:	f001 f821 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000776:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000788:	230b      	movs	r3, #11
 800078a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800078c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000790:	4619      	mov	r1, r3
 8000792:	4847      	ldr	r0, [pc, #284]	@ (80008b0 <MX_GPIO_Init+0x2dc>)
 8000794:	f001 f810 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000798:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800079c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007aa:	230c      	movs	r3, #12
 80007ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007b2:	4619      	mov	r1, r3
 80007b4:	483f      	ldr	r0, [pc, #252]	@ (80008b4 <MX_GPIO_Init+0x2e0>)
 80007b6:	f000 ffff 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80007ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c0:	2312      	movs	r3, #18
 80007c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007cc:	2304      	movs	r3, #4
 80007ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	4838      	ldr	r0, [pc, #224]	@ (80008b8 <MX_GPIO_Init+0x2e4>)
 80007d8:	f000 ffee 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80007dc:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80007e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80007ee:	230a      	movs	r3, #10
 80007f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007f6:	4619      	mov	r1, r3
 80007f8:	482f      	ldr	r0, [pc, #188]	@ (80008b8 <MX_GPIO_Init+0x2e4>)
 80007fa:	f000 ffdd 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80007fe:	2310      	movs	r3, #16
 8000800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800080e:	2302      	movs	r3, #2
 8000810:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000816:	4619      	mov	r1, r3
 8000818:	4827      	ldr	r0, [pc, #156]	@ (80008b8 <MX_GPIO_Init+0x2e4>)
 800081a:	f000 ffcd 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800081e:	2380      	movs	r3, #128	@ 0x80
 8000820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800082e:	2308      	movs	r3, #8
 8000830:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000836:	4619      	mov	r1, r3
 8000838:	4820      	ldr	r0, [pc, #128]	@ (80008bc <MX_GPIO_Init+0x2e8>)
 800083a:	f000 ffbd 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800083e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000850:	230c      	movs	r3, #12
 8000852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000854:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000858:	4619      	mov	r1, r3
 800085a:	4819      	ldr	r0, [pc, #100]	@ (80008c0 <MX_GPIO_Init+0x2ec>)
 800085c:	f000 ffac 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000860:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000872:	2301      	movs	r3, #1
 8000874:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800087a:	4619      	mov	r1, r3
 800087c:	4811      	ldr	r0, [pc, #68]	@ (80008c4 <MX_GPIO_Init+0x2f0>)
 800087e:	f000 ff9b 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000882:	2360      	movs	r3, #96	@ 0x60
 8000884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000892:	230d      	movs	r3, #13
 8000894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000896:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800089a:	4619      	mov	r1, r3
 800089c:	e014      	b.n	80008c8 <MX_GPIO_Init+0x2f4>
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40022000 	.word	0x40022000
 80008a8:	40022800 	.word	0x40022800
 80008ac:	40021c00 	.word	0x40021c00
 80008b0:	40021800 	.word	0x40021800
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40020400 	.word	0x40020400
 80008bc:	40020c00 	.word	0x40020c00
 80008c0:	40020800 	.word	0x40020800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	48bb      	ldr	r0, [pc, #748]	@ (8000bb8 <MX_GPIO_Init+0x5e4>)
 80008ca:	f000 ff75 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80008ce:	2340      	movs	r3, #64	@ 0x40
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008de:	230a      	movs	r3, #10
 80008e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008e6:	4619      	mov	r1, r3
 80008e8:	48b4      	ldr	r0, [pc, #720]	@ (8000bbc <MX_GPIO_Init+0x5e8>)
 80008ea:	f000 ff65 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80008ee:	f248 1333 	movw	r3, #33075	@ 0x8133
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000900:	230c      	movs	r3, #12
 8000902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000908:	4619      	mov	r1, r3
 800090a:	48ad      	ldr	r0, [pc, #692]	@ (8000bc0 <MX_GPIO_Init+0x5ec>)
 800090c:	f000 ff54 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000910:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000922:	230e      	movs	r3, #14
 8000924:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000926:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800092a:	4619      	mov	r1, r3
 800092c:	48a5      	ldr	r0, [pc, #660]	@ (8000bc4 <MX_GPIO_Init+0x5f0>)
 800092e:	f000 ff43 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000932:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000944:	230c      	movs	r3, #12
 8000946:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000948:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800094c:	4619      	mov	r1, r3
 800094e:	489e      	ldr	r0, [pc, #632]	@ (8000bc8 <MX_GPIO_Init+0x5f4>)
 8000950:	f000 ff32 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8000954:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000966:	230a      	movs	r3, #10
 8000968:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800096e:	4619      	mov	r1, r3
 8000970:	4896      	ldr	r0, [pc, #600]	@ (8000bcc <MX_GPIO_Init+0x5f8>)
 8000972:	f000 ff21 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000976:	23f0      	movs	r3, #240	@ 0xf0
 8000978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000986:	230a      	movs	r3, #10
 8000988:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800098a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800098e:	4619      	mov	r1, r3
 8000990:	488f      	ldr	r0, [pc, #572]	@ (8000bd0 <MX_GPIO_Init+0x5fc>)
 8000992:	f000 ff11 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000996:	23f7      	movs	r3, #247	@ 0xf7
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009a6:	230e      	movs	r3, #14
 80009a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ae:	4619      	mov	r1, r3
 80009b0:	4888      	ldr	r0, [pc, #544]	@ (8000bd4 <MX_GPIO_Init+0x600>)
 80009b2:	f000 ff01 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80009b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009c8:	2309      	movs	r3, #9
 80009ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009d0:	4619      	mov	r1, r3
 80009d2:	487b      	ldr	r0, [pc, #492]	@ (8000bc0 <MX_GPIO_Init+0x5ec>)
 80009d4:	f000 fef0 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80009d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009ea:	230a      	movs	r3, #10
 80009ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009f2:	4619      	mov	r1, r3
 80009f4:	4872      	ldr	r0, [pc, #456]	@ (8000bc0 <MX_GPIO_Init+0x5ec>)
 80009f6:	f000 fedf 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009fa:	2320      	movs	r3, #32
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a12:	4619      	mov	r1, r3
 8000a14:	486c      	ldr	r0, [pc, #432]	@ (8000bc8 <MX_GPIO_Init+0x5f4>)
 8000a16:	f000 fecf 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a2a:	230d      	movs	r3, #13
 8000a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a32:	4619      	mov	r1, r3
 8000a34:	4864      	ldr	r0, [pc, #400]	@ (8000bc8 <MX_GPIO_Init+0x5f4>)
 8000a36:	f000 febf 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000a3a:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a50:	4619      	mov	r1, r3
 8000a52:	485f      	ldr	r0, [pc, #380]	@ (8000bd0 <MX_GPIO_Init+0x5fc>)
 8000a54:	f000 feb0 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	485a      	ldr	r0, [pc, #360]	@ (8000bd8 <MX_GPIO_Init+0x604>)
 8000a6e:	f000 fea3 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a72:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a84:	230c      	movs	r3, #12
 8000a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4853      	ldr	r0, [pc, #332]	@ (8000bdc <MX_GPIO_Init+0x608>)
 8000a90:	f000 fe92 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a94:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aa6:	230e      	movs	r3, #14
 8000aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000aaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4847      	ldr	r0, [pc, #284]	@ (8000bd0 <MX_GPIO_Init+0x5fc>)
 8000ab2:	f000 fe81 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aca:	4619      	mov	r1, r3
 8000acc:	4841      	ldr	r0, [pc, #260]	@ (8000bd4 <MX_GPIO_Init+0x600>)
 8000ace:	f000 fe73 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000ad2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ae4:	230d      	movs	r3, #13
 8000ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aec:	4619      	mov	r1, r3
 8000aee:	4834      	ldr	r0, [pc, #208]	@ (8000bc0 <MX_GPIO_Init+0x5ec>)
 8000af0:	f000 fe62 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000af4:	2310      	movs	r3, #16
 8000af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b04:	4619      	mov	r1, r3
 8000b06:	4830      	ldr	r0, [pc, #192]	@ (8000bc8 <MX_GPIO_Init+0x5f4>)
 8000b08:	f000 fe56 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b24:	4619      	mov	r1, r3
 8000b26:	4828      	ldr	r0, [pc, #160]	@ (8000bc8 <MX_GPIO_Init+0x5f4>)
 8000b28:	f000 fe46 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b2c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <MX_GPIO_Init+0x60c>)
 8000b42:	f000 fe39 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4820      	ldr	r0, [pc, #128]	@ (8000be0 <MX_GPIO_Init+0x60c>)
 8000b60:	f000 fe2a 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b64:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b76:	230d      	movs	r3, #13
 8000b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4817      	ldr	r0, [pc, #92]	@ (8000be0 <MX_GPIO_Init+0x60c>)
 8000b82:	f000 fe19 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000b86:	2301      	movs	r3, #1
 8000b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000b96:	2302      	movs	r3, #2
 8000b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480b      	ldr	r0, [pc, #44]	@ (8000bd0 <MX_GPIO_Init+0x5fc>)
 8000ba2:	f000 fe09 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000ba6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e015      	b.n	8000be4 <MX_GPIO_Init+0x610>
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	40021800 	.word	0x40021800
 8000bc4:	40022400 	.word	0x40022400
 8000bc8:	40020c00 	.word	0x40020c00
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40022000 	.word	0x40022000
 8000bd4:	40022800 	.word	0x40022800
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40021400 	.word	0x40021400
 8000be0:	40021c00 	.word	0x40021c00
 8000be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4895      	ldr	r0, [pc, #596]	@ (8000e48 <MX_GPIO_Init+0x874>)
 8000bf2:	f000 fde1 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bfc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	488f      	ldr	r0, [pc, #572]	@ (8000e4c <MX_GPIO_Init+0x878>)
 8000c0e:	f000 fdd3 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000c12:	23c0      	movs	r3, #192	@ 0xc0
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c22:	2308      	movs	r3, #8
 8000c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4888      	ldr	r0, [pc, #544]	@ (8000e50 <MX_GPIO_Init+0x87c>)
 8000c2e:	f000 fdc3 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c32:	2310      	movs	r3, #16
 8000c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c42:	230a      	movs	r3, #10
 8000c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4881      	ldr	r0, [pc, #516]	@ (8000e54 <MX_GPIO_Init+0x880>)
 8000c4e:	f000 fdb3 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c52:	2328      	movs	r3, #40	@ 0x28
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c62:	230c      	movs	r3, #12
 8000c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4879      	ldr	r0, [pc, #484]	@ (8000e54 <MX_GPIO_Init+0x880>)
 8000c6e:	f000 fda3 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000c72:	23c8      	movs	r3, #200	@ 0xc8
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c86:	4619      	mov	r1, r3
 8000c88:	4873      	ldr	r0, [pc, #460]	@ (8000e58 <MX_GPIO_Init+0x884>)
 8000c8a:	f000 fd95 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c8e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c94:	2303      	movs	r3, #3
 8000c96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	486e      	ldr	r0, [pc, #440]	@ (8000e5c <MX_GPIO_Init+0x888>)
 8000ca4:	f000 fd88 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ca8:	2308      	movs	r3, #8
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4863      	ldr	r0, [pc, #396]	@ (8000e50 <MX_GPIO_Init+0x87c>)
 8000cc4:	f000 fd78 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000cc8:	2305      	movs	r3, #5
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cd8:	230a      	movs	r3, #10
 8000cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	485b      	ldr	r0, [pc, #364]	@ (8000e50 <MX_GPIO_Init+0x87c>)
 8000ce4:	f000 fd68 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ce8:	2332      	movs	r3, #50	@ 0x32
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf8:	230b      	movs	r3, #11
 8000cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d00:	4619      	mov	r1, r3
 8000d02:	4853      	ldr	r0, [pc, #332]	@ (8000e50 <MX_GPIO_Init+0x87c>)
 8000d04:	f000 fd58 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d18:	2309      	movs	r3, #9
 8000d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d20:	4619      	mov	r1, r3
 8000d22:	484f      	ldr	r0, [pc, #316]	@ (8000e60 <MX_GPIO_Init+0x88c>)
 8000d24:	f000 fd48 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d28:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d3a:	2309      	movs	r3, #9
 8000d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d42:	4619      	mov	r1, r3
 8000d44:	4847      	ldr	r0, [pc, #284]	@ (8000e64 <MX_GPIO_Init+0x890>)
 8000d46:	f000 fd37 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	483e      	ldr	r0, [pc, #248]	@ (8000e58 <MX_GPIO_Init+0x884>)
 8000d5e:	f000 fd2b 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000d62:	2382      	movs	r3, #130	@ 0x82
 8000d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d72:	230b      	movs	r3, #11
 8000d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4832      	ldr	r0, [pc, #200]	@ (8000e48 <MX_GPIO_Init+0x874>)
 8000d7e:	f000 fd1b 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000d82:	2301      	movs	r3, #1
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d86:	2303      	movs	r3, #3
 8000d88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d92:	4619      	mov	r1, r3
 8000d94:	482c      	ldr	r0, [pc, #176]	@ (8000e48 <MX_GPIO_Init+0x874>)
 8000d96:	f000 fd0f 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000d9a:	2310      	movs	r3, #16
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000daa:	230d      	movs	r3, #13
 8000dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000db2:	4619      	mov	r1, r3
 8000db4:	4824      	ldr	r0, [pc, #144]	@ (8000e48 <MX_GPIO_Init+0x874>)
 8000db6:	f000 fcff 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000dba:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc0:	2312      	movs	r3, #18
 8000dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481f      	ldr	r0, [pc, #124]	@ (8000e54 <MX_GPIO_Init+0x880>)
 8000dd8:	f000 fcee 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_CLK_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin;
 8000ddc:	2320      	movs	r3, #32
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dec:	230a      	movs	r3, #10
 8000dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000df4:	4619      	mov	r1, r3
 8000df6:	4814      	ldr	r0, [pc, #80]	@ (8000e48 <MX_GPIO_Init+0x874>)
 8000df8:	f000 fcde 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000dfc:	2340      	movs	r3, #64	@ 0x40
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e0c:	2309      	movs	r3, #9
 8000e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e14:	4619      	mov	r1, r3
 8000e16:	480f      	ldr	r0, [pc, #60]	@ (8000e54 <MX_GPIO_Init+0x880>)
 8000e18:	f000 fcce 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e1c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e2e:	2305      	movs	r3, #5
 8000e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e36:	4619      	mov	r1, r3
 8000e38:	4809      	ldr	r0, [pc, #36]	@ (8000e60 <MX_GPIO_Init+0x88c>)
 8000e3a:	f000 fcbd 	bl	80017b8 <HAL_GPIO_Init>

}
 8000e3e:	bf00      	nop
 8000e40:	3740      	adds	r7, #64	@ 0x40
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40022000 	.word	0x40022000
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40021c00 	.word	0x40021c00
 8000e58:	40021800 	.word	0x40021800
 8000e5c:	40021400 	.word	0x40021400
 8000e60:	40020400 	.word	0x40020400
 8000e64:	40020c00 	.word	0x40020c00

08000e68 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e6c:	f3bf 8f4f 	dsb	sy
}
 8000e70:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <__NVIC_SystemReset+0x24>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000e7a:	4904      	ldr	r1, [pc, #16]	@ (8000e8c <__NVIC_SystemReset+0x24>)
 8000e7c:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <__NVIC_SystemReset+0x28>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <__NVIC_SystemReset+0x20>
 8000e8c:	e000ed00 	.word	0xe000ed00
 8000e90:	05fa0004 	.word	0x05fa0004

08000e94 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e9c:	1d39      	adds	r1, r7, #4
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4803      	ldr	r0, [pc, #12]	@ (8000eb4 <__io_putchar+0x20>)
 8000ea6:	f002 fa6b 	bl	8003380 <HAL_UART_Transmit>
return ch;
 8000eaa:	687b      	ldr	r3, [r7, #4]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200000e4 	.word	0x200000e4

08000eb8 <TaskGive>:
SemaphoreHandle_t sem;

void TaskGive(void *argument);
void TaskTake(void *argument);

void TaskGive(void *argument){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    TickType_t delay = 100; // Délai initial en ms
 8000ec0:	2364      	movs	r3, #100	@ 0x64
 8000ec2:	60fb      	str	r3, [r7, #12]

    for(;;)
    {
        printf("TaskGive: Avant de donner le sémaphore\n");
 8000ec4:	480f      	ldr	r0, [pc, #60]	@ (8000f04 <TaskGive+0x4c>)
 8000ec6:	f006 f8eb 	bl	80070a0 <puts>

        if (xSemaphoreGive(sem) == pdPASS)
 8000eca:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <TaskGive+0x50>)
 8000ecc:	6818      	ldr	r0, [r3, #0]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f003 fa94 	bl	8004400 <xQueueGenericSend>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d102      	bne.n	8000ee4 <TaskGive+0x2c>
        {
            printf("TaskGive: Sémaphore donné\n");
 8000ede:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <TaskGive+0x54>)
 8000ee0:	f006 f8de 	bl	80070a0 <puts>
        }

        vTaskDelay(pdMS_TO_TICKS(delay)); // Attendre delay ms
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	4a08      	ldr	r2, [pc, #32]	@ (8000f10 <TaskGive+0x58>)
 8000ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef4:	099b      	lsrs	r3, r3, #6
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f004 f97c 	bl	80051f4 <vTaskDelay>
        delay += 100; // Ajoute 100ms à chaque itération
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3364      	adds	r3, #100	@ 0x64
 8000f00:	60fb      	str	r3, [r7, #12]
        printf("TaskGive: Avant de donner le sémaphore\n");
 8000f02:	e7df      	b.n	8000ec4 <TaskGive+0xc>
 8000f04:	08007e54 	.word	0x08007e54
 8000f08:	2000008c 	.word	0x2000008c
 8000f0c:	08007e7c 	.word	0x08007e7c
 8000f10:	10624dd3 	.word	0x10624dd3

08000f14 <TaskTake>:
    }
}



void TaskTake(void *argument){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    static int erreur_count = 0;

    for(;;)
    {
        printf("TaskTake: Avant de prendre le sémaphore\n");
 8000f1c:	4815      	ldr	r0, [pc, #84]	@ (8000f74 <TaskTake+0x60>)
 8000f1e:	f006 f8bf 	bl	80070a0 <puts>

        if (xSemaphoreTake(sem, pdMS_TO_TICKS(1000)) == pdTRUE)
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <TaskTake+0x64>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 fcfe 	bl	800492c <xQueueSemaphoreTake>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d106      	bne.n	8000f44 <TaskTake+0x30>
        {
            printf("TaskTake: Sémaphore pris\n");
 8000f36:	4811      	ldr	r0, [pc, #68]	@ (8000f7c <TaskTake+0x68>)
 8000f38:	f006 f8b2 	bl	80070a0 <puts>
            erreur_count = 0; // Reset du compteur d'erreur
 8000f3c:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <TaskTake+0x6c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e7eb      	b.n	8000f1c <TaskTake+0x8>
        }
        else
        {
            erreur_count++;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <TaskTake+0x6c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <TaskTake+0x6c>)
 8000f4c:	6013      	str	r3, [r2, #0]
            printf("TaskTake: Erreur d'acquisition #%d\n", erreur_count);
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <TaskTake+0x6c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4619      	mov	r1, r3
 8000f54:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <TaskTake+0x70>)
 8000f56:	f006 f83b 	bl	8006fd0 <iprintf>

            if (erreur_count >= 3)
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <TaskTake+0x6c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	dddc      	ble.n	8000f1c <TaskTake+0x8>
            {
                printf("TaskTake: Trop d'échecs. Redémarrage dans 5s...\n");
 8000f62:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <TaskTake+0x74>)
 8000f64:	f006 f89c 	bl	80070a0 <puts>
                vTaskDelay(pdMS_TO_TICKS(5000));
 8000f68:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f6c:	f004 f942 	bl	80051f4 <vTaskDelay>
                NVIC_SystemReset(); // Redémarrage logiciel
 8000f70:	f7ff ff7a 	bl	8000e68 <__NVIC_SystemReset>
 8000f74:	08007e98 	.word	0x08007e98
 8000f78:	2000008c 	.word	0x2000008c
 8000f7c:	08007ec4 	.word	0x08007ec4
 8000f80:	20000090 	.word	0x20000090
 8000f84:	08007ee0 	.word	0x08007ee0
 8000f88:	08007f04 	.word	0x08007f04

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f92:	f000 fb02 	bl	800159a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f96:	f000 f845 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9a:	f7ff fb1b 	bl	80005d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f9e:	f000 fa45 	bl	800142c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Test UART transmission\n");
 8000fa2:	4819      	ldr	r0, [pc, #100]	@ (8001008 <main+0x7c>)
 8000fa4:	f006 f87c 	bl	80070a0 <puts>


  	  sem = xSemaphoreCreateBinary();
 8000fa8:	2203      	movs	r2, #3
 8000faa:	2100      	movs	r1, #0
 8000fac:	2001      	movs	r0, #1
 8000fae:	f003 f9c0 	bl	8004332 <xQueueGenericCreate>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a15      	ldr	r2, [pc, #84]	@ (800100c <main+0x80>)
 8000fb6:	6013      	str	r3, [r2, #0]
      // Vérifier si le sémaphore a été créé avec succès
      if (sem == NULL)
 8000fb8:	4b14      	ldr	r3, [pc, #80]	@ (800100c <main+0x80>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d104      	bne.n	8000fca <main+0x3e>
      {
          printf("Erreur de création du sémaphore\n");
 8000fc0:	4813      	ldr	r0, [pc, #76]	@ (8001010 <main+0x84>)
 8000fc2:	f006 f86d 	bl	80070a0 <puts>
          while(1);
 8000fc6:	bf00      	nop
 8000fc8:	e7fd      	b.n	8000fc6 <main+0x3a>
      }
  /* Création de la tâche */
    //xTaskCreate(LedCli, "LedTask", 128, NULL, 1, NULL);
  xTaskCreate(TaskGive, "TaskGive", 128, NULL, 1, NULL);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	2280      	movs	r2, #128	@ 0x80
 8000fd6:	490f      	ldr	r1, [pc, #60]	@ (8001014 <main+0x88>)
 8000fd8:	480f      	ldr	r0, [pc, #60]	@ (8001018 <main+0x8c>)
 8000fda:	f003 ffab 	bl	8004f34 <xTaskCreate>
  xTaskCreate(TaskTake, "TaskTake", 128, NULL, 2, NULL);
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	490c      	ldr	r1, [pc, #48]	@ (800101c <main+0x90>)
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <main+0x94>)
 8000fee:	f003 ffa1 	bl	8004f34 <xTaskCreate>


    /* Lancement du scheduler */
    vTaskStartScheduler();
 8000ff2:	f004 f937 	bl	8005264 <vTaskStartScheduler>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ff6:	f002 fe83 	bl	8003d00 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000ffa:	f7ff fad1 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ffe:	f002 feb3 	bl	8003d68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001002:	bf00      	nop
 8001004:	e7fd      	b.n	8001002 <main+0x76>
 8001006:	bf00      	nop
 8001008:	08007f38 	.word	0x08007f38
 800100c:	2000008c 	.word	0x2000008c
 8001010:	08007f50 	.word	0x08007f50
 8001014:	08007f74 	.word	0x08007f74
 8001018:	08000eb9 	.word	0x08000eb9
 800101c:	08007f80 	.word	0x08007f80
 8001020:	08000f15 	.word	0x08000f15

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b094      	sub	sp, #80	@ 0x50
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	2230      	movs	r2, #48	@ 0x30
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f006 f914 	bl	8007260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001048:	4b2b      	ldr	r3, [pc, #172]	@ (80010f8 <SystemClock_Config+0xd4>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	4a2a      	ldr	r2, [pc, #168]	@ (80010f8 <SystemClock_Config+0xd4>)
 800104e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001052:	6413      	str	r3, [r2, #64]	@ 0x40
 8001054:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <SystemClock_Config+0xd4>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001060:	4b26      	ldr	r3, [pc, #152]	@ (80010fc <SystemClock_Config+0xd8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a25      	ldr	r2, [pc, #148]	@ (80010fc <SystemClock_Config+0xd8>)
 8001066:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b23      	ldr	r3, [pc, #140]	@ (80010fc <SystemClock_Config+0xd8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001078:	2301      	movs	r3, #1
 800107a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001082:	2302      	movs	r3, #2
 8001084:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001086:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800108a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800108c:	2319      	movs	r3, #25
 800108e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001090:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8001094:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001096:	2302      	movs	r3, #2
 8001098:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800109a:	2302      	movs	r3, #2
 800109c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fd9e 	bl	8001be4 <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010ae:	f000 f839 	bl	8001124 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010b2:	f000 fd47 	bl	8001b44 <HAL_PWREx_EnableOverDrive>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010bc:	f000 f832 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c0:	230f      	movs	r3, #15
 80010c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c4:	2302      	movs	r3, #2
 80010c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2107      	movs	r1, #7
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 f824 	bl	800212c <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010ea:	f000 f81b 	bl	8001124 <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3750      	adds	r7, #80	@ 0x50
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40007000 	.word	0x40007000

08001100 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001112:	f000 fa4f 	bl	80015b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40001000 	.word	0x40001000

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <Error_Handler+0x8>

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <HAL_MspInit+0x4c>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	4a10      	ldr	r2, [pc, #64]	@ (800117c <HAL_MspInit+0x4c>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001140:	6413      	str	r3, [r2, #64]	@ 0x40
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <HAL_MspInit+0x4c>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <HAL_MspInit+0x4c>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <HAL_MspInit+0x4c>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001158:	6453      	str	r3, [r2, #68]	@ 0x44
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <HAL_MspInit+0x4c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	210f      	movs	r1, #15
 800116a:	f06f 0001 	mvn.w	r0, #1
 800116e:	f000 faf9 	bl	8001764 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	@ 0x38
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001190:	4b33      	ldr	r3, [pc, #204]	@ (8001260 <HAL_InitTick+0xe0>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	4a32      	ldr	r2, [pc, #200]	@ (8001260 <HAL_InitTick+0xe0>)
 8001196:	f043 0310 	orr.w	r3, r3, #16
 800119a:	6413      	str	r3, [r2, #64]	@ 0x40
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <HAL_InitTick+0xe0>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	f003 0310 	and.w	r3, r3, #16
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a8:	f107 0210 	add.w	r2, r7, #16
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f001 f9a0 	bl	80024f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d103      	bne.n	80011ca <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011c2:	f001 f971 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 80011c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80011c8:	e004      	b.n	80011d4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011ca:	f001 f96d 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 80011ce:	4603      	mov	r3, r0
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d6:	4a23      	ldr	r2, [pc, #140]	@ (8001264 <HAL_InitTick+0xe4>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	0c9b      	lsrs	r3, r3, #18
 80011de:	3b01      	subs	r3, #1
 80011e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011e2:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <HAL_InitTick+0xe8>)
 80011e4:	4a21      	ldr	r2, [pc, #132]	@ (800126c <HAL_InitTick+0xec>)
 80011e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <HAL_InitTick+0xe8>)
 80011ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001268 <HAL_InitTick+0xe8>)
 80011f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <HAL_InitTick+0xe8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <HAL_InitTick+0xe8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001202:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <HAL_InitTick+0xe8>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001208:	4817      	ldr	r0, [pc, #92]	@ (8001268 <HAL_InitTick+0xe8>)
 800120a:	f001 fd97 	bl	8002d3c <HAL_TIM_Base_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001214:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001218:	2b00      	cmp	r3, #0
 800121a:	d11b      	bne.n	8001254 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800121c:	4812      	ldr	r0, [pc, #72]	@ (8001268 <HAL_InitTick+0xe8>)
 800121e:	f001 fdef 	bl	8002e00 <HAL_TIM_Base_Start_IT>
 8001222:	4603      	mov	r3, r0
 8001224:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001228:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800122c:	2b00      	cmp	r3, #0
 800122e:	d111      	bne.n	8001254 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001230:	2036      	movs	r0, #54	@ 0x36
 8001232:	f000 fab3 	bl	800179c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d808      	bhi.n	800124e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	2036      	movs	r0, #54	@ 0x36
 8001242:	f000 fa8f 	bl	8001764 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <HAL_InitTick+0xf0>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	e002      	b.n	8001254 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001254:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001258:	4618      	mov	r0, r3
 800125a:	3738      	adds	r7, #56	@ 0x38
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	431bde83 	.word	0x431bde83
 8001268:	20000094 	.word	0x20000094
 800126c:	40001000 	.word	0x40001000
 8001270:	20000004 	.word	0x20000004

08001274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <NMI_Handler+0x4>

0800127c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <MemManage_Handler+0x4>

0800128c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <UsageFault_Handler+0x4>

0800129c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <TIM6_DAC_IRQHandler+0x10>)
 80012b2:	f001 fe1d 	bl	8002ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000094 	.word	0x20000094

080012c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	e00a      	b.n	80012e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012d2:	f3af 8000 	nop.w
 80012d6:	4601      	mov	r1, r0
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	60ba      	str	r2, [r7, #8]
 80012de:	b2ca      	uxtb	r2, r1
 80012e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbf0      	blt.n	80012d2 <_read+0x12>
  }

  return len;
 80012f0:	687b      	ldr	r3, [r7, #4]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	e009      	b.n	8001320 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	60ba      	str	r2, [r7, #8]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fdbd 	bl	8000e94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf1      	blt.n	800130c <_write+0x12>
  }
  return len;
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_close>:

int _close(int file)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800135a:	605a      	str	r2, [r3, #4]
  return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <_isatty>:

int _isatty(int file)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a4:	4a14      	ldr	r2, [pc, #80]	@ (80013f8 <_sbrk+0x5c>)
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <_sbrk+0x60>)
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b0:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <_sbrk+0x64>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <_sbrk+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013cc:	f005 ffec 	bl	80073a8 <__errno>
 80013d0:	4603      	mov	r3, r0
 80013d2:	220c      	movs	r2, #12
 80013d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	e009      	b.n	80013f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e2:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <_sbrk+0x64>)
 80013ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20050000 	.word	0x20050000
 80013fc:	00000400 	.word	0x00000400
 8001400:	200000e0 	.word	0x200000e0
 8001404:	20004ca0 	.word	0x20004ca0

08001408 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <SystemInit+0x20>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <SystemInit+0x20>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001432:	4a15      	ldr	r2, [pc, #84]	@ (8001488 <MX_USART1_UART_Init+0x5c>)
 8001434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <MX_USART1_UART_Init+0x58>)
 8001470:	f001 ff38 	bl	80032e4 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800147a:	f7ff fe53 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200000e4 	.word	0x200000e4
 8001488:	40011000 	.word	0x40011000

0800148c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0aa      	sub	sp, #168	@ 0xa8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	2284      	movs	r2, #132	@ 0x84
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f005 fed7 	bl	8007260 <memset>
  if(uartHandle->Instance==USART1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a21      	ldr	r2, [pc, #132]	@ (800153c <HAL_UART_MspInit+0xb0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d13b      	bne.n	8001534 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014bc:	2340      	movs	r3, #64	@ 0x40
 80014be:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014c0:	2300      	movs	r3, #0
 80014c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 f847 	bl	800255c <HAL_RCCEx_PeriphCLKConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014d4:	f7ff fe26 	bl	8001124 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014d8:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <HAL_UART_MspInit+0xb4>)
 80014da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014dc:	4a18      	ldr	r2, [pc, #96]	@ (8001540 <HAL_UART_MspInit+0xb4>)
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e4:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <HAL_UART_MspInit+0xb4>)
 80014e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <HAL_UART_MspInit+0xb4>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f4:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <HAL_UART_MspInit+0xb4>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fc:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <HAL_UART_MspInit+0xb4>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001508:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800150c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001522:	2307      	movs	r3, #7
 8001524:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800152c:	4619      	mov	r1, r3
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <HAL_UART_MspInit+0xb8>)
 8001530:	f000 f942 	bl	80017b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001534:	bf00      	nop
 8001536:	37a8      	adds	r7, #168	@ 0xa8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40011000 	.word	0x40011000
 8001540:	40023800 	.word	0x40023800
 8001544:	40020000 	.word	0x40020000

08001548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001548:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001580 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800154c:	f7ff ff5c 	bl	8001408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001550:	480c      	ldr	r0, [pc, #48]	@ (8001584 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001552:	490d      	ldr	r1, [pc, #52]	@ (8001588 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001554:	4a0d      	ldr	r2, [pc, #52]	@ (800158c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001558:	e002      	b.n	8001560 <LoopCopyDataInit>

0800155a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800155c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155e:	3304      	adds	r3, #4

08001560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001564:	d3f9      	bcc.n	800155a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001566:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001568:	4c0a      	ldr	r4, [pc, #40]	@ (8001594 <LoopFillZerobss+0x22>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800156c:	e001      	b.n	8001572 <LoopFillZerobss>

0800156e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001570:	3204      	adds	r2, #4

08001572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001574:	d3fb      	bcc.n	800156e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001576:	f005 ff1d 	bl	80073b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800157a:	f7ff fd07 	bl	8000f8c <main>
  bx  lr    
 800157e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001580:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001588:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800158c:	08008024 	.word	0x08008024
  ldr r2, =_sbss
 8001590:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001594:	20004c9c 	.word	0x20004c9c

08001598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC_IRQHandler>

0800159a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159e:	2003      	movs	r0, #3
 80015a0:	f000 f8d5 	bl	800174e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a4:	200f      	movs	r0, #15
 80015a6:	f7ff fdeb 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015aa:	f7ff fdc1 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008
 80015d8:	2000016c 	.word	0x2000016c

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	2000016c 	.word	0x2000016c

080015f4 <__NVIC_SetPriorityGrouping>:
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <__NVIC_SetPriorityGrouping+0x40>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	4313      	orrs	r3, r2
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	@ (8001634 <__NVIC_SetPriorityGrouping+0x40>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00
 8001638:	05fa0000 	.word	0x05fa0000

0800163c <__NVIC_GetPriorityGrouping>:
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	@ (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_EnableIRQ>:
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db0b      	blt.n	8001682 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 021f 	and.w	r2, r3, #31
 8001670:	4907      	ldr	r1, [pc, #28]	@ (8001690 <__NVIC_EnableIRQ+0x38>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	2001      	movs	r0, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_SetPriority>:
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	@ (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	@ (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	@ 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	@ 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ff4c 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001776:	f7ff ff61 	bl	800163c <__NVIC_GetPriorityGrouping>
 800177a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	68b9      	ldr	r1, [r7, #8]
 8001780:	6978      	ldr	r0, [r7, #20]
 8001782:	f7ff ffb1 	bl	80016e8 <NVIC_EncodePriority>
 8001786:	4602      	mov	r2, r0
 8001788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff80 	bl	8001694 <__NVIC_SetPriority>
}
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff54 	bl	8001658 <__NVIC_EnableIRQ>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	@ 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	e175      	b.n	8001ac4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	f040 8164 	bne.w	8001abe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d005      	beq.n	800180e <HAL_GPIO_Init+0x56>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d130      	bne.n	8001870 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001844:	2201      	movs	r2, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 0201 	and.w	r2, r3, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b03      	cmp	r3, #3
 800187a:	d017      	beq.n	80018ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d123      	bne.n	8001900 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	08da      	lsrs	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3208      	adds	r2, #8
 80018c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	220f      	movs	r2, #15
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	08da      	lsrs	r2, r3, #3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3208      	adds	r2, #8
 80018fa:	69b9      	ldr	r1, [r7, #24]
 80018fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0203 	and.w	r2, r3, #3
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80be 	beq.w	8001abe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	4b66      	ldr	r3, [pc, #408]	@ (8001adc <HAL_GPIO_Init+0x324>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	4a65      	ldr	r2, [pc, #404]	@ (8001adc <HAL_GPIO_Init+0x324>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	4b63      	ldr	r3, [pc, #396]	@ (8001adc <HAL_GPIO_Init+0x324>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800195a:	4a61      	ldr	r2, [pc, #388]	@ (8001ae0 <HAL_GPIO_Init+0x328>)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	220f      	movs	r2, #15
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a58      	ldr	r2, [pc, #352]	@ (8001ae4 <HAL_GPIO_Init+0x32c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d037      	beq.n	80019f6 <HAL_GPIO_Init+0x23e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a57      	ldr	r2, [pc, #348]	@ (8001ae8 <HAL_GPIO_Init+0x330>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d031      	beq.n	80019f2 <HAL_GPIO_Init+0x23a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a56      	ldr	r2, [pc, #344]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d02b      	beq.n	80019ee <HAL_GPIO_Init+0x236>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a55      	ldr	r2, [pc, #340]	@ (8001af0 <HAL_GPIO_Init+0x338>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d025      	beq.n	80019ea <HAL_GPIO_Init+0x232>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a54      	ldr	r2, [pc, #336]	@ (8001af4 <HAL_GPIO_Init+0x33c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d01f      	beq.n	80019e6 <HAL_GPIO_Init+0x22e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a53      	ldr	r2, [pc, #332]	@ (8001af8 <HAL_GPIO_Init+0x340>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d019      	beq.n	80019e2 <HAL_GPIO_Init+0x22a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a52      	ldr	r2, [pc, #328]	@ (8001afc <HAL_GPIO_Init+0x344>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x226>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a51      	ldr	r2, [pc, #324]	@ (8001b00 <HAL_GPIO_Init+0x348>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x222>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a50      	ldr	r2, [pc, #320]	@ (8001b04 <HAL_GPIO_Init+0x34c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x21e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001b08 <HAL_GPIO_Init+0x350>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x21a>
 80019ce:	2309      	movs	r3, #9
 80019d0:	e012      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019d2:	230a      	movs	r3, #10
 80019d4:	e010      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019d6:	2308      	movs	r3, #8
 80019d8:	e00e      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019da:	2307      	movs	r3, #7
 80019dc:	e00c      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019de:	2306      	movs	r3, #6
 80019e0:	e00a      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019e2:	2305      	movs	r3, #5
 80019e4:	e008      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019e6:	2304      	movs	r3, #4
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019ea:	2303      	movs	r3, #3
 80019ec:	e004      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019f6:	2300      	movs	r3, #0
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	f002 0203 	and.w	r2, r2, #3
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	4093      	lsls	r3, r2
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a08:	4935      	ldr	r1, [pc, #212]	@ (8001ae0 <HAL_GPIO_Init+0x328>)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a16:	4b3d      	ldr	r3, [pc, #244]	@ (8001b0c <HAL_GPIO_Init+0x354>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3a:	4a34      	ldr	r2, [pc, #208]	@ (8001b0c <HAL_GPIO_Init+0x354>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a40:	4b32      	ldr	r3, [pc, #200]	@ (8001b0c <HAL_GPIO_Init+0x354>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a64:	4a29      	ldr	r2, [pc, #164]	@ (8001b0c <HAL_GPIO_Init+0x354>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a6a:	4b28      	ldr	r3, [pc, #160]	@ (8001b0c <HAL_GPIO_Init+0x354>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b0c <HAL_GPIO_Init+0x354>)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	@ (8001b0c <HAL_GPIO_Init+0x354>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <HAL_GPIO_Init+0x354>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b0f      	cmp	r3, #15
 8001ac8:	f67f ae86 	bls.w	80017d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3724      	adds	r7, #36	@ 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40021400 	.word	0x40021400
 8001afc:	40021800 	.word	0x40021800
 8001b00:	40021c00 	.word	0x40021c00
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40022400 	.word	0x40022400
 8001b0c:	40013c00 	.word	0x40013c00

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b2c:	e003      	b.n	8001b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	619a      	str	r2, [r3, #24]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	4b23      	ldr	r3, [pc, #140]	@ (8001bdc <HAL_PWREx_EnableOverDrive+0x98>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	4a22      	ldr	r2, [pc, #136]	@ (8001bdc <HAL_PWREx_EnableOverDrive+0x98>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5a:	4b20      	ldr	r3, [pc, #128]	@ (8001bdc <HAL_PWREx_EnableOverDrive+0x98>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b66:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b70:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b72:	f7ff fd33 	bl	80015dc <HAL_GetTick>
 8001b76:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b78:	e009      	b.n	8001b8e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b7a:	f7ff fd2f 	bl	80015dc <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b88:	d901      	bls.n	8001b8e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e022      	b.n	8001bd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b8e:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b9a:	d1ee      	bne.n	8001b7a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b9c:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8001be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba8:	f7ff fd18 	bl	80015dc <HAL_GetTick>
 8001bac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bae:	e009      	b.n	8001bc4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bb0:	f7ff fd14 	bl	80015dc <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bbe:	d901      	bls.n	8001bc4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e007      	b.n	8001bd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001bd0:	d1ee      	bne.n	8001bb0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40007000 	.word	0x40007000

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e291      	b.n	800211e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8087 	beq.w	8001d16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c08:	4b96      	ldr	r3, [pc, #600]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d00c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c14:	4b93      	ldr	r3, [pc, #588]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d112      	bne.n	8001c46 <HAL_RCC_OscConfig+0x62>
 8001c20:	4b90      	ldr	r3, [pc, #576]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c2c:	d10b      	bne.n	8001c46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2e:	4b8d      	ldr	r3, [pc, #564]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d06c      	beq.n	8001d14 <HAL_RCC_OscConfig+0x130>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d168      	bne.n	8001d14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e26b      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x7a>
 8001c50:	4b84      	ldr	r3, [pc, #528]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a83      	ldr	r2, [pc, #524]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e02e      	b.n	8001cbc <HAL_RCC_OscConfig+0xd8>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x9c>
 8001c66:	4b7f      	ldr	r3, [pc, #508]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b7c      	ldr	r3, [pc, #496]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a7b      	ldr	r2, [pc, #492]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e01d      	b.n	8001cbc <HAL_RCC_OscConfig+0xd8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xc0>
 8001c8a:	4b76      	ldr	r3, [pc, #472]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a75      	ldr	r2, [pc, #468]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b73      	ldr	r3, [pc, #460]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a72      	ldr	r2, [pc, #456]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0xd8>
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a6e      	ldr	r2, [pc, #440]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a6b      	ldr	r2, [pc, #428]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d013      	beq.n	8001cec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fc8a 	bl	80015dc <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fc86 	bl	80015dc <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e21f      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	4b61      	ldr	r3, [pc, #388]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0xe8>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff fc76 	bl	80015dc <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fc72 	bl	80015dc <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	@ 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e20b      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	4b57      	ldr	r3, [pc, #348]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x110>
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d069      	beq.n	8001df6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d22:	4b50      	ldr	r3, [pc, #320]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d11c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x190>
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d116      	bne.n	8001d74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	4b47      	ldr	r3, [pc, #284]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_RCC_OscConfig+0x17a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e1df      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5e:	4b41      	ldr	r3, [pc, #260]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	493d      	ldr	r1, [pc, #244]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d72:	e040      	b.n	8001df6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d023      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7c:	4b39      	ldr	r3, [pc, #228]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a38      	ldr	r2, [pc, #224]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff fc28 	bl	80015dc <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d90:	f7ff fc24 	bl	80015dc <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e1bd      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da2:	4b30      	ldr	r3, [pc, #192]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dae:	4b2d      	ldr	r3, [pc, #180]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4929      	ldr	r1, [pc, #164]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
 8001dc2:	e018      	b.n	8001df6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc4:	4b27      	ldr	r3, [pc, #156]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a26      	ldr	r2, [pc, #152]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001dca:	f023 0301 	bic.w	r3, r3, #1
 8001dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fc04 	bl	80015dc <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd8:	f7ff fc00 	bl	80015dc <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e199      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d038      	beq.n	8001e74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d019      	beq.n	8001e3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0a:	4b16      	ldr	r3, [pc, #88]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e0e:	4a15      	ldr	r2, [pc, #84]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7ff fbe1 	bl	80015dc <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fbdd 	bl	80015dc <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e176      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e30:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x23a>
 8001e3c:	e01a      	b.n	8001e74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e42:	4a08      	ldr	r2, [pc, #32]	@ (8001e64 <HAL_RCC_OscConfig+0x280>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fbc7 	bl	80015dc <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e52:	f7ff fbc3 	bl	80015dc <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d903      	bls.n	8001e68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e15c      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
 8001e64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	4b91      	ldr	r3, [pc, #580]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1ee      	bne.n	8001e52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80a4 	beq.w	8001fca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e82:	4b8b      	ldr	r3, [pc, #556]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10d      	bne.n	8001eaa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b88      	ldr	r3, [pc, #544]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	4a87      	ldr	r2, [pc, #540]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9a:	4b85      	ldr	r3, [pc, #532]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eaa:	4b82      	ldr	r3, [pc, #520]	@ (80020b4 <HAL_RCC_OscConfig+0x4d0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d118      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80020b4 <HAL_RCC_OscConfig+0x4d0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a7e      	ldr	r2, [pc, #504]	@ (80020b4 <HAL_RCC_OscConfig+0x4d0>)
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff fb8b 	bl	80015dc <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eca:	f7ff fb87 	bl	80015dc <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b64      	cmp	r3, #100	@ 0x64
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e120      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001edc:	4b75      	ldr	r3, [pc, #468]	@ (80020b4 <HAL_RCC_OscConfig+0x4d0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_OscConfig+0x31a>
 8001ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef4:	4a6e      	ldr	r2, [pc, #440]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efc:	e02d      	b.n	8001f5a <HAL_RCC_OscConfig+0x376>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x33c>
 8001f06:	4b6a      	ldr	r3, [pc, #424]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0a:	4a69      	ldr	r2, [pc, #420]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f12:	4b67      	ldr	r3, [pc, #412]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f16:	4a66      	ldr	r2, [pc, #408]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f1e:	e01c      	b.n	8001f5a <HAL_RCC_OscConfig+0x376>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d10c      	bne.n	8001f42 <HAL_RCC_OscConfig+0x35e>
 8001f28:	4b61      	ldr	r3, [pc, #388]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2c:	4a60      	ldr	r2, [pc, #384]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f34:	4b5e      	ldr	r3, [pc, #376]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f38:	4a5d      	ldr	r2, [pc, #372]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f40:	e00b      	b.n	8001f5a <HAL_RCC_OscConfig+0x376>
 8001f42:	4b5b      	ldr	r3, [pc, #364]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f46:	4a5a      	ldr	r2, [pc, #360]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f4e:	4b58      	ldr	r3, [pc, #352]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f52:	4a57      	ldr	r2, [pc, #348]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	f023 0304 	bic.w	r3, r3, #4
 8001f58:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d015      	beq.n	8001f8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff fb3b 	bl	80015dc <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff fb37 	bl	80015dc <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e0ce      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	4b4b      	ldr	r3, [pc, #300]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0ee      	beq.n	8001f6a <HAL_RCC_OscConfig+0x386>
 8001f8c:	e014      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fb25 	bl	80015dc <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff fb21 	bl	80015dc <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	4b40      	ldr	r3, [pc, #256]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1ee      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d105      	bne.n	8001fca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbe:	4b3c      	ldr	r3, [pc, #240]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	4a3b      	ldr	r2, [pc, #236]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80a4 	beq.w	800211c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd4:	4b36      	ldr	r3, [pc, #216]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d06b      	beq.n	80020b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d149      	bne.n	800207c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe8:	4b31      	ldr	r3, [pc, #196]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a30      	ldr	r2, [pc, #192]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7ff faf2 	bl	80015dc <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7ff faee 	bl	80015dc <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e087      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	4b28      	ldr	r3, [pc, #160]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002028:	019b      	lsls	r3, r3, #6
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	085b      	lsrs	r3, r3, #1
 8002032:	3b01      	subs	r3, #1
 8002034:	041b      	lsls	r3, r3, #16
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203c:	061b      	lsls	r3, r3, #24
 800203e:	4313      	orrs	r3, r2
 8002040:	4a1b      	ldr	r2, [pc, #108]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002042:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002046:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002048:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a18      	ldr	r2, [pc, #96]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 800204e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff fac2 	bl	80015dc <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff fabe 	bl	80015dc <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e057      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x478>
 800207a:	e04f      	b.n	800211c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0b      	ldr	r2, [pc, #44]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002082:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff faa8 	bl	80015dc <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7ff faa4 	bl	80015dc <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e03d      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x4ac>
 80020ae:	e035      	b.n	800211c <HAL_RCC_OscConfig+0x538>
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <HAL_RCC_OscConfig+0x544>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d028      	beq.n	8002118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d121      	bne.n	8002118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d11a      	bne.n	8002118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020e8:	4013      	ands	r3, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d111      	bne.n	8002118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fe:	085b      	lsrs	r3, r3, #1
 8002100:	3b01      	subs	r3, #1
 8002102:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d107      	bne.n	8002118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002112:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800

0800212c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0d0      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002144:	4b6a      	ldr	r3, [pc, #424]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d910      	bls.n	8002174 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b67      	ldr	r3, [pc, #412]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 020f 	bic.w	r2, r3, #15
 800215a:	4965      	ldr	r1, [pc, #404]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b63      	ldr	r3, [pc, #396]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b8      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218c:	4b59      	ldr	r3, [pc, #356]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a58      	ldr	r2, [pc, #352]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002192:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002196:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a4:	4b53      	ldr	r3, [pc, #332]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a52      	ldr	r2, [pc, #328]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80021aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b50      	ldr	r3, [pc, #320]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	494d      	ldr	r1, [pc, #308]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d040      	beq.n	8002250 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b47      	ldr	r3, [pc, #284]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d115      	bne.n	800220e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ee:	4b41      	ldr	r3, [pc, #260]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e073      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	4b3d      	ldr	r3, [pc, #244]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e06b      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220e:	4b39      	ldr	r3, [pc, #228]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f023 0203 	bic.w	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4936      	ldr	r1, [pc, #216]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 800221c:	4313      	orrs	r3, r2
 800221e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002220:	f7ff f9dc 	bl	80015dc <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	e00a      	b.n	800223e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7ff f9d8 	bl	80015dc <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e053      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	4b2d      	ldr	r3, [pc, #180]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 020c 	and.w	r2, r3, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	429a      	cmp	r2, r3
 800224e:	d1eb      	bne.n	8002228 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d210      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 020f 	bic.w	r2, r3, #15
 8002266:	4922      	ldr	r1, [pc, #136]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e032      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4916      	ldr	r1, [pc, #88]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022aa:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	490e      	ldr	r1, [pc, #56]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022be:	f000 f821 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	490a      	ldr	r1, [pc, #40]	@ (80022f8 <HAL_RCC_ClockConfig+0x1cc>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	4a09      	ldr	r2, [pc, #36]	@ (80022fc <HAL_RCC_ClockConfig+0x1d0>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022da:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <HAL_RCC_ClockConfig+0x1d4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe ff4e 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00
 80022f4:	40023800 	.word	0x40023800
 80022f8:	08007fc8 	.word	0x08007fc8
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002308:	b090      	sub	sp, #64	@ 0x40
 800230a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002310:	2300      	movs	r3, #0
 8002312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002314:	2300      	movs	r3, #0
 8002316:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800231c:	4b59      	ldr	r3, [pc, #356]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x180>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b08      	cmp	r3, #8
 8002326:	d00d      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x40>
 8002328:	2b08      	cmp	r3, #8
 800232a:	f200 80a1 	bhi.w	8002470 <HAL_RCC_GetSysClockFreq+0x16c>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x34>
 8002332:	2b04      	cmp	r3, #4
 8002334:	d003      	beq.n	800233e <HAL_RCC_GetSysClockFreq+0x3a>
 8002336:	e09b      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b53      	ldr	r3, [pc, #332]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x184>)
 800233a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800233c:	e09b      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800233e:	4b53      	ldr	r3, [pc, #332]	@ (800248c <HAL_RCC_GetSysClockFreq+0x188>)
 8002340:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002342:	e098      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002344:	4b4f      	ldr	r3, [pc, #316]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x180>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800234c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800234e:	4b4d      	ldr	r3, [pc, #308]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x180>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d028      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235a:	4b4a      	ldr	r3, [pc, #296]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x180>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	2200      	movs	r2, #0
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	627a      	str	r2, [r7, #36]	@ 0x24
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800236c:	2100      	movs	r1, #0
 800236e:	4b47      	ldr	r3, [pc, #284]	@ (800248c <HAL_RCC_GetSysClockFreq+0x188>)
 8002370:	fb03 f201 	mul.w	r2, r3, r1
 8002374:	2300      	movs	r3, #0
 8002376:	fb00 f303 	mul.w	r3, r0, r3
 800237a:	4413      	add	r3, r2
 800237c:	4a43      	ldr	r2, [pc, #268]	@ (800248c <HAL_RCC_GetSysClockFreq+0x188>)
 800237e:	fba0 1202 	umull	r1, r2, r0, r2
 8002382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002384:	460a      	mov	r2, r1
 8002386:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800238a:	4413      	add	r3, r2
 800238c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800238e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002390:	2200      	movs	r2, #0
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	61fa      	str	r2, [r7, #28]
 8002396:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800239a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800239e:	f7fd ff87 	bl	80002b0 <__aeabi_uldivmod>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4613      	mov	r3, r2
 80023a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023aa:	e053      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ac:	4b35      	ldr	r3, [pc, #212]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	099b      	lsrs	r3, r3, #6
 80023b2:	2200      	movs	r2, #0
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	617a      	str	r2, [r7, #20]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023be:	f04f 0b00 	mov.w	fp, #0
 80023c2:	4652      	mov	r2, sl
 80023c4:	465b      	mov	r3, fp
 80023c6:	f04f 0000 	mov.w	r0, #0
 80023ca:	f04f 0100 	mov.w	r1, #0
 80023ce:	0159      	lsls	r1, r3, #5
 80023d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023d4:	0150      	lsls	r0, r2, #5
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	ebb2 080a 	subs.w	r8, r2, sl
 80023de:	eb63 090b 	sbc.w	r9, r3, fp
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023f6:	ebb2 0408 	subs.w	r4, r2, r8
 80023fa:	eb63 0509 	sbc.w	r5, r3, r9
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	00eb      	lsls	r3, r5, #3
 8002408:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800240c:	00e2      	lsls	r2, r4, #3
 800240e:	4614      	mov	r4, r2
 8002410:	461d      	mov	r5, r3
 8002412:	eb14 030a 	adds.w	r3, r4, sl
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	eb45 030b 	adc.w	r3, r5, fp
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800242a:	4629      	mov	r1, r5
 800242c:	028b      	lsls	r3, r1, #10
 800242e:	4621      	mov	r1, r4
 8002430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002434:	4621      	mov	r1, r4
 8002436:	028a      	lsls	r2, r1, #10
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243e:	2200      	movs	r2, #0
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	60fa      	str	r2, [r7, #12]
 8002444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002448:	f7fd ff32 	bl	80002b0 <__aeabi_uldivmod>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4613      	mov	r3, r2
 8002452:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002454:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x180>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	3301      	adds	r3, #1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002464:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800246e:	e002      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x184>)
 8002472:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002478:	4618      	mov	r0, r3
 800247a:	3740      	adds	r7, #64	@ 0x40
 800247c:	46bd      	mov	sp, r7
 800247e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	00f42400 	.word	0x00f42400
 800248c:	017d7840 	.word	0x017d7840

08002490 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002494:	4b03      	ldr	r3, [pc, #12]	@ (80024a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000000 	.word	0x20000000

080024a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024ac:	f7ff fff0 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0a9b      	lsrs	r3, r3, #10
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4903      	ldr	r1, [pc, #12]	@ (80024cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	08007fd8 	.word	0x08007fd8

080024d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024d4:	f7ff ffdc 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	0b5b      	lsrs	r3, r3, #13
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	4903      	ldr	r1, [pc, #12]	@ (80024f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	08007fd8 	.word	0x08007fd8

080024f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	220f      	movs	r2, #15
 8002506:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002508:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <HAL_RCC_GetClockConfig+0x5c>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002514:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <HAL_RCC_GetClockConfig+0x5c>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <HAL_RCC_GetClockConfig+0x5c>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800252c:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <HAL_RCC_GetClockConfig+0x5c>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800253a:	4b07      	ldr	r3, [pc, #28]	@ (8002558 <HAL_RCC_GetClockConfig+0x60>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 020f 	and.w	r2, r3, #15
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	601a      	str	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40023c00 	.word	0x40023c00

0800255c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d012      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002584:	4b69      	ldr	r3, [pc, #420]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a68      	ldr	r2, [pc, #416]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800258e:	6093      	str	r3, [r2, #8]
 8002590:	4b66      	ldr	r3, [pc, #408]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002598:	4964      	ldr	r1, [pc, #400]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d017      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025b6:	4b5d      	ldr	r3, [pc, #372]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025bc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c4:	4959      	ldr	r1, [pc, #356]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025d4:	d101      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025d6:	2301      	movs	r3, #1
 80025d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80025e2:	2301      	movs	r3, #1
 80025e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d017      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025f2:	4b4e      	ldr	r3, [pc, #312]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	494a      	ldr	r1, [pc, #296]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002610:	d101      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002612:	2301      	movs	r3, #1
 8002614:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800261e:	2301      	movs	r3, #1
 8002620:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800262e:	2301      	movs	r3, #1
 8002630:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 808b 	beq.w	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002640:	4b3a      	ldr	r3, [pc, #232]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	4a39      	ldr	r2, [pc, #228]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800264a:	6413      	str	r3, [r2, #64]	@ 0x40
 800264c:	4b37      	ldr	r3, [pc, #220]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002658:	4b35      	ldr	r3, [pc, #212]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a34      	ldr	r2, [pc, #208]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002664:	f7fe ffba 	bl	80015dc <HAL_GetTick>
 8002668:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800266a:	e008      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266c:	f7fe ffb6 	bl	80015dc <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	@ 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e357      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800267e:	4b2c      	ldr	r3, [pc, #176]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800268a:	4b28      	ldr	r3, [pc, #160]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002692:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d035      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d02e      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026a8:	4b20      	ldr	r3, [pc, #128]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026b2:	4b1e      	ldr	r3, [pc, #120]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b6:	4a1d      	ldr	r2, [pc, #116]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026bc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026be:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c2:	4a1a      	ldr	r2, [pc, #104]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026ca:	4a18      	ldr	r2, [pc, #96]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026d0:	4b16      	ldr	r3, [pc, #88]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d114      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe ff7e 	bl	80015dc <HAL_GetTick>
 80026e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e2:	e00a      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e4:	f7fe ff7a 	bl	80015dc <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e319      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fa:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0ee      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800270e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002712:	d111      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002714:	4b05      	ldr	r3, [pc, #20]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002720:	4b04      	ldr	r3, [pc, #16]	@ (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002722:	400b      	ands	r3, r1
 8002724:	4901      	ldr	r1, [pc, #4]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
 800272a:	e00b      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800272c:	40023800 	.word	0x40023800
 8002730:	40007000 	.word	0x40007000
 8002734:	0ffffcff 	.word	0x0ffffcff
 8002738:	4baa      	ldr	r3, [pc, #680]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4aa9      	ldr	r2, [pc, #676]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002742:	6093      	str	r3, [r2, #8]
 8002744:	4ba7      	ldr	r3, [pc, #668]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002746:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	49a4      	ldr	r1, [pc, #656]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002752:	4313      	orrs	r3, r2
 8002754:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d010      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002762:	4ba0      	ldr	r3, [pc, #640]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002768:	4a9e      	ldr	r2, [pc, #632]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800276a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800276e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002772:	4b9c      	ldr	r3, [pc, #624]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002774:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277c:	4999      	ldr	r1, [pc, #612]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002790:	4b94      	ldr	r3, [pc, #592]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002796:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800279e:	4991      	ldr	r1, [pc, #580]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027b2:	4b8c      	ldr	r3, [pc, #560]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027c0:	4988      	ldr	r1, [pc, #544]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027d4:	4b83      	ldr	r3, [pc, #524]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e2:	4980      	ldr	r1, [pc, #512]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027f6:	4b7b      	ldr	r3, [pc, #492]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	4977      	ldr	r1, [pc, #476]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002818:	4b72      	ldr	r3, [pc, #456]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281e:	f023 0203 	bic.w	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	496f      	ldr	r1, [pc, #444]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800283a:	4b6a      	ldr	r3, [pc, #424]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002840:	f023 020c 	bic.w	r2, r3, #12
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002848:	4966      	ldr	r1, [pc, #408]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800285c:	4b61      	ldr	r3, [pc, #388]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002862:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286a:	495e      	ldr	r1, [pc, #376]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800287e:	4b59      	ldr	r3, [pc, #356]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002884:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800288c:	4955      	ldr	r1, [pc, #340]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028a0:	4b50      	ldr	r3, [pc, #320]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ae:	494d      	ldr	r1, [pc, #308]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028c2:	4b48      	ldr	r3, [pc, #288]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d0:	4944      	ldr	r1, [pc, #272]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028e4:	4b3f      	ldr	r3, [pc, #252]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f2:	493c      	ldr	r1, [pc, #240]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002906:	4b37      	ldr	r3, [pc, #220]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002914:	4933      	ldr	r1, [pc, #204]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002928:	4b2e      	ldr	r3, [pc, #184]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002936:	492b      	ldr	r1, [pc, #172]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d011      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800294a:	4b26      	ldr	r3, [pc, #152]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002950:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002958:	4922      	ldr	r1, [pc, #136]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002964:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002968:	d101      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800296a:	2301      	movs	r3, #1
 800296c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800297a:	2301      	movs	r3, #1
 800297c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800298a:	4b16      	ldr	r3, [pc, #88]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002990:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002998:	4912      	ldr	r1, [pc, #72]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029ac:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029bc:	4909      	ldr	r1, [pc, #36]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d006      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80d9 	beq.w	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029d8:	4b02      	ldr	r3, [pc, #8]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a01      	ldr	r2, [pc, #4]	@ (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029e2:	e001      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80029e4:	40023800 	.word	0x40023800
 80029e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ea:	f7fe fdf7 	bl	80015dc <HAL_GetTick>
 80029ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029f2:	f7fe fdf3 	bl	80015dc <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b64      	cmp	r3, #100	@ 0x64
 80029fe:	d901      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e194      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a04:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d021      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d11d      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a24:	4b64      	ldr	r3, [pc, #400]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a2a:	0c1b      	lsrs	r3, r3, #16
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a32:	4b61      	ldr	r3, [pc, #388]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a38:	0e1b      	lsrs	r3, r3, #24
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	019a      	lsls	r2, r3, #6
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	041b      	lsls	r3, r3, #16
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	071b      	lsls	r3, r3, #28
 8002a58:	4957      	ldr	r1, [pc, #348]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d02e      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a8a:	d129      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a92:	0c1b      	lsrs	r3, r3, #16
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a9a:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa0:	0f1b      	lsrs	r3, r3, #28
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	019a      	lsls	r2, r3, #6
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	431a      	orrs	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	071b      	lsls	r3, r3, #28
 8002ac0:	493d      	ldr	r1, [pc, #244]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ace:	f023 021f 	bic.w	r2, r3, #31
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	4937      	ldr	r1, [pc, #220]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01d      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002aec:	4b32      	ldr	r3, [pc, #200]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002af2:	0e1b      	lsrs	r3, r3, #24
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002afa:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b00:	0f1b      	lsrs	r3, r3, #28
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	019a      	lsls	r2, r3, #6
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	431a      	orrs	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	061b      	lsls	r3, r3, #24
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	071b      	lsls	r3, r3, #28
 8002b20:	4925      	ldr	r1, [pc, #148]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d011      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	019a      	lsls	r2, r3, #6
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	061b      	lsls	r3, r3, #24
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	071b      	lsls	r3, r3, #28
 8002b50:	4919      	ldr	r1, [pc, #100]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b58:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a16      	ldr	r2, [pc, #88]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b64:	f7fe fd3a 	bl	80015dc <HAL_GetTick>
 8002b68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b6c:	f7fe fd36 	bl	80015dc <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0d7      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	f040 80cd 	bne.w	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b92:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a08      	ldr	r2, [pc, #32]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9e:	f7fe fd1d 	bl	80015dc <HAL_GetTick>
 8002ba2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ba6:	f7fe fd19 	bl	80015dc <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	@ 0x64
 8002bb2:	d903      	bls.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e0ba      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002bb8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bbc:	4b5e      	ldr	r3, [pc, #376]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bc8:	d0ed      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d02e      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d12a      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bf2:	4b51      	ldr	r3, [pc, #324]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c00:	4b4d      	ldr	r3, [pc, #308]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	0f1b      	lsrs	r3, r3, #28
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	019a      	lsls	r2, r3, #6
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	431a      	orrs	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	071b      	lsls	r3, r3, #28
 8002c26:	4944      	ldr	r1, [pc, #272]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c2e:	4b42      	ldr	r3, [pc, #264]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c34:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	493d      	ldr	r1, [pc, #244]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d022      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c5c:	d11d      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c5e:	4b36      	ldr	r3, [pc, #216]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c64:	0e1b      	lsrs	r3, r3, #24
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c6c:	4b32      	ldr	r3, [pc, #200]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c72:	0f1b      	lsrs	r3, r3, #28
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	019a      	lsls	r2, r3, #6
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	431a      	orrs	r2, r3
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	061b      	lsls	r3, r3, #24
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	071b      	lsls	r3, r3, #28
 8002c92:	4929      	ldr	r1, [pc, #164]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d028      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ca6:	4b24      	ldr	r3, [pc, #144]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cac:	0e1b      	lsrs	r3, r3, #24
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cb4:	4b20      	ldr	r3, [pc, #128]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	019a      	lsls	r2, r3, #6
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	041b      	lsls	r3, r3, #16
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	071b      	lsls	r3, r3, #28
 8002cda:	4917      	ldr	r1, [pc, #92]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ce2:	4b15      	ldr	r3, [pc, #84]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ce8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	4911      	ldr	r1, [pc, #68]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0e      	ldr	r2, [pc, #56]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d04:	f7fe fc6a 	bl	80015dc <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d0c:	f7fe fc66 	bl	80015dc <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	@ 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e007      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d1e:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d2a:	d1ef      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800

08002d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e049      	b.n	8002de2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f841 	bl	8002dea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	f000 f9e8 	bl	8003150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d001      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e054      	b.n	8002ec2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a26      	ldr	r2, [pc, #152]	@ (8002ed0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d022      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x80>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e42:	d01d      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x80>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a22      	ldr	r2, [pc, #136]	@ (8002ed4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d018      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x80>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a21      	ldr	r2, [pc, #132]	@ (8002ed8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d013      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x80>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002edc <HAL_TIM_Base_Start_IT+0xdc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00e      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x80>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ee0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d009      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x80>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x80>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee8 <HAL_TIM_Base_Start_IT+0xe8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d115      	bne.n	8002eac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <HAL_TIM_Base_Start_IT+0xec>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d015      	beq.n	8002ebe <HAL_TIM_Base_Start_IT+0xbe>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e98:	d011      	beq.n	8002ebe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	e008      	b.n	8002ebe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e000      	b.n	8002ec0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40010000 	.word	0x40010000
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800
 8002edc:	40000c00 	.word	0x40000c00
 8002ee0:	40010400 	.word	0x40010400
 8002ee4:	40014000 	.word	0x40014000
 8002ee8:	40001800 	.word	0x40001800
 8002eec:	00010007 	.word	0x00010007

08002ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d020      	beq.n	8002f54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01b      	beq.n	8002f54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0202 	mvn.w	r2, #2
 8002f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f8e9 	bl	8003112 <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f8db 	bl	80030fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f8ec 	bl	8003126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d020      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01b      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0204 	mvn.w	r2, #4
 8002f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2202      	movs	r2, #2
 8002f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f8c3 	bl	8003112 <HAL_TIM_IC_CaptureCallback>
 8002f8c:	e005      	b.n	8002f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f8b5 	bl	80030fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f8c6 	bl	8003126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d020      	beq.n	8002fec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01b      	beq.n	8002fec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0208 	mvn.w	r2, #8
 8002fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f89d 	bl	8003112 <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f88f 	bl	80030fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f8a0 	bl	8003126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d020      	beq.n	8003038 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01b      	beq.n	8003038 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0210 	mvn.w	r2, #16
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2208      	movs	r2, #8
 800300e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f877 	bl	8003112 <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f869 	bl	80030fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f87a 	bl	8003126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00c      	beq.n	800305c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0201 	mvn.w	r2, #1
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe f852 	bl	8001100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003062:	2b00      	cmp	r3, #0
 8003064:	d104      	bne.n	8003070 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00c      	beq.n	800308a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003076:	2b00      	cmp	r3, #0
 8003078:	d007      	beq.n	800308a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f919 	bl	80032bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00c      	beq.n	80030ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80030a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f911 	bl	80032d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00c      	beq.n	80030d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f834 	bl	800313a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00c      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f06f 0220 	mvn.w	r2, #32
 80030ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f8d9 	bl	80032a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a46      	ldr	r2, [pc, #280]	@ (800327c <TIM_Base_SetConfig+0x12c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316e:	d00f      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a43      	ldr	r2, [pc, #268]	@ (8003280 <TIM_Base_SetConfig+0x130>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00b      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a42      	ldr	r2, [pc, #264]	@ (8003284 <TIM_Base_SetConfig+0x134>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d007      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a41      	ldr	r2, [pc, #260]	@ (8003288 <TIM_Base_SetConfig+0x138>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d003      	beq.n	8003190 <TIM_Base_SetConfig+0x40>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a40      	ldr	r2, [pc, #256]	@ (800328c <TIM_Base_SetConfig+0x13c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d108      	bne.n	80031a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a35      	ldr	r2, [pc, #212]	@ (800327c <TIM_Base_SetConfig+0x12c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02b      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b0:	d027      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a32      	ldr	r2, [pc, #200]	@ (8003280 <TIM_Base_SetConfig+0x130>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d023      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a31      	ldr	r2, [pc, #196]	@ (8003284 <TIM_Base_SetConfig+0x134>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01f      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a30      	ldr	r2, [pc, #192]	@ (8003288 <TIM_Base_SetConfig+0x138>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01b      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a2f      	ldr	r2, [pc, #188]	@ (800328c <TIM_Base_SetConfig+0x13c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d017      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003290 <TIM_Base_SetConfig+0x140>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003294 <TIM_Base_SetConfig+0x144>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00f      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003298 <TIM_Base_SetConfig+0x148>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00b      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	@ (800329c <TIM_Base_SetConfig+0x14c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a2a      	ldr	r2, [pc, #168]	@ (80032a0 <TIM_Base_SetConfig+0x150>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d003      	beq.n	8003202 <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a29      	ldr	r2, [pc, #164]	@ (80032a4 <TIM_Base_SetConfig+0x154>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d108      	bne.n	8003214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a10      	ldr	r2, [pc, #64]	@ (800327c <TIM_Base_SetConfig+0x12c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_Base_SetConfig+0xf8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a12      	ldr	r2, [pc, #72]	@ (800328c <TIM_Base_SetConfig+0x13c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d103      	bne.n	8003250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b01      	cmp	r3, #1
 8003260:	d105      	bne.n	800326e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f023 0201 	bic.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	611a      	str	r2, [r3, #16]
  }
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40010400 	.word	0x40010400
 8003290:	40014000 	.word	0x40014000
 8003294:	40014400 	.word	0x40014400
 8003298:	40014800 	.word	0x40014800
 800329c:	40001800 	.word	0x40001800
 80032a0:	40001c00 	.word	0x40001c00
 80032a4:	40002000 	.word	0x40002000

080032a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e040      	b.n	8003378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fe f8c0 	bl	800148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2224      	movs	r2, #36	@ 0x24
 8003310:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fb16 	bl	800395c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f8af 	bl	8003494 <UART_SetConfig>
 8003336:	4603      	mov	r3, r0
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e01b      	b.n	8003378 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800334e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800335e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fb95 	bl	8003aa0 <UART_CheckIdleState>
 8003376:	4603      	mov	r3, r0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	@ 0x28
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003394:	2b20      	cmp	r3, #32
 8003396:	d177      	bne.n	8003488 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_UART_Transmit+0x24>
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e070      	b.n	800348a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2221      	movs	r2, #33	@ 0x21
 80033b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033b6:	f7fe f911 	bl	80015dc <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	88fa      	ldrh	r2, [r7, #6]
 80033c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033d4:	d108      	bne.n	80033e8 <HAL_UART_Transmit+0x68>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	e003      	b.n	80033f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033f0:	e02f      	b.n	8003452 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2200      	movs	r2, #0
 80033fa:	2180      	movs	r1, #128	@ 0x80
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 fba6 	bl	8003b4e <UART_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d004      	beq.n	8003412 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e03b      	b.n	800348a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003426:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	3302      	adds	r3, #2
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	e007      	b.n	8003440 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3301      	adds	r3, #1
 800343e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1c9      	bne.n	80033f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2200      	movs	r2, #0
 8003466:	2140      	movs	r1, #64	@ 0x40
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fb70 	bl	8003b4e <UART_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d004      	beq.n	800347e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e005      	b.n	800348a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2220      	movs	r2, #32
 8003482:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	e000      	b.n	800348a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003488:	2302      	movs	r3, #2
  }
}
 800348a:	4618      	mov	r0, r3
 800348c:	3720      	adds	r7, #32
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4ba6      	ldr	r3, [pc, #664]	@ (8003758 <UART_SetConfig+0x2c4>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	6979      	ldr	r1, [r7, #20]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	430a      	orrs	r2, r1
 8003504:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a94      	ldr	r2, [pc, #592]	@ (800375c <UART_SetConfig+0x2c8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d120      	bne.n	8003552 <UART_SetConfig+0xbe>
 8003510:	4b93      	ldr	r3, [pc, #588]	@ (8003760 <UART_SetConfig+0x2cc>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b03      	cmp	r3, #3
 800351c:	d816      	bhi.n	800354c <UART_SetConfig+0xb8>
 800351e:	a201      	add	r2, pc, #4	@ (adr r2, 8003524 <UART_SetConfig+0x90>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003535 	.word	0x08003535
 8003528:	08003541 	.word	0x08003541
 800352c:	0800353b 	.word	0x0800353b
 8003530:	08003547 	.word	0x08003547
 8003534:	2301      	movs	r3, #1
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e150      	b.n	80037dc <UART_SetConfig+0x348>
 800353a:	2302      	movs	r3, #2
 800353c:	77fb      	strb	r3, [r7, #31]
 800353e:	e14d      	b.n	80037dc <UART_SetConfig+0x348>
 8003540:	2304      	movs	r3, #4
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e14a      	b.n	80037dc <UART_SetConfig+0x348>
 8003546:	2308      	movs	r3, #8
 8003548:	77fb      	strb	r3, [r7, #31]
 800354a:	e147      	b.n	80037dc <UART_SetConfig+0x348>
 800354c:	2310      	movs	r3, #16
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e144      	b.n	80037dc <UART_SetConfig+0x348>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a83      	ldr	r2, [pc, #524]	@ (8003764 <UART_SetConfig+0x2d0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d132      	bne.n	80035c2 <UART_SetConfig+0x12e>
 800355c:	4b80      	ldr	r3, [pc, #512]	@ (8003760 <UART_SetConfig+0x2cc>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b0c      	cmp	r3, #12
 8003568:	d828      	bhi.n	80035bc <UART_SetConfig+0x128>
 800356a:	a201      	add	r2, pc, #4	@ (adr r2, 8003570 <UART_SetConfig+0xdc>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	080035a5 	.word	0x080035a5
 8003574:	080035bd 	.word	0x080035bd
 8003578:	080035bd 	.word	0x080035bd
 800357c:	080035bd 	.word	0x080035bd
 8003580:	080035b1 	.word	0x080035b1
 8003584:	080035bd 	.word	0x080035bd
 8003588:	080035bd 	.word	0x080035bd
 800358c:	080035bd 	.word	0x080035bd
 8003590:	080035ab 	.word	0x080035ab
 8003594:	080035bd 	.word	0x080035bd
 8003598:	080035bd 	.word	0x080035bd
 800359c:	080035bd 	.word	0x080035bd
 80035a0:	080035b7 	.word	0x080035b7
 80035a4:	2300      	movs	r3, #0
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e118      	b.n	80037dc <UART_SetConfig+0x348>
 80035aa:	2302      	movs	r3, #2
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	e115      	b.n	80037dc <UART_SetConfig+0x348>
 80035b0:	2304      	movs	r3, #4
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e112      	b.n	80037dc <UART_SetConfig+0x348>
 80035b6:	2308      	movs	r3, #8
 80035b8:	77fb      	strb	r3, [r7, #31]
 80035ba:	e10f      	b.n	80037dc <UART_SetConfig+0x348>
 80035bc:	2310      	movs	r3, #16
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	e10c      	b.n	80037dc <UART_SetConfig+0x348>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a68      	ldr	r2, [pc, #416]	@ (8003768 <UART_SetConfig+0x2d4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d120      	bne.n	800360e <UART_SetConfig+0x17a>
 80035cc:	4b64      	ldr	r3, [pc, #400]	@ (8003760 <UART_SetConfig+0x2cc>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035d6:	2b30      	cmp	r3, #48	@ 0x30
 80035d8:	d013      	beq.n	8003602 <UART_SetConfig+0x16e>
 80035da:	2b30      	cmp	r3, #48	@ 0x30
 80035dc:	d814      	bhi.n	8003608 <UART_SetConfig+0x174>
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d009      	beq.n	80035f6 <UART_SetConfig+0x162>
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d810      	bhi.n	8003608 <UART_SetConfig+0x174>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <UART_SetConfig+0x15c>
 80035ea:	2b10      	cmp	r3, #16
 80035ec:	d006      	beq.n	80035fc <UART_SetConfig+0x168>
 80035ee:	e00b      	b.n	8003608 <UART_SetConfig+0x174>
 80035f0:	2300      	movs	r3, #0
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e0f2      	b.n	80037dc <UART_SetConfig+0x348>
 80035f6:	2302      	movs	r3, #2
 80035f8:	77fb      	strb	r3, [r7, #31]
 80035fa:	e0ef      	b.n	80037dc <UART_SetConfig+0x348>
 80035fc:	2304      	movs	r3, #4
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e0ec      	b.n	80037dc <UART_SetConfig+0x348>
 8003602:	2308      	movs	r3, #8
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	e0e9      	b.n	80037dc <UART_SetConfig+0x348>
 8003608:	2310      	movs	r3, #16
 800360a:	77fb      	strb	r3, [r7, #31]
 800360c:	e0e6      	b.n	80037dc <UART_SetConfig+0x348>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a56      	ldr	r2, [pc, #344]	@ (800376c <UART_SetConfig+0x2d8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d120      	bne.n	800365a <UART_SetConfig+0x1c6>
 8003618:	4b51      	ldr	r3, [pc, #324]	@ (8003760 <UART_SetConfig+0x2cc>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003622:	2bc0      	cmp	r3, #192	@ 0xc0
 8003624:	d013      	beq.n	800364e <UART_SetConfig+0x1ba>
 8003626:	2bc0      	cmp	r3, #192	@ 0xc0
 8003628:	d814      	bhi.n	8003654 <UART_SetConfig+0x1c0>
 800362a:	2b80      	cmp	r3, #128	@ 0x80
 800362c:	d009      	beq.n	8003642 <UART_SetConfig+0x1ae>
 800362e:	2b80      	cmp	r3, #128	@ 0x80
 8003630:	d810      	bhi.n	8003654 <UART_SetConfig+0x1c0>
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <UART_SetConfig+0x1a8>
 8003636:	2b40      	cmp	r3, #64	@ 0x40
 8003638:	d006      	beq.n	8003648 <UART_SetConfig+0x1b4>
 800363a:	e00b      	b.n	8003654 <UART_SetConfig+0x1c0>
 800363c:	2300      	movs	r3, #0
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e0cc      	b.n	80037dc <UART_SetConfig+0x348>
 8003642:	2302      	movs	r3, #2
 8003644:	77fb      	strb	r3, [r7, #31]
 8003646:	e0c9      	b.n	80037dc <UART_SetConfig+0x348>
 8003648:	2304      	movs	r3, #4
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	e0c6      	b.n	80037dc <UART_SetConfig+0x348>
 800364e:	2308      	movs	r3, #8
 8003650:	77fb      	strb	r3, [r7, #31]
 8003652:	e0c3      	b.n	80037dc <UART_SetConfig+0x348>
 8003654:	2310      	movs	r3, #16
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e0c0      	b.n	80037dc <UART_SetConfig+0x348>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a44      	ldr	r2, [pc, #272]	@ (8003770 <UART_SetConfig+0x2dc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d125      	bne.n	80036b0 <UART_SetConfig+0x21c>
 8003664:	4b3e      	ldr	r3, [pc, #248]	@ (8003760 <UART_SetConfig+0x2cc>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003672:	d017      	beq.n	80036a4 <UART_SetConfig+0x210>
 8003674:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003678:	d817      	bhi.n	80036aa <UART_SetConfig+0x216>
 800367a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800367e:	d00b      	beq.n	8003698 <UART_SetConfig+0x204>
 8003680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003684:	d811      	bhi.n	80036aa <UART_SetConfig+0x216>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <UART_SetConfig+0x1fe>
 800368a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800368e:	d006      	beq.n	800369e <UART_SetConfig+0x20a>
 8003690:	e00b      	b.n	80036aa <UART_SetConfig+0x216>
 8003692:	2300      	movs	r3, #0
 8003694:	77fb      	strb	r3, [r7, #31]
 8003696:	e0a1      	b.n	80037dc <UART_SetConfig+0x348>
 8003698:	2302      	movs	r3, #2
 800369a:	77fb      	strb	r3, [r7, #31]
 800369c:	e09e      	b.n	80037dc <UART_SetConfig+0x348>
 800369e:	2304      	movs	r3, #4
 80036a0:	77fb      	strb	r3, [r7, #31]
 80036a2:	e09b      	b.n	80037dc <UART_SetConfig+0x348>
 80036a4:	2308      	movs	r3, #8
 80036a6:	77fb      	strb	r3, [r7, #31]
 80036a8:	e098      	b.n	80037dc <UART_SetConfig+0x348>
 80036aa:	2310      	movs	r3, #16
 80036ac:	77fb      	strb	r3, [r7, #31]
 80036ae:	e095      	b.n	80037dc <UART_SetConfig+0x348>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003774 <UART_SetConfig+0x2e0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d125      	bne.n	8003706 <UART_SetConfig+0x272>
 80036ba:	4b29      	ldr	r3, [pc, #164]	@ (8003760 <UART_SetConfig+0x2cc>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036c8:	d017      	beq.n	80036fa <UART_SetConfig+0x266>
 80036ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036ce:	d817      	bhi.n	8003700 <UART_SetConfig+0x26c>
 80036d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036d4:	d00b      	beq.n	80036ee <UART_SetConfig+0x25a>
 80036d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036da:	d811      	bhi.n	8003700 <UART_SetConfig+0x26c>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <UART_SetConfig+0x254>
 80036e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e4:	d006      	beq.n	80036f4 <UART_SetConfig+0x260>
 80036e6:	e00b      	b.n	8003700 <UART_SetConfig+0x26c>
 80036e8:	2301      	movs	r3, #1
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e076      	b.n	80037dc <UART_SetConfig+0x348>
 80036ee:	2302      	movs	r3, #2
 80036f0:	77fb      	strb	r3, [r7, #31]
 80036f2:	e073      	b.n	80037dc <UART_SetConfig+0x348>
 80036f4:	2304      	movs	r3, #4
 80036f6:	77fb      	strb	r3, [r7, #31]
 80036f8:	e070      	b.n	80037dc <UART_SetConfig+0x348>
 80036fa:	2308      	movs	r3, #8
 80036fc:	77fb      	strb	r3, [r7, #31]
 80036fe:	e06d      	b.n	80037dc <UART_SetConfig+0x348>
 8003700:	2310      	movs	r3, #16
 8003702:	77fb      	strb	r3, [r7, #31]
 8003704:	e06a      	b.n	80037dc <UART_SetConfig+0x348>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a1b      	ldr	r2, [pc, #108]	@ (8003778 <UART_SetConfig+0x2e4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d138      	bne.n	8003782 <UART_SetConfig+0x2ee>
 8003710:	4b13      	ldr	r3, [pc, #76]	@ (8003760 <UART_SetConfig+0x2cc>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003716:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800371a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800371e:	d017      	beq.n	8003750 <UART_SetConfig+0x2bc>
 8003720:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003724:	d82a      	bhi.n	800377c <UART_SetConfig+0x2e8>
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372a:	d00b      	beq.n	8003744 <UART_SetConfig+0x2b0>
 800372c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003730:	d824      	bhi.n	800377c <UART_SetConfig+0x2e8>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <UART_SetConfig+0x2aa>
 8003736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800373a:	d006      	beq.n	800374a <UART_SetConfig+0x2b6>
 800373c:	e01e      	b.n	800377c <UART_SetConfig+0x2e8>
 800373e:	2300      	movs	r3, #0
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e04b      	b.n	80037dc <UART_SetConfig+0x348>
 8003744:	2302      	movs	r3, #2
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e048      	b.n	80037dc <UART_SetConfig+0x348>
 800374a:	2304      	movs	r3, #4
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e045      	b.n	80037dc <UART_SetConfig+0x348>
 8003750:	2308      	movs	r3, #8
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e042      	b.n	80037dc <UART_SetConfig+0x348>
 8003756:	bf00      	nop
 8003758:	efff69f3 	.word	0xefff69f3
 800375c:	40011000 	.word	0x40011000
 8003760:	40023800 	.word	0x40023800
 8003764:	40004400 	.word	0x40004400
 8003768:	40004800 	.word	0x40004800
 800376c:	40004c00 	.word	0x40004c00
 8003770:	40005000 	.word	0x40005000
 8003774:	40011400 	.word	0x40011400
 8003778:	40007800 	.word	0x40007800
 800377c:	2310      	movs	r3, #16
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e02c      	b.n	80037dc <UART_SetConfig+0x348>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a72      	ldr	r2, [pc, #456]	@ (8003950 <UART_SetConfig+0x4bc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d125      	bne.n	80037d8 <UART_SetConfig+0x344>
 800378c:	4b71      	ldr	r3, [pc, #452]	@ (8003954 <UART_SetConfig+0x4c0>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003792:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003796:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800379a:	d017      	beq.n	80037cc <UART_SetConfig+0x338>
 800379c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80037a0:	d817      	bhi.n	80037d2 <UART_SetConfig+0x33e>
 80037a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a6:	d00b      	beq.n	80037c0 <UART_SetConfig+0x32c>
 80037a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ac:	d811      	bhi.n	80037d2 <UART_SetConfig+0x33e>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <UART_SetConfig+0x326>
 80037b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037b6:	d006      	beq.n	80037c6 <UART_SetConfig+0x332>
 80037b8:	e00b      	b.n	80037d2 <UART_SetConfig+0x33e>
 80037ba:	2300      	movs	r3, #0
 80037bc:	77fb      	strb	r3, [r7, #31]
 80037be:	e00d      	b.n	80037dc <UART_SetConfig+0x348>
 80037c0:	2302      	movs	r3, #2
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e00a      	b.n	80037dc <UART_SetConfig+0x348>
 80037c6:	2304      	movs	r3, #4
 80037c8:	77fb      	strb	r3, [r7, #31]
 80037ca:	e007      	b.n	80037dc <UART_SetConfig+0x348>
 80037cc:	2308      	movs	r3, #8
 80037ce:	77fb      	strb	r3, [r7, #31]
 80037d0:	e004      	b.n	80037dc <UART_SetConfig+0x348>
 80037d2:	2310      	movs	r3, #16
 80037d4:	77fb      	strb	r3, [r7, #31]
 80037d6:	e001      	b.n	80037dc <UART_SetConfig+0x348>
 80037d8:	2310      	movs	r3, #16
 80037da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037e4:	d15b      	bne.n	800389e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80037e6:	7ffb      	ldrb	r3, [r7, #31]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d828      	bhi.n	800383e <UART_SetConfig+0x3aa>
 80037ec:	a201      	add	r2, pc, #4	@ (adr r2, 80037f4 <UART_SetConfig+0x360>)
 80037ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f2:	bf00      	nop
 80037f4:	08003819 	.word	0x08003819
 80037f8:	08003821 	.word	0x08003821
 80037fc:	08003829 	.word	0x08003829
 8003800:	0800383f 	.word	0x0800383f
 8003804:	0800382f 	.word	0x0800382f
 8003808:	0800383f 	.word	0x0800383f
 800380c:	0800383f 	.word	0x0800383f
 8003810:	0800383f 	.word	0x0800383f
 8003814:	08003837 	.word	0x08003837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003818:	f7fe fe46 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 800381c:	61b8      	str	r0, [r7, #24]
        break;
 800381e:	e013      	b.n	8003848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003820:	f7fe fe56 	bl	80024d0 <HAL_RCC_GetPCLK2Freq>
 8003824:	61b8      	str	r0, [r7, #24]
        break;
 8003826:	e00f      	b.n	8003848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003828:	4b4b      	ldr	r3, [pc, #300]	@ (8003958 <UART_SetConfig+0x4c4>)
 800382a:	61bb      	str	r3, [r7, #24]
        break;
 800382c:	e00c      	b.n	8003848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800382e:	f7fe fd69 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 8003832:	61b8      	str	r0, [r7, #24]
        break;
 8003834:	e008      	b.n	8003848 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800383a:	61bb      	str	r3, [r7, #24]
        break;
 800383c:	e004      	b.n	8003848 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	77bb      	strb	r3, [r7, #30]
        break;
 8003846:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d074      	beq.n	8003938 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	005a      	lsls	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	441a      	add	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b0f      	cmp	r3, #15
 8003868:	d916      	bls.n	8003898 <UART_SetConfig+0x404>
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003870:	d212      	bcs.n	8003898 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	b29b      	uxth	r3, r3
 8003876:	f023 030f 	bic.w	r3, r3, #15
 800387a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	b29b      	uxth	r3, r3
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	b29a      	uxth	r2, r3
 8003888:	89fb      	ldrh	r3, [r7, #14]
 800388a:	4313      	orrs	r3, r2
 800388c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	89fa      	ldrh	r2, [r7, #14]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	e04f      	b.n	8003938 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	77bb      	strb	r3, [r7, #30]
 800389c:	e04c      	b.n	8003938 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800389e:	7ffb      	ldrb	r3, [r7, #31]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d828      	bhi.n	80038f6 <UART_SetConfig+0x462>
 80038a4:	a201      	add	r2, pc, #4	@ (adr r2, 80038ac <UART_SetConfig+0x418>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038d1 	.word	0x080038d1
 80038b0:	080038d9 	.word	0x080038d9
 80038b4:	080038e1 	.word	0x080038e1
 80038b8:	080038f7 	.word	0x080038f7
 80038bc:	080038e7 	.word	0x080038e7
 80038c0:	080038f7 	.word	0x080038f7
 80038c4:	080038f7 	.word	0x080038f7
 80038c8:	080038f7 	.word	0x080038f7
 80038cc:	080038ef 	.word	0x080038ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d0:	f7fe fdea 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 80038d4:	61b8      	str	r0, [r7, #24]
        break;
 80038d6:	e013      	b.n	8003900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038d8:	f7fe fdfa 	bl	80024d0 <HAL_RCC_GetPCLK2Freq>
 80038dc:	61b8      	str	r0, [r7, #24]
        break;
 80038de:	e00f      	b.n	8003900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003958 <UART_SetConfig+0x4c4>)
 80038e2:	61bb      	str	r3, [r7, #24]
        break;
 80038e4:	e00c      	b.n	8003900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038e6:	f7fe fd0d 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80038ea:	61b8      	str	r0, [r7, #24]
        break;
 80038ec:	e008      	b.n	8003900 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038f2:	61bb      	str	r3, [r7, #24]
        break;
 80038f4:	e004      	b.n	8003900 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	77bb      	strb	r3, [r7, #30]
        break;
 80038fe:	bf00      	nop
    }

    if (pclk != 0U)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d018      	beq.n	8003938 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	085a      	lsrs	r2, r3, #1
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	441a      	add	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b0f      	cmp	r3, #15
 800391e:	d909      	bls.n	8003934 <UART_SetConfig+0x4a0>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003926:	d205      	bcs.n	8003934 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	b29a      	uxth	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60da      	str	r2, [r3, #12]
 8003932:	e001      	b.n	8003938 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003944:	7fbb      	ldrb	r3, [r7, #30]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40007c00 	.word	0x40007c00
 8003954:	40023800 	.word	0x40023800
 8003958:	00f42400 	.word	0x00f42400

0800395c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	f003 0320 	and.w	r3, r3, #32
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01a      	beq.n	8003a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a5a:	d10a      	bne.n	8003a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	605a      	str	r2, [r3, #4]
  }
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08c      	sub	sp, #48	@ 0x30
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ab0:	f7fd fd94 	bl	80015dc <HAL_GetTick>
 8003ab4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d12e      	bne.n	8003b22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	2200      	movs	r2, #0
 8003ace:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f83b 	bl	8003b4e <UART_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d021      	beq.n	8003b22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003af2:	623b      	str	r3, [r7, #32]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b00:	69b9      	ldr	r1, [r7, #24]
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	617b      	str	r3, [r7, #20]
   return(result);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e6      	bne.n	8003ade <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e011      	b.n	8003b46 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3728      	adds	r7, #40	@ 0x28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5e:	e04f      	b.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d04b      	beq.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b68:	f7fd fd38 	bl	80015dc <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d302      	bcc.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e04e      	b.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d037      	beq.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b80      	cmp	r3, #128	@ 0x80
 8003b94:	d034      	beq.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b40      	cmp	r3, #64	@ 0x40
 8003b9a:	d031      	beq.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d110      	bne.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2208      	movs	r2, #8
 8003bb0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f838 	bl	8003c28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2208      	movs	r2, #8
 8003bbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e029      	b.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bda:	d111      	bne.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003be4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f81e 	bl	8003c28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e00f      	b.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d0a0      	beq.n	8003b60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b095      	sub	sp, #84	@ 0x54
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c50:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e6      	bne.n	8003c30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3308      	adds	r3, #8
 8003c68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e5      	bne.n	8003c62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d118      	bne.n	8003cd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f023 0310 	bic.w	r3, r3, #16
 8003cb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6979      	ldr	r1, [r7, #20]
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e6      	bne.n	8003c9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ce4:	bf00      	nop
 8003ce6:	3754      	adds	r7, #84	@ 0x54
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d06:	f3ef 8305 	mrs	r3, IPSR
 8003d0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10f      	bne.n	8003d32 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d12:	f3ef 8310 	mrs	r3, PRIMASK
 8003d16:	607b      	str	r3, [r7, #4]
  return(result);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d22:	603b      	str	r3, [r7, #0]
  return(result);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <osKernelInitialize+0x3a>
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d64 <osKernelInitialize+0x64>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d103      	bne.n	8003d3a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003d32:	f06f 0305 	mvn.w	r3, #5
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e00c      	b.n	8003d54 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <osKernelInitialize+0x64>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d105      	bne.n	8003d4e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003d42:	4b08      	ldr	r3, [pc, #32]	@ (8003d64 <osKernelInitialize+0x64>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e002      	b.n	8003d54 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d54:	68fb      	ldr	r3, [r7, #12]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000170 	.word	0x20000170

08003d68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d6e:	f3ef 8305 	mrs	r3, IPSR
 8003d72:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10f      	bne.n	8003d9a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7e:	607b      	str	r3, [r7, #4]
  return(result);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d105      	bne.n	8003d92 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d86:	f3ef 8311 	mrs	r3, BASEPRI
 8003d8a:	603b      	str	r3, [r7, #0]
  return(result);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <osKernelStart+0x3a>
 8003d92:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd0 <osKernelStart+0x68>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d103      	bne.n	8003da2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003d9a:	f06f 0305 	mvn.w	r3, #5
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	e010      	b.n	8003dc4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003da2:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <osKernelStart+0x68>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d109      	bne.n	8003dbe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003daa:	f7ff ffa1 	bl	8003cf0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003dae:	4b08      	ldr	r3, [pc, #32]	@ (8003dd0 <osKernelStart+0x68>)
 8003db0:	2202      	movs	r2, #2
 8003db2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003db4:	f001 fa56 	bl	8005264 <vTaskStartScheduler>
      stat = osOK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e002      	b.n	8003dc4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000170 	.word	0x20000170

08003dd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b090      	sub	sp, #64	@ 0x40
 8003dd8:	af04      	add	r7, sp, #16
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003de4:	f3ef 8305 	mrs	r3, IPSR
 8003de8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003dea:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f040 808f 	bne.w	8003f10 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df2:	f3ef 8310 	mrs	r3, PRIMASK
 8003df6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8003e02:	617b      	str	r3, [r7, #20]
  return(result);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <osThreadNew+0x3e>
 8003e0a:	4b44      	ldr	r3, [pc, #272]	@ (8003f1c <osThreadNew+0x148>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d07e      	beq.n	8003f10 <osThreadNew+0x13c>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d07b      	beq.n	8003f10 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003e18:	2380      	movs	r3, #128	@ 0x80
 8003e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003e1c:	2318      	movs	r3, #24
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
 8003e28:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d045      	beq.n	8003ebc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <osThreadNew+0x6a>
        name = attr->name;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <osThreadNew+0x90>
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	2b38      	cmp	r3, #56	@ 0x38
 8003e56:	d805      	bhi.n	8003e64 <osThreadNew+0x90>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <osThreadNew+0x94>
        return (NULL);
 8003e64:	2300      	movs	r3, #0
 8003e66:	e054      	b.n	8003f12 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	089b      	lsrs	r3, r3, #2
 8003e76:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00e      	beq.n	8003e9e <osThreadNew+0xca>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2ba7      	cmp	r3, #167	@ 0xa7
 8003e86:	d90a      	bls.n	8003e9e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d006      	beq.n	8003e9e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <osThreadNew+0xca>
        mem = 1;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	623b      	str	r3, [r7, #32]
 8003e9c:	e010      	b.n	8003ec0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10c      	bne.n	8003ec0 <osThreadNew+0xec>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d108      	bne.n	8003ec0 <osThreadNew+0xec>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <osThreadNew+0xec>
          mem = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	623b      	str	r3, [r7, #32]
 8003eba:	e001      	b.n	8003ec0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d110      	bne.n	8003ee8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ece:	9202      	str	r2, [sp, #8]
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 ffc3 	bl	8004e68 <xTaskCreateStatic>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	e013      	b.n	8003f10 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d110      	bne.n	8003f10 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	f107 0310 	add.w	r3, r7, #16
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f001 f817 	bl	8004f34 <xTaskCreate>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d001      	beq.n	8003f10 <osThreadNew+0x13c>
          hTask = NULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f10:	693b      	ldr	r3, [r7, #16]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3730      	adds	r7, #48	@ 0x30
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000170 	.word	0x20000170

08003f20 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f28:	f3ef 8305 	mrs	r3, IPSR
 8003f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8003f2e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10f      	bne.n	8003f54 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f34:	f3ef 8310 	mrs	r3, PRIMASK
 8003f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d105      	bne.n	8003f4c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f40:	f3ef 8311 	mrs	r3, BASEPRI
 8003f44:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <osDelay+0x3c>
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <osDelay+0x58>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d103      	bne.n	8003f5c <osDelay+0x3c>
    stat = osErrorISR;
 8003f54:	f06f 0305 	mvn.w	r3, #5
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e007      	b.n	8003f6c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f001 f944 	bl	80051f4 <vTaskDelay>
    }
  }

  return (stat);
 8003f6c:	697b      	ldr	r3, [r7, #20]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000170 	.word	0x20000170

08003f7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a07      	ldr	r2, [pc, #28]	@ (8003fa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4a06      	ldr	r2, [pc, #24]	@ (8003fac <vApplicationGetIdleTaskMemory+0x30>)
 8003f92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2280      	movs	r2, #128	@ 0x80
 8003f98:	601a      	str	r2, [r3, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000174 	.word	0x20000174
 8003fac:	2000021c 	.word	0x2000021c

08003fb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4a07      	ldr	r2, [pc, #28]	@ (8003fdc <vApplicationGetTimerTaskMemory+0x2c>)
 8003fc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4a06      	ldr	r2, [pc, #24]	@ (8003fe0 <vApplicationGetTimerTaskMemory+0x30>)
 8003fc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fce:	601a      	str	r2, [r3, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	2000041c 	.word	0x2000041c
 8003fe0:	200004c4 	.word	0x200004c4

08003fe4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f103 0208 	add.w	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f103 0208 	add.w	r2, r3, #8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f103 0208 	add.w	r2, r3, #8
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	601a      	str	r2, [r3, #0]
}
 800407a:	bf00      	nop
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004086:	b480      	push	{r7}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d103      	bne.n	80040a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e00c      	b.n	80040c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3308      	adds	r3, #8
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e002      	b.n	80040b4 <vListInsert+0x2e>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d2f6      	bcs.n	80040ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	601a      	str	r2, [r3, #0]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6892      	ldr	r2, [r2, #8]
 800410e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6852      	ldr	r2, [r2, #4]
 8004118:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	d103      	bne.n	800412c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	1e5a      	subs	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10d      	bne.n	800417c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004164:	b672      	cpsid	i
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	b662      	cpsie	i
 8004174:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004176:	bf00      	nop
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800417c:	f002 fb4e 	bl	800681c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004188:	68f9      	ldr	r1, [r7, #12]
 800418a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	441a      	add	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ac:	3b01      	subs	r3, #1
 80041ae:	68f9      	ldr	r1, [r7, #12]
 80041b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	441a      	add	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	22ff      	movs	r2, #255	@ 0xff
 80041c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	22ff      	movs	r2, #255	@ 0xff
 80041c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d114      	bne.n	80041fc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01a      	beq.n	8004210 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3310      	adds	r3, #16
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 faec 	bl	80057bc <xTaskRemoveFromEventList>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d012      	beq.n	8004210 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004220 <xQueueGenericReset+0xd4>)
 80041ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	e009      	b.n	8004210 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3310      	adds	r3, #16
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff feef 	bl	8003fe4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3324      	adds	r3, #36	@ 0x24
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff feea 	bl	8003fe4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004210:	f002 fb3a 	bl	8006888 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004214:	2301      	movs	r3, #1
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	@ 0x38
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10d      	bne.n	8004254 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423c:	b672      	cpsid	i
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	b662      	cpsie	i
 800424c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800424e:	bf00      	nop
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10d      	bne.n	8004276 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425e:	b672      	cpsid	i
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	b662      	cpsie	i
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	e7fd      	b.n	8004272 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <xQueueGenericCreateStatic+0x5e>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <xQueueGenericCreateStatic+0x62>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <xQueueGenericCreateStatic+0x64>
 8004286:	2300      	movs	r3, #0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10d      	bne.n	80042a8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004290:	b672      	cpsid	i
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	b662      	cpsie	i
 80042a0:	623b      	str	r3, [r7, #32]
}
 80042a2:	bf00      	nop
 80042a4:	bf00      	nop
 80042a6:	e7fd      	b.n	80042a4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <xQueueGenericCreateStatic+0x90>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <xQueueGenericCreateStatic+0x94>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <xQueueGenericCreateStatic+0x96>
 80042b8:	2300      	movs	r3, #0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10d      	bne.n	80042da <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c2:	b672      	cpsid	i
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	b662      	cpsie	i
 80042d2:	61fb      	str	r3, [r7, #28]
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	e7fd      	b.n	80042d6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042da:	2350      	movs	r3, #80	@ 0x50
 80042dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b50      	cmp	r3, #80	@ 0x50
 80042e2:	d00d      	beq.n	8004300 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e8:	b672      	cpsid	i
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	b662      	cpsie	i
 80042f8:	61bb      	str	r3, [r7, #24]
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004300:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00d      	beq.n	8004328 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800430c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004314:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f848 	bl	80043b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800432a:	4618      	mov	r0, r3
 800432c:	3730      	adds	r7, #48	@ 0x30
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004332:	b580      	push	{r7, lr}
 8004334:	b08a      	sub	sp, #40	@ 0x28
 8004336:	af02      	add	r7, sp, #8
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	4613      	mov	r3, r2
 800433e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10d      	bne.n	8004362 <xQueueGenericCreate+0x30>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434a:	b672      	cpsid	i
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	b662      	cpsie	i
 800435a:	613b      	str	r3, [r7, #16]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d102      	bne.n	800436e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	e004      	b.n	8004378 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	3350      	adds	r3, #80	@ 0x50
 800437c:	4618      	mov	r0, r3
 800437e:	f002 fb7b 	bl	8006a78 <pvPortMalloc>
 8004382:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d011      	beq.n	80043ae <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3350      	adds	r3, #80	@ 0x50
 8004392:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800439c:	79fa      	ldrb	r2, [r7, #7]
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f805 	bl	80043b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043ae:	69bb      	ldr	r3, [r7, #24]
	}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3720      	adds	r7, #32
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d103      	bne.n	80043d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e002      	b.n	80043da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043e6:	2101      	movs	r1, #1
 80043e8:	69b8      	ldr	r0, [r7, #24]
 80043ea:	f7ff feaf 	bl	800414c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08e      	sub	sp, #56	@ 0x38
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800440e:	2300      	movs	r3, #0
 8004410:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10d      	bne.n	8004438 <xQueueGenericSend+0x38>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004420:	b672      	cpsid	i
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	b662      	cpsie	i
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <xQueueGenericSend+0x46>
 800443e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <xQueueGenericSend+0x4a>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <xQueueGenericSend+0x4c>
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10d      	bne.n	800446c <xQueueGenericSend+0x6c>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004454:	b672      	cpsid	i
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	b662      	cpsie	i
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004466:	bf00      	nop
 8004468:	bf00      	nop
 800446a:	e7fd      	b.n	8004468 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d103      	bne.n	800447a <xQueueGenericSend+0x7a>
 8004472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <xQueueGenericSend+0x7e>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <xQueueGenericSend+0x80>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10d      	bne.n	80044a0 <xQueueGenericSend+0xa0>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004488:	b672      	cpsid	i
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	b662      	cpsie	i
 8004498:	623b      	str	r3, [r7, #32]
}
 800449a:	bf00      	nop
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044a0:	f001 fb5a 	bl	8005b58 <xTaskGetSchedulerState>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <xQueueGenericSend+0xb0>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <xQueueGenericSend+0xb4>
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <xQueueGenericSend+0xb6>
 80044b4:	2300      	movs	r3, #0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10d      	bne.n	80044d6 <xQueueGenericSend+0xd6>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044be:	b672      	cpsid	i
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	b662      	cpsie	i
 80044ce:	61fb      	str	r3, [r7, #28]
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	e7fd      	b.n	80044d2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044d6:	f002 f9a1 	bl	800681c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d302      	bcc.n	80044ec <xQueueGenericSend+0xec>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d129      	bne.n	8004540 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044f2:	f000 fb4b 	bl	8004b8c <prvCopyDataToQueue>
 80044f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d010      	beq.n	8004522 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	3324      	adds	r3, #36	@ 0x24
 8004504:	4618      	mov	r0, r3
 8004506:	f001 f959 	bl	80057bc <xTaskRemoveFromEventList>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d013      	beq.n	8004538 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004510:	4b3f      	ldr	r3, [pc, #252]	@ (8004610 <xQueueGenericSend+0x210>)
 8004512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	e00a      	b.n	8004538 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004528:	4b39      	ldr	r3, [pc, #228]	@ (8004610 <xQueueGenericSend+0x210>)
 800452a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004538:	f002 f9a6 	bl	8006888 <vPortExitCritical>
				return pdPASS;
 800453c:	2301      	movs	r3, #1
 800453e:	e063      	b.n	8004608 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d103      	bne.n	800454e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004546:	f002 f99f 	bl	8006888 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800454a:	2300      	movs	r3, #0
 800454c:	e05c      	b.n	8004608 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800454e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004554:	f107 0314 	add.w	r3, r7, #20
 8004558:	4618      	mov	r0, r3
 800455a:	f001 f995 	bl	8005888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800455e:	2301      	movs	r3, #1
 8004560:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004562:	f002 f991 	bl	8006888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004566:	f000 fef1 	bl	800534c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800456a:	f002 f957 	bl	800681c <vPortEnterCritical>
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004574:	b25b      	sxtb	r3, r3
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d103      	bne.n	8004584 <xQueueGenericSend+0x184>
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004586:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800458a:	b25b      	sxtb	r3, r3
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d103      	bne.n	800459a <xQueueGenericSend+0x19a>
 8004592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800459a:	f002 f975 	bl	8006888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800459e:	1d3a      	adds	r2, r7, #4
 80045a0:	f107 0314 	add.w	r3, r7, #20
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 f984 	bl	80058b4 <xTaskCheckForTimeOut>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d124      	bne.n	80045fc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045b4:	f000 fbe2 	bl	8004d7c <prvIsQueueFull>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d018      	beq.n	80045f0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	3310      	adds	r3, #16
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	4611      	mov	r1, r2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f001 f8a2 	bl	8005710 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045ce:	f000 fb6d 	bl	8004cac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045d2:	f000 fec9 	bl	8005368 <xTaskResumeAll>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f47f af7c 	bne.w	80044d6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80045de:	4b0c      	ldr	r3, [pc, #48]	@ (8004610 <xQueueGenericSend+0x210>)
 80045e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	e772      	b.n	80044d6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045f2:	f000 fb5b 	bl	8004cac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045f6:	f000 feb7 	bl	8005368 <xTaskResumeAll>
 80045fa:	e76c      	b.n	80044d6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045fe:	f000 fb55 	bl	8004cac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004602:	f000 feb1 	bl	8005368 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004606:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004608:	4618      	mov	r0, r3
 800460a:	3738      	adds	r7, #56	@ 0x38
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	e000ed04 	.word	0xe000ed04

08004614 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08e      	sub	sp, #56	@ 0x38
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10d      	bne.n	8004648 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004630:	b672      	cpsid	i
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	b662      	cpsie	i
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004642:	bf00      	nop
 8004644:	bf00      	nop
 8004646:	e7fd      	b.n	8004644 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <xQueueGenericSendFromISR+0x42>
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <xQueueGenericSendFromISR+0x46>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <xQueueGenericSendFromISR+0x48>
 800465a:	2300      	movs	r3, #0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10d      	bne.n	800467c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004664:	b672      	cpsid	i
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	b662      	cpsie	i
 8004674:	623b      	str	r3, [r7, #32]
}
 8004676:	bf00      	nop
 8004678:	bf00      	nop
 800467a:	e7fd      	b.n	8004678 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d103      	bne.n	800468a <xQueueGenericSendFromISR+0x76>
 8004682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <xQueueGenericSendFromISR+0x7a>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <xQueueGenericSendFromISR+0x7c>
 800468e:	2300      	movs	r3, #0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10d      	bne.n	80046b0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004698:	b672      	cpsid	i
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	b662      	cpsie	i
 80046a8:	61fb      	str	r3, [r7, #28]
}
 80046aa:	bf00      	nop
 80046ac:	bf00      	nop
 80046ae:	e7fd      	b.n	80046ac <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046b0:	f002 f99c 	bl	80069ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80046b4:	f3ef 8211 	mrs	r2, BASEPRI
 80046b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046bc:	b672      	cpsid	i
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	b662      	cpsie	i
 80046cc:	61ba      	str	r2, [r7, #24]
 80046ce:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80046d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046dc:	429a      	cmp	r2, r3
 80046de:	d302      	bcc.n	80046e6 <xQueueGenericSendFromISR+0xd2>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d12c      	bne.n	8004740 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046f6:	f000 fa49 	bl	8004b8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80046fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004702:	d112      	bne.n	800472a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	2b00      	cmp	r3, #0
 800470a:	d016      	beq.n	800473a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800470c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470e:	3324      	adds	r3, #36	@ 0x24
 8004710:	4618      	mov	r0, r3
 8004712:	f001 f853 	bl	80057bc <xTaskRemoveFromEventList>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00e      	beq.n	800473a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	e007      	b.n	800473a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800472a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800472e:	3301      	adds	r3, #1
 8004730:	b2db      	uxtb	r3, r3
 8004732:	b25a      	sxtb	r2, r3
 8004734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800473a:	2301      	movs	r3, #1
 800473c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800473e:	e001      	b.n	8004744 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004740:	2300      	movs	r3, #0
 8004742:	637b      	str	r3, [r7, #52]	@ 0x34
 8004744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004746:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800474e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004752:	4618      	mov	r0, r3
 8004754:	3738      	adds	r7, #56	@ 0x38
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	@ 0x30
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004768:	2300      	movs	r3, #0
 800476a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10d      	bne.n	8004792 <xQueueReceive+0x36>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477a:	b672      	cpsid	i
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	b662      	cpsie	i
 800478a:	623b      	str	r3, [r7, #32]
}
 800478c:	bf00      	nop
 800478e:	bf00      	nop
 8004790:	e7fd      	b.n	800478e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d103      	bne.n	80047a0 <xQueueReceive+0x44>
 8004798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <xQueueReceive+0x48>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <xQueueReceive+0x4a>
 80047a4:	2300      	movs	r3, #0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10d      	bne.n	80047c6 <xQueueReceive+0x6a>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ae:	b672      	cpsid	i
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	b662      	cpsie	i
 80047be:	61fb      	str	r3, [r7, #28]
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	e7fd      	b.n	80047c2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047c6:	f001 f9c7 	bl	8005b58 <xTaskGetSchedulerState>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <xQueueReceive+0x7a>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <xQueueReceive+0x7e>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <xQueueReceive+0x80>
 80047da:	2300      	movs	r3, #0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10d      	bne.n	80047fc <xQueueReceive+0xa0>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e4:	b672      	cpsid	i
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	b662      	cpsie	i
 80047f4:	61bb      	str	r3, [r7, #24]
}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	e7fd      	b.n	80047f8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047fc:	f002 f80e 	bl	800681c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004804:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01f      	beq.n	800484c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004810:	f000 fa26 	bl	8004c60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	1e5a      	subs	r2, r3, #1
 8004818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00f      	beq.n	8004844 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004826:	3310      	adds	r3, #16
 8004828:	4618      	mov	r0, r3
 800482a:	f000 ffc7 	bl	80057bc <xTaskRemoveFromEventList>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d007      	beq.n	8004844 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004834:	4b3c      	ldr	r3, [pc, #240]	@ (8004928 <xQueueReceive+0x1cc>)
 8004836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004844:	f002 f820 	bl	8006888 <vPortExitCritical>
				return pdPASS;
 8004848:	2301      	movs	r3, #1
 800484a:	e069      	b.n	8004920 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d103      	bne.n	800485a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004852:	f002 f819 	bl	8006888 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004856:	2300      	movs	r3, #0
 8004858:	e062      	b.n	8004920 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800485a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d106      	bne.n	800486e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004860:	f107 0310 	add.w	r3, r7, #16
 8004864:	4618      	mov	r0, r3
 8004866:	f001 f80f 	bl	8005888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800486a:	2301      	movs	r3, #1
 800486c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800486e:	f002 f80b 	bl	8006888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004872:	f000 fd6b 	bl	800534c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004876:	f001 ffd1 	bl	800681c <vPortEnterCritical>
 800487a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004880:	b25b      	sxtb	r3, r3
 8004882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004886:	d103      	bne.n	8004890 <xQueueReceive+0x134>
 8004888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004892:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004896:	b25b      	sxtb	r3, r3
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d103      	bne.n	80048a6 <xQueueReceive+0x14a>
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048a6:	f001 ffef 	bl	8006888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048aa:	1d3a      	adds	r2, r7, #4
 80048ac:	f107 0310 	add.w	r3, r7, #16
 80048b0:	4611      	mov	r1, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fffe 	bl	80058b4 <xTaskCheckForTimeOut>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d123      	bne.n	8004906 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048c0:	f000 fa46 	bl	8004d50 <prvIsQueueEmpty>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d017      	beq.n	80048fa <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	3324      	adds	r3, #36	@ 0x24
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 ff1c 	bl	8005710 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048da:	f000 f9e7 	bl	8004cac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048de:	f000 fd43 	bl	8005368 <xTaskResumeAll>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d189      	bne.n	80047fc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80048e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004928 <xQueueReceive+0x1cc>)
 80048ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	e780      	b.n	80047fc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80048fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048fc:	f000 f9d6 	bl	8004cac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004900:	f000 fd32 	bl	8005368 <xTaskResumeAll>
 8004904:	e77a      	b.n	80047fc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004908:	f000 f9d0 	bl	8004cac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800490c:	f000 fd2c 	bl	8005368 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004910:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004912:	f000 fa1d 	bl	8004d50 <prvIsQueueEmpty>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	f43f af6f 	beq.w	80047fc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800491e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004920:	4618      	mov	r0, r3
 8004922:	3730      	adds	r7, #48	@ 0x30
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08e      	sub	sp, #56	@ 0x38
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004936:	2300      	movs	r3, #0
 8004938:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800493e:	2300      	movs	r3, #0
 8004940:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10d      	bne.n	8004964 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494c:	b672      	cpsid	i
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	b662      	cpsie	i
 800495c:	623b      	str	r3, [r7, #32]
}
 800495e:	bf00      	nop
 8004960:	bf00      	nop
 8004962:	e7fd      	b.n	8004960 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00d      	beq.n	8004988 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004970:	b672      	cpsid	i
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	b662      	cpsie	i
 8004980:	61fb      	str	r3, [r7, #28]
}
 8004982:	bf00      	nop
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004988:	f001 f8e6 	bl	8005b58 <xTaskGetSchedulerState>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <xQueueSemaphoreTake+0x6c>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <xQueueSemaphoreTake+0x70>
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <xQueueSemaphoreTake+0x72>
 800499c:	2300      	movs	r3, #0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10d      	bne.n	80049be <xQueueSemaphoreTake+0x92>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a6:	b672      	cpsid	i
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	b662      	cpsie	i
 80049b6:	61bb      	str	r3, [r7, #24]
}
 80049b8:	bf00      	nop
 80049ba:	bf00      	nop
 80049bc:	e7fd      	b.n	80049ba <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049be:	f001 ff2d 	bl	800681c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80049c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80049c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d024      	beq.n	8004a18 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	1e5a      	subs	r2, r3, #1
 80049d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80049de:	f001 fa3d 	bl	8005e5c <pvTaskIncrementMutexHeldCount>
 80049e2:	4602      	mov	r2, r0
 80049e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00f      	beq.n	8004a10 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f2:	3310      	adds	r3, #16
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fee1 	bl	80057bc <xTaskRemoveFromEventList>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d007      	beq.n	8004a10 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a00:	4b55      	ldr	r3, [pc, #340]	@ (8004b58 <xQueueSemaphoreTake+0x22c>)
 8004a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a10:	f001 ff3a 	bl	8006888 <vPortExitCritical>
				return pdPASS;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e09a      	b.n	8004b4e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d114      	bne.n	8004a48 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00d      	beq.n	8004a40 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a28:	b672      	cpsid	i
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	b662      	cpsie	i
 8004a38:	617b      	str	r3, [r7, #20]
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	e7fd      	b.n	8004a3c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004a40:	f001 ff22 	bl	8006888 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e082      	b.n	8004b4e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a4e:	f107 030c 	add.w	r3, r7, #12
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 ff18 	bl	8005888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a5c:	f001 ff14 	bl	8006888 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a60:	f000 fc74 	bl	800534c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a64:	f001 feda 	bl	800681c <vPortEnterCritical>
 8004a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a6e:	b25b      	sxtb	r3, r3
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d103      	bne.n	8004a7e <xQueueSemaphoreTake+0x152>
 8004a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a84:	b25b      	sxtb	r3, r3
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d103      	bne.n	8004a94 <xQueueSemaphoreTake+0x168>
 8004a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a94:	f001 fef8 	bl	8006888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a98:	463a      	mov	r2, r7
 8004a9a:	f107 030c 	add.w	r3, r7, #12
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 ff07 	bl	80058b4 <xTaskCheckForTimeOut>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d132      	bne.n	8004b12 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004aae:	f000 f94f 	bl	8004d50 <prvIsQueueEmpty>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d026      	beq.n	8004b06 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8004ac0:	f001 feac 	bl	800681c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 f863 	bl	8005b94 <xTaskPriorityInherit>
 8004ace:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004ad0:	f001 feda 	bl	8006888 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad6:	3324      	adds	r3, #36	@ 0x24
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	4611      	mov	r1, r2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fe17 	bl	8005710 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ae2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ae4:	f000 f8e2 	bl	8004cac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ae8:	f000 fc3e 	bl	8005368 <xTaskResumeAll>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f47f af65 	bne.w	80049be <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8004af4:	4b18      	ldr	r3, [pc, #96]	@ (8004b58 <xQueueSemaphoreTake+0x22c>)
 8004af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	e75b      	b.n	80049be <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b08:	f000 f8d0 	bl	8004cac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b0c:	f000 fc2c 	bl	8005368 <xTaskResumeAll>
 8004b10:	e755      	b.n	80049be <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b14:	f000 f8ca 	bl	8004cac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b18:	f000 fc26 	bl	8005368 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b1e:	f000 f917 	bl	8004d50 <prvIsQueueEmpty>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f43f af4a 	beq.w	80049be <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8004b30:	f001 fe74 	bl	800681c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004b36:	f000 f811 	bl	8004b5c <prvGetDisinheritPriorityAfterTimeout>
 8004b3a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f902 	bl	8005d4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004b48:	f001 fe9e 	bl	8006888 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3738      	adds	r7, #56	@ 0x38
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	e000ed04 	.word	0xe000ed04

08004b5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d006      	beq.n	8004b7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	e001      	b.n	8004b7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
	}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10d      	bne.n	8004bc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d14d      	bne.n	8004c4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f001 f854 	bl	8005c64 <xTaskPriorityDisinherit>
 8004bbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	609a      	str	r2, [r3, #8]
 8004bc4:	e043      	b.n	8004c4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d119      	bne.n	8004c00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6858      	ldr	r0, [r3, #4]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	f002 fc13 	bl	8007402 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	441a      	add	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d32b      	bcc.n	8004c4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	e026      	b.n	8004c4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	68d8      	ldr	r0, [r3, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	461a      	mov	r2, r3
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	f002 fbf9 	bl	8007402 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	425b      	negs	r3, r3
 8004c1a:	441a      	add	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d207      	bcs.n	8004c3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c34:	425b      	negs	r3, r3
 8004c36:	441a      	add	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d105      	bne.n	8004c4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004c56:	697b      	ldr	r3, [r7, #20]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d018      	beq.n	8004ca4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	441a      	add	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d303      	bcc.n	8004c94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68d9      	ldr	r1, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6838      	ldr	r0, [r7, #0]
 8004ca0:	f002 fbaf 	bl	8007402 <memcpy>
	}
}
 8004ca4:	bf00      	nop
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cb4:	f001 fdb2 	bl	800681c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cc0:	e011      	b.n	8004ce6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d012      	beq.n	8004cf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3324      	adds	r3, #36	@ 0x24
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fd74 	bl	80057bc <xTaskRemoveFromEventList>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004cda:	f000 fe53 	bl	8005984 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	dce9      	bgt.n	8004cc2 <prvUnlockQueue+0x16>
 8004cee:	e000      	b.n	8004cf2 <prvUnlockQueue+0x46>
					break;
 8004cf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	22ff      	movs	r2, #255	@ 0xff
 8004cf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004cfa:	f001 fdc5 	bl	8006888 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cfe:	f001 fd8d 	bl	800681c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d0a:	e011      	b.n	8004d30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d012      	beq.n	8004d3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3310      	adds	r3, #16
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fd4f 	bl	80057bc <xTaskRemoveFromEventList>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d24:	f000 fe2e 	bl	8005984 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d28:	7bbb      	ldrb	r3, [r7, #14]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	dce9      	bgt.n	8004d0c <prvUnlockQueue+0x60>
 8004d38:	e000      	b.n	8004d3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	22ff      	movs	r2, #255	@ 0xff
 8004d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004d44:	f001 fda0 	bl	8006888 <vPortExitCritical>
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d58:	f001 fd60 	bl	800681c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e001      	b.n	8004d6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d6e:	f001 fd8b 	bl	8006888 <vPortExitCritical>

	return xReturn;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d84:	f001 fd4a 	bl	800681c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d102      	bne.n	8004d9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d94:	2301      	movs	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	e001      	b.n	8004d9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d9e:	f001 fd73 	bl	8006888 <vPortExitCritical>

	return xReturn;
 8004da2:	68fb      	ldr	r3, [r7, #12]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e014      	b.n	8004de6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8004dfc <vQueueAddToRegistry+0x50>)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10b      	bne.n	8004de0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004dc8:	490c      	ldr	r1, [pc, #48]	@ (8004dfc <vQueueAddToRegistry+0x50>)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004dfc <vQueueAddToRegistry+0x50>)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4413      	add	r3, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004dde:	e006      	b.n	8004dee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b07      	cmp	r3, #7
 8004dea:	d9e7      	bls.n	8004dbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	200008c4 	.word	0x200008c4

08004e00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e10:	f001 fd04 	bl	800681c <vPortEnterCritical>
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e1a:	b25b      	sxtb	r3, r3
 8004e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e20:	d103      	bne.n	8004e2a <vQueueWaitForMessageRestricted+0x2a>
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e30:	b25b      	sxtb	r3, r3
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e36:	d103      	bne.n	8004e40 <vQueueWaitForMessageRestricted+0x40>
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e40:	f001 fd22 	bl	8006888 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	3324      	adds	r3, #36	@ 0x24
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fc83 	bl	8005760 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e5a:	6978      	ldr	r0, [r7, #20]
 8004e5c:	f7ff ff26 	bl	8004cac <prvUnlockQueue>
	}
 8004e60:	bf00      	nop
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08e      	sub	sp, #56	@ 0x38
 8004e6c:	af04      	add	r7, sp, #16
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10d      	bne.n	8004e98 <xTaskCreateStatic+0x30>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e80:	b672      	cpsid	i
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	b662      	cpsie	i
 8004e90:	623b      	str	r3, [r7, #32]
}
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
 8004e96:	e7fd      	b.n	8004e94 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10d      	bne.n	8004eba <xTaskCreateStatic+0x52>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea2:	b672      	cpsid	i
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	b662      	cpsie	i
 8004eb2:	61fb      	str	r3, [r7, #28]
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	e7fd      	b.n	8004eb6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004eba:	23a8      	movs	r3, #168	@ 0xa8
 8004ebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2ba8      	cmp	r3, #168	@ 0xa8
 8004ec2:	d00d      	beq.n	8004ee0 <xTaskCreateStatic+0x78>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec8:	b672      	cpsid	i
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	b662      	cpsie	i
 8004ed8:	61bb      	str	r3, [r7, #24]
}
 8004eda:	bf00      	nop
 8004edc:	bf00      	nop
 8004ede:	e7fd      	b.n	8004edc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ee0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01e      	beq.n	8004f26 <xTaskCreateStatic+0xbe>
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01b      	beq.n	8004f26 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ef6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f00:	2300      	movs	r3, #0
 8004f02:	9303      	str	r3, [sp, #12]
 8004f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f06:	9302      	str	r3, [sp, #8]
 8004f08:	f107 0314 	add.w	r3, r7, #20
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f851 	bl	8004fc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f20:	f000 f8f8 	bl	8005114 <prvAddNewTaskToReadyList>
 8004f24:	e001      	b.n	8004f2a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f2a:	697b      	ldr	r3, [r7, #20]
	}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3728      	adds	r7, #40	@ 0x28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08c      	sub	sp, #48	@ 0x30
 8004f38:	af04      	add	r7, sp, #16
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 fd95 	bl	8006a78 <pvPortMalloc>
 8004f4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00e      	beq.n	8004f74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f56:	20a8      	movs	r0, #168	@ 0xa8
 8004f58:	f001 fd8e 	bl	8006a78 <pvPortMalloc>
 8004f5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f6a:	e005      	b.n	8004f78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f6c:	6978      	ldr	r0, [r7, #20]
 8004f6e:	f001 fe51 	bl	8006c14 <vPortFree>
 8004f72:	e001      	b.n	8004f78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d017      	beq.n	8004fae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f86:	88fa      	ldrh	r2, [r7, #6]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9303      	str	r3, [sp, #12]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	9302      	str	r3, [sp, #8]
 8004f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68b9      	ldr	r1, [r7, #8]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f80f 	bl	8004fc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fa2:	69f8      	ldr	r0, [r7, #28]
 8004fa4:	f000 f8b6 	bl	8005114 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	e002      	b.n	8004fb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fae:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
	}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3720      	adds	r7, #32
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	21a5      	movs	r1, #165	@ 0xa5
 8004fda:	f002 f941 	bl	8007260 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004fe8:	440b      	add	r3, r1
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	f023 0307 	bic.w	r3, r3, #7
 8004ff6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00d      	beq.n	800501e <prvInitialiseNewTask+0x5e>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005006:	b672      	cpsid	i
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	b662      	cpsie	i
 8005016:	617b      	str	r3, [r7, #20]
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	e7fd      	b.n	800501a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01f      	beq.n	8005064 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005024:	2300      	movs	r3, #0
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	e012      	b.n	8005050 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	4413      	add	r3, r2
 8005030:	7819      	ldrb	r1, [r3, #0]
 8005032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	4413      	add	r3, r2
 8005038:	3334      	adds	r3, #52	@ 0x34
 800503a:	460a      	mov	r2, r1
 800503c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d006      	beq.n	8005058 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	3301      	adds	r3, #1
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	2b0f      	cmp	r3, #15
 8005054:	d9e9      	bls.n	800502a <prvInitialiseNewTask+0x6a>
 8005056:	e000      	b.n	800505a <prvInitialiseNewTask+0x9a>
			{
				break;
 8005058:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005062:	e003      	b.n	800506c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800506c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506e:	2b37      	cmp	r3, #55	@ 0x37
 8005070:	d901      	bls.n	8005076 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005072:	2337      	movs	r3, #55	@ 0x37
 8005074:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800507a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005080:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005084:	2200      	movs	r2, #0
 8005086:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508a:	3304      	adds	r3, #4
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe ffc9 	bl	8004024 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	3318      	adds	r3, #24
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe ffc4 	bl	8004024 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800509c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80050a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	3354      	adds	r3, #84	@ 0x54
 80050c6:	224c      	movs	r2, #76	@ 0x4c
 80050c8:	2100      	movs	r1, #0
 80050ca:	4618      	mov	r0, r3
 80050cc:	f002 f8c8 	bl	8007260 <memset>
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005108 <prvInitialiseNewTask+0x148>)
 80050d4:	659a      	str	r2, [r3, #88]	@ 0x58
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	4a0c      	ldr	r2, [pc, #48]	@ (800510c <prvInitialiseNewTask+0x14c>)
 80050da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80050dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050de:	4a0c      	ldr	r2, [pc, #48]	@ (8005110 <prvInitialiseNewTask+0x150>)
 80050e0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	68f9      	ldr	r1, [r7, #12]
 80050e6:	69b8      	ldr	r0, [r7, #24]
 80050e8:	f001 fa88 	bl	80065fc <pxPortInitialiseStack>
 80050ec:	4602      	mov	r2, r0
 80050ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050fe:	bf00      	nop
 8005100:	3720      	adds	r7, #32
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20004b50 	.word	0x20004b50
 800510c:	20004bb8 	.word	0x20004bb8
 8005110:	20004c20 	.word	0x20004c20

08005114 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800511c:	f001 fb7e 	bl	800681c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005120:	4b2d      	ldr	r3, [pc, #180]	@ (80051d8 <prvAddNewTaskToReadyList+0xc4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3301      	adds	r3, #1
 8005126:	4a2c      	ldr	r2, [pc, #176]	@ (80051d8 <prvAddNewTaskToReadyList+0xc4>)
 8005128:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800512a:	4b2c      	ldr	r3, [pc, #176]	@ (80051dc <prvAddNewTaskToReadyList+0xc8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d109      	bne.n	8005146 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005132:	4a2a      	ldr	r2, [pc, #168]	@ (80051dc <prvAddNewTaskToReadyList+0xc8>)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005138:	4b27      	ldr	r3, [pc, #156]	@ (80051d8 <prvAddNewTaskToReadyList+0xc4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d110      	bne.n	8005162 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005140:	f000 fc44 	bl	80059cc <prvInitialiseTaskLists>
 8005144:	e00d      	b.n	8005162 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005146:	4b26      	ldr	r3, [pc, #152]	@ (80051e0 <prvAddNewTaskToReadyList+0xcc>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800514e:	4b23      	ldr	r3, [pc, #140]	@ (80051dc <prvAddNewTaskToReadyList+0xc8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005158:	429a      	cmp	r2, r3
 800515a:	d802      	bhi.n	8005162 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800515c:	4a1f      	ldr	r2, [pc, #124]	@ (80051dc <prvAddNewTaskToReadyList+0xc8>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005162:	4b20      	ldr	r3, [pc, #128]	@ (80051e4 <prvAddNewTaskToReadyList+0xd0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3301      	adds	r3, #1
 8005168:	4a1e      	ldr	r2, [pc, #120]	@ (80051e4 <prvAddNewTaskToReadyList+0xd0>)
 800516a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800516c:	4b1d      	ldr	r3, [pc, #116]	@ (80051e4 <prvAddNewTaskToReadyList+0xd0>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005178:	4b1b      	ldr	r3, [pc, #108]	@ (80051e8 <prvAddNewTaskToReadyList+0xd4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d903      	bls.n	8005188 <prvAddNewTaskToReadyList+0x74>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005184:	4a18      	ldr	r2, [pc, #96]	@ (80051e8 <prvAddNewTaskToReadyList+0xd4>)
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4a15      	ldr	r2, [pc, #84]	@ (80051ec <prvAddNewTaskToReadyList+0xd8>)
 8005196:	441a      	add	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3304      	adds	r3, #4
 800519c:	4619      	mov	r1, r3
 800519e:	4610      	mov	r0, r2
 80051a0:	f7fe ff4d 	bl	800403e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051a4:	f001 fb70 	bl	8006888 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051a8:	4b0d      	ldr	r3, [pc, #52]	@ (80051e0 <prvAddNewTaskToReadyList+0xcc>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00e      	beq.n	80051ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051b0:	4b0a      	ldr	r3, [pc, #40]	@ (80051dc <prvAddNewTaskToReadyList+0xc8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d207      	bcs.n	80051ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051be:	4b0c      	ldr	r3, [pc, #48]	@ (80051f0 <prvAddNewTaskToReadyList+0xdc>)
 80051c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000dd8 	.word	0x20000dd8
 80051dc:	20000904 	.word	0x20000904
 80051e0:	20000de4 	.word	0x20000de4
 80051e4:	20000df4 	.word	0x20000df4
 80051e8:	20000de0 	.word	0x20000de0
 80051ec:	20000908 	.word	0x20000908
 80051f0:	e000ed04 	.word	0xe000ed04

080051f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01a      	beq.n	800523c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005206:	4b15      	ldr	r3, [pc, #84]	@ (800525c <vTaskDelay+0x68>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00d      	beq.n	800522a <vTaskDelay+0x36>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005212:	b672      	cpsid	i
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	b662      	cpsie	i
 8005222:	60bb      	str	r3, [r7, #8]
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	e7fd      	b.n	8005226 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800522a:	f000 f88f 	bl	800534c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800522e:	2100      	movs	r1, #0
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fe27 	bl	8005e84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005236:	f000 f897 	bl	8005368 <xTaskResumeAll>
 800523a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d107      	bne.n	8005252 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005242:	4b07      	ldr	r3, [pc, #28]	@ (8005260 <vTaskDelay+0x6c>)
 8005244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000e00 	.word	0x20000e00
 8005260:	e000ed04 	.word	0xe000ed04

08005264 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	@ 0x28
 8005268:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005272:	463a      	mov	r2, r7
 8005274:	1d39      	adds	r1, r7, #4
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe fe7e 	bl	8003f7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	9202      	str	r2, [sp, #8]
 8005288:	9301      	str	r3, [sp, #4]
 800528a:	2300      	movs	r3, #0
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	2300      	movs	r3, #0
 8005290:	460a      	mov	r2, r1
 8005292:	4926      	ldr	r1, [pc, #152]	@ (800532c <vTaskStartScheduler+0xc8>)
 8005294:	4826      	ldr	r0, [pc, #152]	@ (8005330 <vTaskStartScheduler+0xcc>)
 8005296:	f7ff fde7 	bl	8004e68 <xTaskCreateStatic>
 800529a:	4603      	mov	r3, r0
 800529c:	4a25      	ldr	r2, [pc, #148]	@ (8005334 <vTaskStartScheduler+0xd0>)
 800529e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052a0:	4b24      	ldr	r3, [pc, #144]	@ (8005334 <vTaskStartScheduler+0xd0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052a8:	2301      	movs	r3, #1
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e001      	b.n	80052b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d102      	bne.n	80052be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80052b8:	f000 fe38 	bl	8005f2c <xTimerCreateTimerTask>
 80052bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d11d      	bne.n	8005300 <vTaskStartScheduler+0x9c>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c8:	b672      	cpsid	i
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	b662      	cpsie	i
 80052d8:	613b      	str	r3, [r7, #16]
}
 80052da:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052dc:	4b16      	ldr	r3, [pc, #88]	@ (8005338 <vTaskStartScheduler+0xd4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3354      	adds	r3, #84	@ 0x54
 80052e2:	4a16      	ldr	r2, [pc, #88]	@ (800533c <vTaskStartScheduler+0xd8>)
 80052e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052e6:	4b16      	ldr	r3, [pc, #88]	@ (8005340 <vTaskStartScheduler+0xdc>)
 80052e8:	f04f 32ff 	mov.w	r2, #4294967295
 80052ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052ee:	4b15      	ldr	r3, [pc, #84]	@ (8005344 <vTaskStartScheduler+0xe0>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052f4:	4b14      	ldr	r3, [pc, #80]	@ (8005348 <vTaskStartScheduler+0xe4>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052fa:	f001 fa11 	bl	8006720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052fe:	e011      	b.n	8005324 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d10d      	bne.n	8005324 <vTaskStartScheduler+0xc0>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530c:	b672      	cpsid	i
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	b662      	cpsie	i
 800531c:	60fb      	str	r3, [r7, #12]
}
 800531e:	bf00      	nop
 8005320:	bf00      	nop
 8005322:	e7fd      	b.n	8005320 <vTaskStartScheduler+0xbc>
}
 8005324:	bf00      	nop
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	08007f8c 	.word	0x08007f8c
 8005330:	0800599d 	.word	0x0800599d
 8005334:	20000dfc 	.word	0x20000dfc
 8005338:	20000904 	.word	0x20000904
 800533c:	2000001c 	.word	0x2000001c
 8005340:	20000df8 	.word	0x20000df8
 8005344:	20000de4 	.word	0x20000de4
 8005348:	20000ddc 	.word	0x20000ddc

0800534c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005350:	4b04      	ldr	r3, [pc, #16]	@ (8005364 <vTaskSuspendAll+0x18>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3301      	adds	r3, #1
 8005356:	4a03      	ldr	r2, [pc, #12]	@ (8005364 <vTaskSuspendAll+0x18>)
 8005358:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800535a:	bf00      	nop
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	20000e00 	.word	0x20000e00

08005368 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005376:	4b43      	ldr	r3, [pc, #268]	@ (8005484 <xTaskResumeAll+0x11c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10d      	bne.n	800539a <xTaskResumeAll+0x32>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005382:	b672      	cpsid	i
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	b662      	cpsie	i
 8005392:	603b      	str	r3, [r7, #0]
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	e7fd      	b.n	8005396 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800539a:	f001 fa3f 	bl	800681c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800539e:	4b39      	ldr	r3, [pc, #228]	@ (8005484 <xTaskResumeAll+0x11c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	4a37      	ldr	r2, [pc, #220]	@ (8005484 <xTaskResumeAll+0x11c>)
 80053a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a8:	4b36      	ldr	r3, [pc, #216]	@ (8005484 <xTaskResumeAll+0x11c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d162      	bne.n	8005476 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053b0:	4b35      	ldr	r3, [pc, #212]	@ (8005488 <xTaskResumeAll+0x120>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d05e      	beq.n	8005476 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053b8:	e02f      	b.n	800541a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ba:	4b34      	ldr	r3, [pc, #208]	@ (800548c <xTaskResumeAll+0x124>)
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3318      	adds	r3, #24
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe fe96 	bl	80040f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe fe91 	bl	80040f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053da:	4b2d      	ldr	r3, [pc, #180]	@ (8005490 <xTaskResumeAll+0x128>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d903      	bls.n	80053ea <xTaskResumeAll+0x82>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005490 <xTaskResumeAll+0x128>)
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4a27      	ldr	r2, [pc, #156]	@ (8005494 <xTaskResumeAll+0x12c>)
 80053f8:	441a      	add	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f7fe fe1c 	bl	800403e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800540a:	4b23      	ldr	r3, [pc, #140]	@ (8005498 <xTaskResumeAll+0x130>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005410:	429a      	cmp	r2, r3
 8005412:	d302      	bcc.n	800541a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8005414:	4b21      	ldr	r3, [pc, #132]	@ (800549c <xTaskResumeAll+0x134>)
 8005416:	2201      	movs	r2, #1
 8005418:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800541a:	4b1c      	ldr	r3, [pc, #112]	@ (800548c <xTaskResumeAll+0x124>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1cb      	bne.n	80053ba <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005428:	f000 fb76 	bl	8005b18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800542c:	4b1c      	ldr	r3, [pc, #112]	@ (80054a0 <xTaskResumeAll+0x138>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d010      	beq.n	800545a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005438:	f000 f846 	bl	80054c8 <xTaskIncrementTick>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8005442:	4b16      	ldr	r3, [pc, #88]	@ (800549c <xTaskResumeAll+0x134>)
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3b01      	subs	r3, #1
 800544c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1f1      	bne.n	8005438 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8005454:	4b12      	ldr	r3, [pc, #72]	@ (80054a0 <xTaskResumeAll+0x138>)
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800545a:	4b10      	ldr	r3, [pc, #64]	@ (800549c <xTaskResumeAll+0x134>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005462:	2301      	movs	r3, #1
 8005464:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005466:	4b0f      	ldr	r3, [pc, #60]	@ (80054a4 <xTaskResumeAll+0x13c>)
 8005468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005476:	f001 fa07 	bl	8006888 <vPortExitCritical>

	return xAlreadyYielded;
 800547a:	68bb      	ldr	r3, [r7, #8]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000e00 	.word	0x20000e00
 8005488:	20000dd8 	.word	0x20000dd8
 800548c:	20000d98 	.word	0x20000d98
 8005490:	20000de0 	.word	0x20000de0
 8005494:	20000908 	.word	0x20000908
 8005498:	20000904 	.word	0x20000904
 800549c:	20000dec 	.word	0x20000dec
 80054a0:	20000de8 	.word	0x20000de8
 80054a4:	e000ed04 	.word	0xe000ed04

080054a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80054ae:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <xTaskGetTickCount+0x1c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80054b4:	687b      	ldr	r3, [r7, #4]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000ddc 	.word	0x20000ddc

080054c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054d2:	4b50      	ldr	r3, [pc, #320]	@ (8005614 <xTaskIncrementTick+0x14c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f040 808c 	bne.w	80055f4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005618 <xTaskIncrementTick+0x150>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3301      	adds	r3, #1
 80054e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054e4:	4a4c      	ldr	r2, [pc, #304]	@ (8005618 <xTaskIncrementTick+0x150>)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d123      	bne.n	8005538 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80054f0:	4b4a      	ldr	r3, [pc, #296]	@ (800561c <xTaskIncrementTick+0x154>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00d      	beq.n	8005516 <xTaskIncrementTick+0x4e>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fe:	b672      	cpsid	i
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	b662      	cpsie	i
 800550e:	603b      	str	r3, [r7, #0]
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	e7fd      	b.n	8005512 <xTaskIncrementTick+0x4a>
 8005516:	4b41      	ldr	r3, [pc, #260]	@ (800561c <xTaskIncrementTick+0x154>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	4b40      	ldr	r3, [pc, #256]	@ (8005620 <xTaskIncrementTick+0x158>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a3e      	ldr	r2, [pc, #248]	@ (800561c <xTaskIncrementTick+0x154>)
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	4a3e      	ldr	r2, [pc, #248]	@ (8005620 <xTaskIncrementTick+0x158>)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	4b3e      	ldr	r3, [pc, #248]	@ (8005624 <xTaskIncrementTick+0x15c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3301      	adds	r3, #1
 8005530:	4a3c      	ldr	r2, [pc, #240]	@ (8005624 <xTaskIncrementTick+0x15c>)
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	f000 faf0 	bl	8005b18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005538:	4b3b      	ldr	r3, [pc, #236]	@ (8005628 <xTaskIncrementTick+0x160>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	429a      	cmp	r2, r3
 8005540:	d349      	bcc.n	80055d6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005542:	4b36      	ldr	r3, [pc, #216]	@ (800561c <xTaskIncrementTick+0x154>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d104      	bne.n	8005556 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800554c:	4b36      	ldr	r3, [pc, #216]	@ (8005628 <xTaskIncrementTick+0x160>)
 800554e:	f04f 32ff 	mov.w	r2, #4294967295
 8005552:	601a      	str	r2, [r3, #0]
					break;
 8005554:	e03f      	b.n	80055d6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005556:	4b31      	ldr	r3, [pc, #196]	@ (800561c <xTaskIncrementTick+0x154>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	429a      	cmp	r2, r3
 800556c:	d203      	bcs.n	8005576 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800556e:	4a2e      	ldr	r2, [pc, #184]	@ (8005628 <xTaskIncrementTick+0x160>)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005574:	e02f      	b.n	80055d6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	3304      	adds	r3, #4
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe fdbc 	bl	80040f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	2b00      	cmp	r3, #0
 8005586:	d004      	beq.n	8005592 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	3318      	adds	r3, #24
 800558c:	4618      	mov	r0, r3
 800558e:	f7fe fdb3 	bl	80040f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005596:	4b25      	ldr	r3, [pc, #148]	@ (800562c <xTaskIncrementTick+0x164>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d903      	bls.n	80055a6 <xTaskIncrementTick+0xde>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a2:	4a22      	ldr	r2, [pc, #136]	@ (800562c <xTaskIncrementTick+0x164>)
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005630 <xTaskIncrementTick+0x168>)
 80055b4:	441a      	add	r2, r3
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4619      	mov	r1, r3
 80055bc:	4610      	mov	r0, r2
 80055be:	f7fe fd3e 	bl	800403e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005634 <xTaskIncrementTick+0x16c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d3b8      	bcc.n	8005542 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80055d0:	2301      	movs	r3, #1
 80055d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055d4:	e7b5      	b.n	8005542 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055d6:	4b17      	ldr	r3, [pc, #92]	@ (8005634 <xTaskIncrementTick+0x16c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055dc:	4914      	ldr	r1, [pc, #80]	@ (8005630 <xTaskIncrementTick+0x168>)
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d907      	bls.n	80055fe <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80055ee:	2301      	movs	r3, #1
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	e004      	b.n	80055fe <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80055f4:	4b10      	ldr	r3, [pc, #64]	@ (8005638 <xTaskIncrementTick+0x170>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3301      	adds	r3, #1
 80055fa:	4a0f      	ldr	r2, [pc, #60]	@ (8005638 <xTaskIncrementTick+0x170>)
 80055fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80055fe:	4b0f      	ldr	r3, [pc, #60]	@ (800563c <xTaskIncrementTick+0x174>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005606:	2301      	movs	r3, #1
 8005608:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800560a:	697b      	ldr	r3, [r7, #20]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20000e00 	.word	0x20000e00
 8005618:	20000ddc 	.word	0x20000ddc
 800561c:	20000d90 	.word	0x20000d90
 8005620:	20000d94 	.word	0x20000d94
 8005624:	20000df0 	.word	0x20000df0
 8005628:	20000df8 	.word	0x20000df8
 800562c:	20000de0 	.word	0x20000de0
 8005630:	20000908 	.word	0x20000908
 8005634:	20000904 	.word	0x20000904
 8005638:	20000de8 	.word	0x20000de8
 800563c:	20000dec 	.word	0x20000dec

08005640 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005646:	4b2c      	ldr	r3, [pc, #176]	@ (80056f8 <vTaskSwitchContext+0xb8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800564e:	4b2b      	ldr	r3, [pc, #172]	@ (80056fc <vTaskSwitchContext+0xbc>)
 8005650:	2201      	movs	r2, #1
 8005652:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005654:	e049      	b.n	80056ea <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8005656:	4b29      	ldr	r3, [pc, #164]	@ (80056fc <vTaskSwitchContext+0xbc>)
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800565c:	4b28      	ldr	r3, [pc, #160]	@ (8005700 <vTaskSwitchContext+0xc0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	e013      	b.n	800568c <vTaskSwitchContext+0x4c>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10d      	bne.n	8005686 <vTaskSwitchContext+0x46>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566e:	b672      	cpsid	i
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	b662      	cpsie	i
 800567e:	607b      	str	r3, [r7, #4]
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	e7fd      	b.n	8005682 <vTaskSwitchContext+0x42>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3b01      	subs	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	491d      	ldr	r1, [pc, #116]	@ (8005704 <vTaskSwitchContext+0xc4>)
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0e1      	beq.n	8005664 <vTaskSwitchContext+0x24>
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4a16      	ldr	r2, [pc, #88]	@ (8005704 <vTaskSwitchContext+0xc4>)
 80056ac:	4413      	add	r3, r2
 80056ae:	60bb      	str	r3, [r7, #8]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	605a      	str	r2, [r3, #4]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	3308      	adds	r3, #8
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d104      	bne.n	80056d0 <vTaskSwitchContext+0x90>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	605a      	str	r2, [r3, #4]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005708 <vTaskSwitchContext+0xc8>)
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	4a09      	ldr	r2, [pc, #36]	@ (8005700 <vTaskSwitchContext+0xc0>)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056e0:	4b09      	ldr	r3, [pc, #36]	@ (8005708 <vTaskSwitchContext+0xc8>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3354      	adds	r3, #84	@ 0x54
 80056e6:	4a09      	ldr	r2, [pc, #36]	@ (800570c <vTaskSwitchContext+0xcc>)
 80056e8:	6013      	str	r3, [r2, #0]
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	20000e00 	.word	0x20000e00
 80056fc:	20000dec 	.word	0x20000dec
 8005700:	20000de0 	.word	0x20000de0
 8005704:	20000908 	.word	0x20000908
 8005708:	20000904 	.word	0x20000904
 800570c:	2000001c 	.word	0x2000001c

08005710 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10d      	bne.n	800573c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005724:	b672      	cpsid	i
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	b662      	cpsie	i
 8005734:	60fb      	str	r3, [r7, #12]
}
 8005736:	bf00      	nop
 8005738:	bf00      	nop
 800573a:	e7fd      	b.n	8005738 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800573c:	4b07      	ldr	r3, [pc, #28]	@ (800575c <vTaskPlaceOnEventList+0x4c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3318      	adds	r3, #24
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7fe fc9e 	bl	8004086 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800574a:	2101      	movs	r1, #1
 800574c:	6838      	ldr	r0, [r7, #0]
 800574e:	f000 fb99 	bl	8005e84 <prvAddCurrentTaskToDelayedList>
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000904 	.word	0x20000904

08005760 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10d      	bne.n	800578e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005776:	b672      	cpsid	i
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	b662      	cpsie	i
 8005786:	617b      	str	r3, [r7, #20]
}
 8005788:	bf00      	nop
 800578a:	bf00      	nop
 800578c:	e7fd      	b.n	800578a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800578e:	4b0a      	ldr	r3, [pc, #40]	@ (80057b8 <vTaskPlaceOnEventListRestricted+0x58>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3318      	adds	r3, #24
 8005794:	4619      	mov	r1, r3
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7fe fc51 	bl	800403e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80057a2:	f04f 33ff 	mov.w	r3, #4294967295
 80057a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	68b8      	ldr	r0, [r7, #8]
 80057ac:	f000 fb6a 	bl	8005e84 <prvAddCurrentTaskToDelayedList>
	}
 80057b0:	bf00      	nop
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20000904 	.word	0x20000904

080057bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10d      	bne.n	80057ee <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d6:	b672      	cpsid	i
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	b662      	cpsie	i
 80057e6:	60fb      	str	r3, [r7, #12]
}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	e7fd      	b.n	80057ea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	3318      	adds	r3, #24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe fc80 	bl	80040f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005870 <xTaskRemoveFromEventList+0xb4>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d11d      	bne.n	800583c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	3304      	adds	r3, #4
 8005804:	4618      	mov	r0, r3
 8005806:	f7fe fc77 	bl	80040f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800580e:	4b19      	ldr	r3, [pc, #100]	@ (8005874 <xTaskRemoveFromEventList+0xb8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d903      	bls.n	800581e <xTaskRemoveFromEventList+0x62>
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581a:	4a16      	ldr	r2, [pc, #88]	@ (8005874 <xTaskRemoveFromEventList+0xb8>)
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4a13      	ldr	r2, [pc, #76]	@ (8005878 <xTaskRemoveFromEventList+0xbc>)
 800582c:	441a      	add	r2, r3
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	3304      	adds	r3, #4
 8005832:	4619      	mov	r1, r3
 8005834:	4610      	mov	r0, r2
 8005836:	f7fe fc02 	bl	800403e <vListInsertEnd>
 800583a:	e005      	b.n	8005848 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	3318      	adds	r3, #24
 8005840:	4619      	mov	r1, r3
 8005842:	480e      	ldr	r0, [pc, #56]	@ (800587c <xTaskRemoveFromEventList+0xc0>)
 8005844:	f7fe fbfb 	bl	800403e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800584c:	4b0c      	ldr	r3, [pc, #48]	@ (8005880 <xTaskRemoveFromEventList+0xc4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005852:	429a      	cmp	r2, r3
 8005854:	d905      	bls.n	8005862 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005856:	2301      	movs	r3, #1
 8005858:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800585a:	4b0a      	ldr	r3, [pc, #40]	@ (8005884 <xTaskRemoveFromEventList+0xc8>)
 800585c:	2201      	movs	r2, #1
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e001      	b.n	8005866 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005866:	697b      	ldr	r3, [r7, #20]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20000e00 	.word	0x20000e00
 8005874:	20000de0 	.word	0x20000de0
 8005878:	20000908 	.word	0x20000908
 800587c:	20000d98 	.word	0x20000d98
 8005880:	20000904 	.word	0x20000904
 8005884:	20000dec 	.word	0x20000dec

08005888 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005890:	4b06      	ldr	r3, [pc, #24]	@ (80058ac <vTaskInternalSetTimeOutState+0x24>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005898:	4b05      	ldr	r3, [pc, #20]	@ (80058b0 <vTaskInternalSetTimeOutState+0x28>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	605a      	str	r2, [r3, #4]
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	20000df0 	.word	0x20000df0
 80058b0:	20000ddc 	.word	0x20000ddc

080058b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10d      	bne.n	80058e0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c8:	b672      	cpsid	i
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	b662      	cpsie	i
 80058d8:	613b      	str	r3, [r7, #16]
}
 80058da:	bf00      	nop
 80058dc:	bf00      	nop
 80058de:	e7fd      	b.n	80058dc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10d      	bne.n	8005902 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ea:	b672      	cpsid	i
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	b662      	cpsie	i
 80058fa:	60fb      	str	r3, [r7, #12]
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	e7fd      	b.n	80058fe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8005902:	f000 ff8b 	bl	800681c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005906:	4b1d      	ldr	r3, [pc, #116]	@ (800597c <xTaskCheckForTimeOut+0xc8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591e:	d102      	bne.n	8005926 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005920:	2300      	movs	r3, #0
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	e023      	b.n	800596e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4b15      	ldr	r3, [pc, #84]	@ (8005980 <xTaskCheckForTimeOut+0xcc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d007      	beq.n	8005942 <xTaskCheckForTimeOut+0x8e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	429a      	cmp	r2, r3
 800593a:	d302      	bcc.n	8005942 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800593c:	2301      	movs	r3, #1
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	e015      	b.n	800596e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	429a      	cmp	r2, r3
 800594a:	d20b      	bcs.n	8005964 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	1ad2      	subs	r2, r2, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff ff95 	bl	8005888 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800595e:	2300      	movs	r3, #0
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	e004      	b.n	800596e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800596a:	2301      	movs	r3, #1
 800596c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800596e:	f000 ff8b 	bl	8006888 <vPortExitCritical>

	return xReturn;
 8005972:	69fb      	ldr	r3, [r7, #28]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3720      	adds	r7, #32
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000ddc 	.word	0x20000ddc
 8005980:	20000df0 	.word	0x20000df0

08005984 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005988:	4b03      	ldr	r3, [pc, #12]	@ (8005998 <vTaskMissedYield+0x14>)
 800598a:	2201      	movs	r2, #1
 800598c:	601a      	str	r2, [r3, #0]
}
 800598e:	bf00      	nop
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	20000dec 	.word	0x20000dec

0800599c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059a4:	f000 f852 	bl	8005a4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059a8:	4b06      	ldr	r3, [pc, #24]	@ (80059c4 <prvIdleTask+0x28>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d9f9      	bls.n	80059a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059b0:	4b05      	ldr	r3, [pc, #20]	@ (80059c8 <prvIdleTask+0x2c>)
 80059b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059c0:	e7f0      	b.n	80059a4 <prvIdleTask+0x8>
 80059c2:	bf00      	nop
 80059c4:	20000908 	.word	0x20000908
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059d2:	2300      	movs	r3, #0
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	e00c      	b.n	80059f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4a12      	ldr	r2, [pc, #72]	@ (8005a2c <prvInitialiseTaskLists+0x60>)
 80059e4:	4413      	add	r3, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe fafc 	bl	8003fe4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3301      	adds	r3, #1
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b37      	cmp	r3, #55	@ 0x37
 80059f6:	d9ef      	bls.n	80059d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059f8:	480d      	ldr	r0, [pc, #52]	@ (8005a30 <prvInitialiseTaskLists+0x64>)
 80059fa:	f7fe faf3 	bl	8003fe4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059fe:	480d      	ldr	r0, [pc, #52]	@ (8005a34 <prvInitialiseTaskLists+0x68>)
 8005a00:	f7fe faf0 	bl	8003fe4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a04:	480c      	ldr	r0, [pc, #48]	@ (8005a38 <prvInitialiseTaskLists+0x6c>)
 8005a06:	f7fe faed 	bl	8003fe4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a0a:	480c      	ldr	r0, [pc, #48]	@ (8005a3c <prvInitialiseTaskLists+0x70>)
 8005a0c:	f7fe faea 	bl	8003fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a10:	480b      	ldr	r0, [pc, #44]	@ (8005a40 <prvInitialiseTaskLists+0x74>)
 8005a12:	f7fe fae7 	bl	8003fe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a16:	4b0b      	ldr	r3, [pc, #44]	@ (8005a44 <prvInitialiseTaskLists+0x78>)
 8005a18:	4a05      	ldr	r2, [pc, #20]	@ (8005a30 <prvInitialiseTaskLists+0x64>)
 8005a1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a48 <prvInitialiseTaskLists+0x7c>)
 8005a1e:	4a05      	ldr	r2, [pc, #20]	@ (8005a34 <prvInitialiseTaskLists+0x68>)
 8005a20:	601a      	str	r2, [r3, #0]
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000908 	.word	0x20000908
 8005a30:	20000d68 	.word	0x20000d68
 8005a34:	20000d7c 	.word	0x20000d7c
 8005a38:	20000d98 	.word	0x20000d98
 8005a3c:	20000dac 	.word	0x20000dac
 8005a40:	20000dc4 	.word	0x20000dc4
 8005a44:	20000d90 	.word	0x20000d90
 8005a48:	20000d94 	.word	0x20000d94

08005a4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a52:	e019      	b.n	8005a88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a54:	f000 fee2 	bl	800681c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a58:	4b10      	ldr	r3, [pc, #64]	@ (8005a9c <prvCheckTasksWaitingTermination+0x50>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe fb47 	bl	80040f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa0 <prvCheckTasksWaitingTermination+0x54>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	4a0b      	ldr	r2, [pc, #44]	@ (8005aa0 <prvCheckTasksWaitingTermination+0x54>)
 8005a72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a74:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa4 <prvCheckTasksWaitingTermination+0x58>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa4 <prvCheckTasksWaitingTermination+0x58>)
 8005a7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a7e:	f000 ff03 	bl	8006888 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f810 	bl	8005aa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a88:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <prvCheckTasksWaitingTermination+0x58>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e1      	bne.n	8005a54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000dac 	.word	0x20000dac
 8005aa0:	20000dd8 	.word	0x20000dd8
 8005aa4:	20000dc0 	.word	0x20000dc0

08005aa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3354      	adds	r3, #84	@ 0x54
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f001 fbeb 	bl	8007290 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d108      	bne.n	8005ad6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 f8a3 	bl	8006c14 <vPortFree>
				vPortFree( pxTCB );
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f001 f8a0 	bl	8006c14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ad4:	e01b      	b.n	8005b0e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d103      	bne.n	8005ae8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f001 f897 	bl	8006c14 <vPortFree>
	}
 8005ae6:	e012      	b.n	8005b0e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d00d      	beq.n	8005b0e <prvDeleteTCB+0x66>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af6:	b672      	cpsid	i
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	b662      	cpsie	i
 8005b06:	60fb      	str	r3, [r7, #12]
}
 8005b08:	bf00      	nop
 8005b0a:	bf00      	nop
 8005b0c:	e7fd      	b.n	8005b0a <prvDeleteTCB+0x62>
	}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b50 <prvResetNextTaskUnblockTime+0x38>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b28:	4b0a      	ldr	r3, [pc, #40]	@ (8005b54 <prvResetNextTaskUnblockTime+0x3c>)
 8005b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b30:	e008      	b.n	8005b44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b32:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <prvResetNextTaskUnblockTime+0x38>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	4a04      	ldr	r2, [pc, #16]	@ (8005b54 <prvResetNextTaskUnblockTime+0x3c>)
 8005b42:	6013      	str	r3, [r2, #0]
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	20000d90 	.word	0x20000d90
 8005b54:	20000df8 	.word	0x20000df8

08005b58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b8c <xTaskGetSchedulerState+0x34>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d102      	bne.n	8005b6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b66:	2301      	movs	r3, #1
 8005b68:	607b      	str	r3, [r7, #4]
 8005b6a:	e008      	b.n	8005b7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b6c:	4b08      	ldr	r3, [pc, #32]	@ (8005b90 <xTaskGetSchedulerState+0x38>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d102      	bne.n	8005b7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b74:	2302      	movs	r3, #2
 8005b76:	607b      	str	r3, [r7, #4]
 8005b78:	e001      	b.n	8005b7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b7e:	687b      	ldr	r3, [r7, #4]
	}
 8005b80:	4618      	mov	r0, r3
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	20000de4 	.word	0x20000de4
 8005b90:	20000e00 	.word	0x20000e00

08005b94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d051      	beq.n	8005c4e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bae:	4b2a      	ldr	r3, [pc, #168]	@ (8005c58 <xTaskPriorityInherit+0xc4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d241      	bcs.n	8005c3c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	db06      	blt.n	8005bce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc0:	4b25      	ldr	r3, [pc, #148]	@ (8005c58 <xTaskPriorityInherit+0xc4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6959      	ldr	r1, [r3, #20]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4a1f      	ldr	r2, [pc, #124]	@ (8005c5c <xTaskPriorityInherit+0xc8>)
 8005be0:	4413      	add	r3, r2
 8005be2:	4299      	cmp	r1, r3
 8005be4:	d122      	bne.n	8005c2c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fa84 	bl	80040f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bf0:	4b19      	ldr	r3, [pc, #100]	@ (8005c58 <xTaskPriorityInherit+0xc4>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bfe:	4b18      	ldr	r3, [pc, #96]	@ (8005c60 <xTaskPriorityInherit+0xcc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d903      	bls.n	8005c0e <xTaskPriorityInherit+0x7a>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0a:	4a15      	ldr	r2, [pc, #84]	@ (8005c60 <xTaskPriorityInherit+0xcc>)
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4a10      	ldr	r2, [pc, #64]	@ (8005c5c <xTaskPriorityInherit+0xc8>)
 8005c1c:	441a      	add	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	3304      	adds	r3, #4
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f7fe fa0a 	bl	800403e <vListInsertEnd>
 8005c2a:	e004      	b.n	8005c36 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c58 <xTaskPriorityInherit+0xc4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005c36:	2301      	movs	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	e008      	b.n	8005c4e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c40:	4b05      	ldr	r3, [pc, #20]	@ (8005c58 <xTaskPriorityInherit+0xc4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d201      	bcs.n	8005c4e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
	}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000904 	.word	0x20000904
 8005c5c:	20000908 	.word	0x20000908
 8005c60:	20000de0 	.word	0x20000de0

08005c64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d05c      	beq.n	8005d34 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c7a:	4b31      	ldr	r3, [pc, #196]	@ (8005d40 <xTaskPriorityDisinherit+0xdc>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d00d      	beq.n	8005ca0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c88:	b672      	cpsid	i
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	b662      	cpsie	i
 8005c98:	60fb      	str	r3, [r7, #12]
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	e7fd      	b.n	8005c9c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10d      	bne.n	8005cc4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cac:	b672      	cpsid	i
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	b662      	cpsie	i
 8005cbc:	60bb      	str	r3, [r7, #8]
}
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	e7fd      	b.n	8005cc0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cc8:	1e5a      	subs	r2, r3, #1
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d02c      	beq.n	8005d34 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d128      	bne.n	8005d34 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fe fa06 	bl	80040f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d04:	4b0f      	ldr	r3, [pc, #60]	@ (8005d44 <xTaskPriorityDisinherit+0xe0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d903      	bls.n	8005d14 <xTaskPriorityDisinherit+0xb0>
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	4a0c      	ldr	r2, [pc, #48]	@ (8005d44 <xTaskPriorityDisinherit+0xe0>)
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4a09      	ldr	r2, [pc, #36]	@ (8005d48 <xTaskPriorityDisinherit+0xe4>)
 8005d22:	441a      	add	r2, r3
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	f7fe f987 	bl	800403e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d30:	2301      	movs	r3, #1
 8005d32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d34:	697b      	ldr	r3, [r7, #20]
	}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000904 	.word	0x20000904
 8005d44:	20000de0 	.word	0x20000de0
 8005d48:	20000908 	.word	0x20000908

08005d4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d070      	beq.n	8005e46 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10d      	bne.n	8005d88 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	b672      	cpsid	i
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	b662      	cpsie	i
 8005d80:	60fb      	str	r3, [r7, #12]
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	e7fd      	b.n	8005d84 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d902      	bls.n	8005d98 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	e002      	b.n	8005d9e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d9c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d04e      	beq.n	8005e46 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d149      	bne.n	8005e46 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005db2:	4b27      	ldr	r3, [pc, #156]	@ (8005e50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d10d      	bne.n	8005dd8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	b672      	cpsid	i
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	b662      	cpsie	i
 8005dd0:	60bb      	str	r3, [r7, #8]
}
 8005dd2:	bf00      	nop
 8005dd4:	bf00      	nop
 8005dd6:	e7fd      	b.n	8005dd4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ddc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	db04      	blt.n	8005df6 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	6959      	ldr	r1, [r3, #20]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4a13      	ldr	r2, [pc, #76]	@ (8005e54 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005e06:	4413      	add	r3, r2
 8005e08:	4299      	cmp	r1, r3
 8005e0a:	d11c      	bne.n	8005e46 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fe f971 	bl	80040f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d903      	bls.n	8005e2a <vTaskPriorityDisinheritAfterTimeout+0xde>
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e26:	4a0c      	ldr	r2, [pc, #48]	@ (8005e58 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4a07      	ldr	r2, [pc, #28]	@ (8005e54 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005e38:	441a      	add	r2, r3
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f7fe f8fc 	bl	800403e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e46:	bf00      	nop
 8005e48:	3720      	adds	r7, #32
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000904 	.word	0x20000904
 8005e54:	20000908 	.word	0x20000908
 8005e58:	20000de0 	.word	0x20000de0

08005e5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e60:	4b07      	ldr	r3, [pc, #28]	@ (8005e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d004      	beq.n	8005e72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e68:	4b05      	ldr	r3, [pc, #20]	@ (8005e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e6e:	3201      	adds	r2, #1
 8005e70:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005e72:	4b03      	ldr	r3, [pc, #12]	@ (8005e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e74:	681b      	ldr	r3, [r3, #0]
	}
 8005e76:	4618      	mov	r0, r3
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	20000904 	.word	0x20000904

08005e84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e8e:	4b21      	ldr	r3, [pc, #132]	@ (8005f14 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e94:	4b20      	ldr	r3, [pc, #128]	@ (8005f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe f92c 	bl	80040f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d10a      	bne.n	8005ebe <prvAddCurrentTaskToDelayedList+0x3a>
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d007      	beq.n	8005ebe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eae:	4b1a      	ldr	r3, [pc, #104]	@ (8005f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4819      	ldr	r0, [pc, #100]	@ (8005f1c <prvAddCurrentTaskToDelayedList+0x98>)
 8005eb8:	f7fe f8c1 	bl	800403e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ebc:	e026      	b.n	8005f0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ec6:	4b14      	ldr	r3, [pc, #80]	@ (8005f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d209      	bcs.n	8005eea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ed6:	4b12      	ldr	r3, [pc, #72]	@ (8005f20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4b0f      	ldr	r3, [pc, #60]	@ (8005f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	f7fe f8cf 	bl	8004086 <vListInsert>
}
 8005ee8:	e010      	b.n	8005f0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eea:	4b0e      	ldr	r3, [pc, #56]	@ (8005f24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	4b0a      	ldr	r3, [pc, #40]	@ (8005f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	f7fe f8c5 	bl	8004086 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005efc:	4b0a      	ldr	r3, [pc, #40]	@ (8005f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d202      	bcs.n	8005f0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f06:	4a08      	ldr	r2, [pc, #32]	@ (8005f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6013      	str	r3, [r2, #0]
}
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000ddc 	.word	0x20000ddc
 8005f18:	20000904 	.word	0x20000904
 8005f1c:	20000dc4 	.word	0x20000dc4
 8005f20:	20000d94 	.word	0x20000d94
 8005f24:	20000d90 	.word	0x20000d90
 8005f28:	20000df8 	.word	0x20000df8

08005f2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	@ 0x28
 8005f30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f36:	f000 fb21 	bl	800657c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb4 <xTimerCreateTimerTask+0x88>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d021      	beq.n	8005f86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f4a:	1d3a      	adds	r2, r7, #4
 8005f4c:	f107 0108 	add.w	r1, r7, #8
 8005f50:	f107 030c 	add.w	r3, r7, #12
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fe f82b 	bl	8003fb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	9202      	str	r2, [sp, #8]
 8005f62:	9301      	str	r3, [sp, #4]
 8005f64:	2302      	movs	r3, #2
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	460a      	mov	r2, r1
 8005f6c:	4912      	ldr	r1, [pc, #72]	@ (8005fb8 <xTimerCreateTimerTask+0x8c>)
 8005f6e:	4813      	ldr	r0, [pc, #76]	@ (8005fbc <xTimerCreateTimerTask+0x90>)
 8005f70:	f7fe ff7a 	bl	8004e68 <xTaskCreateStatic>
 8005f74:	4603      	mov	r3, r0
 8005f76:	4a12      	ldr	r2, [pc, #72]	@ (8005fc0 <xTimerCreateTimerTask+0x94>)
 8005f78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f7a:	4b11      	ldr	r3, [pc, #68]	@ (8005fc0 <xTimerCreateTimerTask+0x94>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f82:	2301      	movs	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10d      	bne.n	8005fa8 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f90:	b672      	cpsid	i
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	b662      	cpsie	i
 8005fa0:	613b      	str	r3, [r7, #16]
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	e7fd      	b.n	8005fa4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005fa8:	697b      	ldr	r3, [r7, #20]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000e34 	.word	0x20000e34
 8005fb8:	08007f94 	.word	0x08007f94
 8005fbc:	08006105 	.word	0x08006105
 8005fc0:	20000e38 	.word	0x20000e38

08005fc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	@ 0x28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10d      	bne.n	8005ff8 <xTimerGenericCommand+0x34>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe0:	b672      	cpsid	i
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	b662      	cpsie	i
 8005ff0:	623b      	str	r3, [r7, #32]
}
 8005ff2:	bf00      	nop
 8005ff4:	bf00      	nop
 8005ff6:	e7fd      	b.n	8005ff4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ff8:	4b19      	ldr	r3, [pc, #100]	@ (8006060 <xTimerGenericCommand+0x9c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d02a      	beq.n	8006056 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b05      	cmp	r3, #5
 8006010:	dc18      	bgt.n	8006044 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006012:	f7ff fda1 	bl	8005b58 <xTaskGetSchedulerState>
 8006016:	4603      	mov	r3, r0
 8006018:	2b02      	cmp	r3, #2
 800601a:	d109      	bne.n	8006030 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800601c:	4b10      	ldr	r3, [pc, #64]	@ (8006060 <xTimerGenericCommand+0x9c>)
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	f107 0110 	add.w	r1, r7, #16
 8006024:	2300      	movs	r3, #0
 8006026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006028:	f7fe f9ea 	bl	8004400 <xQueueGenericSend>
 800602c:	6278      	str	r0, [r7, #36]	@ 0x24
 800602e:	e012      	b.n	8006056 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006030:	4b0b      	ldr	r3, [pc, #44]	@ (8006060 <xTimerGenericCommand+0x9c>)
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	f107 0110 	add.w	r1, r7, #16
 8006038:	2300      	movs	r3, #0
 800603a:	2200      	movs	r2, #0
 800603c:	f7fe f9e0 	bl	8004400 <xQueueGenericSend>
 8006040:	6278      	str	r0, [r7, #36]	@ 0x24
 8006042:	e008      	b.n	8006056 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006044:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <xTimerGenericCommand+0x9c>)
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	f107 0110 	add.w	r1, r7, #16
 800604c:	2300      	movs	r3, #0
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	f7fe fae0 	bl	8004614 <xQueueGenericSendFromISR>
 8006054:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006058:	4618      	mov	r0, r3
 800605a:	3728      	adds	r7, #40	@ 0x28
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	20000e34 	.word	0x20000e34

08006064 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b088      	sub	sp, #32
 8006068:	af02      	add	r7, sp, #8
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800606e:	4b24      	ldr	r3, [pc, #144]	@ (8006100 <prvProcessExpiredTimer+0x9c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	3304      	adds	r3, #4
 800607c:	4618      	mov	r0, r3
 800607e:	f7fe f83b 	bl	80040f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b00      	cmp	r3, #0
 800608e:	d025      	beq.n	80060dc <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	699a      	ldr	r2, [r3, #24]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	18d1      	adds	r1, r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	6978      	ldr	r0, [r7, #20]
 800609e:	f000 f8d7 	bl	8006250 <prvInsertTimerInActiveList>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d022      	beq.n	80060ee <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060a8:	2300      	movs	r3, #0
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	2300      	movs	r3, #0
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	2100      	movs	r1, #0
 80060b2:	6978      	ldr	r0, [r7, #20]
 80060b4:	f7ff ff86 	bl	8005fc4 <xTimerGenericCommand>
 80060b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d116      	bne.n	80060ee <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	b672      	cpsid	i
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	b662      	cpsie	i
 80060d4:	60fb      	str	r3, [r7, #12]
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060e2:	f023 0301 	bic.w	r3, r3, #1
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	6978      	ldr	r0, [r7, #20]
 80060f4:	4798      	blx	r3
}
 80060f6:	bf00      	nop
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000e2c 	.word	0x20000e2c

08006104 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800610c:	f107 0308 	add.w	r3, r7, #8
 8006110:	4618      	mov	r0, r3
 8006112:	f000 f859 	bl	80061c8 <prvGetNextExpireTime>
 8006116:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4619      	mov	r1, r3
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f805 	bl	800612c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006122:	f000 f8d7 	bl	80062d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006126:	bf00      	nop
 8006128:	e7f0      	b.n	800610c <prvTimerTask+0x8>
	...

0800612c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006136:	f7ff f909 	bl	800534c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	4618      	mov	r0, r3
 8006140:	f000 f866 	bl	8006210 <prvSampleTimeNow>
 8006144:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d130      	bne.n	80061ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10a      	bne.n	8006168 <prvProcessTimerOrBlockTask+0x3c>
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	429a      	cmp	r2, r3
 8006158:	d806      	bhi.n	8006168 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800615a:	f7ff f905 	bl	8005368 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff ff7f 	bl	8006064 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006166:	e024      	b.n	80061b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d008      	beq.n	8006180 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800616e:	4b13      	ldr	r3, [pc, #76]	@ (80061bc <prvProcessTimerOrBlockTask+0x90>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <prvProcessTimerOrBlockTask+0x50>
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <prvProcessTimerOrBlockTask+0x52>
 800617c:	2300      	movs	r3, #0
 800617e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006180:	4b0f      	ldr	r3, [pc, #60]	@ (80061c0 <prvProcessTimerOrBlockTask+0x94>)
 8006182:	6818      	ldr	r0, [r3, #0]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	4619      	mov	r1, r3
 800618e:	f7fe fe37 	bl	8004e00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006192:	f7ff f8e9 	bl	8005368 <xTaskResumeAll>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800619c:	4b09      	ldr	r3, [pc, #36]	@ (80061c4 <prvProcessTimerOrBlockTask+0x98>)
 800619e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	f3bf 8f6f 	isb	sy
}
 80061ac:	e001      	b.n	80061b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061ae:	f7ff f8db 	bl	8005368 <xTaskResumeAll>
}
 80061b2:	bf00      	nop
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20000e30 	.word	0x20000e30
 80061c0:	20000e34 	.word	0x20000e34
 80061c4:	e000ed04 	.word	0xe000ed04

080061c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061d0:	4b0e      	ldr	r3, [pc, #56]	@ (800620c <prvGetNextExpireTime+0x44>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <prvGetNextExpireTime+0x16>
 80061da:	2201      	movs	r2, #1
 80061dc:	e000      	b.n	80061e0 <prvGetNextExpireTime+0x18>
 80061de:	2200      	movs	r2, #0
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d105      	bne.n	80061f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061ec:	4b07      	ldr	r3, [pc, #28]	@ (800620c <prvGetNextExpireTime+0x44>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	e001      	b.n	80061fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061fc:	68fb      	ldr	r3, [r7, #12]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	20000e2c 	.word	0x20000e2c

08006210 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006218:	f7ff f946 	bl	80054a8 <xTaskGetTickCount>
 800621c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800621e:	4b0b      	ldr	r3, [pc, #44]	@ (800624c <prvSampleTimeNow+0x3c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	429a      	cmp	r2, r3
 8006226:	d205      	bcs.n	8006234 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006228:	f000 f940 	bl	80064ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e002      	b.n	800623a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800623a:	4a04      	ldr	r2, [pc, #16]	@ (800624c <prvSampleTimeNow+0x3c>)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006240:	68fb      	ldr	r3, [r7, #12]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000e3c 	.word	0x20000e3c

08006250 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800625e:	2300      	movs	r3, #0
 8006260:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d812      	bhi.n	800629c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	1ad2      	subs	r2, r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	429a      	cmp	r2, r3
 8006282:	d302      	bcc.n	800628a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006284:	2301      	movs	r3, #1
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e01b      	b.n	80062c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800628a:	4b10      	ldr	r3, [pc, #64]	@ (80062cc <prvInsertTimerInActiveList+0x7c>)
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3304      	adds	r3, #4
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f7fd fef6 	bl	8004086 <vListInsert>
 800629a:	e012      	b.n	80062c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d206      	bcs.n	80062b2 <prvInsertTimerInActiveList+0x62>
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d302      	bcc.n	80062b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062ac:	2301      	movs	r3, #1
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	e007      	b.n	80062c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062b2:	4b07      	ldr	r3, [pc, #28]	@ (80062d0 <prvInsertTimerInActiveList+0x80>)
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4619      	mov	r1, r3
 80062bc:	4610      	mov	r0, r2
 80062be:	f7fd fee2 	bl	8004086 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062c2:	697b      	ldr	r3, [r7, #20]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20000e30 	.word	0x20000e30
 80062d0:	20000e2c 	.word	0x20000e2c

080062d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08e      	sub	sp, #56	@ 0x38
 80062d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062da:	e0d4      	b.n	8006486 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	da1b      	bge.n	800631a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062e2:	1d3b      	adds	r3, r7, #4
 80062e4:	3304      	adds	r3, #4
 80062e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10d      	bne.n	800630a <prvProcessReceivedCommands+0x36>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	b672      	cpsid	i
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	b662      	cpsie	i
 8006302:	61fb      	str	r3, [r7, #28]
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	e7fd      	b.n	8006306 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800630a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006310:	6850      	ldr	r0, [r2, #4]
 8006312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006314:	6892      	ldr	r2, [r2, #8]
 8006316:	4611      	mov	r1, r2
 8006318:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f2c0 80b2 	blt.w	8006486 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d004      	beq.n	8006338 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800632e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006330:	3304      	adds	r3, #4
 8006332:	4618      	mov	r0, r3
 8006334:	f7fd fee0 	bl	80040f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006338:	463b      	mov	r3, r7
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff ff68 	bl	8006210 <prvSampleTimeNow>
 8006340:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b09      	cmp	r3, #9
 8006346:	f200 809b 	bhi.w	8006480 <prvProcessReceivedCommands+0x1ac>
 800634a:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <prvProcessReceivedCommands+0x7c>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006379 	.word	0x08006379
 8006354:	08006379 	.word	0x08006379
 8006358:	08006379 	.word	0x08006379
 800635c:	080063f3 	.word	0x080063f3
 8006360:	08006407 	.word	0x08006407
 8006364:	08006457 	.word	0x08006457
 8006368:	08006379 	.word	0x08006379
 800636c:	08006379 	.word	0x08006379
 8006370:	080063f3 	.word	0x080063f3
 8006374:	08006407 	.word	0x08006407
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800637e:	f043 0301 	orr.w	r3, r3, #1
 8006382:	b2da      	uxtb	r2, r3
 8006384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006386:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	18d1      	adds	r1, r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006398:	f7ff ff5a 	bl	8006250 <prvInsertTimerInActiveList>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d070      	beq.n	8006484 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d065      	beq.n	8006484 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	441a      	add	r2, r3
 80063c0:	2300      	movs	r3, #0
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	2300      	movs	r3, #0
 80063c6:	2100      	movs	r1, #0
 80063c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063ca:	f7ff fdfb 	bl	8005fc4 <xTimerGenericCommand>
 80063ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d156      	bne.n	8006484 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	b672      	cpsid	i
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	b662      	cpsie	i
 80063ea:	61bb      	str	r3, [r7, #24]
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	e7fd      	b.n	80063ee <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063f8:	f023 0301 	bic.w	r3, r3, #1
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006400:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006404:	e03f      	b.n	8006486 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800640c:	f043 0301 	orr.w	r3, r3, #1
 8006410:	b2da      	uxtb	r2, r3
 8006412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006414:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800641e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10d      	bne.n	8006442 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642a:	b672      	cpsid	i
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	b662      	cpsie	i
 800643a:	617b      	str	r3, [r7, #20]
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	e7fd      	b.n	800643e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	18d1      	adds	r1, r2, r3
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800644e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006450:	f7ff fefe 	bl	8006250 <prvInsertTimerInActiveList>
					break;
 8006454:	e017      	b.n	8006486 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006458:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d103      	bne.n	800646c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8006464:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006466:	f000 fbd5 	bl	8006c14 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800646a:	e00c      	b.n	8006486 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800646c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006472:	f023 0301 	bic.w	r3, r3, #1
 8006476:	b2da      	uxtb	r2, r3
 8006478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800647e:	e002      	b.n	8006486 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8006480:	bf00      	nop
 8006482:	e000      	b.n	8006486 <prvProcessReceivedCommands+0x1b2>
					break;
 8006484:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006486:	4b08      	ldr	r3, [pc, #32]	@ (80064a8 <prvProcessReceivedCommands+0x1d4>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	1d39      	adds	r1, r7, #4
 800648c:	2200      	movs	r2, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe f964 	bl	800475c <xQueueReceive>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	f47f af20 	bne.w	80062dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800649c:	bf00      	nop
 800649e:	bf00      	nop
 80064a0:	3730      	adds	r7, #48	@ 0x30
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20000e34 	.word	0x20000e34

080064ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064b2:	e04b      	b.n	800654c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064b4:	4b2f      	ldr	r3, [pc, #188]	@ (8006574 <prvSwitchTimerLists+0xc8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064be:	4b2d      	ldr	r3, [pc, #180]	@ (8006574 <prvSwitchTimerLists+0xc8>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fd fe13 	bl	80040f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d031      	beq.n	800654c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4413      	add	r3, r2
 80064f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d90e      	bls.n	8006518 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006506:	4b1b      	ldr	r3, [pc, #108]	@ (8006574 <prvSwitchTimerLists+0xc8>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f7fd fdb8 	bl	8004086 <vListInsert>
 8006516:	e019      	b.n	800654c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006518:	2300      	movs	r3, #0
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	2300      	movs	r3, #0
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	2100      	movs	r1, #0
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff fd4e 	bl	8005fc4 <xTimerGenericCommand>
 8006528:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10d      	bne.n	800654c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006534:	b672      	cpsid	i
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	b662      	cpsie	i
 8006544:	603b      	str	r3, [r7, #0]
}
 8006546:	bf00      	nop
 8006548:	bf00      	nop
 800654a:	e7fd      	b.n	8006548 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800654c:	4b09      	ldr	r3, [pc, #36]	@ (8006574 <prvSwitchTimerLists+0xc8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1ae      	bne.n	80064b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006556:	4b07      	ldr	r3, [pc, #28]	@ (8006574 <prvSwitchTimerLists+0xc8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800655c:	4b06      	ldr	r3, [pc, #24]	@ (8006578 <prvSwitchTimerLists+0xcc>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a04      	ldr	r2, [pc, #16]	@ (8006574 <prvSwitchTimerLists+0xc8>)
 8006562:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006564:	4a04      	ldr	r2, [pc, #16]	@ (8006578 <prvSwitchTimerLists+0xcc>)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6013      	str	r3, [r2, #0]
}
 800656a:	bf00      	nop
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000e2c 	.word	0x20000e2c
 8006578:	20000e30 	.word	0x20000e30

0800657c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006582:	f000 f94b 	bl	800681c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006586:	4b15      	ldr	r3, [pc, #84]	@ (80065dc <prvCheckForValidListAndQueue+0x60>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d120      	bne.n	80065d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800658e:	4814      	ldr	r0, [pc, #80]	@ (80065e0 <prvCheckForValidListAndQueue+0x64>)
 8006590:	f7fd fd28 	bl	8003fe4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006594:	4813      	ldr	r0, [pc, #76]	@ (80065e4 <prvCheckForValidListAndQueue+0x68>)
 8006596:	f7fd fd25 	bl	8003fe4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800659a:	4b13      	ldr	r3, [pc, #76]	@ (80065e8 <prvCheckForValidListAndQueue+0x6c>)
 800659c:	4a10      	ldr	r2, [pc, #64]	@ (80065e0 <prvCheckForValidListAndQueue+0x64>)
 800659e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065a0:	4b12      	ldr	r3, [pc, #72]	@ (80065ec <prvCheckForValidListAndQueue+0x70>)
 80065a2:	4a10      	ldr	r2, [pc, #64]	@ (80065e4 <prvCheckForValidListAndQueue+0x68>)
 80065a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065a6:	2300      	movs	r3, #0
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	4b11      	ldr	r3, [pc, #68]	@ (80065f0 <prvCheckForValidListAndQueue+0x74>)
 80065ac:	4a11      	ldr	r2, [pc, #68]	@ (80065f4 <prvCheckForValidListAndQueue+0x78>)
 80065ae:	2110      	movs	r1, #16
 80065b0:	200a      	movs	r0, #10
 80065b2:	f7fd fe37 	bl	8004224 <xQueueGenericCreateStatic>
 80065b6:	4603      	mov	r3, r0
 80065b8:	4a08      	ldr	r2, [pc, #32]	@ (80065dc <prvCheckForValidListAndQueue+0x60>)
 80065ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065bc:	4b07      	ldr	r3, [pc, #28]	@ (80065dc <prvCheckForValidListAndQueue+0x60>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d005      	beq.n	80065d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065c4:	4b05      	ldr	r3, [pc, #20]	@ (80065dc <prvCheckForValidListAndQueue+0x60>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	490b      	ldr	r1, [pc, #44]	@ (80065f8 <prvCheckForValidListAndQueue+0x7c>)
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe fbee 	bl	8004dac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065d0:	f000 f95a 	bl	8006888 <vPortExitCritical>
}
 80065d4:	bf00      	nop
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000e34 	.word	0x20000e34
 80065e0:	20000e04 	.word	0x20000e04
 80065e4:	20000e18 	.word	0x20000e18
 80065e8:	20000e2c 	.word	0x20000e2c
 80065ec:	20000e30 	.word	0x20000e30
 80065f0:	20000ee0 	.word	0x20000ee0
 80065f4:	20000e40 	.word	0x20000e40
 80065f8:	08007f9c 	.word	0x08007f9c

080065fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3b04      	subs	r3, #4
 800660c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3b04      	subs	r3, #4
 800661a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	f023 0201 	bic.w	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3b04      	subs	r3, #4
 800662a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800662c:	4a0c      	ldr	r2, [pc, #48]	@ (8006660 <pxPortInitialiseStack+0x64>)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3b14      	subs	r3, #20
 8006636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3b04      	subs	r3, #4
 8006642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f06f 0202 	mvn.w	r2, #2
 800664a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3b20      	subs	r3, #32
 8006650:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006652:	68fb      	ldr	r3, [r7, #12]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	08006665 	.word	0x08006665

08006664 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800666e:	4b15      	ldr	r3, [pc, #84]	@ (80066c4 <prvTaskExitError+0x60>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d00d      	beq.n	8006694 <prvTaskExitError+0x30>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667c:	b672      	cpsid	i
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	b662      	cpsie	i
 800668c:	60fb      	str	r3, [r7, #12]
}
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	e7fd      	b.n	8006690 <prvTaskExitError+0x2c>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006698:	b672      	cpsid	i
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	b662      	cpsie	i
 80066a8:	60bb      	str	r3, [r7, #8]
}
 80066aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066ac:	bf00      	nop
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0fc      	beq.n	80066ae <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	2000000c 	.word	0x2000000c
	...

080066d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066d0:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <pxCurrentTCBConst2>)
 80066d2:	6819      	ldr	r1, [r3, #0]
 80066d4:	6808      	ldr	r0, [r1, #0]
 80066d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066da:	f380 8809 	msr	PSP, r0
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f04f 0000 	mov.w	r0, #0
 80066e6:	f380 8811 	msr	BASEPRI, r0
 80066ea:	4770      	bx	lr
 80066ec:	f3af 8000 	nop.w

080066f0 <pxCurrentTCBConst2>:
 80066f0:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop

080066f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066f8:	4808      	ldr	r0, [pc, #32]	@ (800671c <prvPortStartFirstTask+0x24>)
 80066fa:	6800      	ldr	r0, [r0, #0]
 80066fc:	6800      	ldr	r0, [r0, #0]
 80066fe:	f380 8808 	msr	MSP, r0
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8814 	msr	CONTROL, r0
 800670a:	b662      	cpsie	i
 800670c:	b661      	cpsie	f
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	df00      	svc	0
 8006718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800671a:	bf00      	nop
 800671c:	e000ed08 	.word	0xe000ed08

08006720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006726:	4b37      	ldr	r3, [pc, #220]	@ (8006804 <xPortStartScheduler+0xe4>)
 8006728:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	b2db      	uxtb	r3, r3
 8006730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	22ff      	movs	r2, #255	@ 0xff
 8006736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006748:	b2da      	uxtb	r2, r3
 800674a:	4b2f      	ldr	r3, [pc, #188]	@ (8006808 <xPortStartScheduler+0xe8>)
 800674c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800674e:	4b2f      	ldr	r3, [pc, #188]	@ (800680c <xPortStartScheduler+0xec>)
 8006750:	2207      	movs	r2, #7
 8006752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006754:	e009      	b.n	800676a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006756:	4b2d      	ldr	r3, [pc, #180]	@ (800680c <xPortStartScheduler+0xec>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3b01      	subs	r3, #1
 800675c:	4a2b      	ldr	r2, [pc, #172]	@ (800680c <xPortStartScheduler+0xec>)
 800675e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	b2db      	uxtb	r3, r3
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	b2db      	uxtb	r3, r3
 8006768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006772:	2b80      	cmp	r3, #128	@ 0x80
 8006774:	d0ef      	beq.n	8006756 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006776:	4b25      	ldr	r3, [pc, #148]	@ (800680c <xPortStartScheduler+0xec>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f1c3 0307 	rsb	r3, r3, #7
 800677e:	2b04      	cmp	r3, #4
 8006780:	d00d      	beq.n	800679e <xPortStartScheduler+0x7e>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006786:	b672      	cpsid	i
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	b662      	cpsie	i
 8006796:	60bb      	str	r3, [r7, #8]
}
 8006798:	bf00      	nop
 800679a:	bf00      	nop
 800679c:	e7fd      	b.n	800679a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800679e:	4b1b      	ldr	r3, [pc, #108]	@ (800680c <xPortStartScheduler+0xec>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	4a19      	ldr	r2, [pc, #100]	@ (800680c <xPortStartScheduler+0xec>)
 80067a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067a8:	4b18      	ldr	r3, [pc, #96]	@ (800680c <xPortStartScheduler+0xec>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067b0:	4a16      	ldr	r2, [pc, #88]	@ (800680c <xPortStartScheduler+0xec>)
 80067b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067bc:	4b14      	ldr	r3, [pc, #80]	@ (8006810 <xPortStartScheduler+0xf0>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a13      	ldr	r2, [pc, #76]	@ (8006810 <xPortStartScheduler+0xf0>)
 80067c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067c8:	4b11      	ldr	r3, [pc, #68]	@ (8006810 <xPortStartScheduler+0xf0>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a10      	ldr	r2, [pc, #64]	@ (8006810 <xPortStartScheduler+0xf0>)
 80067ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80067d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067d4:	f000 f8dc 	bl	8006990 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006814 <xPortStartScheduler+0xf4>)
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067de:	f000 f8fb 	bl	80069d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006818 <xPortStartScheduler+0xf8>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006818 <xPortStartScheduler+0xf8>)
 80067e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80067ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067ee:	f7ff ff83 	bl	80066f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067f2:	f7fe ff25 	bl	8005640 <vTaskSwitchContext>
	prvTaskExitError();
 80067f6:	f7ff ff35 	bl	8006664 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	e000e400 	.word	0xe000e400
 8006808:	20000f30 	.word	0x20000f30
 800680c:	20000f34 	.word	0x20000f34
 8006810:	e000ed20 	.word	0xe000ed20
 8006814:	2000000c 	.word	0x2000000c
 8006818:	e000ef34 	.word	0xe000ef34

0800681c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006826:	b672      	cpsid	i
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	b662      	cpsie	i
 8006836:	607b      	str	r3, [r7, #4]
}
 8006838:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800683a:	4b11      	ldr	r3, [pc, #68]	@ (8006880 <vPortEnterCritical+0x64>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3301      	adds	r3, #1
 8006840:	4a0f      	ldr	r2, [pc, #60]	@ (8006880 <vPortEnterCritical+0x64>)
 8006842:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006844:	4b0e      	ldr	r3, [pc, #56]	@ (8006880 <vPortEnterCritical+0x64>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d112      	bne.n	8006872 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800684c:	4b0d      	ldr	r3, [pc, #52]	@ (8006884 <vPortEnterCritical+0x68>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00d      	beq.n	8006872 <vPortEnterCritical+0x56>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685a:	b672      	cpsid	i
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	b662      	cpsie	i
 800686a:	603b      	str	r3, [r7, #0]
}
 800686c:	bf00      	nop
 800686e:	bf00      	nop
 8006870:	e7fd      	b.n	800686e <vPortEnterCritical+0x52>
	}
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	2000000c 	.word	0x2000000c
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800688e:	4b13      	ldr	r3, [pc, #76]	@ (80068dc <vPortExitCritical+0x54>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10d      	bne.n	80068b2 <vPortExitCritical+0x2a>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689a:	b672      	cpsid	i
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	b662      	cpsie	i
 80068aa:	607b      	str	r3, [r7, #4]
}
 80068ac:	bf00      	nop
 80068ae:	bf00      	nop
 80068b0:	e7fd      	b.n	80068ae <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80068b2:	4b0a      	ldr	r3, [pc, #40]	@ (80068dc <vPortExitCritical+0x54>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	4a08      	ldr	r2, [pc, #32]	@ (80068dc <vPortExitCritical+0x54>)
 80068ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068bc:	4b07      	ldr	r3, [pc, #28]	@ (80068dc <vPortExitCritical+0x54>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d105      	bne.n	80068d0 <vPortExitCritical+0x48>
 80068c4:	2300      	movs	r3, #0
 80068c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	f383 8811 	msr	BASEPRI, r3
}
 80068ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	2000000c 	.word	0x2000000c

080068e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068e0:	f3ef 8009 	mrs	r0, PSP
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	4b15      	ldr	r3, [pc, #84]	@ (8006940 <pxCurrentTCBConst>)
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	f01e 0f10 	tst.w	lr, #16
 80068f0:	bf08      	it	eq
 80068f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fa:	6010      	str	r0, [r2, #0]
 80068fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006900:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006904:	b672      	cpsid	i
 8006906:	f380 8811 	msr	BASEPRI, r0
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	b662      	cpsie	i
 8006914:	f7fe fe94 	bl	8005640 <vTaskSwitchContext>
 8006918:	f04f 0000 	mov.w	r0, #0
 800691c:	f380 8811 	msr	BASEPRI, r0
 8006920:	bc09      	pop	{r0, r3}
 8006922:	6819      	ldr	r1, [r3, #0]
 8006924:	6808      	ldr	r0, [r1, #0]
 8006926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692a:	f01e 0f10 	tst.w	lr, #16
 800692e:	bf08      	it	eq
 8006930:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006934:	f380 8809 	msr	PSP, r0
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop

08006940 <pxCurrentTCBConst>:
 8006940:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006944:	bf00      	nop
 8006946:	bf00      	nop

08006948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006952:	b672      	cpsid	i
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	b662      	cpsie	i
 8006962:	607b      	str	r3, [r7, #4]
}
 8006964:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006966:	f7fe fdaf 	bl	80054c8 <xTaskIncrementTick>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006970:	4b06      	ldr	r3, [pc, #24]	@ (800698c <SysTick_Handler+0x44>)
 8006972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	2300      	movs	r3, #0
 800697a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	f383 8811 	msr	BASEPRI, r3
}
 8006982:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006994:	4b0b      	ldr	r3, [pc, #44]	@ (80069c4 <vPortSetupTimerInterrupt+0x34>)
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800699a:	4b0b      	ldr	r3, [pc, #44]	@ (80069c8 <vPortSetupTimerInterrupt+0x38>)
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069a0:	4b0a      	ldr	r3, [pc, #40]	@ (80069cc <vPortSetupTimerInterrupt+0x3c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a0a      	ldr	r2, [pc, #40]	@ (80069d0 <vPortSetupTimerInterrupt+0x40>)
 80069a6:	fba2 2303 	umull	r2, r3, r2, r3
 80069aa:	099b      	lsrs	r3, r3, #6
 80069ac:	4a09      	ldr	r2, [pc, #36]	@ (80069d4 <vPortSetupTimerInterrupt+0x44>)
 80069ae:	3b01      	subs	r3, #1
 80069b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069b2:	4b04      	ldr	r3, [pc, #16]	@ (80069c4 <vPortSetupTimerInterrupt+0x34>)
 80069b4:	2207      	movs	r2, #7
 80069b6:	601a      	str	r2, [r3, #0]
}
 80069b8:	bf00      	nop
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	e000e010 	.word	0xe000e010
 80069c8:	e000e018 	.word	0xe000e018
 80069cc:	20000000 	.word	0x20000000
 80069d0:	10624dd3 	.word	0x10624dd3
 80069d4:	e000e014 	.word	0xe000e014

080069d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069d8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80069e8 <vPortEnableVFP+0x10>
 80069dc:	6801      	ldr	r1, [r0, #0]
 80069de:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80069e2:	6001      	str	r1, [r0, #0]
 80069e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069e6:	bf00      	nop
 80069e8:	e000ed88 	.word	0xe000ed88

080069ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069f2:	f3ef 8305 	mrs	r3, IPSR
 80069f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b0f      	cmp	r3, #15
 80069fc:	d917      	bls.n	8006a2e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006a68 <vPortValidateInterruptPriority+0x7c>)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a08:	4b18      	ldr	r3, [pc, #96]	@ (8006a6c <vPortValidateInterruptPriority+0x80>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	7afa      	ldrb	r2, [r7, #11]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d20d      	bcs.n	8006a2e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a16:	b672      	cpsid	i
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	b662      	cpsie	i
 8006a26:	607b      	str	r3, [r7, #4]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a2e:	4b10      	ldr	r3, [pc, #64]	@ (8006a70 <vPortValidateInterruptPriority+0x84>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a36:	4b0f      	ldr	r3, [pc, #60]	@ (8006a74 <vPortValidateInterruptPriority+0x88>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d90d      	bls.n	8006a5a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a42:	b672      	cpsid	i
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	b662      	cpsie	i
 8006a52:	603b      	str	r3, [r7, #0]
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop
 8006a58:	e7fd      	b.n	8006a56 <vPortValidateInterruptPriority+0x6a>
	}
 8006a5a:	bf00      	nop
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	e000e3f0 	.word	0xe000e3f0
 8006a6c:	20000f30 	.word	0x20000f30
 8006a70:	e000ed0c 	.word	0xe000ed0c
 8006a74:	20000f34 	.word	0x20000f34

08006a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08a      	sub	sp, #40	@ 0x28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a84:	f7fe fc62 	bl	800534c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a88:	4b5d      	ldr	r3, [pc, #372]	@ (8006c00 <pvPortMalloc+0x188>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d101      	bne.n	8006a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a90:	f000 f920 	bl	8006cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a94:	4b5b      	ldr	r3, [pc, #364]	@ (8006c04 <pvPortMalloc+0x18c>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f040 8094 	bne.w	8006bca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d020      	beq.n	8006aea <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4413      	add	r3, r2
 8006aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d017      	beq.n	8006aea <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f023 0307 	bic.w	r3, r3, #7
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00d      	beq.n	8006aea <pvPortMalloc+0x72>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad2:	b672      	cpsid	i
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	b662      	cpsie	i
 8006ae2:	617b      	str	r3, [r7, #20]
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	e7fd      	b.n	8006ae6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d06c      	beq.n	8006bca <pvPortMalloc+0x152>
 8006af0:	4b45      	ldr	r3, [pc, #276]	@ (8006c08 <pvPortMalloc+0x190>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d867      	bhi.n	8006bca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006afa:	4b44      	ldr	r3, [pc, #272]	@ (8006c0c <pvPortMalloc+0x194>)
 8006afc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006afe:	4b43      	ldr	r3, [pc, #268]	@ (8006c0c <pvPortMalloc+0x194>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b04:	e004      	b.n	8006b10 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d903      	bls.n	8006b22 <pvPortMalloc+0xaa>
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1f1      	bne.n	8006b06 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b22:	4b37      	ldr	r3, [pc, #220]	@ (8006c00 <pvPortMalloc+0x188>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d04e      	beq.n	8006bca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2208      	movs	r2, #8
 8006b32:	4413      	add	r3, r2
 8006b34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	1ad2      	subs	r2, r2, r3
 8006b46:	2308      	movs	r3, #8
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d922      	bls.n	8006b94 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4413      	add	r3, r2
 8006b54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00d      	beq.n	8006b7c <pvPortMalloc+0x104>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b64:	b672      	cpsid	i
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	b662      	cpsie	i
 8006b74:	613b      	str	r3, [r7, #16]
}
 8006b76:	bf00      	nop
 8006b78:	bf00      	nop
 8006b7a:	e7fd      	b.n	8006b78 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	1ad2      	subs	r2, r2, r3
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b8e:	69b8      	ldr	r0, [r7, #24]
 8006b90:	f000 f902 	bl	8006d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b94:	4b1c      	ldr	r3, [pc, #112]	@ (8006c08 <pvPortMalloc+0x190>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8006c08 <pvPortMalloc+0x190>)
 8006ba0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ba2:	4b19      	ldr	r3, [pc, #100]	@ (8006c08 <pvPortMalloc+0x190>)
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8006c10 <pvPortMalloc+0x198>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d203      	bcs.n	8006bb6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bae:	4b16      	ldr	r3, [pc, #88]	@ (8006c08 <pvPortMalloc+0x190>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a17      	ldr	r2, [pc, #92]	@ (8006c10 <pvPortMalloc+0x198>)
 8006bb4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	4b12      	ldr	r3, [pc, #72]	@ (8006c04 <pvPortMalloc+0x18c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bca:	f7fe fbcd 	bl	8005368 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00d      	beq.n	8006bf4 <pvPortMalloc+0x17c>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bdc:	b672      	cpsid	i
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	b662      	cpsie	i
 8006bec:	60fb      	str	r3, [r7, #12]
}
 8006bee:	bf00      	nop
 8006bf0:	bf00      	nop
 8006bf2:	e7fd      	b.n	8006bf0 <pvPortMalloc+0x178>
	return pvReturn;
 8006bf4:	69fb      	ldr	r3, [r7, #28]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3728      	adds	r7, #40	@ 0x28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20004b40 	.word	0x20004b40
 8006c04:	20004b4c 	.word	0x20004b4c
 8006c08:	20004b44 	.word	0x20004b44
 8006c0c:	20004b38 	.word	0x20004b38
 8006c10:	20004b48 	.word	0x20004b48

08006c14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d04e      	beq.n	8006cc4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c26:	2308      	movs	r3, #8
 8006c28:	425b      	negs	r3, r3
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	4b24      	ldr	r3, [pc, #144]	@ (8006ccc <vPortFree+0xb8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10d      	bne.n	8006c5e <vPortFree+0x4a>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c46:	b672      	cpsid	i
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	b662      	cpsie	i
 8006c56:	60fb      	str	r3, [r7, #12]
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	e7fd      	b.n	8006c5a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00d      	beq.n	8006c82 <vPortFree+0x6e>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6a:	b672      	cpsid	i
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	b662      	cpsie	i
 8006c7a:	60bb      	str	r3, [r7, #8]
}
 8006c7c:	bf00      	nop
 8006c7e:	bf00      	nop
 8006c80:	e7fd      	b.n	8006c7e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	4b11      	ldr	r3, [pc, #68]	@ (8006ccc <vPortFree+0xb8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d019      	beq.n	8006cc4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d115      	bne.n	8006cc4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006ccc <vPortFree+0xb8>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	43db      	mvns	r3, r3
 8006ca2:	401a      	ands	r2, r3
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ca8:	f7fe fb50 	bl	800534c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	4b07      	ldr	r3, [pc, #28]	@ (8006cd0 <vPortFree+0xbc>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	4a06      	ldr	r2, [pc, #24]	@ (8006cd0 <vPortFree+0xbc>)
 8006cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cba:	6938      	ldr	r0, [r7, #16]
 8006cbc:	f000 f86c 	bl	8006d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006cc0:	f7fe fb52 	bl	8005368 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cc4:	bf00      	nop
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	20004b4c 	.word	0x20004b4c
 8006cd0:	20004b44 	.word	0x20004b44

08006cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cda:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ce0:	4b27      	ldr	r3, [pc, #156]	@ (8006d80 <prvHeapInit+0xac>)
 8006ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00c      	beq.n	8006d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3307      	adds	r3, #7
 8006cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0307 	bic.w	r3, r3, #7
 8006cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	4a1f      	ldr	r2, [pc, #124]	@ (8006d80 <prvHeapInit+0xac>)
 8006d04:	4413      	add	r3, r2
 8006d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006d84 <prvHeapInit+0xb0>)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d12:	4b1c      	ldr	r3, [pc, #112]	@ (8006d84 <prvHeapInit+0xb0>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d20:	2208      	movs	r2, #8
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1a9b      	subs	r3, r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0307 	bic.w	r3, r3, #7
 8006d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4a15      	ldr	r2, [pc, #84]	@ (8006d88 <prvHeapInit+0xb4>)
 8006d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d36:	4b14      	ldr	r3, [pc, #80]	@ (8006d88 <prvHeapInit+0xb4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d3e:	4b12      	ldr	r3, [pc, #72]	@ (8006d88 <prvHeapInit+0xb4>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	1ad2      	subs	r2, r2, r3
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d54:	4b0c      	ldr	r3, [pc, #48]	@ (8006d88 <prvHeapInit+0xb4>)
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	4a0a      	ldr	r2, [pc, #40]	@ (8006d8c <prvHeapInit+0xb8>)
 8006d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	4a09      	ldr	r2, [pc, #36]	@ (8006d90 <prvHeapInit+0xbc>)
 8006d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d6c:	4b09      	ldr	r3, [pc, #36]	@ (8006d94 <prvHeapInit+0xc0>)
 8006d6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d72:	601a      	str	r2, [r3, #0]
}
 8006d74:	bf00      	nop
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	20000f38 	.word	0x20000f38
 8006d84:	20004b38 	.word	0x20004b38
 8006d88:	20004b40 	.word	0x20004b40
 8006d8c:	20004b48 	.word	0x20004b48
 8006d90:	20004b44 	.word	0x20004b44
 8006d94:	20004b4c 	.word	0x20004b4c

08006d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006da0:	4b28      	ldr	r3, [pc, #160]	@ (8006e44 <prvInsertBlockIntoFreeList+0xac>)
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e002      	b.n	8006dac <prvInsertBlockIntoFreeList+0x14>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d8f7      	bhi.n	8006da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d108      	bne.n	8006dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	441a      	add	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	441a      	add	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d118      	bne.n	8006e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	4b15      	ldr	r3, [pc, #84]	@ (8006e48 <prvInsertBlockIntoFreeList+0xb0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d00d      	beq.n	8006e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	441a      	add	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	e008      	b.n	8006e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e16:	4b0c      	ldr	r3, [pc, #48]	@ (8006e48 <prvInsertBlockIntoFreeList+0xb0>)
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	e003      	b.n	8006e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d002      	beq.n	8006e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e36:	bf00      	nop
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	20004b38 	.word	0x20004b38
 8006e48:	20004b40 	.word	0x20004b40

08006e4c <std>:
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	b510      	push	{r4, lr}
 8006e50:	4604      	mov	r4, r0
 8006e52:	e9c0 3300 	strd	r3, r3, [r0]
 8006e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e5a:	6083      	str	r3, [r0, #8]
 8006e5c:	8181      	strh	r1, [r0, #12]
 8006e5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e60:	81c2      	strh	r2, [r0, #14]
 8006e62:	6183      	str	r3, [r0, #24]
 8006e64:	4619      	mov	r1, r3
 8006e66:	2208      	movs	r2, #8
 8006e68:	305c      	adds	r0, #92	@ 0x5c
 8006e6a:	f000 f9f9 	bl	8007260 <memset>
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <std+0x58>)
 8006e70:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea8 <std+0x5c>)
 8006e74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e76:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <std+0x60>)
 8006e78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb0 <std+0x64>)
 8006e7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb4 <std+0x68>)
 8006e80:	6224      	str	r4, [r4, #32]
 8006e82:	429c      	cmp	r4, r3
 8006e84:	d006      	beq.n	8006e94 <std+0x48>
 8006e86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e8a:	4294      	cmp	r4, r2
 8006e8c:	d002      	beq.n	8006e94 <std+0x48>
 8006e8e:	33d0      	adds	r3, #208	@ 0xd0
 8006e90:	429c      	cmp	r4, r3
 8006e92:	d105      	bne.n	8006ea0 <std+0x54>
 8006e94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e9c:	f000 baae 	b.w	80073fc <__retarget_lock_init_recursive>
 8006ea0:	bd10      	pop	{r4, pc}
 8006ea2:	bf00      	nop
 8006ea4:	080070b1 	.word	0x080070b1
 8006ea8:	080070d3 	.word	0x080070d3
 8006eac:	0800710b 	.word	0x0800710b
 8006eb0:	0800712f 	.word	0x0800712f
 8006eb4:	20004b50 	.word	0x20004b50

08006eb8 <stdio_exit_handler>:
 8006eb8:	4a02      	ldr	r2, [pc, #8]	@ (8006ec4 <stdio_exit_handler+0xc>)
 8006eba:	4903      	ldr	r1, [pc, #12]	@ (8006ec8 <stdio_exit_handler+0x10>)
 8006ebc:	4803      	ldr	r0, [pc, #12]	@ (8006ecc <stdio_exit_handler+0x14>)
 8006ebe:	f000 b869 	b.w	8006f94 <_fwalk_sglue>
 8006ec2:	bf00      	nop
 8006ec4:	20000010 	.word	0x20000010
 8006ec8:	08007cb9 	.word	0x08007cb9
 8006ecc:	20000020 	.word	0x20000020

08006ed0 <cleanup_stdio>:
 8006ed0:	6841      	ldr	r1, [r0, #4]
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <cleanup_stdio+0x34>)
 8006ed4:	4299      	cmp	r1, r3
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	4604      	mov	r4, r0
 8006eda:	d001      	beq.n	8006ee0 <cleanup_stdio+0x10>
 8006edc:	f000 feec 	bl	8007cb8 <_fflush_r>
 8006ee0:	68a1      	ldr	r1, [r4, #8]
 8006ee2:	4b09      	ldr	r3, [pc, #36]	@ (8006f08 <cleanup_stdio+0x38>)
 8006ee4:	4299      	cmp	r1, r3
 8006ee6:	d002      	beq.n	8006eee <cleanup_stdio+0x1e>
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f000 fee5 	bl	8007cb8 <_fflush_r>
 8006eee:	68e1      	ldr	r1, [r4, #12]
 8006ef0:	4b06      	ldr	r3, [pc, #24]	@ (8006f0c <cleanup_stdio+0x3c>)
 8006ef2:	4299      	cmp	r1, r3
 8006ef4:	d004      	beq.n	8006f00 <cleanup_stdio+0x30>
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006efc:	f000 bedc 	b.w	8007cb8 <_fflush_r>
 8006f00:	bd10      	pop	{r4, pc}
 8006f02:	bf00      	nop
 8006f04:	20004b50 	.word	0x20004b50
 8006f08:	20004bb8 	.word	0x20004bb8
 8006f0c:	20004c20 	.word	0x20004c20

08006f10 <global_stdio_init.part.0>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	4b0b      	ldr	r3, [pc, #44]	@ (8006f40 <global_stdio_init.part.0+0x30>)
 8006f14:	4c0b      	ldr	r4, [pc, #44]	@ (8006f44 <global_stdio_init.part.0+0x34>)
 8006f16:	4a0c      	ldr	r2, [pc, #48]	@ (8006f48 <global_stdio_init.part.0+0x38>)
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2104      	movs	r1, #4
 8006f20:	f7ff ff94 	bl	8006e4c <std>
 8006f24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f28:	2201      	movs	r2, #1
 8006f2a:	2109      	movs	r1, #9
 8006f2c:	f7ff ff8e 	bl	8006e4c <std>
 8006f30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f34:	2202      	movs	r2, #2
 8006f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f3a:	2112      	movs	r1, #18
 8006f3c:	f7ff bf86 	b.w	8006e4c <std>
 8006f40:	20004c88 	.word	0x20004c88
 8006f44:	20004b50 	.word	0x20004b50
 8006f48:	08006eb9 	.word	0x08006eb9

08006f4c <__sfp_lock_acquire>:
 8006f4c:	4801      	ldr	r0, [pc, #4]	@ (8006f54 <__sfp_lock_acquire+0x8>)
 8006f4e:	f000 ba56 	b.w	80073fe <__retarget_lock_acquire_recursive>
 8006f52:	bf00      	nop
 8006f54:	20004c91 	.word	0x20004c91

08006f58 <__sfp_lock_release>:
 8006f58:	4801      	ldr	r0, [pc, #4]	@ (8006f60 <__sfp_lock_release+0x8>)
 8006f5a:	f000 ba51 	b.w	8007400 <__retarget_lock_release_recursive>
 8006f5e:	bf00      	nop
 8006f60:	20004c91 	.word	0x20004c91

08006f64 <__sinit>:
 8006f64:	b510      	push	{r4, lr}
 8006f66:	4604      	mov	r4, r0
 8006f68:	f7ff fff0 	bl	8006f4c <__sfp_lock_acquire>
 8006f6c:	6a23      	ldr	r3, [r4, #32]
 8006f6e:	b11b      	cbz	r3, 8006f78 <__sinit+0x14>
 8006f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f74:	f7ff bff0 	b.w	8006f58 <__sfp_lock_release>
 8006f78:	4b04      	ldr	r3, [pc, #16]	@ (8006f8c <__sinit+0x28>)
 8006f7a:	6223      	str	r3, [r4, #32]
 8006f7c:	4b04      	ldr	r3, [pc, #16]	@ (8006f90 <__sinit+0x2c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1f5      	bne.n	8006f70 <__sinit+0xc>
 8006f84:	f7ff ffc4 	bl	8006f10 <global_stdio_init.part.0>
 8006f88:	e7f2      	b.n	8006f70 <__sinit+0xc>
 8006f8a:	bf00      	nop
 8006f8c:	08006ed1 	.word	0x08006ed1
 8006f90:	20004c88 	.word	0x20004c88

08006f94 <_fwalk_sglue>:
 8006f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f98:	4607      	mov	r7, r0
 8006f9a:	4688      	mov	r8, r1
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	2600      	movs	r6, #0
 8006fa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fa4:	f1b9 0901 	subs.w	r9, r9, #1
 8006fa8:	d505      	bpl.n	8006fb6 <_fwalk_sglue+0x22>
 8006faa:	6824      	ldr	r4, [r4, #0]
 8006fac:	2c00      	cmp	r4, #0
 8006fae:	d1f7      	bne.n	8006fa0 <_fwalk_sglue+0xc>
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d907      	bls.n	8006fcc <_fwalk_sglue+0x38>
 8006fbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	d003      	beq.n	8006fcc <_fwalk_sglue+0x38>
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	47c0      	blx	r8
 8006fca:	4306      	orrs	r6, r0
 8006fcc:	3568      	adds	r5, #104	@ 0x68
 8006fce:	e7e9      	b.n	8006fa4 <_fwalk_sglue+0x10>

08006fd0 <iprintf>:
 8006fd0:	b40f      	push	{r0, r1, r2, r3}
 8006fd2:	b507      	push	{r0, r1, r2, lr}
 8006fd4:	4906      	ldr	r1, [pc, #24]	@ (8006ff0 <iprintf+0x20>)
 8006fd6:	ab04      	add	r3, sp, #16
 8006fd8:	6808      	ldr	r0, [r1, #0]
 8006fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fde:	6881      	ldr	r1, [r0, #8]
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	f000 fb3f 	bl	8007664 <_vfiprintf_r>
 8006fe6:	b003      	add	sp, #12
 8006fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fec:	b004      	add	sp, #16
 8006fee:	4770      	bx	lr
 8006ff0:	2000001c 	.word	0x2000001c

08006ff4 <_puts_r>:
 8006ff4:	6a03      	ldr	r3, [r0, #32]
 8006ff6:	b570      	push	{r4, r5, r6, lr}
 8006ff8:	6884      	ldr	r4, [r0, #8]
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	460e      	mov	r6, r1
 8006ffe:	b90b      	cbnz	r3, 8007004 <_puts_r+0x10>
 8007000:	f7ff ffb0 	bl	8006f64 <__sinit>
 8007004:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007006:	07db      	lsls	r3, r3, #31
 8007008:	d405      	bmi.n	8007016 <_puts_r+0x22>
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	0598      	lsls	r0, r3, #22
 800700e:	d402      	bmi.n	8007016 <_puts_r+0x22>
 8007010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007012:	f000 f9f4 	bl	80073fe <__retarget_lock_acquire_recursive>
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	0719      	lsls	r1, r3, #28
 800701a:	d502      	bpl.n	8007022 <_puts_r+0x2e>
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d135      	bne.n	800708e <_puts_r+0x9a>
 8007022:	4621      	mov	r1, r4
 8007024:	4628      	mov	r0, r5
 8007026:	f000 f8c5 	bl	80071b4 <__swsetup_r>
 800702a:	b380      	cbz	r0, 800708e <_puts_r+0x9a>
 800702c:	f04f 35ff 	mov.w	r5, #4294967295
 8007030:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007032:	07da      	lsls	r2, r3, #31
 8007034:	d405      	bmi.n	8007042 <_puts_r+0x4e>
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	059b      	lsls	r3, r3, #22
 800703a:	d402      	bmi.n	8007042 <_puts_r+0x4e>
 800703c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800703e:	f000 f9df 	bl	8007400 <__retarget_lock_release_recursive>
 8007042:	4628      	mov	r0, r5
 8007044:	bd70      	pop	{r4, r5, r6, pc}
 8007046:	2b00      	cmp	r3, #0
 8007048:	da04      	bge.n	8007054 <_puts_r+0x60>
 800704a:	69a2      	ldr	r2, [r4, #24]
 800704c:	429a      	cmp	r2, r3
 800704e:	dc17      	bgt.n	8007080 <_puts_r+0x8c>
 8007050:	290a      	cmp	r1, #10
 8007052:	d015      	beq.n	8007080 <_puts_r+0x8c>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	6022      	str	r2, [r4, #0]
 800705a:	7019      	strb	r1, [r3, #0]
 800705c:	68a3      	ldr	r3, [r4, #8]
 800705e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007062:	3b01      	subs	r3, #1
 8007064:	60a3      	str	r3, [r4, #8]
 8007066:	2900      	cmp	r1, #0
 8007068:	d1ed      	bne.n	8007046 <_puts_r+0x52>
 800706a:	2b00      	cmp	r3, #0
 800706c:	da11      	bge.n	8007092 <_puts_r+0x9e>
 800706e:	4622      	mov	r2, r4
 8007070:	210a      	movs	r1, #10
 8007072:	4628      	mov	r0, r5
 8007074:	f000 f85f 	bl	8007136 <__swbuf_r>
 8007078:	3001      	adds	r0, #1
 800707a:	d0d7      	beq.n	800702c <_puts_r+0x38>
 800707c:	250a      	movs	r5, #10
 800707e:	e7d7      	b.n	8007030 <_puts_r+0x3c>
 8007080:	4622      	mov	r2, r4
 8007082:	4628      	mov	r0, r5
 8007084:	f000 f857 	bl	8007136 <__swbuf_r>
 8007088:	3001      	adds	r0, #1
 800708a:	d1e7      	bne.n	800705c <_puts_r+0x68>
 800708c:	e7ce      	b.n	800702c <_puts_r+0x38>
 800708e:	3e01      	subs	r6, #1
 8007090:	e7e4      	b.n	800705c <_puts_r+0x68>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	6022      	str	r2, [r4, #0]
 8007098:	220a      	movs	r2, #10
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	e7ee      	b.n	800707c <_puts_r+0x88>
	...

080070a0 <puts>:
 80070a0:	4b02      	ldr	r3, [pc, #8]	@ (80070ac <puts+0xc>)
 80070a2:	4601      	mov	r1, r0
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	f7ff bfa5 	b.w	8006ff4 <_puts_r>
 80070aa:	bf00      	nop
 80070ac:	2000001c 	.word	0x2000001c

080070b0 <__sread>:
 80070b0:	b510      	push	{r4, lr}
 80070b2:	460c      	mov	r4, r1
 80070b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b8:	f000 f952 	bl	8007360 <_read_r>
 80070bc:	2800      	cmp	r0, #0
 80070be:	bfab      	itete	ge
 80070c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80070c2:	89a3      	ldrhlt	r3, [r4, #12]
 80070c4:	181b      	addge	r3, r3, r0
 80070c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80070ca:	bfac      	ite	ge
 80070cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80070ce:	81a3      	strhlt	r3, [r4, #12]
 80070d0:	bd10      	pop	{r4, pc}

080070d2 <__swrite>:
 80070d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d6:	461f      	mov	r7, r3
 80070d8:	898b      	ldrh	r3, [r1, #12]
 80070da:	05db      	lsls	r3, r3, #23
 80070dc:	4605      	mov	r5, r0
 80070de:	460c      	mov	r4, r1
 80070e0:	4616      	mov	r6, r2
 80070e2:	d505      	bpl.n	80070f0 <__swrite+0x1e>
 80070e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e8:	2302      	movs	r3, #2
 80070ea:	2200      	movs	r2, #0
 80070ec:	f000 f926 	bl	800733c <_lseek_r>
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070fa:	81a3      	strh	r3, [r4, #12]
 80070fc:	4632      	mov	r2, r6
 80070fe:	463b      	mov	r3, r7
 8007100:	4628      	mov	r0, r5
 8007102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007106:	f000 b93d 	b.w	8007384 <_write_r>

0800710a <__sseek>:
 800710a:	b510      	push	{r4, lr}
 800710c:	460c      	mov	r4, r1
 800710e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007112:	f000 f913 	bl	800733c <_lseek_r>
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	bf15      	itete	ne
 800711c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800711e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007122:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007126:	81a3      	strheq	r3, [r4, #12]
 8007128:	bf18      	it	ne
 800712a:	81a3      	strhne	r3, [r4, #12]
 800712c:	bd10      	pop	{r4, pc}

0800712e <__sclose>:
 800712e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007132:	f000 b89d 	b.w	8007270 <_close_r>

08007136 <__swbuf_r>:
 8007136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007138:	460e      	mov	r6, r1
 800713a:	4614      	mov	r4, r2
 800713c:	4605      	mov	r5, r0
 800713e:	b118      	cbz	r0, 8007148 <__swbuf_r+0x12>
 8007140:	6a03      	ldr	r3, [r0, #32]
 8007142:	b90b      	cbnz	r3, 8007148 <__swbuf_r+0x12>
 8007144:	f7ff ff0e 	bl	8006f64 <__sinit>
 8007148:	69a3      	ldr	r3, [r4, #24]
 800714a:	60a3      	str	r3, [r4, #8]
 800714c:	89a3      	ldrh	r3, [r4, #12]
 800714e:	071a      	lsls	r2, r3, #28
 8007150:	d501      	bpl.n	8007156 <__swbuf_r+0x20>
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	b943      	cbnz	r3, 8007168 <__swbuf_r+0x32>
 8007156:	4621      	mov	r1, r4
 8007158:	4628      	mov	r0, r5
 800715a:	f000 f82b 	bl	80071b4 <__swsetup_r>
 800715e:	b118      	cbz	r0, 8007168 <__swbuf_r+0x32>
 8007160:	f04f 37ff 	mov.w	r7, #4294967295
 8007164:	4638      	mov	r0, r7
 8007166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	6922      	ldr	r2, [r4, #16]
 800716c:	1a98      	subs	r0, r3, r2
 800716e:	6963      	ldr	r3, [r4, #20]
 8007170:	b2f6      	uxtb	r6, r6
 8007172:	4283      	cmp	r3, r0
 8007174:	4637      	mov	r7, r6
 8007176:	dc05      	bgt.n	8007184 <__swbuf_r+0x4e>
 8007178:	4621      	mov	r1, r4
 800717a:	4628      	mov	r0, r5
 800717c:	f000 fd9c 	bl	8007cb8 <_fflush_r>
 8007180:	2800      	cmp	r0, #0
 8007182:	d1ed      	bne.n	8007160 <__swbuf_r+0x2a>
 8007184:	68a3      	ldr	r3, [r4, #8]
 8007186:	3b01      	subs	r3, #1
 8007188:	60a3      	str	r3, [r4, #8]
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	6022      	str	r2, [r4, #0]
 8007190:	701e      	strb	r6, [r3, #0]
 8007192:	6962      	ldr	r2, [r4, #20]
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	429a      	cmp	r2, r3
 8007198:	d004      	beq.n	80071a4 <__swbuf_r+0x6e>
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	07db      	lsls	r3, r3, #31
 800719e:	d5e1      	bpl.n	8007164 <__swbuf_r+0x2e>
 80071a0:	2e0a      	cmp	r6, #10
 80071a2:	d1df      	bne.n	8007164 <__swbuf_r+0x2e>
 80071a4:	4621      	mov	r1, r4
 80071a6:	4628      	mov	r0, r5
 80071a8:	f000 fd86 	bl	8007cb8 <_fflush_r>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d0d9      	beq.n	8007164 <__swbuf_r+0x2e>
 80071b0:	e7d6      	b.n	8007160 <__swbuf_r+0x2a>
	...

080071b4 <__swsetup_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	4b29      	ldr	r3, [pc, #164]	@ (800725c <__swsetup_r+0xa8>)
 80071b8:	4605      	mov	r5, r0
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	460c      	mov	r4, r1
 80071be:	b118      	cbz	r0, 80071c8 <__swsetup_r+0x14>
 80071c0:	6a03      	ldr	r3, [r0, #32]
 80071c2:	b90b      	cbnz	r3, 80071c8 <__swsetup_r+0x14>
 80071c4:	f7ff fece 	bl	8006f64 <__sinit>
 80071c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071cc:	0719      	lsls	r1, r3, #28
 80071ce:	d422      	bmi.n	8007216 <__swsetup_r+0x62>
 80071d0:	06da      	lsls	r2, r3, #27
 80071d2:	d407      	bmi.n	80071e4 <__swsetup_r+0x30>
 80071d4:	2209      	movs	r2, #9
 80071d6:	602a      	str	r2, [r5, #0]
 80071d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071dc:	81a3      	strh	r3, [r4, #12]
 80071de:	f04f 30ff 	mov.w	r0, #4294967295
 80071e2:	e033      	b.n	800724c <__swsetup_r+0x98>
 80071e4:	0758      	lsls	r0, r3, #29
 80071e6:	d512      	bpl.n	800720e <__swsetup_r+0x5a>
 80071e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071ea:	b141      	cbz	r1, 80071fe <__swsetup_r+0x4a>
 80071ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071f0:	4299      	cmp	r1, r3
 80071f2:	d002      	beq.n	80071fa <__swsetup_r+0x46>
 80071f4:	4628      	mov	r0, r5
 80071f6:	f000 f913 	bl	8007420 <_free_r>
 80071fa:	2300      	movs	r3, #0
 80071fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80071fe:	89a3      	ldrh	r3, [r4, #12]
 8007200:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007204:	81a3      	strh	r3, [r4, #12]
 8007206:	2300      	movs	r3, #0
 8007208:	6063      	str	r3, [r4, #4]
 800720a:	6923      	ldr	r3, [r4, #16]
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	f043 0308 	orr.w	r3, r3, #8
 8007214:	81a3      	strh	r3, [r4, #12]
 8007216:	6923      	ldr	r3, [r4, #16]
 8007218:	b94b      	cbnz	r3, 800722e <__swsetup_r+0x7a>
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007224:	d003      	beq.n	800722e <__swsetup_r+0x7a>
 8007226:	4621      	mov	r1, r4
 8007228:	4628      	mov	r0, r5
 800722a:	f000 fd93 	bl	8007d54 <__smakebuf_r>
 800722e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007232:	f013 0201 	ands.w	r2, r3, #1
 8007236:	d00a      	beq.n	800724e <__swsetup_r+0x9a>
 8007238:	2200      	movs	r2, #0
 800723a:	60a2      	str	r2, [r4, #8]
 800723c:	6962      	ldr	r2, [r4, #20]
 800723e:	4252      	negs	r2, r2
 8007240:	61a2      	str	r2, [r4, #24]
 8007242:	6922      	ldr	r2, [r4, #16]
 8007244:	b942      	cbnz	r2, 8007258 <__swsetup_r+0xa4>
 8007246:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800724a:	d1c5      	bne.n	80071d8 <__swsetup_r+0x24>
 800724c:	bd38      	pop	{r3, r4, r5, pc}
 800724e:	0799      	lsls	r1, r3, #30
 8007250:	bf58      	it	pl
 8007252:	6962      	ldrpl	r2, [r4, #20]
 8007254:	60a2      	str	r2, [r4, #8]
 8007256:	e7f4      	b.n	8007242 <__swsetup_r+0x8e>
 8007258:	2000      	movs	r0, #0
 800725a:	e7f7      	b.n	800724c <__swsetup_r+0x98>
 800725c:	2000001c 	.word	0x2000001c

08007260 <memset>:
 8007260:	4402      	add	r2, r0
 8007262:	4603      	mov	r3, r0
 8007264:	4293      	cmp	r3, r2
 8007266:	d100      	bne.n	800726a <memset+0xa>
 8007268:	4770      	bx	lr
 800726a:	f803 1b01 	strb.w	r1, [r3], #1
 800726e:	e7f9      	b.n	8007264 <memset+0x4>

08007270 <_close_r>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	4d06      	ldr	r5, [pc, #24]	@ (800728c <_close_r+0x1c>)
 8007274:	2300      	movs	r3, #0
 8007276:	4604      	mov	r4, r0
 8007278:	4608      	mov	r0, r1
 800727a:	602b      	str	r3, [r5, #0]
 800727c:	f7fa f859 	bl	8001332 <_close>
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	d102      	bne.n	800728a <_close_r+0x1a>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	b103      	cbz	r3, 800728a <_close_r+0x1a>
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	20004c8c 	.word	0x20004c8c

08007290 <_reclaim_reent>:
 8007290:	4b29      	ldr	r3, [pc, #164]	@ (8007338 <_reclaim_reent+0xa8>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4283      	cmp	r3, r0
 8007296:	b570      	push	{r4, r5, r6, lr}
 8007298:	4604      	mov	r4, r0
 800729a:	d04b      	beq.n	8007334 <_reclaim_reent+0xa4>
 800729c:	69c3      	ldr	r3, [r0, #28]
 800729e:	b1ab      	cbz	r3, 80072cc <_reclaim_reent+0x3c>
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	b16b      	cbz	r3, 80072c0 <_reclaim_reent+0x30>
 80072a4:	2500      	movs	r5, #0
 80072a6:	69e3      	ldr	r3, [r4, #28]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	5959      	ldr	r1, [r3, r5]
 80072ac:	2900      	cmp	r1, #0
 80072ae:	d13b      	bne.n	8007328 <_reclaim_reent+0x98>
 80072b0:	3504      	adds	r5, #4
 80072b2:	2d80      	cmp	r5, #128	@ 0x80
 80072b4:	d1f7      	bne.n	80072a6 <_reclaim_reent+0x16>
 80072b6:	69e3      	ldr	r3, [r4, #28]
 80072b8:	4620      	mov	r0, r4
 80072ba:	68d9      	ldr	r1, [r3, #12]
 80072bc:	f000 f8b0 	bl	8007420 <_free_r>
 80072c0:	69e3      	ldr	r3, [r4, #28]
 80072c2:	6819      	ldr	r1, [r3, #0]
 80072c4:	b111      	cbz	r1, 80072cc <_reclaim_reent+0x3c>
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 f8aa 	bl	8007420 <_free_r>
 80072cc:	6961      	ldr	r1, [r4, #20]
 80072ce:	b111      	cbz	r1, 80072d6 <_reclaim_reent+0x46>
 80072d0:	4620      	mov	r0, r4
 80072d2:	f000 f8a5 	bl	8007420 <_free_r>
 80072d6:	69e1      	ldr	r1, [r4, #28]
 80072d8:	b111      	cbz	r1, 80072e0 <_reclaim_reent+0x50>
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 f8a0 	bl	8007420 <_free_r>
 80072e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80072e2:	b111      	cbz	r1, 80072ea <_reclaim_reent+0x5a>
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 f89b 	bl	8007420 <_free_r>
 80072ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072ec:	b111      	cbz	r1, 80072f4 <_reclaim_reent+0x64>
 80072ee:	4620      	mov	r0, r4
 80072f0:	f000 f896 	bl	8007420 <_free_r>
 80072f4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80072f6:	b111      	cbz	r1, 80072fe <_reclaim_reent+0x6e>
 80072f8:	4620      	mov	r0, r4
 80072fa:	f000 f891 	bl	8007420 <_free_r>
 80072fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007300:	b111      	cbz	r1, 8007308 <_reclaim_reent+0x78>
 8007302:	4620      	mov	r0, r4
 8007304:	f000 f88c 	bl	8007420 <_free_r>
 8007308:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800730a:	b111      	cbz	r1, 8007312 <_reclaim_reent+0x82>
 800730c:	4620      	mov	r0, r4
 800730e:	f000 f887 	bl	8007420 <_free_r>
 8007312:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007314:	b111      	cbz	r1, 800731c <_reclaim_reent+0x8c>
 8007316:	4620      	mov	r0, r4
 8007318:	f000 f882 	bl	8007420 <_free_r>
 800731c:	6a23      	ldr	r3, [r4, #32]
 800731e:	b14b      	cbz	r3, 8007334 <_reclaim_reent+0xa4>
 8007320:	4620      	mov	r0, r4
 8007322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007326:	4718      	bx	r3
 8007328:	680e      	ldr	r6, [r1, #0]
 800732a:	4620      	mov	r0, r4
 800732c:	f000 f878 	bl	8007420 <_free_r>
 8007330:	4631      	mov	r1, r6
 8007332:	e7bb      	b.n	80072ac <_reclaim_reent+0x1c>
 8007334:	bd70      	pop	{r4, r5, r6, pc}
 8007336:	bf00      	nop
 8007338:	2000001c 	.word	0x2000001c

0800733c <_lseek_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4d07      	ldr	r5, [pc, #28]	@ (800735c <_lseek_r+0x20>)
 8007340:	4604      	mov	r4, r0
 8007342:	4608      	mov	r0, r1
 8007344:	4611      	mov	r1, r2
 8007346:	2200      	movs	r2, #0
 8007348:	602a      	str	r2, [r5, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	f7fa f818 	bl	8001380 <_lseek>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_lseek_r+0x1e>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_lseek_r+0x1e>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	20004c8c 	.word	0x20004c8c

08007360 <_read_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4d07      	ldr	r5, [pc, #28]	@ (8007380 <_read_r+0x20>)
 8007364:	4604      	mov	r4, r0
 8007366:	4608      	mov	r0, r1
 8007368:	4611      	mov	r1, r2
 800736a:	2200      	movs	r2, #0
 800736c:	602a      	str	r2, [r5, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	f7f9 ffa6 	bl	80012c0 <_read>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_read_r+0x1e>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	b103      	cbz	r3, 800737e <_read_r+0x1e>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	20004c8c 	.word	0x20004c8c

08007384 <_write_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4d07      	ldr	r5, [pc, #28]	@ (80073a4 <_write_r+0x20>)
 8007388:	4604      	mov	r4, r0
 800738a:	4608      	mov	r0, r1
 800738c:	4611      	mov	r1, r2
 800738e:	2200      	movs	r2, #0
 8007390:	602a      	str	r2, [r5, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	f7f9 ffb1 	bl	80012fa <_write>
 8007398:	1c43      	adds	r3, r0, #1
 800739a:	d102      	bne.n	80073a2 <_write_r+0x1e>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	b103      	cbz	r3, 80073a2 <_write_r+0x1e>
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	20004c8c 	.word	0x20004c8c

080073a8 <__errno>:
 80073a8:	4b01      	ldr	r3, [pc, #4]	@ (80073b0 <__errno+0x8>)
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	2000001c 	.word	0x2000001c

080073b4 <__libc_init_array>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	4d0d      	ldr	r5, [pc, #52]	@ (80073ec <__libc_init_array+0x38>)
 80073b8:	4c0d      	ldr	r4, [pc, #52]	@ (80073f0 <__libc_init_array+0x3c>)
 80073ba:	1b64      	subs	r4, r4, r5
 80073bc:	10a4      	asrs	r4, r4, #2
 80073be:	2600      	movs	r6, #0
 80073c0:	42a6      	cmp	r6, r4
 80073c2:	d109      	bne.n	80073d8 <__libc_init_array+0x24>
 80073c4:	4d0b      	ldr	r5, [pc, #44]	@ (80073f4 <__libc_init_array+0x40>)
 80073c6:	4c0c      	ldr	r4, [pc, #48]	@ (80073f8 <__libc_init_array+0x44>)
 80073c8:	f000 fd32 	bl	8007e30 <_init>
 80073cc:	1b64      	subs	r4, r4, r5
 80073ce:	10a4      	asrs	r4, r4, #2
 80073d0:	2600      	movs	r6, #0
 80073d2:	42a6      	cmp	r6, r4
 80073d4:	d105      	bne.n	80073e2 <__libc_init_array+0x2e>
 80073d6:	bd70      	pop	{r4, r5, r6, pc}
 80073d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073dc:	4798      	blx	r3
 80073de:	3601      	adds	r6, #1
 80073e0:	e7ee      	b.n	80073c0 <__libc_init_array+0xc>
 80073e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e6:	4798      	blx	r3
 80073e8:	3601      	adds	r6, #1
 80073ea:	e7f2      	b.n	80073d2 <__libc_init_array+0x1e>
 80073ec:	0800801c 	.word	0x0800801c
 80073f0:	0800801c 	.word	0x0800801c
 80073f4:	0800801c 	.word	0x0800801c
 80073f8:	08008020 	.word	0x08008020

080073fc <__retarget_lock_init_recursive>:
 80073fc:	4770      	bx	lr

080073fe <__retarget_lock_acquire_recursive>:
 80073fe:	4770      	bx	lr

08007400 <__retarget_lock_release_recursive>:
 8007400:	4770      	bx	lr

08007402 <memcpy>:
 8007402:	440a      	add	r2, r1
 8007404:	4291      	cmp	r1, r2
 8007406:	f100 33ff 	add.w	r3, r0, #4294967295
 800740a:	d100      	bne.n	800740e <memcpy+0xc>
 800740c:	4770      	bx	lr
 800740e:	b510      	push	{r4, lr}
 8007410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007418:	4291      	cmp	r1, r2
 800741a:	d1f9      	bne.n	8007410 <memcpy+0xe>
 800741c:	bd10      	pop	{r4, pc}
	...

08007420 <_free_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4605      	mov	r5, r0
 8007424:	2900      	cmp	r1, #0
 8007426:	d041      	beq.n	80074ac <_free_r+0x8c>
 8007428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800742c:	1f0c      	subs	r4, r1, #4
 800742e:	2b00      	cmp	r3, #0
 8007430:	bfb8      	it	lt
 8007432:	18e4      	addlt	r4, r4, r3
 8007434:	f000 f8e0 	bl	80075f8 <__malloc_lock>
 8007438:	4a1d      	ldr	r2, [pc, #116]	@ (80074b0 <_free_r+0x90>)
 800743a:	6813      	ldr	r3, [r2, #0]
 800743c:	b933      	cbnz	r3, 800744c <_free_r+0x2c>
 800743e:	6063      	str	r3, [r4, #4]
 8007440:	6014      	str	r4, [r2, #0]
 8007442:	4628      	mov	r0, r5
 8007444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007448:	f000 b8dc 	b.w	8007604 <__malloc_unlock>
 800744c:	42a3      	cmp	r3, r4
 800744e:	d908      	bls.n	8007462 <_free_r+0x42>
 8007450:	6820      	ldr	r0, [r4, #0]
 8007452:	1821      	adds	r1, r4, r0
 8007454:	428b      	cmp	r3, r1
 8007456:	bf01      	itttt	eq
 8007458:	6819      	ldreq	r1, [r3, #0]
 800745a:	685b      	ldreq	r3, [r3, #4]
 800745c:	1809      	addeq	r1, r1, r0
 800745e:	6021      	streq	r1, [r4, #0]
 8007460:	e7ed      	b.n	800743e <_free_r+0x1e>
 8007462:	461a      	mov	r2, r3
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	b10b      	cbz	r3, 800746c <_free_r+0x4c>
 8007468:	42a3      	cmp	r3, r4
 800746a:	d9fa      	bls.n	8007462 <_free_r+0x42>
 800746c:	6811      	ldr	r1, [r2, #0]
 800746e:	1850      	adds	r0, r2, r1
 8007470:	42a0      	cmp	r0, r4
 8007472:	d10b      	bne.n	800748c <_free_r+0x6c>
 8007474:	6820      	ldr	r0, [r4, #0]
 8007476:	4401      	add	r1, r0
 8007478:	1850      	adds	r0, r2, r1
 800747a:	4283      	cmp	r3, r0
 800747c:	6011      	str	r1, [r2, #0]
 800747e:	d1e0      	bne.n	8007442 <_free_r+0x22>
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	6053      	str	r3, [r2, #4]
 8007486:	4408      	add	r0, r1
 8007488:	6010      	str	r0, [r2, #0]
 800748a:	e7da      	b.n	8007442 <_free_r+0x22>
 800748c:	d902      	bls.n	8007494 <_free_r+0x74>
 800748e:	230c      	movs	r3, #12
 8007490:	602b      	str	r3, [r5, #0]
 8007492:	e7d6      	b.n	8007442 <_free_r+0x22>
 8007494:	6820      	ldr	r0, [r4, #0]
 8007496:	1821      	adds	r1, r4, r0
 8007498:	428b      	cmp	r3, r1
 800749a:	bf04      	itt	eq
 800749c:	6819      	ldreq	r1, [r3, #0]
 800749e:	685b      	ldreq	r3, [r3, #4]
 80074a0:	6063      	str	r3, [r4, #4]
 80074a2:	bf04      	itt	eq
 80074a4:	1809      	addeq	r1, r1, r0
 80074a6:	6021      	streq	r1, [r4, #0]
 80074a8:	6054      	str	r4, [r2, #4]
 80074aa:	e7ca      	b.n	8007442 <_free_r+0x22>
 80074ac:	bd38      	pop	{r3, r4, r5, pc}
 80074ae:	bf00      	nop
 80074b0:	20004c98 	.word	0x20004c98

080074b4 <sbrk_aligned>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	4e0f      	ldr	r6, [pc, #60]	@ (80074f4 <sbrk_aligned+0x40>)
 80074b8:	460c      	mov	r4, r1
 80074ba:	6831      	ldr	r1, [r6, #0]
 80074bc:	4605      	mov	r5, r0
 80074be:	b911      	cbnz	r1, 80074c6 <sbrk_aligned+0x12>
 80074c0:	f000 fca6 	bl	8007e10 <_sbrk_r>
 80074c4:	6030      	str	r0, [r6, #0]
 80074c6:	4621      	mov	r1, r4
 80074c8:	4628      	mov	r0, r5
 80074ca:	f000 fca1 	bl	8007e10 <_sbrk_r>
 80074ce:	1c43      	adds	r3, r0, #1
 80074d0:	d103      	bne.n	80074da <sbrk_aligned+0x26>
 80074d2:	f04f 34ff 	mov.w	r4, #4294967295
 80074d6:	4620      	mov	r0, r4
 80074d8:	bd70      	pop	{r4, r5, r6, pc}
 80074da:	1cc4      	adds	r4, r0, #3
 80074dc:	f024 0403 	bic.w	r4, r4, #3
 80074e0:	42a0      	cmp	r0, r4
 80074e2:	d0f8      	beq.n	80074d6 <sbrk_aligned+0x22>
 80074e4:	1a21      	subs	r1, r4, r0
 80074e6:	4628      	mov	r0, r5
 80074e8:	f000 fc92 	bl	8007e10 <_sbrk_r>
 80074ec:	3001      	adds	r0, #1
 80074ee:	d1f2      	bne.n	80074d6 <sbrk_aligned+0x22>
 80074f0:	e7ef      	b.n	80074d2 <sbrk_aligned+0x1e>
 80074f2:	bf00      	nop
 80074f4:	20004c94 	.word	0x20004c94

080074f8 <_malloc_r>:
 80074f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074fc:	1ccd      	adds	r5, r1, #3
 80074fe:	f025 0503 	bic.w	r5, r5, #3
 8007502:	3508      	adds	r5, #8
 8007504:	2d0c      	cmp	r5, #12
 8007506:	bf38      	it	cc
 8007508:	250c      	movcc	r5, #12
 800750a:	2d00      	cmp	r5, #0
 800750c:	4606      	mov	r6, r0
 800750e:	db01      	blt.n	8007514 <_malloc_r+0x1c>
 8007510:	42a9      	cmp	r1, r5
 8007512:	d904      	bls.n	800751e <_malloc_r+0x26>
 8007514:	230c      	movs	r3, #12
 8007516:	6033      	str	r3, [r6, #0]
 8007518:	2000      	movs	r0, #0
 800751a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075f4 <_malloc_r+0xfc>
 8007522:	f000 f869 	bl	80075f8 <__malloc_lock>
 8007526:	f8d8 3000 	ldr.w	r3, [r8]
 800752a:	461c      	mov	r4, r3
 800752c:	bb44      	cbnz	r4, 8007580 <_malloc_r+0x88>
 800752e:	4629      	mov	r1, r5
 8007530:	4630      	mov	r0, r6
 8007532:	f7ff ffbf 	bl	80074b4 <sbrk_aligned>
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	4604      	mov	r4, r0
 800753a:	d158      	bne.n	80075ee <_malloc_r+0xf6>
 800753c:	f8d8 4000 	ldr.w	r4, [r8]
 8007540:	4627      	mov	r7, r4
 8007542:	2f00      	cmp	r7, #0
 8007544:	d143      	bne.n	80075ce <_malloc_r+0xd6>
 8007546:	2c00      	cmp	r4, #0
 8007548:	d04b      	beq.n	80075e2 <_malloc_r+0xea>
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	4639      	mov	r1, r7
 800754e:	4630      	mov	r0, r6
 8007550:	eb04 0903 	add.w	r9, r4, r3
 8007554:	f000 fc5c 	bl	8007e10 <_sbrk_r>
 8007558:	4581      	cmp	r9, r0
 800755a:	d142      	bne.n	80075e2 <_malloc_r+0xea>
 800755c:	6821      	ldr	r1, [r4, #0]
 800755e:	1a6d      	subs	r5, r5, r1
 8007560:	4629      	mov	r1, r5
 8007562:	4630      	mov	r0, r6
 8007564:	f7ff ffa6 	bl	80074b4 <sbrk_aligned>
 8007568:	3001      	adds	r0, #1
 800756a:	d03a      	beq.n	80075e2 <_malloc_r+0xea>
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	442b      	add	r3, r5
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	f8d8 3000 	ldr.w	r3, [r8]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	bb62      	cbnz	r2, 80075d4 <_malloc_r+0xdc>
 800757a:	f8c8 7000 	str.w	r7, [r8]
 800757e:	e00f      	b.n	80075a0 <_malloc_r+0xa8>
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	1b52      	subs	r2, r2, r5
 8007584:	d420      	bmi.n	80075c8 <_malloc_r+0xd0>
 8007586:	2a0b      	cmp	r2, #11
 8007588:	d917      	bls.n	80075ba <_malloc_r+0xc2>
 800758a:	1961      	adds	r1, r4, r5
 800758c:	42a3      	cmp	r3, r4
 800758e:	6025      	str	r5, [r4, #0]
 8007590:	bf18      	it	ne
 8007592:	6059      	strne	r1, [r3, #4]
 8007594:	6863      	ldr	r3, [r4, #4]
 8007596:	bf08      	it	eq
 8007598:	f8c8 1000 	streq.w	r1, [r8]
 800759c:	5162      	str	r2, [r4, r5]
 800759e:	604b      	str	r3, [r1, #4]
 80075a0:	4630      	mov	r0, r6
 80075a2:	f000 f82f 	bl	8007604 <__malloc_unlock>
 80075a6:	f104 000b 	add.w	r0, r4, #11
 80075aa:	1d23      	adds	r3, r4, #4
 80075ac:	f020 0007 	bic.w	r0, r0, #7
 80075b0:	1ac2      	subs	r2, r0, r3
 80075b2:	bf1c      	itt	ne
 80075b4:	1a1b      	subne	r3, r3, r0
 80075b6:	50a3      	strne	r3, [r4, r2]
 80075b8:	e7af      	b.n	800751a <_malloc_r+0x22>
 80075ba:	6862      	ldr	r2, [r4, #4]
 80075bc:	42a3      	cmp	r3, r4
 80075be:	bf0c      	ite	eq
 80075c0:	f8c8 2000 	streq.w	r2, [r8]
 80075c4:	605a      	strne	r2, [r3, #4]
 80075c6:	e7eb      	b.n	80075a0 <_malloc_r+0xa8>
 80075c8:	4623      	mov	r3, r4
 80075ca:	6864      	ldr	r4, [r4, #4]
 80075cc:	e7ae      	b.n	800752c <_malloc_r+0x34>
 80075ce:	463c      	mov	r4, r7
 80075d0:	687f      	ldr	r7, [r7, #4]
 80075d2:	e7b6      	b.n	8007542 <_malloc_r+0x4a>
 80075d4:	461a      	mov	r2, r3
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	42a3      	cmp	r3, r4
 80075da:	d1fb      	bne.n	80075d4 <_malloc_r+0xdc>
 80075dc:	2300      	movs	r3, #0
 80075de:	6053      	str	r3, [r2, #4]
 80075e0:	e7de      	b.n	80075a0 <_malloc_r+0xa8>
 80075e2:	230c      	movs	r3, #12
 80075e4:	6033      	str	r3, [r6, #0]
 80075e6:	4630      	mov	r0, r6
 80075e8:	f000 f80c 	bl	8007604 <__malloc_unlock>
 80075ec:	e794      	b.n	8007518 <_malloc_r+0x20>
 80075ee:	6005      	str	r5, [r0, #0]
 80075f0:	e7d6      	b.n	80075a0 <_malloc_r+0xa8>
 80075f2:	bf00      	nop
 80075f4:	20004c98 	.word	0x20004c98

080075f8 <__malloc_lock>:
 80075f8:	4801      	ldr	r0, [pc, #4]	@ (8007600 <__malloc_lock+0x8>)
 80075fa:	f7ff bf00 	b.w	80073fe <__retarget_lock_acquire_recursive>
 80075fe:	bf00      	nop
 8007600:	20004c90 	.word	0x20004c90

08007604 <__malloc_unlock>:
 8007604:	4801      	ldr	r0, [pc, #4]	@ (800760c <__malloc_unlock+0x8>)
 8007606:	f7ff befb 	b.w	8007400 <__retarget_lock_release_recursive>
 800760a:	bf00      	nop
 800760c:	20004c90 	.word	0x20004c90

08007610 <__sfputc_r>:
 8007610:	6893      	ldr	r3, [r2, #8]
 8007612:	3b01      	subs	r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	b410      	push	{r4}
 8007618:	6093      	str	r3, [r2, #8]
 800761a:	da08      	bge.n	800762e <__sfputc_r+0x1e>
 800761c:	6994      	ldr	r4, [r2, #24]
 800761e:	42a3      	cmp	r3, r4
 8007620:	db01      	blt.n	8007626 <__sfputc_r+0x16>
 8007622:	290a      	cmp	r1, #10
 8007624:	d103      	bne.n	800762e <__sfputc_r+0x1e>
 8007626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800762a:	f7ff bd84 	b.w	8007136 <__swbuf_r>
 800762e:	6813      	ldr	r3, [r2, #0]
 8007630:	1c58      	adds	r0, r3, #1
 8007632:	6010      	str	r0, [r2, #0]
 8007634:	7019      	strb	r1, [r3, #0]
 8007636:	4608      	mov	r0, r1
 8007638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800763c:	4770      	bx	lr

0800763e <__sfputs_r>:
 800763e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007640:	4606      	mov	r6, r0
 8007642:	460f      	mov	r7, r1
 8007644:	4614      	mov	r4, r2
 8007646:	18d5      	adds	r5, r2, r3
 8007648:	42ac      	cmp	r4, r5
 800764a:	d101      	bne.n	8007650 <__sfputs_r+0x12>
 800764c:	2000      	movs	r0, #0
 800764e:	e007      	b.n	8007660 <__sfputs_r+0x22>
 8007650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007654:	463a      	mov	r2, r7
 8007656:	4630      	mov	r0, r6
 8007658:	f7ff ffda 	bl	8007610 <__sfputc_r>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d1f3      	bne.n	8007648 <__sfputs_r+0xa>
 8007660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007664 <_vfiprintf_r>:
 8007664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007668:	460d      	mov	r5, r1
 800766a:	b09d      	sub	sp, #116	@ 0x74
 800766c:	4614      	mov	r4, r2
 800766e:	4698      	mov	r8, r3
 8007670:	4606      	mov	r6, r0
 8007672:	b118      	cbz	r0, 800767c <_vfiprintf_r+0x18>
 8007674:	6a03      	ldr	r3, [r0, #32]
 8007676:	b90b      	cbnz	r3, 800767c <_vfiprintf_r+0x18>
 8007678:	f7ff fc74 	bl	8006f64 <__sinit>
 800767c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800767e:	07d9      	lsls	r1, r3, #31
 8007680:	d405      	bmi.n	800768e <_vfiprintf_r+0x2a>
 8007682:	89ab      	ldrh	r3, [r5, #12]
 8007684:	059a      	lsls	r2, r3, #22
 8007686:	d402      	bmi.n	800768e <_vfiprintf_r+0x2a>
 8007688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800768a:	f7ff feb8 	bl	80073fe <__retarget_lock_acquire_recursive>
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	071b      	lsls	r3, r3, #28
 8007692:	d501      	bpl.n	8007698 <_vfiprintf_r+0x34>
 8007694:	692b      	ldr	r3, [r5, #16]
 8007696:	b99b      	cbnz	r3, 80076c0 <_vfiprintf_r+0x5c>
 8007698:	4629      	mov	r1, r5
 800769a:	4630      	mov	r0, r6
 800769c:	f7ff fd8a 	bl	80071b4 <__swsetup_r>
 80076a0:	b170      	cbz	r0, 80076c0 <_vfiprintf_r+0x5c>
 80076a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076a4:	07dc      	lsls	r4, r3, #31
 80076a6:	d504      	bpl.n	80076b2 <_vfiprintf_r+0x4e>
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ac:	b01d      	add	sp, #116	@ 0x74
 80076ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b2:	89ab      	ldrh	r3, [r5, #12]
 80076b4:	0598      	lsls	r0, r3, #22
 80076b6:	d4f7      	bmi.n	80076a8 <_vfiprintf_r+0x44>
 80076b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076ba:	f7ff fea1 	bl	8007400 <__retarget_lock_release_recursive>
 80076be:	e7f3      	b.n	80076a8 <_vfiprintf_r+0x44>
 80076c0:	2300      	movs	r3, #0
 80076c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80076c4:	2320      	movs	r3, #32
 80076c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ce:	2330      	movs	r3, #48	@ 0x30
 80076d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007880 <_vfiprintf_r+0x21c>
 80076d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076d8:	f04f 0901 	mov.w	r9, #1
 80076dc:	4623      	mov	r3, r4
 80076de:	469a      	mov	sl, r3
 80076e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076e4:	b10a      	cbz	r2, 80076ea <_vfiprintf_r+0x86>
 80076e6:	2a25      	cmp	r2, #37	@ 0x25
 80076e8:	d1f9      	bne.n	80076de <_vfiprintf_r+0x7a>
 80076ea:	ebba 0b04 	subs.w	fp, sl, r4
 80076ee:	d00b      	beq.n	8007708 <_vfiprintf_r+0xa4>
 80076f0:	465b      	mov	r3, fp
 80076f2:	4622      	mov	r2, r4
 80076f4:	4629      	mov	r1, r5
 80076f6:	4630      	mov	r0, r6
 80076f8:	f7ff ffa1 	bl	800763e <__sfputs_r>
 80076fc:	3001      	adds	r0, #1
 80076fe:	f000 80a7 	beq.w	8007850 <_vfiprintf_r+0x1ec>
 8007702:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007704:	445a      	add	r2, fp
 8007706:	9209      	str	r2, [sp, #36]	@ 0x24
 8007708:	f89a 3000 	ldrb.w	r3, [sl]
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 809f 	beq.w	8007850 <_vfiprintf_r+0x1ec>
 8007712:	2300      	movs	r3, #0
 8007714:	f04f 32ff 	mov.w	r2, #4294967295
 8007718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800771c:	f10a 0a01 	add.w	sl, sl, #1
 8007720:	9304      	str	r3, [sp, #16]
 8007722:	9307      	str	r3, [sp, #28]
 8007724:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007728:	931a      	str	r3, [sp, #104]	@ 0x68
 800772a:	4654      	mov	r4, sl
 800772c:	2205      	movs	r2, #5
 800772e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007732:	4853      	ldr	r0, [pc, #332]	@ (8007880 <_vfiprintf_r+0x21c>)
 8007734:	f7f8 fd6c 	bl	8000210 <memchr>
 8007738:	9a04      	ldr	r2, [sp, #16]
 800773a:	b9d8      	cbnz	r0, 8007774 <_vfiprintf_r+0x110>
 800773c:	06d1      	lsls	r1, r2, #27
 800773e:	bf44      	itt	mi
 8007740:	2320      	movmi	r3, #32
 8007742:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007746:	0713      	lsls	r3, r2, #28
 8007748:	bf44      	itt	mi
 800774a:	232b      	movmi	r3, #43	@ 0x2b
 800774c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007750:	f89a 3000 	ldrb.w	r3, [sl]
 8007754:	2b2a      	cmp	r3, #42	@ 0x2a
 8007756:	d015      	beq.n	8007784 <_vfiprintf_r+0x120>
 8007758:	9a07      	ldr	r2, [sp, #28]
 800775a:	4654      	mov	r4, sl
 800775c:	2000      	movs	r0, #0
 800775e:	f04f 0c0a 	mov.w	ip, #10
 8007762:	4621      	mov	r1, r4
 8007764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007768:	3b30      	subs	r3, #48	@ 0x30
 800776a:	2b09      	cmp	r3, #9
 800776c:	d94b      	bls.n	8007806 <_vfiprintf_r+0x1a2>
 800776e:	b1b0      	cbz	r0, 800779e <_vfiprintf_r+0x13a>
 8007770:	9207      	str	r2, [sp, #28]
 8007772:	e014      	b.n	800779e <_vfiprintf_r+0x13a>
 8007774:	eba0 0308 	sub.w	r3, r0, r8
 8007778:	fa09 f303 	lsl.w	r3, r9, r3
 800777c:	4313      	orrs	r3, r2
 800777e:	9304      	str	r3, [sp, #16]
 8007780:	46a2      	mov	sl, r4
 8007782:	e7d2      	b.n	800772a <_vfiprintf_r+0xc6>
 8007784:	9b03      	ldr	r3, [sp, #12]
 8007786:	1d19      	adds	r1, r3, #4
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	9103      	str	r1, [sp, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	bfbb      	ittet	lt
 8007790:	425b      	neglt	r3, r3
 8007792:	f042 0202 	orrlt.w	r2, r2, #2
 8007796:	9307      	strge	r3, [sp, #28]
 8007798:	9307      	strlt	r3, [sp, #28]
 800779a:	bfb8      	it	lt
 800779c:	9204      	strlt	r2, [sp, #16]
 800779e:	7823      	ldrb	r3, [r4, #0]
 80077a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80077a2:	d10a      	bne.n	80077ba <_vfiprintf_r+0x156>
 80077a4:	7863      	ldrb	r3, [r4, #1]
 80077a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80077a8:	d132      	bne.n	8007810 <_vfiprintf_r+0x1ac>
 80077aa:	9b03      	ldr	r3, [sp, #12]
 80077ac:	1d1a      	adds	r2, r3, #4
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	9203      	str	r2, [sp, #12]
 80077b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077b6:	3402      	adds	r4, #2
 80077b8:	9305      	str	r3, [sp, #20]
 80077ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007890 <_vfiprintf_r+0x22c>
 80077be:	7821      	ldrb	r1, [r4, #0]
 80077c0:	2203      	movs	r2, #3
 80077c2:	4650      	mov	r0, sl
 80077c4:	f7f8 fd24 	bl	8000210 <memchr>
 80077c8:	b138      	cbz	r0, 80077da <_vfiprintf_r+0x176>
 80077ca:	9b04      	ldr	r3, [sp, #16]
 80077cc:	eba0 000a 	sub.w	r0, r0, sl
 80077d0:	2240      	movs	r2, #64	@ 0x40
 80077d2:	4082      	lsls	r2, r0
 80077d4:	4313      	orrs	r3, r2
 80077d6:	3401      	adds	r4, #1
 80077d8:	9304      	str	r3, [sp, #16]
 80077da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077de:	4829      	ldr	r0, [pc, #164]	@ (8007884 <_vfiprintf_r+0x220>)
 80077e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077e4:	2206      	movs	r2, #6
 80077e6:	f7f8 fd13 	bl	8000210 <memchr>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d03f      	beq.n	800786e <_vfiprintf_r+0x20a>
 80077ee:	4b26      	ldr	r3, [pc, #152]	@ (8007888 <_vfiprintf_r+0x224>)
 80077f0:	bb1b      	cbnz	r3, 800783a <_vfiprintf_r+0x1d6>
 80077f2:	9b03      	ldr	r3, [sp, #12]
 80077f4:	3307      	adds	r3, #7
 80077f6:	f023 0307 	bic.w	r3, r3, #7
 80077fa:	3308      	adds	r3, #8
 80077fc:	9303      	str	r3, [sp, #12]
 80077fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007800:	443b      	add	r3, r7
 8007802:	9309      	str	r3, [sp, #36]	@ 0x24
 8007804:	e76a      	b.n	80076dc <_vfiprintf_r+0x78>
 8007806:	fb0c 3202 	mla	r2, ip, r2, r3
 800780a:	460c      	mov	r4, r1
 800780c:	2001      	movs	r0, #1
 800780e:	e7a8      	b.n	8007762 <_vfiprintf_r+0xfe>
 8007810:	2300      	movs	r3, #0
 8007812:	3401      	adds	r4, #1
 8007814:	9305      	str	r3, [sp, #20]
 8007816:	4619      	mov	r1, r3
 8007818:	f04f 0c0a 	mov.w	ip, #10
 800781c:	4620      	mov	r0, r4
 800781e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007822:	3a30      	subs	r2, #48	@ 0x30
 8007824:	2a09      	cmp	r2, #9
 8007826:	d903      	bls.n	8007830 <_vfiprintf_r+0x1cc>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0c6      	beq.n	80077ba <_vfiprintf_r+0x156>
 800782c:	9105      	str	r1, [sp, #20]
 800782e:	e7c4      	b.n	80077ba <_vfiprintf_r+0x156>
 8007830:	fb0c 2101 	mla	r1, ip, r1, r2
 8007834:	4604      	mov	r4, r0
 8007836:	2301      	movs	r3, #1
 8007838:	e7f0      	b.n	800781c <_vfiprintf_r+0x1b8>
 800783a:	ab03      	add	r3, sp, #12
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	462a      	mov	r2, r5
 8007840:	4b12      	ldr	r3, [pc, #72]	@ (800788c <_vfiprintf_r+0x228>)
 8007842:	a904      	add	r1, sp, #16
 8007844:	4630      	mov	r0, r6
 8007846:	f3af 8000 	nop.w
 800784a:	4607      	mov	r7, r0
 800784c:	1c78      	adds	r0, r7, #1
 800784e:	d1d6      	bne.n	80077fe <_vfiprintf_r+0x19a>
 8007850:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007852:	07d9      	lsls	r1, r3, #31
 8007854:	d405      	bmi.n	8007862 <_vfiprintf_r+0x1fe>
 8007856:	89ab      	ldrh	r3, [r5, #12]
 8007858:	059a      	lsls	r2, r3, #22
 800785a:	d402      	bmi.n	8007862 <_vfiprintf_r+0x1fe>
 800785c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800785e:	f7ff fdcf 	bl	8007400 <__retarget_lock_release_recursive>
 8007862:	89ab      	ldrh	r3, [r5, #12]
 8007864:	065b      	lsls	r3, r3, #25
 8007866:	f53f af1f 	bmi.w	80076a8 <_vfiprintf_r+0x44>
 800786a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800786c:	e71e      	b.n	80076ac <_vfiprintf_r+0x48>
 800786e:	ab03      	add	r3, sp, #12
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	462a      	mov	r2, r5
 8007874:	4b05      	ldr	r3, [pc, #20]	@ (800788c <_vfiprintf_r+0x228>)
 8007876:	a904      	add	r1, sp, #16
 8007878:	4630      	mov	r0, r6
 800787a:	f000 f879 	bl	8007970 <_printf_i>
 800787e:	e7e4      	b.n	800784a <_vfiprintf_r+0x1e6>
 8007880:	08007fe0 	.word	0x08007fe0
 8007884:	08007fea 	.word	0x08007fea
 8007888:	00000000 	.word	0x00000000
 800788c:	0800763f 	.word	0x0800763f
 8007890:	08007fe6 	.word	0x08007fe6

08007894 <_printf_common>:
 8007894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007898:	4616      	mov	r6, r2
 800789a:	4698      	mov	r8, r3
 800789c:	688a      	ldr	r2, [r1, #8]
 800789e:	690b      	ldr	r3, [r1, #16]
 80078a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078a4:	4293      	cmp	r3, r2
 80078a6:	bfb8      	it	lt
 80078a8:	4613      	movlt	r3, r2
 80078aa:	6033      	str	r3, [r6, #0]
 80078ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078b0:	4607      	mov	r7, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	b10a      	cbz	r2, 80078ba <_printf_common+0x26>
 80078b6:	3301      	adds	r3, #1
 80078b8:	6033      	str	r3, [r6, #0]
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	0699      	lsls	r1, r3, #26
 80078be:	bf42      	ittt	mi
 80078c0:	6833      	ldrmi	r3, [r6, #0]
 80078c2:	3302      	addmi	r3, #2
 80078c4:	6033      	strmi	r3, [r6, #0]
 80078c6:	6825      	ldr	r5, [r4, #0]
 80078c8:	f015 0506 	ands.w	r5, r5, #6
 80078cc:	d106      	bne.n	80078dc <_printf_common+0x48>
 80078ce:	f104 0a19 	add.w	sl, r4, #25
 80078d2:	68e3      	ldr	r3, [r4, #12]
 80078d4:	6832      	ldr	r2, [r6, #0]
 80078d6:	1a9b      	subs	r3, r3, r2
 80078d8:	42ab      	cmp	r3, r5
 80078da:	dc26      	bgt.n	800792a <_printf_common+0x96>
 80078dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078e0:	6822      	ldr	r2, [r4, #0]
 80078e2:	3b00      	subs	r3, #0
 80078e4:	bf18      	it	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	0692      	lsls	r2, r2, #26
 80078ea:	d42b      	bmi.n	8007944 <_printf_common+0xb0>
 80078ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078f0:	4641      	mov	r1, r8
 80078f2:	4638      	mov	r0, r7
 80078f4:	47c8      	blx	r9
 80078f6:	3001      	adds	r0, #1
 80078f8:	d01e      	beq.n	8007938 <_printf_common+0xa4>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	6922      	ldr	r2, [r4, #16]
 80078fe:	f003 0306 	and.w	r3, r3, #6
 8007902:	2b04      	cmp	r3, #4
 8007904:	bf02      	ittt	eq
 8007906:	68e5      	ldreq	r5, [r4, #12]
 8007908:	6833      	ldreq	r3, [r6, #0]
 800790a:	1aed      	subeq	r5, r5, r3
 800790c:	68a3      	ldr	r3, [r4, #8]
 800790e:	bf0c      	ite	eq
 8007910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007914:	2500      	movne	r5, #0
 8007916:	4293      	cmp	r3, r2
 8007918:	bfc4      	itt	gt
 800791a:	1a9b      	subgt	r3, r3, r2
 800791c:	18ed      	addgt	r5, r5, r3
 800791e:	2600      	movs	r6, #0
 8007920:	341a      	adds	r4, #26
 8007922:	42b5      	cmp	r5, r6
 8007924:	d11a      	bne.n	800795c <_printf_common+0xc8>
 8007926:	2000      	movs	r0, #0
 8007928:	e008      	b.n	800793c <_printf_common+0xa8>
 800792a:	2301      	movs	r3, #1
 800792c:	4652      	mov	r2, sl
 800792e:	4641      	mov	r1, r8
 8007930:	4638      	mov	r0, r7
 8007932:	47c8      	blx	r9
 8007934:	3001      	adds	r0, #1
 8007936:	d103      	bne.n	8007940 <_printf_common+0xac>
 8007938:	f04f 30ff 	mov.w	r0, #4294967295
 800793c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007940:	3501      	adds	r5, #1
 8007942:	e7c6      	b.n	80078d2 <_printf_common+0x3e>
 8007944:	18e1      	adds	r1, r4, r3
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	2030      	movs	r0, #48	@ 0x30
 800794a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800794e:	4422      	add	r2, r4
 8007950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007958:	3302      	adds	r3, #2
 800795a:	e7c7      	b.n	80078ec <_printf_common+0x58>
 800795c:	2301      	movs	r3, #1
 800795e:	4622      	mov	r2, r4
 8007960:	4641      	mov	r1, r8
 8007962:	4638      	mov	r0, r7
 8007964:	47c8      	blx	r9
 8007966:	3001      	adds	r0, #1
 8007968:	d0e6      	beq.n	8007938 <_printf_common+0xa4>
 800796a:	3601      	adds	r6, #1
 800796c:	e7d9      	b.n	8007922 <_printf_common+0x8e>
	...

08007970 <_printf_i>:
 8007970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	7e0f      	ldrb	r7, [r1, #24]
 8007976:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007978:	2f78      	cmp	r7, #120	@ 0x78
 800797a:	4691      	mov	r9, r2
 800797c:	4680      	mov	r8, r0
 800797e:	460c      	mov	r4, r1
 8007980:	469a      	mov	sl, r3
 8007982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007986:	d807      	bhi.n	8007998 <_printf_i+0x28>
 8007988:	2f62      	cmp	r7, #98	@ 0x62
 800798a:	d80a      	bhi.n	80079a2 <_printf_i+0x32>
 800798c:	2f00      	cmp	r7, #0
 800798e:	f000 80d2 	beq.w	8007b36 <_printf_i+0x1c6>
 8007992:	2f58      	cmp	r7, #88	@ 0x58
 8007994:	f000 80b9 	beq.w	8007b0a <_printf_i+0x19a>
 8007998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800799c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079a0:	e03a      	b.n	8007a18 <_printf_i+0xa8>
 80079a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079a6:	2b15      	cmp	r3, #21
 80079a8:	d8f6      	bhi.n	8007998 <_printf_i+0x28>
 80079aa:	a101      	add	r1, pc, #4	@ (adr r1, 80079b0 <_printf_i+0x40>)
 80079ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079b0:	08007a09 	.word	0x08007a09
 80079b4:	08007a1d 	.word	0x08007a1d
 80079b8:	08007999 	.word	0x08007999
 80079bc:	08007999 	.word	0x08007999
 80079c0:	08007999 	.word	0x08007999
 80079c4:	08007999 	.word	0x08007999
 80079c8:	08007a1d 	.word	0x08007a1d
 80079cc:	08007999 	.word	0x08007999
 80079d0:	08007999 	.word	0x08007999
 80079d4:	08007999 	.word	0x08007999
 80079d8:	08007999 	.word	0x08007999
 80079dc:	08007b1d 	.word	0x08007b1d
 80079e0:	08007a47 	.word	0x08007a47
 80079e4:	08007ad7 	.word	0x08007ad7
 80079e8:	08007999 	.word	0x08007999
 80079ec:	08007999 	.word	0x08007999
 80079f0:	08007b3f 	.word	0x08007b3f
 80079f4:	08007999 	.word	0x08007999
 80079f8:	08007a47 	.word	0x08007a47
 80079fc:	08007999 	.word	0x08007999
 8007a00:	08007999 	.word	0x08007999
 8007a04:	08007adf 	.word	0x08007adf
 8007a08:	6833      	ldr	r3, [r6, #0]
 8007a0a:	1d1a      	adds	r2, r3, #4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6032      	str	r2, [r6, #0]
 8007a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e09d      	b.n	8007b58 <_printf_i+0x1e8>
 8007a1c:	6833      	ldr	r3, [r6, #0]
 8007a1e:	6820      	ldr	r0, [r4, #0]
 8007a20:	1d19      	adds	r1, r3, #4
 8007a22:	6031      	str	r1, [r6, #0]
 8007a24:	0606      	lsls	r6, r0, #24
 8007a26:	d501      	bpl.n	8007a2c <_printf_i+0xbc>
 8007a28:	681d      	ldr	r5, [r3, #0]
 8007a2a:	e003      	b.n	8007a34 <_printf_i+0xc4>
 8007a2c:	0645      	lsls	r5, r0, #25
 8007a2e:	d5fb      	bpl.n	8007a28 <_printf_i+0xb8>
 8007a30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	da03      	bge.n	8007a40 <_printf_i+0xd0>
 8007a38:	232d      	movs	r3, #45	@ 0x2d
 8007a3a:	426d      	negs	r5, r5
 8007a3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a40:	4859      	ldr	r0, [pc, #356]	@ (8007ba8 <_printf_i+0x238>)
 8007a42:	230a      	movs	r3, #10
 8007a44:	e011      	b.n	8007a6a <_printf_i+0xfa>
 8007a46:	6821      	ldr	r1, [r4, #0]
 8007a48:	6833      	ldr	r3, [r6, #0]
 8007a4a:	0608      	lsls	r0, r1, #24
 8007a4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a50:	d402      	bmi.n	8007a58 <_printf_i+0xe8>
 8007a52:	0649      	lsls	r1, r1, #25
 8007a54:	bf48      	it	mi
 8007a56:	b2ad      	uxthmi	r5, r5
 8007a58:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a5a:	4853      	ldr	r0, [pc, #332]	@ (8007ba8 <_printf_i+0x238>)
 8007a5c:	6033      	str	r3, [r6, #0]
 8007a5e:	bf14      	ite	ne
 8007a60:	230a      	movne	r3, #10
 8007a62:	2308      	moveq	r3, #8
 8007a64:	2100      	movs	r1, #0
 8007a66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a6a:	6866      	ldr	r6, [r4, #4]
 8007a6c:	60a6      	str	r6, [r4, #8]
 8007a6e:	2e00      	cmp	r6, #0
 8007a70:	bfa2      	ittt	ge
 8007a72:	6821      	ldrge	r1, [r4, #0]
 8007a74:	f021 0104 	bicge.w	r1, r1, #4
 8007a78:	6021      	strge	r1, [r4, #0]
 8007a7a:	b90d      	cbnz	r5, 8007a80 <_printf_i+0x110>
 8007a7c:	2e00      	cmp	r6, #0
 8007a7e:	d04b      	beq.n	8007b18 <_printf_i+0x1a8>
 8007a80:	4616      	mov	r6, r2
 8007a82:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a86:	fb03 5711 	mls	r7, r3, r1, r5
 8007a8a:	5dc7      	ldrb	r7, [r0, r7]
 8007a8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a90:	462f      	mov	r7, r5
 8007a92:	42bb      	cmp	r3, r7
 8007a94:	460d      	mov	r5, r1
 8007a96:	d9f4      	bls.n	8007a82 <_printf_i+0x112>
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d10b      	bne.n	8007ab4 <_printf_i+0x144>
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	07df      	lsls	r7, r3, #31
 8007aa0:	d508      	bpl.n	8007ab4 <_printf_i+0x144>
 8007aa2:	6923      	ldr	r3, [r4, #16]
 8007aa4:	6861      	ldr	r1, [r4, #4]
 8007aa6:	4299      	cmp	r1, r3
 8007aa8:	bfde      	ittt	le
 8007aaa:	2330      	movle	r3, #48	@ 0x30
 8007aac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ab0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ab4:	1b92      	subs	r2, r2, r6
 8007ab6:	6122      	str	r2, [r4, #16]
 8007ab8:	f8cd a000 	str.w	sl, [sp]
 8007abc:	464b      	mov	r3, r9
 8007abe:	aa03      	add	r2, sp, #12
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	f7ff fee6 	bl	8007894 <_printf_common>
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d14a      	bne.n	8007b62 <_printf_i+0x1f2>
 8007acc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad0:	b004      	add	sp, #16
 8007ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	f043 0320 	orr.w	r3, r3, #32
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	4833      	ldr	r0, [pc, #204]	@ (8007bac <_printf_i+0x23c>)
 8007ae0:	2778      	movs	r7, #120	@ 0x78
 8007ae2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	6831      	ldr	r1, [r6, #0]
 8007aea:	061f      	lsls	r7, r3, #24
 8007aec:	f851 5b04 	ldr.w	r5, [r1], #4
 8007af0:	d402      	bmi.n	8007af8 <_printf_i+0x188>
 8007af2:	065f      	lsls	r7, r3, #25
 8007af4:	bf48      	it	mi
 8007af6:	b2ad      	uxthmi	r5, r5
 8007af8:	6031      	str	r1, [r6, #0]
 8007afa:	07d9      	lsls	r1, r3, #31
 8007afc:	bf44      	itt	mi
 8007afe:	f043 0320 	orrmi.w	r3, r3, #32
 8007b02:	6023      	strmi	r3, [r4, #0]
 8007b04:	b11d      	cbz	r5, 8007b0e <_printf_i+0x19e>
 8007b06:	2310      	movs	r3, #16
 8007b08:	e7ac      	b.n	8007a64 <_printf_i+0xf4>
 8007b0a:	4827      	ldr	r0, [pc, #156]	@ (8007ba8 <_printf_i+0x238>)
 8007b0c:	e7e9      	b.n	8007ae2 <_printf_i+0x172>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	f023 0320 	bic.w	r3, r3, #32
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	e7f6      	b.n	8007b06 <_printf_i+0x196>
 8007b18:	4616      	mov	r6, r2
 8007b1a:	e7bd      	b.n	8007a98 <_printf_i+0x128>
 8007b1c:	6833      	ldr	r3, [r6, #0]
 8007b1e:	6825      	ldr	r5, [r4, #0]
 8007b20:	6961      	ldr	r1, [r4, #20]
 8007b22:	1d18      	adds	r0, r3, #4
 8007b24:	6030      	str	r0, [r6, #0]
 8007b26:	062e      	lsls	r6, r5, #24
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	d501      	bpl.n	8007b30 <_printf_i+0x1c0>
 8007b2c:	6019      	str	r1, [r3, #0]
 8007b2e:	e002      	b.n	8007b36 <_printf_i+0x1c6>
 8007b30:	0668      	lsls	r0, r5, #25
 8007b32:	d5fb      	bpl.n	8007b2c <_printf_i+0x1bc>
 8007b34:	8019      	strh	r1, [r3, #0]
 8007b36:	2300      	movs	r3, #0
 8007b38:	6123      	str	r3, [r4, #16]
 8007b3a:	4616      	mov	r6, r2
 8007b3c:	e7bc      	b.n	8007ab8 <_printf_i+0x148>
 8007b3e:	6833      	ldr	r3, [r6, #0]
 8007b40:	1d1a      	adds	r2, r3, #4
 8007b42:	6032      	str	r2, [r6, #0]
 8007b44:	681e      	ldr	r6, [r3, #0]
 8007b46:	6862      	ldr	r2, [r4, #4]
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f7f8 fb60 	bl	8000210 <memchr>
 8007b50:	b108      	cbz	r0, 8007b56 <_printf_i+0x1e6>
 8007b52:	1b80      	subs	r0, r0, r6
 8007b54:	6060      	str	r0, [r4, #4]
 8007b56:	6863      	ldr	r3, [r4, #4]
 8007b58:	6123      	str	r3, [r4, #16]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b60:	e7aa      	b.n	8007ab8 <_printf_i+0x148>
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	4632      	mov	r2, r6
 8007b66:	4649      	mov	r1, r9
 8007b68:	4640      	mov	r0, r8
 8007b6a:	47d0      	blx	sl
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	d0ad      	beq.n	8007acc <_printf_i+0x15c>
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	079b      	lsls	r3, r3, #30
 8007b74:	d413      	bmi.n	8007b9e <_printf_i+0x22e>
 8007b76:	68e0      	ldr	r0, [r4, #12]
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	4298      	cmp	r0, r3
 8007b7c:	bfb8      	it	lt
 8007b7e:	4618      	movlt	r0, r3
 8007b80:	e7a6      	b.n	8007ad0 <_printf_i+0x160>
 8007b82:	2301      	movs	r3, #1
 8007b84:	4632      	mov	r2, r6
 8007b86:	4649      	mov	r1, r9
 8007b88:	4640      	mov	r0, r8
 8007b8a:	47d0      	blx	sl
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d09d      	beq.n	8007acc <_printf_i+0x15c>
 8007b90:	3501      	adds	r5, #1
 8007b92:	68e3      	ldr	r3, [r4, #12]
 8007b94:	9903      	ldr	r1, [sp, #12]
 8007b96:	1a5b      	subs	r3, r3, r1
 8007b98:	42ab      	cmp	r3, r5
 8007b9a:	dcf2      	bgt.n	8007b82 <_printf_i+0x212>
 8007b9c:	e7eb      	b.n	8007b76 <_printf_i+0x206>
 8007b9e:	2500      	movs	r5, #0
 8007ba0:	f104 0619 	add.w	r6, r4, #25
 8007ba4:	e7f5      	b.n	8007b92 <_printf_i+0x222>
 8007ba6:	bf00      	nop
 8007ba8:	08007ff1 	.word	0x08007ff1
 8007bac:	08008002 	.word	0x08008002

08007bb0 <__sflush_r>:
 8007bb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb8:	0716      	lsls	r6, r2, #28
 8007bba:	4605      	mov	r5, r0
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	d454      	bmi.n	8007c6a <__sflush_r+0xba>
 8007bc0:	684b      	ldr	r3, [r1, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dc02      	bgt.n	8007bcc <__sflush_r+0x1c>
 8007bc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	dd48      	ble.n	8007c5e <__sflush_r+0xae>
 8007bcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bce:	2e00      	cmp	r6, #0
 8007bd0:	d045      	beq.n	8007c5e <__sflush_r+0xae>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bd8:	682f      	ldr	r7, [r5, #0]
 8007bda:	6a21      	ldr	r1, [r4, #32]
 8007bdc:	602b      	str	r3, [r5, #0]
 8007bde:	d030      	beq.n	8007c42 <__sflush_r+0x92>
 8007be0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	0759      	lsls	r1, r3, #29
 8007be6:	d505      	bpl.n	8007bf4 <__sflush_r+0x44>
 8007be8:	6863      	ldr	r3, [r4, #4]
 8007bea:	1ad2      	subs	r2, r2, r3
 8007bec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bee:	b10b      	cbz	r3, 8007bf4 <__sflush_r+0x44>
 8007bf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bf2:	1ad2      	subs	r2, r2, r3
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bf8:	6a21      	ldr	r1, [r4, #32]
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	47b0      	blx	r6
 8007bfe:	1c43      	adds	r3, r0, #1
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	d106      	bne.n	8007c12 <__sflush_r+0x62>
 8007c04:	6829      	ldr	r1, [r5, #0]
 8007c06:	291d      	cmp	r1, #29
 8007c08:	d82b      	bhi.n	8007c62 <__sflush_r+0xb2>
 8007c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8007cb4 <__sflush_r+0x104>)
 8007c0c:	410a      	asrs	r2, r1
 8007c0e:	07d6      	lsls	r6, r2, #31
 8007c10:	d427      	bmi.n	8007c62 <__sflush_r+0xb2>
 8007c12:	2200      	movs	r2, #0
 8007c14:	6062      	str	r2, [r4, #4]
 8007c16:	04d9      	lsls	r1, r3, #19
 8007c18:	6922      	ldr	r2, [r4, #16]
 8007c1a:	6022      	str	r2, [r4, #0]
 8007c1c:	d504      	bpl.n	8007c28 <__sflush_r+0x78>
 8007c1e:	1c42      	adds	r2, r0, #1
 8007c20:	d101      	bne.n	8007c26 <__sflush_r+0x76>
 8007c22:	682b      	ldr	r3, [r5, #0]
 8007c24:	b903      	cbnz	r3, 8007c28 <__sflush_r+0x78>
 8007c26:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c2a:	602f      	str	r7, [r5, #0]
 8007c2c:	b1b9      	cbz	r1, 8007c5e <__sflush_r+0xae>
 8007c2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c32:	4299      	cmp	r1, r3
 8007c34:	d002      	beq.n	8007c3c <__sflush_r+0x8c>
 8007c36:	4628      	mov	r0, r5
 8007c38:	f7ff fbf2 	bl	8007420 <_free_r>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c40:	e00d      	b.n	8007c5e <__sflush_r+0xae>
 8007c42:	2301      	movs	r3, #1
 8007c44:	4628      	mov	r0, r5
 8007c46:	47b0      	blx	r6
 8007c48:	4602      	mov	r2, r0
 8007c4a:	1c50      	adds	r0, r2, #1
 8007c4c:	d1c9      	bne.n	8007be2 <__sflush_r+0x32>
 8007c4e:	682b      	ldr	r3, [r5, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d0c6      	beq.n	8007be2 <__sflush_r+0x32>
 8007c54:	2b1d      	cmp	r3, #29
 8007c56:	d001      	beq.n	8007c5c <__sflush_r+0xac>
 8007c58:	2b16      	cmp	r3, #22
 8007c5a:	d11e      	bne.n	8007c9a <__sflush_r+0xea>
 8007c5c:	602f      	str	r7, [r5, #0]
 8007c5e:	2000      	movs	r0, #0
 8007c60:	e022      	b.n	8007ca8 <__sflush_r+0xf8>
 8007c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c66:	b21b      	sxth	r3, r3
 8007c68:	e01b      	b.n	8007ca2 <__sflush_r+0xf2>
 8007c6a:	690f      	ldr	r7, [r1, #16]
 8007c6c:	2f00      	cmp	r7, #0
 8007c6e:	d0f6      	beq.n	8007c5e <__sflush_r+0xae>
 8007c70:	0793      	lsls	r3, r2, #30
 8007c72:	680e      	ldr	r6, [r1, #0]
 8007c74:	bf08      	it	eq
 8007c76:	694b      	ldreq	r3, [r1, #20]
 8007c78:	600f      	str	r7, [r1, #0]
 8007c7a:	bf18      	it	ne
 8007c7c:	2300      	movne	r3, #0
 8007c7e:	eba6 0807 	sub.w	r8, r6, r7
 8007c82:	608b      	str	r3, [r1, #8]
 8007c84:	f1b8 0f00 	cmp.w	r8, #0
 8007c88:	dde9      	ble.n	8007c5e <__sflush_r+0xae>
 8007c8a:	6a21      	ldr	r1, [r4, #32]
 8007c8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c8e:	4643      	mov	r3, r8
 8007c90:	463a      	mov	r2, r7
 8007c92:	4628      	mov	r0, r5
 8007c94:	47b0      	blx	r6
 8007c96:	2800      	cmp	r0, #0
 8007c98:	dc08      	bgt.n	8007cac <__sflush_r+0xfc>
 8007c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ca2:	81a3      	strh	r3, [r4, #12]
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cac:	4407      	add	r7, r0
 8007cae:	eba8 0800 	sub.w	r8, r8, r0
 8007cb2:	e7e7      	b.n	8007c84 <__sflush_r+0xd4>
 8007cb4:	dfbffffe 	.word	0xdfbffffe

08007cb8 <_fflush_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	690b      	ldr	r3, [r1, #16]
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	460c      	mov	r4, r1
 8007cc0:	b913      	cbnz	r3, 8007cc8 <_fflush_r+0x10>
 8007cc2:	2500      	movs	r5, #0
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	b118      	cbz	r0, 8007cd2 <_fflush_r+0x1a>
 8007cca:	6a03      	ldr	r3, [r0, #32]
 8007ccc:	b90b      	cbnz	r3, 8007cd2 <_fflush_r+0x1a>
 8007cce:	f7ff f949 	bl	8006f64 <__sinit>
 8007cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0f3      	beq.n	8007cc2 <_fflush_r+0xa>
 8007cda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cdc:	07d0      	lsls	r0, r2, #31
 8007cde:	d404      	bmi.n	8007cea <_fflush_r+0x32>
 8007ce0:	0599      	lsls	r1, r3, #22
 8007ce2:	d402      	bmi.n	8007cea <_fflush_r+0x32>
 8007ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ce6:	f7ff fb8a 	bl	80073fe <__retarget_lock_acquire_recursive>
 8007cea:	4628      	mov	r0, r5
 8007cec:	4621      	mov	r1, r4
 8007cee:	f7ff ff5f 	bl	8007bb0 <__sflush_r>
 8007cf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cf4:	07da      	lsls	r2, r3, #31
 8007cf6:	4605      	mov	r5, r0
 8007cf8:	d4e4      	bmi.n	8007cc4 <_fflush_r+0xc>
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	059b      	lsls	r3, r3, #22
 8007cfe:	d4e1      	bmi.n	8007cc4 <_fflush_r+0xc>
 8007d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d02:	f7ff fb7d 	bl	8007400 <__retarget_lock_release_recursive>
 8007d06:	e7dd      	b.n	8007cc4 <_fflush_r+0xc>

08007d08 <__swhatbuf_r>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d10:	2900      	cmp	r1, #0
 8007d12:	b096      	sub	sp, #88	@ 0x58
 8007d14:	4615      	mov	r5, r2
 8007d16:	461e      	mov	r6, r3
 8007d18:	da0d      	bge.n	8007d36 <__swhatbuf_r+0x2e>
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d20:	f04f 0100 	mov.w	r1, #0
 8007d24:	bf14      	ite	ne
 8007d26:	2340      	movne	r3, #64	@ 0x40
 8007d28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	6031      	str	r1, [r6, #0]
 8007d30:	602b      	str	r3, [r5, #0]
 8007d32:	b016      	add	sp, #88	@ 0x58
 8007d34:	bd70      	pop	{r4, r5, r6, pc}
 8007d36:	466a      	mov	r2, sp
 8007d38:	f000 f848 	bl	8007dcc <_fstat_r>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	dbec      	blt.n	8007d1a <__swhatbuf_r+0x12>
 8007d40:	9901      	ldr	r1, [sp, #4]
 8007d42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d4a:	4259      	negs	r1, r3
 8007d4c:	4159      	adcs	r1, r3
 8007d4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d52:	e7eb      	b.n	8007d2c <__swhatbuf_r+0x24>

08007d54 <__smakebuf_r>:
 8007d54:	898b      	ldrh	r3, [r1, #12]
 8007d56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d58:	079d      	lsls	r5, r3, #30
 8007d5a:	4606      	mov	r6, r0
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	d507      	bpl.n	8007d70 <__smakebuf_r+0x1c>
 8007d60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	6123      	str	r3, [r4, #16]
 8007d68:	2301      	movs	r3, #1
 8007d6a:	6163      	str	r3, [r4, #20]
 8007d6c:	b003      	add	sp, #12
 8007d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d70:	ab01      	add	r3, sp, #4
 8007d72:	466a      	mov	r2, sp
 8007d74:	f7ff ffc8 	bl	8007d08 <__swhatbuf_r>
 8007d78:	9f00      	ldr	r7, [sp, #0]
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	4630      	mov	r0, r6
 8007d80:	f7ff fbba 	bl	80074f8 <_malloc_r>
 8007d84:	b948      	cbnz	r0, 8007d9a <__smakebuf_r+0x46>
 8007d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8a:	059a      	lsls	r2, r3, #22
 8007d8c:	d4ee      	bmi.n	8007d6c <__smakebuf_r+0x18>
 8007d8e:	f023 0303 	bic.w	r3, r3, #3
 8007d92:	f043 0302 	orr.w	r3, r3, #2
 8007d96:	81a3      	strh	r3, [r4, #12]
 8007d98:	e7e2      	b.n	8007d60 <__smakebuf_r+0xc>
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	6020      	str	r0, [r4, #0]
 8007d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007da2:	81a3      	strh	r3, [r4, #12]
 8007da4:	9b01      	ldr	r3, [sp, #4]
 8007da6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007daa:	b15b      	cbz	r3, 8007dc4 <__smakebuf_r+0x70>
 8007dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db0:	4630      	mov	r0, r6
 8007db2:	f000 f81d 	bl	8007df0 <_isatty_r>
 8007db6:	b128      	cbz	r0, 8007dc4 <__smakebuf_r+0x70>
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	f023 0303 	bic.w	r3, r3, #3
 8007dbe:	f043 0301 	orr.w	r3, r3, #1
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	431d      	orrs	r5, r3
 8007dc8:	81a5      	strh	r5, [r4, #12]
 8007dca:	e7cf      	b.n	8007d6c <__smakebuf_r+0x18>

08007dcc <_fstat_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4d07      	ldr	r5, [pc, #28]	@ (8007dec <_fstat_r+0x20>)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	602b      	str	r3, [r5, #0]
 8007dda:	f7f9 fab6 	bl	800134a <_fstat>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d102      	bne.n	8007de8 <_fstat_r+0x1c>
 8007de2:	682b      	ldr	r3, [r5, #0]
 8007de4:	b103      	cbz	r3, 8007de8 <_fstat_r+0x1c>
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	bd38      	pop	{r3, r4, r5, pc}
 8007dea:	bf00      	nop
 8007dec:	20004c8c 	.word	0x20004c8c

08007df0 <_isatty_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	4d06      	ldr	r5, [pc, #24]	@ (8007e0c <_isatty_r+0x1c>)
 8007df4:	2300      	movs	r3, #0
 8007df6:	4604      	mov	r4, r0
 8007df8:	4608      	mov	r0, r1
 8007dfa:	602b      	str	r3, [r5, #0]
 8007dfc:	f7f9 fab5 	bl	800136a <_isatty>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_isatty_r+0x1a>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_isatty_r+0x1a>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	20004c8c 	.word	0x20004c8c

08007e10 <_sbrk_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4d06      	ldr	r5, [pc, #24]	@ (8007e2c <_sbrk_r+0x1c>)
 8007e14:	2300      	movs	r3, #0
 8007e16:	4604      	mov	r4, r0
 8007e18:	4608      	mov	r0, r1
 8007e1a:	602b      	str	r3, [r5, #0]
 8007e1c:	f7f9 fabe 	bl	800139c <_sbrk>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_sbrk_r+0x1a>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_sbrk_r+0x1a>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	20004c8c 	.word	0x20004c8c

08007e30 <_init>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	bf00      	nop
 8007e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e36:	bc08      	pop	{r3}
 8007e38:	469e      	mov	lr, r3
 8007e3a:	4770      	bx	lr

08007e3c <_fini>:
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3e:	bf00      	nop
 8007e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e42:	bc08      	pop	{r3}
 8007e44:	469e      	mov	lr, r3
 8007e46:	4770      	bx	lr
