
TP_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005114  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080052e4  080052e4  000062e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800531c  0800531c  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  0800531c  0800531c  0000631c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005324  08005324  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005324  08005324  00006324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005328  08005328  00006328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800532c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b88  20000060  0800538c  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004be8  0800538c  00007be8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e4c  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f17  00000000  00000000  0001bedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0001edf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d99  00000000  00000000  0001ff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002daa  00000000  00000000  00020d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bb5  00000000  00000000  00023adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f62f1  00000000  00000000  00038690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e981  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c24  00000000  00000000  0012e9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001335e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080052cc 	.word	0x080052cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080052cc 	.word	0x080052cc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b090      	sub	sp, #64	@ 0x40
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000516:	4bae      	ldr	r3, [pc, #696]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	4aad      	ldr	r2, [pc, #692]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800051c:	f043 0310 	orr.w	r3, r3, #16
 8000520:	6313      	str	r3, [r2, #48]	@ 0x30
 8000522:	4bab      	ldr	r3, [pc, #684]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	f003 0310 	and.w	r3, r3, #16
 800052a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800052c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800052e:	4ba8      	ldr	r3, [pc, #672]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4aa7      	ldr	r2, [pc, #668]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
 800053a:	4ba5      	ldr	r3, [pc, #660]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000542:	627b      	str	r3, [r7, #36]	@ 0x24
 8000544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4ba2      	ldr	r3, [pc, #648]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4aa1      	ldr	r2, [pc, #644]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b9f      	ldr	r3, [pc, #636]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	623b      	str	r3, [r7, #32]
 800055c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055e:	4b9c      	ldr	r3, [pc, #624]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	4a9b      	ldr	r2, [pc, #620]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	6313      	str	r3, [r2, #48]	@ 0x30
 800056a:	4b99      	ldr	r3, [pc, #612]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	f003 0308 	and.w	r3, r3, #8
 8000572:	61fb      	str	r3, [r7, #28]
 8000574:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b96      	ldr	r3, [pc, #600]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	4a95      	ldr	r2, [pc, #596]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	6313      	str	r3, [r2, #48]	@ 0x30
 8000582:	4b93      	ldr	r3, [pc, #588]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	61bb      	str	r3, [r7, #24]
 800058c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b90      	ldr	r3, [pc, #576]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	4a8f      	ldr	r2, [pc, #572]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6313      	str	r3, [r2, #48]	@ 0x30
 800059a:	4b8d      	ldr	r3, [pc, #564]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80005a6:	4b8a      	ldr	r3, [pc, #552]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a89      	ldr	r2, [pc, #548]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b87      	ldr	r3, [pc, #540]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005be:	4b84      	ldr	r3, [pc, #528]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a83      	ldr	r2, [pc, #524]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b81      	ldr	r3, [pc, #516]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80005d6:	4b7e      	ldr	r3, [pc, #504]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a7d      	ldr	r2, [pc, #500]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b7b      	ldr	r3, [pc, #492]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ee:	4b78      	ldr	r3, [pc, #480]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a77      	ldr	r2, [pc, #476]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005f4:	f043 0320 	orr.w	r3, r3, #32
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b75      	ldr	r3, [pc, #468]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	4b72      	ldr	r3, [pc, #456]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a71      	ldr	r2, [pc, #452]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b6f      	ldr	r3, [pc, #444]	@ (80007d0 <MX_GPIO_Init+0x2d0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2180      	movs	r1, #128	@ 0x80
 8000622:	486c      	ldr	r0, [pc, #432]	@ (80007d4 <MX_GPIO_Init+0x2d4>)
 8000624:	f001 f878 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2120      	movs	r1, #32
 800062c:	486a      	ldr	r0, [pc, #424]	@ (80007d8 <MX_GPIO_Init+0x2d8>)
 800062e:	f001 f873 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f241 010e 	movw	r1, #4110	@ 0x100e
 8000638:	4868      	ldr	r0, [pc, #416]	@ (80007dc <MX_GPIO_Init+0x2dc>)
 800063a:	f001 f86d 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2108      	movs	r1, #8
 8000642:	4867      	ldr	r0, [pc, #412]	@ (80007e0 <MX_GPIO_Init+0x2e0>)
 8000644:	f001 f868 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800064e:	4865      	ldr	r0, [pc, #404]	@ (80007e4 <MX_GPIO_Init+0x2e4>)
 8000650:	f001 f862 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	21c8      	movs	r1, #200	@ 0xc8
 8000658:	4863      	ldr	r0, [pc, #396]	@ (80007e8 <MX_GPIO_Init+0x2e8>)
 800065a:	f001 f85d 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800065e:	2310      	movs	r3, #16
 8000660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000662:	2302      	movs	r3, #2
 8000664:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800066e:	230e      	movs	r3, #14
 8000670:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000676:	4619      	mov	r1, r3
 8000678:	485c      	ldr	r0, [pc, #368]	@ (80007ec <MX_GPIO_Init+0x2ec>)
 800067a:	f000 fea1 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800067e:	2308      	movs	r3, #8
 8000680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800068e:	4619      	mov	r1, r3
 8000690:	4856      	ldr	r0, [pc, #344]	@ (80007ec <MX_GPIO_Init+0x2ec>)
 8000692:	f000 fe95 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000696:	2304      	movs	r3, #4
 8000698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80006a6:	2309      	movs	r3, #9
 80006a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006ae:	4619      	mov	r1, r3
 80006b0:	484e      	ldr	r0, [pc, #312]	@ (80007ec <MX_GPIO_Init+0x2ec>)
 80006b2:	f000 fe85 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80006b6:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c8:	230b      	movs	r3, #11
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006d0:	4619      	mov	r1, r3
 80006d2:	4845      	ldr	r0, [pc, #276]	@ (80007e8 <MX_GPIO_Init+0x2e8>)
 80006d4:	f000 fe74 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80006d8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80006dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e6:	2303      	movs	r3, #3
 80006e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006ea:	230c      	movs	r3, #12
 80006ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006f2:	4619      	mov	r1, r3
 80006f4:	483d      	ldr	r0, [pc, #244]	@ (80007ec <MX_GPIO_Init+0x2ec>)
 80006f6:	f000 fe63 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80006fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000700:	2312      	movs	r3, #18
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800070c:	2304      	movs	r3, #4
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000714:	4619      	mov	r1, r3
 8000716:	482f      	ldr	r0, [pc, #188]	@ (80007d4 <MX_GPIO_Init+0x2d4>)
 8000718:	f000 fe52 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800071c:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8000720:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800072e:	230a      	movs	r3, #10
 8000730:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000736:	4619      	mov	r1, r3
 8000738:	4826      	ldr	r0, [pc, #152]	@ (80007d4 <MX_GPIO_Init+0x2d4>)
 800073a:	f000 fe41 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800073e:	2310      	movs	r3, #16
 8000740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800074e:	2302      	movs	r3, #2
 8000750:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000756:	4619      	mov	r1, r3
 8000758:	481e      	ldr	r0, [pc, #120]	@ (80007d4 <MX_GPIO_Init+0x2d4>)
 800075a:	f000 fe31 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800075e:	2380      	movs	r3, #128	@ 0x80
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800076e:	2308      	movs	r3, #8
 8000770:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000772:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000776:	4619      	mov	r1, r3
 8000778:	4817      	ldr	r0, [pc, #92]	@ (80007d8 <MX_GPIO_Init+0x2d8>)
 800077a:	f000 fe21 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800077e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000790:	230c      	movs	r3, #12
 8000792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000794:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000798:	4619      	mov	r1, r3
 800079a:	4815      	ldr	r0, [pc, #84]	@ (80007f0 <MX_GPIO_Init+0x2f0>)
 800079c:	f000 fe10 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80007a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007b2:	2301      	movs	r3, #1
 80007b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	@ (80007f4 <MX_GPIO_Init+0x2f4>)
 80007be:	f000 fdff 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007c2:	2360      	movs	r3, #96	@ 0x60
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e014      	b.n	80007f8 <MX_GPIO_Init+0x2f8>
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400
 80007d8:	40020c00 	.word	0x40020c00
 80007dc:	40022000 	.word	0x40022000
 80007e0:	40022800 	.word	0x40022800
 80007e4:	40021c00 	.word	0x40021c00
 80007e8:	40021800 	.word	0x40021800
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40020800 	.word	0x40020800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007fe:	230d      	movs	r3, #13
 8000800:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000802:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000806:	4619      	mov	r1, r3
 8000808:	48bc      	ldr	r0, [pc, #752]	@ (8000afc <MX_GPIO_Init+0x5fc>)
 800080a:	f000 fdd9 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800080e:	2380      	movs	r3, #128	@ 0x80
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000822:	4619      	mov	r1, r3
 8000824:	48b6      	ldr	r0, [pc, #728]	@ (8000b00 <MX_GPIO_Init+0x600>)
 8000826:	f000 fdcb 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800082a:	2340      	movs	r3, #64	@ 0x40
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800083a:	230a      	movs	r3, #10
 800083c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000842:	4619      	mov	r1, r3
 8000844:	48ae      	ldr	r0, [pc, #696]	@ (8000b00 <MX_GPIO_Init+0x600>)
 8000846:	f000 fdbb 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800084a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800085c:	230c      	movs	r3, #12
 800085e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000864:	4619      	mov	r1, r3
 8000866:	48a7      	ldr	r0, [pc, #668]	@ (8000b04 <MX_GPIO_Init+0x604>)
 8000868:	f000 fdaa 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800086c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000870:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800087e:	230e      	movs	r3, #14
 8000880:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000882:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000886:	4619      	mov	r1, r3
 8000888:	489f      	ldr	r0, [pc, #636]	@ (8000b08 <MX_GPIO_Init+0x608>)
 800088a:	f000 fd99 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800088e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008a0:	4619      	mov	r1, r3
 80008a2:	4899      	ldr	r0, [pc, #612]	@ (8000b08 <MX_GPIO_Init+0x608>)
 80008a4:	f000 fd8c 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80008a8:	2340      	movs	r3, #64	@ 0x40
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ac:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ba:	4619      	mov	r1, r3
 80008bc:	4893      	ldr	r0, [pc, #588]	@ (8000b0c <MX_GPIO_Init+0x60c>)
 80008be:	f000 fd7f 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80008c2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008d4:	230c      	movs	r3, #12
 80008d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008dc:	4619      	mov	r1, r3
 80008de:	488b      	ldr	r0, [pc, #556]	@ (8000b0c <MX_GPIO_Init+0x60c>)
 80008e0:	f000 fd6e 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80008e4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008f6:	230a      	movs	r3, #10
 80008f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008fe:	4619      	mov	r1, r3
 8000900:	4883      	ldr	r0, [pc, #524]	@ (8000b10 <MX_GPIO_Init+0x610>)
 8000902:	f000 fd5d 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000906:	23f0      	movs	r3, #240	@ 0xf0
 8000908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000916:	230a      	movs	r3, #10
 8000918:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800091a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800091e:	4619      	mov	r1, r3
 8000920:	487c      	ldr	r0, [pc, #496]	@ (8000b14 <MX_GPIO_Init+0x614>)
 8000922:	f000 fd4d 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000926:	23f7      	movs	r3, #247	@ 0xf7
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000936:	230e      	movs	r3, #14
 8000938:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800093a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800093e:	4619      	mov	r1, r3
 8000940:	4875      	ldr	r0, [pc, #468]	@ (8000b18 <MX_GPIO_Init+0x618>)
 8000942:	f000 fd3d 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000958:	2309      	movs	r3, #9
 800095a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000960:	4619      	mov	r1, r3
 8000962:	4868      	ldr	r0, [pc, #416]	@ (8000b04 <MX_GPIO_Init+0x604>)
 8000964:	f000 fd2c 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000968:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800097a:	230a      	movs	r3, #10
 800097c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000982:	4619      	mov	r1, r3
 8000984:	485f      	ldr	r0, [pc, #380]	@ (8000b04 <MX_GPIO_Init+0x604>)
 8000986:	f000 fd1b 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800098a:	2320      	movs	r3, #32
 800098c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	485a      	ldr	r0, [pc, #360]	@ (8000b0c <MX_GPIO_Init+0x60c>)
 80009a2:	f000 fd0d 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80009a6:	2308      	movs	r3, #8
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009b6:	230d      	movs	r3, #13
 80009b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009be:	4619      	mov	r1, r3
 80009c0:	4852      	ldr	r0, [pc, #328]	@ (8000b0c <MX_GPIO_Init+0x60c>)
 80009c2:	f000 fcfd 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 80009c6:	f241 030e 	movw	r3, #4110	@ 0x100e
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009dc:	4619      	mov	r1, r3
 80009de:	484d      	ldr	r0, [pc, #308]	@ (8000b14 <MX_GPIO_Init+0x614>)
 80009e0:	f000 fcee 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80009e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009f6:	4619      	mov	r1, r3
 80009f8:	4848      	ldr	r0, [pc, #288]	@ (8000b1c <MX_GPIO_Init+0x61c>)
 80009fa:	f000 fce1 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80009fe:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a10:	230c      	movs	r3, #12
 8000a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4841      	ldr	r0, [pc, #260]	@ (8000b20 <MX_GPIO_Init+0x620>)
 8000a1c:	f000 fcd0 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a20:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a32:	230e      	movs	r3, #14
 8000a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4835      	ldr	r0, [pc, #212]	@ (8000b14 <MX_GPIO_Init+0x614>)
 8000a3e:	f000 fcbf 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a42:	2308      	movs	r3, #8
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a56:	4619      	mov	r1, r3
 8000a58:	482f      	ldr	r0, [pc, #188]	@ (8000b18 <MX_GPIO_Init+0x618>)
 8000a5a:	f000 fcb1 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000a5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a70:	230d      	movs	r3, #13
 8000a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4822      	ldr	r0, [pc, #136]	@ (8000b04 <MX_GPIO_Init+0x604>)
 8000a7c:	f000 fca0 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a80:	2310      	movs	r3, #16
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a90:	4619      	mov	r1, r3
 8000a92:	481e      	ldr	r0, [pc, #120]	@ (8000b0c <MX_GPIO_Init+0x60c>)
 8000a94:	f000 fc94 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000aa8:	230c      	movs	r3, #12
 8000aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4816      	ldr	r0, [pc, #88]	@ (8000b0c <MX_GPIO_Init+0x60c>)
 8000ab4:	f000 fc84 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000ab8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ac6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000aca:	4619      	mov	r1, r3
 8000acc:	4815      	ldr	r0, [pc, #84]	@ (8000b24 <MX_GPIO_Init+0x624>)
 8000ace:	f000 fc77 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000ad2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480e      	ldr	r0, [pc, #56]	@ (8000b24 <MX_GPIO_Init+0x624>)
 8000aec:	f000 fc68 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000af0:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	e016      	b.n	8000b28 <MX_GPIO_Init+0x628>
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40021800 	.word	0x40021800
 8000b08:	40022400 	.word	0x40022400
 8000b0c:	40020c00 	.word	0x40020c00
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40022000 	.word	0x40022000
 8000b18:	40022800 	.word	0x40022800
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40021400 	.word	0x40021400
 8000b24:	40021c00 	.word	0x40021c00
 8000b28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b32:	230d      	movs	r3, #13
 8000b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	48b6      	ldr	r0, [pc, #728]	@ (8000e18 <MX_GPIO_Init+0x918>)
 8000b3e:	f000 fc3f 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000b52:	2302      	movs	r3, #2
 8000b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	48af      	ldr	r0, [pc, #700]	@ (8000e1c <MX_GPIO_Init+0x91c>)
 8000b5e:	f000 fc2f 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b74:	2307      	movs	r3, #7
 8000b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	48a8      	ldr	r0, [pc, #672]	@ (8000e20 <MX_GPIO_Init+0x920>)
 8000b80:	f000 fc1e 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	489f      	ldr	r0, [pc, #636]	@ (8000e20 <MX_GPIO_Init+0x920>)
 8000ba2:	f000 fc0d 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ba6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bac:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4897      	ldr	r0, [pc, #604]	@ (8000e1c <MX_GPIO_Init+0x91c>)
 8000bbe:	f000 fbff 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000bc2:	23c0      	movs	r3, #192	@ 0xc0
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4891      	ldr	r0, [pc, #580]	@ (8000e24 <MX_GPIO_Init+0x924>)
 8000bde:	f000 fbef 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000be2:	2310      	movs	r3, #16
 8000be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000bf2:	230a      	movs	r3, #10
 8000bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4886      	ldr	r0, [pc, #536]	@ (8000e18 <MX_GPIO_Init+0x918>)
 8000bfe:	f000 fbdf 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c02:	2328      	movs	r3, #40	@ 0x28
 8000c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c12:	230c      	movs	r3, #12
 8000c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	487e      	ldr	r0, [pc, #504]	@ (8000e18 <MX_GPIO_Init+0x918>)
 8000c1e:	f000 fbcf 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000c22:	23c8      	movs	r3, #200	@ 0xc8
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c36:	4619      	mov	r1, r3
 8000c38:	487b      	ldr	r0, [pc, #492]	@ (8000e28 <MX_GPIO_Init+0x928>)
 8000c3a:	f000 fbc1 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c3e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c44:	2303      	movs	r3, #3
 8000c46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c50:	4619      	mov	r1, r3
 8000c52:	4876      	ldr	r0, [pc, #472]	@ (8000e2c <MX_GPIO_Init+0x92c>)
 8000c54:	f000 fbb4 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c68:	230c      	movs	r3, #12
 8000c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c70:	4619      	mov	r1, r3
 8000c72:	486c      	ldr	r0, [pc, #432]	@ (8000e24 <MX_GPIO_Init+0x924>)
 8000c74:	f000 fba4 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000c78:	2305      	movs	r3, #5
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c88:	230a      	movs	r3, #10
 8000c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c90:	4619      	mov	r1, r3
 8000c92:	4864      	ldr	r0, [pc, #400]	@ (8000e24 <MX_GPIO_Init+0x924>)
 8000c94:	f000 fb94 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c98:	2332      	movs	r3, #50	@ 0x32
 8000c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca8:	230b      	movs	r3, #11
 8000caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	485c      	ldr	r0, [pc, #368]	@ (8000e24 <MX_GPIO_Init+0x924>)
 8000cb4:	f000 fb84 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cc8:	2309      	movs	r3, #9
 8000cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4857      	ldr	r0, [pc, #348]	@ (8000e30 <MX_GPIO_Init+0x930>)
 8000cd4:	f000 fb74 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000cd8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cea:	2309      	movs	r3, #9
 8000cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	484f      	ldr	r0, [pc, #316]	@ (8000e34 <MX_GPIO_Init+0x934>)
 8000cf6:	f000 fb63 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4846      	ldr	r0, [pc, #280]	@ (8000e28 <MX_GPIO_Init+0x928>)
 8000d0e:	f000 fb57 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000d12:	2382      	movs	r3, #130	@ 0x82
 8000d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d22:	230b      	movs	r3, #11
 8000d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	483c      	ldr	r0, [pc, #240]	@ (8000e20 <MX_GPIO_Init+0x920>)
 8000d2e:	f000 fb47 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000d32:	2301      	movs	r3, #1
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d36:	2303      	movs	r3, #3
 8000d38:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d42:	4619      	mov	r1, r3
 8000d44:	4836      	ldr	r0, [pc, #216]	@ (8000e20 <MX_GPIO_Init+0x920>)
 8000d46:	f000 fb3b 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000d4a:	2350      	movs	r3, #80	@ 0x50
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d5a:	230d      	movs	r3, #13
 8000d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d62:	4619      	mov	r1, r3
 8000d64:	482e      	ldr	r0, [pc, #184]	@ (8000e20 <MX_GPIO_Init+0x920>)
 8000d66:	f000 fb2b 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000d6a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d70:	2312      	movs	r3, #18
 8000d72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d84:	4619      	mov	r1, r3
 8000d86:	4824      	ldr	r0, [pc, #144]	@ (8000e18 <MX_GPIO_Init+0x918>)
 8000d88:	f000 fb1a 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d9c:	2307      	movs	r3, #7
 8000d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da4:	4619      	mov	r1, r3
 8000da6:	481e      	ldr	r0, [pc, #120]	@ (8000e20 <MX_GPIO_Init+0x920>)
 8000da8:	f000 fb0a 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_CLK_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin;
 8000dac:	2320      	movs	r3, #32
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4816      	ldr	r0, [pc, #88]	@ (8000e20 <MX_GPIO_Init+0x920>)
 8000dc8:	f000 fafa 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000dcc:	2340      	movs	r3, #64	@ 0x40
 8000dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000ddc:	2309      	movs	r3, #9
 8000dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de4:	4619      	mov	r1, r3
 8000de6:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <MX_GPIO_Init+0x918>)
 8000de8:	f000 faea 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000dec:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dfe:	2305      	movs	r3, #5
 8000e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e06:	4619      	mov	r1, r3
 8000e08:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <MX_GPIO_Init+0x930>)
 8000e0a:	f000 fad9 	bl	80013c0 <HAL_GPIO_Init>

}
 8000e0e:	bf00      	nop
 8000e10:	3740      	adds	r7, #64	@ 0x40
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021c00 	.word	0x40021c00
 8000e1c:	40022000 	.word	0x40022000
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40021800 	.word	0x40021800
 8000e2c:	40021400 	.word	0x40021400
 8000e30:	40020400 	.word	0x40020400
 8000e34:	40020c00 	.word	0x40020c00

08000e38 <LedCli>:
/* USER CODE BEGIN 0 */

void LedCli(void *argument);

void LedCli(void *argument)
      {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
        for(;;)
        {
          HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1); // Inverse l'état de la LED
 8000e40:	2102      	movs	r1, #2
 8000e42:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <LedCli+0x1c>)
 8000e44:	f000 fc81 	bl	800174a <HAL_GPIO_TogglePin>
          vTaskDelay(pdMS_TO_TICKS(500));        // Attendre 500ms
 8000e48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e4c:	f002 fc2c 	bl	80036a8 <vTaskDelay>
          HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1); // Inverse l'état de la LED
 8000e50:	bf00      	nop
 8000e52:	e7f5      	b.n	8000e40 <LedCli+0x8>
 8000e54:	40022000 	.word	0x40022000

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5e:	f000 f9a0 	bl	80011a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e62:	f000 f815 	bl	8000e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e66:	f7ff fb4b 	bl	8000500 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  /* Création de la tâche */
    xTaskCreate(LedCli, "LedTask", 128, NULL, 1, NULL);
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	2301      	movs	r3, #1
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2300      	movs	r3, #0
 8000e74:	2280      	movs	r2, #128	@ 0x80
 8000e76:	4904      	ldr	r1, [pc, #16]	@ (8000e88 <main+0x30>)
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <main+0x34>)
 8000e7a:	f002 fab5 	bl	80033e8 <xTaskCreate>

    /* Lancement du scheduler */
    vTaskStartScheduler();
 8000e7e:	f002 fc4b 	bl	8003718 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e82:	bf00      	nop
 8000e84:	e7fd      	b.n	8000e82 <main+0x2a>
 8000e86:	bf00      	nop
 8000e88:	080052e4 	.word	0x080052e4
 8000e8c:	08000e39 	.word	0x08000e39

08000e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b094      	sub	sp, #80	@ 0x50
 8000e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e96:	f107 0320 	add.w	r3, r7, #32
 8000e9a:	2230      	movs	r2, #48	@ 0x30
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f004 f92c 	bl	80050fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f64 <SystemClock_Config+0xd4>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8000f64 <SystemClock_Config+0xd4>)
 8000eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec0:	4b28      	ldr	r3, [pc, #160]	@ (8000f64 <SystemClock_Config+0xd4>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <SystemClock_Config+0xd8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a25      	ldr	r2, [pc, #148]	@ (8000f68 <SystemClock_Config+0xd8>)
 8000ed2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <SystemClock_Config+0xd8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ef8:	2319      	movs	r3, #25
 8000efa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000efc:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000f00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fc86 	bl	8001820 <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f1a:	f000 f839 	bl	8000f90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f1e:	f000 fc2f 	bl	8001780 <HAL_PWREx_EnableOverDrive>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f28:	f000 f832 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f30:	2302      	movs	r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2107      	movs	r1, #7
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 ff0c 	bl	8001d68 <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f56:	f000 f81b 	bl	8000f90 <Error_Handler>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3750      	adds	r7, #80	@ 0x50
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f7e:	f000 f91d 	bl	80011bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40001000 	.word	0x40001000

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <Error_Handler+0x8>

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	4a10      	ldr	r2, [pc, #64]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	f06f 0001 	mvn.w	r0, #1
 8000fda:	f000 f9c7 	bl	800136c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800

08000fec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	@ 0x38
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ffc:	4b33      	ldr	r3, [pc, #204]	@ (80010cc <HAL_InitTick+0xe0>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	4a32      	ldr	r2, [pc, #200]	@ (80010cc <HAL_InitTick+0xe0>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6413      	str	r3, [r2, #64]	@ 0x40
 8001008:	4b30      	ldr	r3, [pc, #192]	@ (80010cc <HAL_InitTick+0xe0>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001014:	f107 0210 	add.w	r2, r7, #16
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f001 f874 	bl	800210c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800102e:	f001 f859 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 8001032:	6378      	str	r0, [r7, #52]	@ 0x34
 8001034:	e004      	b.n	8001040 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001036:	f001 f855 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 800103a:	4603      	mov	r3, r0
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001042:	4a23      	ldr	r2, [pc, #140]	@ (80010d0 <HAL_InitTick+0xe4>)
 8001044:	fba2 2303 	umull	r2, r3, r2, r3
 8001048:	0c9b      	lsrs	r3, r3, #18
 800104a:	3b01      	subs	r3, #1
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <HAL_InitTick+0xe8>)
 8001050:	4a21      	ldr	r2, [pc, #132]	@ (80010d8 <HAL_InitTick+0xec>)
 8001052:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001054:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <HAL_InitTick+0xe8>)
 8001056:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800105a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800105c:	4a1d      	ldr	r2, [pc, #116]	@ (80010d4 <HAL_InitTick+0xe8>)
 800105e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001060:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001062:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <HAL_InitTick+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <HAL_InitTick+0xe8>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <HAL_InitTick+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001074:	4817      	ldr	r0, [pc, #92]	@ (80010d4 <HAL_InitTick+0xe8>)
 8001076:	f001 f87b 	bl	8002170 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001080:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001084:	2b00      	cmp	r3, #0
 8001086:	d11b      	bne.n	80010c0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001088:	4812      	ldr	r0, [pc, #72]	@ (80010d4 <HAL_InitTick+0xe8>)
 800108a:	f001 f8d3 	bl	8002234 <HAL_TIM_Base_Start_IT>
 800108e:	4603      	mov	r3, r0
 8001090:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001094:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001098:	2b00      	cmp	r3, #0
 800109a:	d111      	bne.n	80010c0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800109c:	2036      	movs	r0, #54	@ 0x36
 800109e:	f000 f981 	bl	80013a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d808      	bhi.n	80010ba <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	2036      	movs	r0, #54	@ 0x36
 80010ae:	f000 f95d 	bl	800136c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <HAL_InitTick+0xf0>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	e002      	b.n	80010c0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3738      	adds	r7, #56	@ 0x38
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	431bde83 	.word	0x431bde83
 80010d4:	2000007c 	.word	0x2000007c
 80010d8:	40001000 	.word	0x40001000
 80010dc:	20000004 	.word	0x20000004

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <NMI_Handler+0x4>

080010e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <MemManage_Handler+0x4>

080010f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <BusFault_Handler+0x4>

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <UsageFault_Handler+0x4>

08001108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800111c:	4802      	ldr	r0, [pc, #8]	@ (8001128 <TIM6_DAC_IRQHandler+0x10>)
 800111e:	f001 f901 	bl	8002324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000007c 	.word	0x2000007c

0800112c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001188 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001154:	f7ff ffea 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	@ (800118c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	@ (8001190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	@ (800119c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800117e:	f004 f81b 	bl	80051b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff fe69 	bl	8000e58 <main>
  bx  lr    
 8001186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001194:	0800532c 	.word	0x0800532c
  ldr r2, =_sbss
 8001198:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800119c:	20004be8 	.word	0x20004be8

080011a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC_IRQHandler>

080011a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a6:	2003      	movs	r0, #3
 80011a8:	f000 f8d5 	bl	8001356 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ac:	200f      	movs	r0, #15
 80011ae:	f7ff ff1d 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b2:	f7ff fef3 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_IncTick+0x20>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_IncTick+0x24>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <HAL_IncTick+0x24>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008
 80011e0:	200000c8 	.word	0x200000c8

080011e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <HAL_GetTick+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	200000c8 	.word	0x200000c8

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <__NVIC_SetPriorityGrouping+0x40>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	4313      	orrs	r3, r2
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	@ (800123c <__NVIC_SetPriorityGrouping+0x40>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	05fa0000 	.word	0x05fa0000

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	2b00      	cmp	r3, #0
 8001270:	db0b      	blt.n	800128a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	4907      	ldr	r1, [pc, #28]	@ (8001298 <__NVIC_EnableIRQ+0x38>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2001      	movs	r0, #1
 8001282:	fa00 f202 	lsl.w	r2, r0, r2
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	@ (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	@ (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	@ 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	@ 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff4c 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137e:	f7ff ff61 	bl	8001244 <__NVIC_GetPriorityGrouping>
 8001382:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	68b9      	ldr	r1, [r7, #8]
 8001388:	6978      	ldr	r0, [r7, #20]
 800138a:	f7ff ffb1 	bl	80012f0 <NVIC_EncodePriority>
 800138e:	4602      	mov	r2, r0
 8001390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff80 	bl	800129c <__NVIC_SetPriority>
}
 800139c:	bf00      	nop
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff54 	bl	8001260 <__NVIC_EnableIRQ>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	e175      	b.n	80016cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013e0:	2201      	movs	r2, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	f040 8164 	bne.w	80016c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d005      	beq.n	8001416 <HAL_GPIO_Init+0x56>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d130      	bne.n	8001478 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f003 0201 	and.w	r2, r3, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b03      	cmp	r3, #3
 8001482:	d017      	beq.n	80014b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d123      	bne.n	8001508 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	08da      	lsrs	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3208      	adds	r2, #8
 8001502:	69b9      	ldr	r1, [r7, #24]
 8001504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0203 	and.w	r2, r3, #3
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80be 	beq.w	80016c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b66      	ldr	r3, [pc, #408]	@ (80016e4 <HAL_GPIO_Init+0x324>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	4a65      	ldr	r2, [pc, #404]	@ (80016e4 <HAL_GPIO_Init+0x324>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001554:	6453      	str	r3, [r2, #68]	@ 0x44
 8001556:	4b63      	ldr	r3, [pc, #396]	@ (80016e4 <HAL_GPIO_Init+0x324>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001562:	4a61      	ldr	r2, [pc, #388]	@ (80016e8 <HAL_GPIO_Init+0x328>)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a58      	ldr	r2, [pc, #352]	@ (80016ec <HAL_GPIO_Init+0x32c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d037      	beq.n	80015fe <HAL_GPIO_Init+0x23e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a57      	ldr	r2, [pc, #348]	@ (80016f0 <HAL_GPIO_Init+0x330>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d031      	beq.n	80015fa <HAL_GPIO_Init+0x23a>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a56      	ldr	r2, [pc, #344]	@ (80016f4 <HAL_GPIO_Init+0x334>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d02b      	beq.n	80015f6 <HAL_GPIO_Init+0x236>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a55      	ldr	r2, [pc, #340]	@ (80016f8 <HAL_GPIO_Init+0x338>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d025      	beq.n	80015f2 <HAL_GPIO_Init+0x232>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a54      	ldr	r2, [pc, #336]	@ (80016fc <HAL_GPIO_Init+0x33c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d01f      	beq.n	80015ee <HAL_GPIO_Init+0x22e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a53      	ldr	r2, [pc, #332]	@ (8001700 <HAL_GPIO_Init+0x340>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d019      	beq.n	80015ea <HAL_GPIO_Init+0x22a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a52      	ldr	r2, [pc, #328]	@ (8001704 <HAL_GPIO_Init+0x344>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d013      	beq.n	80015e6 <HAL_GPIO_Init+0x226>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a51      	ldr	r2, [pc, #324]	@ (8001708 <HAL_GPIO_Init+0x348>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d00d      	beq.n	80015e2 <HAL_GPIO_Init+0x222>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a50      	ldr	r2, [pc, #320]	@ (800170c <HAL_GPIO_Init+0x34c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d007      	beq.n	80015de <HAL_GPIO_Init+0x21e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4f      	ldr	r2, [pc, #316]	@ (8001710 <HAL_GPIO_Init+0x350>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d101      	bne.n	80015da <HAL_GPIO_Init+0x21a>
 80015d6:	2309      	movs	r3, #9
 80015d8:	e012      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015da:	230a      	movs	r3, #10
 80015dc:	e010      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015de:	2308      	movs	r3, #8
 80015e0:	e00e      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015e2:	2307      	movs	r3, #7
 80015e4:	e00c      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015e6:	2306      	movs	r3, #6
 80015e8:	e00a      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015ea:	2305      	movs	r3, #5
 80015ec:	e008      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015ee:	2304      	movs	r3, #4
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015f2:	2303      	movs	r3, #3
 80015f4:	e004      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x240>
 80015fe:	2300      	movs	r3, #0
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	f002 0203 	and.w	r2, r2, #3
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	4093      	lsls	r3, r2
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001610:	4935      	ldr	r1, [pc, #212]	@ (80016e8 <HAL_GPIO_Init+0x328>)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161e:	4b3d      	ldr	r3, [pc, #244]	@ (8001714 <HAL_GPIO_Init+0x354>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001642:	4a34      	ldr	r2, [pc, #208]	@ (8001714 <HAL_GPIO_Init+0x354>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001648:	4b32      	ldr	r3, [pc, #200]	@ (8001714 <HAL_GPIO_Init+0x354>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800166c:	4a29      	ldr	r2, [pc, #164]	@ (8001714 <HAL_GPIO_Init+0x354>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001672:	4b28      	ldr	r3, [pc, #160]	@ (8001714 <HAL_GPIO_Init+0x354>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001696:	4a1f      	ldr	r2, [pc, #124]	@ (8001714 <HAL_GPIO_Init+0x354>)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800169c:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <HAL_GPIO_Init+0x354>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016c0:	4a14      	ldr	r2, [pc, #80]	@ (8001714 <HAL_GPIO_Init+0x354>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3301      	adds	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	f67f ae86 	bls.w	80013e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3724      	adds	r7, #36	@ 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40013800 	.word	0x40013800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020c00 	.word	0x40020c00
 80016fc:	40021000 	.word	0x40021000
 8001700:	40021400 	.word	0x40021400
 8001704:	40021800 	.word	0x40021800
 8001708:	40021c00 	.word	0x40021c00
 800170c:	40022000 	.word	0x40022000
 8001710:	40022400 	.word	0x40022400
 8001714:	40013c00 	.word	0x40013c00

08001718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001734:	e003      	b.n	800173e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	041a      	lsls	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	619a      	str	r2, [r3, #24]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800174a:	b480      	push	{r7}
 800174c:	b085      	sub	sp, #20
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	460b      	mov	r3, r1
 8001754:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800175c:	887a      	ldrh	r2, [r7, #2]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4013      	ands	r3, r2
 8001762:	041a      	lsls	r2, r3, #16
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43d9      	mvns	r1, r3
 8001768:	887b      	ldrh	r3, [r7, #2]
 800176a:	400b      	ands	r3, r1
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	619a      	str	r2, [r3, #24]
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <HAL_PWREx_EnableOverDrive+0x98>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	4a22      	ldr	r2, [pc, #136]	@ (8001818 <HAL_PWREx_EnableOverDrive+0x98>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001794:	6413      	str	r3, [r2, #64]	@ 0x40
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_PWREx_EnableOverDrive+0x98>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017a2:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <HAL_PWREx_EnableOverDrive+0x9c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a1d      	ldr	r2, [pc, #116]	@ (800181c <HAL_PWREx_EnableOverDrive+0x9c>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ae:	f7ff fd19 	bl	80011e4 <HAL_GetTick>
 80017b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017b4:	e009      	b.n	80017ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017b6:	f7ff fd15 	bl	80011e4 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017c4:	d901      	bls.n	80017ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e022      	b.n	8001810 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017ca:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_PWREx_EnableOverDrive+0x9c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017d6:	d1ee      	bne.n	80017b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017d8:	4b10      	ldr	r3, [pc, #64]	@ (800181c <HAL_PWREx_EnableOverDrive+0x9c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0f      	ldr	r2, [pc, #60]	@ (800181c <HAL_PWREx_EnableOverDrive+0x9c>)
 80017de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e4:	f7ff fcfe 	bl	80011e4 <HAL_GetTick>
 80017e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017ea:	e009      	b.n	8001800 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017ec:	f7ff fcfa 	bl	80011e4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017fa:	d901      	bls.n	8001800 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e007      	b.n	8001810 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001808:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800180c:	d1ee      	bne.n	80017ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	40007000 	.word	0x40007000

08001820 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e291      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8087 	beq.w	8001952 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001844:	4b96      	ldr	r3, [pc, #600]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b04      	cmp	r3, #4
 800184e:	d00c      	beq.n	800186a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001850:	4b93      	ldr	r3, [pc, #588]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b08      	cmp	r3, #8
 800185a:	d112      	bne.n	8001882 <HAL_RCC_OscConfig+0x62>
 800185c:	4b90      	ldr	r3, [pc, #576]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001864:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001868:	d10b      	bne.n	8001882 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186a:	4b8d      	ldr	r3, [pc, #564]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d06c      	beq.n	8001950 <HAL_RCC_OscConfig+0x130>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d168      	bne.n	8001950 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e26b      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x7a>
 800188c:	4b84      	ldr	r3, [pc, #528]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a83      	ldr	r2, [pc, #524]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e02e      	b.n	80018f8 <HAL_RCC_OscConfig+0xd8>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x9c>
 80018a2:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a7e      	ldr	r2, [pc, #504]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7b      	ldr	r2, [pc, #492]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e01d      	b.n	80018f8 <HAL_RCC_OscConfig+0xd8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0xc0>
 80018c6:	4b76      	ldr	r3, [pc, #472]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a75      	ldr	r2, [pc, #468]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b73      	ldr	r3, [pc, #460]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a72      	ldr	r2, [pc, #456]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0xd8>
 80018e0:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a6e      	ldr	r2, [pc, #440]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a6b      	ldr	r2, [pc, #428]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fc70 	bl	80011e4 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff fc6c 	bl	80011e4 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	@ 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e21f      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b61      	ldr	r3, [pc, #388]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0xe8>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fc5c 	bl	80011e4 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff fc58 	bl	80011e4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	@ 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e20b      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001942:	4b57      	ldr	r3, [pc, #348]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x110>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d069      	beq.n	8001a32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800195e:	4b50      	ldr	r3, [pc, #320]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00b      	beq.n	8001982 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196a:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b08      	cmp	r3, #8
 8001974:	d11c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x190>
 8001976:	4b4a      	ldr	r3, [pc, #296]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d116      	bne.n	80019b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	4b47      	ldr	r3, [pc, #284]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <HAL_RCC_OscConfig+0x17a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d001      	beq.n	800199a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e1df      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199a:	4b41      	ldr	r3, [pc, #260]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	493d      	ldr	r1, [pc, #244]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ae:	e040      	b.n	8001a32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d023      	beq.n	8001a00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b8:	4b39      	ldr	r3, [pc, #228]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a38      	ldr	r2, [pc, #224]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fc0e 	bl	80011e4 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019cc:	f7ff fc0a 	bl	80011e4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e1bd      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019de:	4b30      	ldr	r3, [pc, #192]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4929      	ldr	r1, [pc, #164]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
 80019fe:	e018      	b.n	8001a32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a00:	4b27      	ldr	r3, [pc, #156]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a26      	ldr	r2, [pc, #152]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fbea 	bl	80011e4 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff fbe6 	bl	80011e4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e199      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d038      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d019      	beq.n	8001a7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a46:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a4a:	4a15      	ldr	r2, [pc, #84]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a52:	f7ff fbc7 	bl	80011e4 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fbc3 	bl	80011e4 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e176      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x23a>
 8001a78:	e01a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a7e:	4a08      	ldr	r2, [pc, #32]	@ (8001aa0 <HAL_RCC_OscConfig+0x280>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a86:	f7ff fbad 	bl	80011e4 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8e:	f7ff fba9 	bl	80011e4 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d903      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e15c      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
 8001aa0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	4b91      	ldr	r3, [pc, #580]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ee      	bne.n	8001a8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80a4 	beq.w	8001c06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001abe:	4b8b      	ldr	r3, [pc, #556]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b88      	ldr	r3, [pc, #544]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	4a87      	ldr	r2, [pc, #540]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad6:	4b85      	ldr	r3, [pc, #532]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae6:	4b82      	ldr	r3, [pc, #520]	@ (8001cf0 <HAL_RCC_OscConfig+0x4d0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d118      	bne.n	8001b24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001af2:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf0 <HAL_RCC_OscConfig+0x4d0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a7e      	ldr	r2, [pc, #504]	@ (8001cf0 <HAL_RCC_OscConfig+0x4d0>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afe:	f7ff fb71 	bl	80011e4 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b06:	f7ff fb6d 	bl	80011e4 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b64      	cmp	r3, #100	@ 0x64
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e120      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b18:	4b75      	ldr	r3, [pc, #468]	@ (8001cf0 <HAL_RCC_OscConfig+0x4d0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x31a>
 8001b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b30:	4a6e      	ldr	r2, [pc, #440]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b38:	e02d      	b.n	8001b96 <HAL_RCC_OscConfig+0x376>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x33c>
 8001b42:	4b6a      	ldr	r3, [pc, #424]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b46:	4a69      	ldr	r2, [pc, #420]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4e:	4b67      	ldr	r3, [pc, #412]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b52:	4a66      	ldr	r2, [pc, #408]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b5a:	e01c      	b.n	8001b96 <HAL_RCC_OscConfig+0x376>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d10c      	bne.n	8001b7e <HAL_RCC_OscConfig+0x35e>
 8001b64:	4b61      	ldr	r3, [pc, #388]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b68:	4a60      	ldr	r2, [pc, #384]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b70:	4b5e      	ldr	r3, [pc, #376]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b74:	4a5d      	ldr	r2, [pc, #372]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b7c:	e00b      	b.n	8001b96 <HAL_RCC_OscConfig+0x376>
 8001b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b82:	4a5a      	ldr	r2, [pc, #360]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b8a:	4b58      	ldr	r3, [pc, #352]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	4a57      	ldr	r2, [pc, #348]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001b90:	f023 0304 	bic.w	r3, r3, #4
 8001b94:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d015      	beq.n	8001bca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fb21 	bl	80011e4 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7ff fb1d 	bl	80011e4 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0ce      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0ee      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x386>
 8001bc8:	e014      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bca:	f7ff fb0b 	bl	80011e4 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7ff fb07 	bl	80011e4 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e0b8      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	4b40      	ldr	r3, [pc, #256]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ee      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d105      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	4a3b      	ldr	r2, [pc, #236]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80a4 	beq.w	8001d58 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c10:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d06b      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d149      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c24:	4b31      	ldr	r3, [pc, #196]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a30      	ldr	r2, [pc, #192]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fad8 	bl	80011e4 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff fad4 	bl	80011e4 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e087      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4a:	4b28      	ldr	r3, [pc, #160]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69da      	ldr	r2, [r3, #28]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c64:	019b      	lsls	r3, r3, #6
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	041b      	lsls	r3, r3, #16
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c78:	061b      	lsls	r3, r3, #24
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001c82:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a18      	ldr	r2, [pc, #96]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff faa8 	bl	80011e4 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff faa4 	bl	80011e4 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e057      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x478>
 8001cb6:	e04f      	b.n	8001d58 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001cbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fa8e 	bl	80011e4 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff fa8a 	bl	80011e4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e03d      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cde:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4ac>
 8001cea:	e035      	b.n	8001d58 <HAL_RCC_OscConfig+0x538>
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d64 <HAL_RCC_OscConfig+0x544>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d028      	beq.n	8001d54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d121      	bne.n	8001d54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d11a      	bne.n	8001d54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d24:	4013      	ands	r3, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d111      	bne.n	8001d54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3a:	085b      	lsrs	r3, r3, #1
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0d0      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b6a      	ldr	r3, [pc, #424]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d910      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b67      	ldr	r3, [pc, #412]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 020f 	bic.w	r2, r3, #15
 8001d96:	4965      	ldr	r1, [pc, #404]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b63      	ldr	r3, [pc, #396]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0b8      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d020      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc8:	4b59      	ldr	r3, [pc, #356]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4a58      	ldr	r2, [pc, #352]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001dce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001dd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de0:	4b53      	ldr	r3, [pc, #332]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4a52      	ldr	r2, [pc, #328]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001de6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001dea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dec:	4b50      	ldr	r3, [pc, #320]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	494d      	ldr	r1, [pc, #308]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d040      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	4b47      	ldr	r3, [pc, #284]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d115      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e07f      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2a:	4b41      	ldr	r3, [pc, #260]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e073      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e06b      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4a:	4b39      	ldr	r3, [pc, #228]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4936      	ldr	r1, [pc, #216]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e5c:	f7ff f9c2 	bl	80011e4 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7ff f9be 	bl	80011e4 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e053      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 020c 	and.w	r2, r3, #12
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1eb      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b27      	ldr	r3, [pc, #156]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d210      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 020f 	bic.w	r2, r3, #15
 8001ea2:	4922      	ldr	r1, [pc, #136]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b20      	ldr	r3, [pc, #128]	@ (8001f2c <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e032      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4916      	ldr	r1, [pc, #88]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	490e      	ldr	r1, [pc, #56]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001efa:	f000 f821 	bl	8001f40 <HAL_RCC_GetSysClockFreq>
 8001efe:	4602      	mov	r2, r0
 8001f00:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <HAL_RCC_ClockConfig+0x1c8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	490a      	ldr	r1, [pc, #40]	@ (8001f34 <HAL_RCC_ClockConfig+0x1cc>)
 8001f0c:	5ccb      	ldrb	r3, [r1, r3]
 8001f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f12:	4a09      	ldr	r2, [pc, #36]	@ (8001f38 <HAL_RCC_ClockConfig+0x1d0>)
 8001f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_RCC_ClockConfig+0x1d4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f866 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023c00 	.word	0x40023c00
 8001f30:	40023800 	.word	0x40023800
 8001f34:	08005304 	.word	0x08005304
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000004 	.word	0x20000004

08001f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f44:	b090      	sub	sp, #64	@ 0x40
 8001f46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f50:	2300      	movs	r3, #0
 8001f52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f58:	4b59      	ldr	r3, [pc, #356]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d00d      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x40>
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	f200 80a1 	bhi.w	80020ac <HAL_RCC_GetSysClockFreq+0x16c>
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0x34>
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d003      	beq.n	8001f7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f72:	e09b      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f74:	4b53      	ldr	r3, [pc, #332]	@ (80020c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f78:	e09b      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f7a:	4b53      	ldr	r3, [pc, #332]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f7e:	e098      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f80:	4b4f      	ldr	r3, [pc, #316]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d028      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f96:	4b4a      	ldr	r3, [pc, #296]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	099b      	lsrs	r3, r3, #6
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	623b      	str	r3, [r7, #32]
 8001fa0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4b47      	ldr	r3, [pc, #284]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fac:	fb03 f201 	mul.w	r2, r3, r1
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	fb00 f303 	mul.w	r3, r0, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a43      	ldr	r2, [pc, #268]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fba:	fba0 1202 	umull	r1, r2, r0, r2
 8001fbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001fc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fc6:	4413      	add	r3, r2
 8001fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fcc:	2200      	movs	r2, #0
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	61fa      	str	r2, [r7, #28]
 8001fd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001fda:	f7fe f919 	bl	8000210 <__aeabi_uldivmod>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fe6:	e053      	b.n	8002090 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe8:	4b35      	ldr	r3, [pc, #212]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	2200      	movs	r2, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	617a      	str	r2, [r7, #20]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ffa:	f04f 0b00 	mov.w	fp, #0
 8001ffe:	4652      	mov	r2, sl
 8002000:	465b      	mov	r3, fp
 8002002:	f04f 0000 	mov.w	r0, #0
 8002006:	f04f 0100 	mov.w	r1, #0
 800200a:	0159      	lsls	r1, r3, #5
 800200c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002010:	0150      	lsls	r0, r2, #5
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	ebb2 080a 	subs.w	r8, r2, sl
 800201a:	eb63 090b 	sbc.w	r9, r3, fp
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800202a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800202e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002032:	ebb2 0408 	subs.w	r4, r2, r8
 8002036:	eb63 0509 	sbc.w	r5, r3, r9
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	00eb      	lsls	r3, r5, #3
 8002044:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002048:	00e2      	lsls	r2, r4, #3
 800204a:	4614      	mov	r4, r2
 800204c:	461d      	mov	r5, r3
 800204e:	eb14 030a 	adds.w	r3, r4, sl
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	eb45 030b 	adc.w	r3, r5, fp
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	f04f 0300 	mov.w	r3, #0
 8002062:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002066:	4629      	mov	r1, r5
 8002068:	028b      	lsls	r3, r1, #10
 800206a:	4621      	mov	r1, r4
 800206c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002070:	4621      	mov	r1, r4
 8002072:	028a      	lsls	r2, r1, #10
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800207a:	2200      	movs	r2, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	60fa      	str	r2, [r7, #12]
 8002080:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002084:	f7fe f8c4 	bl	8000210 <__aeabi_uldivmod>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4613      	mov	r3, r2
 800208e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002090:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	0c1b      	lsrs	r3, r3, #16
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	3301      	adds	r3, #1
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80020a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020aa:	e002      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020ac:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80020ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3740      	adds	r7, #64	@ 0x40
 80020b8:	46bd      	mov	sp, r7
 80020ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800
 80020c4:	00f42400 	.word	0x00f42400
 80020c8:	017d7840 	.word	0x017d7840

080020cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d0:	4b03      	ldr	r3, [pc, #12]	@ (80020e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000000 	.word	0x20000000

080020e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020e8:	f7ff fff0 	bl	80020cc <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	0a9b      	lsrs	r3, r3, #10
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4903      	ldr	r1, [pc, #12]	@ (8002108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40023800 	.word	0x40023800
 8002108:	08005314 	.word	0x08005314

0800210c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	220f      	movs	r2, #15
 800211a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_RCC_GetClockConfig+0x5c>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0203 	and.w	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002128:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <HAL_RCC_GetClockConfig+0x5c>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <HAL_RCC_GetClockConfig+0x5c>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002140:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <HAL_RCC_GetClockConfig+0x5c>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	08db      	lsrs	r3, r3, #3
 8002146:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800214e:	4b07      	ldr	r3, [pc, #28]	@ (800216c <HAL_RCC_GetClockConfig+0x60>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 020f 	and.w	r2, r3, #15
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	601a      	str	r2, [r3, #0]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40023c00 	.word	0x40023c00

08002170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e049      	b.n	8002216 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f841 	bl	800221e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3304      	adds	r3, #4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4610      	mov	r0, r2
 80021b0:	f000 f9e8 	bl	8002584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d001      	beq.n	800224c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e054      	b.n	80022f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a26      	ldr	r2, [pc, #152]	@ (8002304 <HAL_TIM_Base_Start_IT+0xd0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d022      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002276:	d01d      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a22      	ldr	r2, [pc, #136]	@ (8002308 <HAL_TIM_Base_Start_IT+0xd4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d018      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a21      	ldr	r2, [pc, #132]	@ (800230c <HAL_TIM_Base_Start_IT+0xd8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d013      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1f      	ldr	r2, [pc, #124]	@ (8002310 <HAL_TIM_Base_Start_IT+0xdc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00e      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1e      	ldr	r2, [pc, #120]	@ (8002314 <HAL_TIM_Base_Start_IT+0xe0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d009      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002318 <HAL_TIM_Base_Start_IT+0xe4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x80>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1b      	ldr	r2, [pc, #108]	@ (800231c <HAL_TIM_Base_Start_IT+0xe8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d115      	bne.n	80022e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <HAL_TIM_Base_Start_IT+0xec>)
 80022bc:	4013      	ands	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d015      	beq.n	80022f2 <HAL_TIM_Base_Start_IT+0xbe>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022cc:	d011      	beq.n	80022f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022de:	e008      	b.n	80022f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e000      	b.n	80022f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40010000 	.word	0x40010000
 8002308:	40000400 	.word	0x40000400
 800230c:	40000800 	.word	0x40000800
 8002310:	40000c00 	.word	0x40000c00
 8002314:	40010400 	.word	0x40010400
 8002318:	40014000 	.word	0x40014000
 800231c:	40001800 	.word	0x40001800
 8002320:	00010007 	.word	0x00010007

08002324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d020      	beq.n	8002388 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01b      	beq.n	8002388 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0202 	mvn.w	r2, #2
 8002358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f8e9 	bl	8002546 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f8db 	bl	8002532 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f8ec 	bl	800255a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b00      	cmp	r3, #0
 8002390:	d020      	beq.n	80023d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01b      	beq.n	80023d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0204 	mvn.w	r2, #4
 80023a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2202      	movs	r2, #2
 80023aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f8c3 	bl	8002546 <HAL_TIM_IC_CaptureCallback>
 80023c0:	e005      	b.n	80023ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f8b5 	bl	8002532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f8c6 	bl	800255a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d020      	beq.n	8002420 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01b      	beq.n	8002420 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0208 	mvn.w	r2, #8
 80023f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2204      	movs	r2, #4
 80023f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f89d 	bl	8002546 <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f88f 	bl	8002532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f8a0 	bl	800255a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d020      	beq.n	800246c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0210 	mvn.w	r2, #16
 800243c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2208      	movs	r2, #8
 8002442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f877 	bl	8002546 <HAL_TIM_IC_CaptureCallback>
 8002458:	e005      	b.n	8002466 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f869 	bl	8002532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f87a 	bl	800255a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00c      	beq.n	8002490 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0201 	mvn.w	r2, #1
 8002488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe fd6e 	bl	8000f6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002496:	2b00      	cmp	r3, #0
 8002498:	d104      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00c      	beq.n	80024be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80024b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f919 	bl	80026f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00c      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80024da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f911 	bl	8002704 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00c      	beq.n	8002506 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f834 	bl	800256e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00c      	beq.n	800252a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f06f 0220 	mvn.w	r2, #32
 8002522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f8d9 	bl	80026dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a46      	ldr	r2, [pc, #280]	@ (80026b0 <TIM_Base_SetConfig+0x12c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d013      	beq.n	80025c4 <TIM_Base_SetConfig+0x40>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a2:	d00f      	beq.n	80025c4 <TIM_Base_SetConfig+0x40>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a43      	ldr	r2, [pc, #268]	@ (80026b4 <TIM_Base_SetConfig+0x130>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d00b      	beq.n	80025c4 <TIM_Base_SetConfig+0x40>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a42      	ldr	r2, [pc, #264]	@ (80026b8 <TIM_Base_SetConfig+0x134>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d007      	beq.n	80025c4 <TIM_Base_SetConfig+0x40>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a41      	ldr	r2, [pc, #260]	@ (80026bc <TIM_Base_SetConfig+0x138>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d003      	beq.n	80025c4 <TIM_Base_SetConfig+0x40>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a40      	ldr	r2, [pc, #256]	@ (80026c0 <TIM_Base_SetConfig+0x13c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d108      	bne.n	80025d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a35      	ldr	r2, [pc, #212]	@ (80026b0 <TIM_Base_SetConfig+0x12c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d02b      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e4:	d027      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a32      	ldr	r2, [pc, #200]	@ (80026b4 <TIM_Base_SetConfig+0x130>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d023      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a31      	ldr	r2, [pc, #196]	@ (80026b8 <TIM_Base_SetConfig+0x134>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d01f      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a30      	ldr	r2, [pc, #192]	@ (80026bc <TIM_Base_SetConfig+0x138>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01b      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a2f      	ldr	r2, [pc, #188]	@ (80026c0 <TIM_Base_SetConfig+0x13c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d017      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a2e      	ldr	r2, [pc, #184]	@ (80026c4 <TIM_Base_SetConfig+0x140>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a2d      	ldr	r2, [pc, #180]	@ (80026c8 <TIM_Base_SetConfig+0x144>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00f      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a2c      	ldr	r2, [pc, #176]	@ (80026cc <TIM_Base_SetConfig+0x148>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00b      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a2b      	ldr	r2, [pc, #172]	@ (80026d0 <TIM_Base_SetConfig+0x14c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a2a      	ldr	r2, [pc, #168]	@ (80026d4 <TIM_Base_SetConfig+0x150>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a29      	ldr	r2, [pc, #164]	@ (80026d8 <TIM_Base_SetConfig+0x154>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a10      	ldr	r2, [pc, #64]	@ (80026b0 <TIM_Base_SetConfig+0x12c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d003      	beq.n	800267c <TIM_Base_SetConfig+0xf8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a12      	ldr	r2, [pc, #72]	@ (80026c0 <TIM_Base_SetConfig+0x13c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d103      	bne.n	8002684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b01      	cmp	r3, #1
 8002694:	d105      	bne.n	80026a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f023 0201 	bic.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	611a      	str	r2, [r3, #16]
  }
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40010000 	.word	0x40010000
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40000800 	.word	0x40000800
 80026bc:	40000c00 	.word	0x40000c00
 80026c0:	40010400 	.word	0x40010400
 80026c4:	40014000 	.word	0x40014000
 80026c8:	40014400 	.word	0x40014400
 80026cc:	40014800 	.word	0x40014800
 80026d0:	40001800 	.word	0x40001800
 80026d4:	40001c00 	.word	0x40001c00
 80026d8:	40002000 	.word	0x40002000

080026dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a07      	ldr	r2, [pc, #28]	@ (8002744 <vApplicationGetIdleTaskMemory+0x2c>)
 8002728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	4a06      	ldr	r2, [pc, #24]	@ (8002748 <vApplicationGetIdleTaskMemory+0x30>)
 800272e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2280      	movs	r2, #128	@ 0x80
 8002734:	601a      	str	r2, [r3, #0]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	200000cc 	.word	0x200000cc
 8002748:	20000174 	.word	0x20000174

0800274c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4a07      	ldr	r2, [pc, #28]	@ (8002778 <vApplicationGetTimerTaskMemory+0x2c>)
 800275c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	4a06      	ldr	r2, [pc, #24]	@ (800277c <vApplicationGetTimerTaskMemory+0x30>)
 8002762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800276a:	601a      	str	r2, [r3, #0]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	20000374 	.word	0x20000374
 800277c:	2000041c 	.word	0x2000041c

08002780 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f103 0208 	add.w	r2, r3, #8
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f103 0208 	add.w	r2, r3, #8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f103 0208 	add.w	r2, r3, #8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	601a      	str	r2, [r3, #0]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002822:	b480      	push	{r7}
 8002824:	b085      	sub	sp, #20
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d103      	bne.n	8002842 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e00c      	b.n	800285c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3308      	adds	r3, #8
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e002      	b.n	8002850 <vListInsert+0x2e>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	429a      	cmp	r2, r3
 800285a:	d2f6      	bcs.n	800284a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	601a      	str	r2, [r3, #0]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6892      	ldr	r2, [r2, #8]
 80028aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6852      	ldr	r2, [r2, #4]
 80028b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d103      	bne.n	80028c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	1e5a      	subs	r2, r3, #1
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10d      	bne.n	8002918 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002900:	b672      	cpsid	i
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	b662      	cpsie	i
 8002910:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002912:	bf00      	nop
 8002914:	bf00      	nop
 8002916:	e7fd      	b.n	8002914 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8002918:	f002 f8d8 	bl	8004acc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002924:	68f9      	ldr	r1, [r7, #12]
 8002926:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	441a      	add	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002948:	3b01      	subs	r3, #1
 800294a:	68f9      	ldr	r1, [r7, #12]
 800294c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	441a      	add	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	22ff      	movs	r2, #255	@ 0xff
 800295c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	22ff      	movs	r2, #255	@ 0xff
 8002964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d114      	bne.n	8002998 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d01a      	beq.n	80029ac <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3310      	adds	r3, #16
 800297a:	4618      	mov	r0, r3
 800297c:	f001 f978 	bl	8003c70 <xTaskRemoveFromEventList>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d012      	beq.n	80029ac <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002986:	4b0d      	ldr	r3, [pc, #52]	@ (80029bc <xQueueGenericReset+0xd4>)
 8002988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	e009      	b.n	80029ac <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3310      	adds	r3, #16
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff feef 	bl	8002780 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3324      	adds	r3, #36	@ 0x24
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff feea 	bl	8002780 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029ac:	f002 f8c4 	bl	8004b38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029b0:	2301      	movs	r3, #1
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	e000ed04 	.word	0xe000ed04

080029c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08e      	sub	sp, #56	@ 0x38
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10d      	bne.n	80029f0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d8:	b672      	cpsid	i
 80029da:	f383 8811 	msr	BASEPRI, r3
 80029de:	f3bf 8f6f 	isb	sy
 80029e2:	f3bf 8f4f 	dsb	sy
 80029e6:	b662      	cpsie	i
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10d      	bne.n	8002a12 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029fa:	b672      	cpsid	i
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	b662      	cpsie	i
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	e7fd      	b.n	8002a0e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <xQueueGenericCreateStatic+0x5e>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <xQueueGenericCreateStatic+0x62>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <xQueueGenericCreateStatic+0x64>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10d      	bne.n	8002a44 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a2c:	b672      	cpsid	i
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	b662      	cpsie	i
 8002a3c:	623b      	str	r3, [r7, #32]
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <xQueueGenericCreateStatic+0x90>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <xQueueGenericCreateStatic+0x94>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <xQueueGenericCreateStatic+0x96>
 8002a54:	2300      	movs	r3, #0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10d      	bne.n	8002a76 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5e:	b672      	cpsid	i
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	b662      	cpsie	i
 8002a6e:	61fb      	str	r3, [r7, #28]
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	e7fd      	b.n	8002a72 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a76:	2350      	movs	r3, #80	@ 0x50
 8002a78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b50      	cmp	r3, #80	@ 0x50
 8002a7e:	d00d      	beq.n	8002a9c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a84:	b672      	cpsid	i
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	b662      	cpsie	i
 8002a94:	61bb      	str	r3, [r7, #24]
}
 8002a96:	bf00      	nop
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00d      	beq.n	8002ac4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ab0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f805 	bl	8002ace <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3730      	adds	r7, #48	@ 0x30
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d103      	bne.n	8002aea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	e002      	b.n	8002af0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002afc:	2101      	movs	r1, #1
 8002afe:	69b8      	ldr	r0, [r7, #24]
 8002b00:	f7ff fef2 	bl	80028e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08e      	sub	sp, #56	@ 0x38
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <xQueueGenericSend+0x38>
	__asm volatile
 8002b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b34:	b672      	cpsid	i
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	b662      	cpsie	i
 8002b44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b46:	bf00      	nop
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <xQueueGenericSend+0x46>
 8002b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <xQueueGenericSend+0x4a>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <xQueueGenericSend+0x4c>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10d      	bne.n	8002b80 <xQueueGenericSend+0x6c>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b68:	b672      	cpsid	i
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	b662      	cpsie	i
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b7a:	bf00      	nop
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d103      	bne.n	8002b8e <xQueueGenericSend+0x7a>
 8002b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <xQueueGenericSend+0x7e>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <xQueueGenericSend+0x80>
 8002b92:	2300      	movs	r3, #0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10d      	bne.n	8002bb4 <xQueueGenericSend+0xa0>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9c:	b672      	cpsid	i
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	b662      	cpsie	i
 8002bac:	623b      	str	r3, [r7, #32]
}
 8002bae:	bf00      	nop
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bb4:	f001 fa2a 	bl	800400c <xTaskGetSchedulerState>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d102      	bne.n	8002bc4 <xQueueGenericSend+0xb0>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <xQueueGenericSend+0xb4>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <xQueueGenericSend+0xb6>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10d      	bne.n	8002bea <xQueueGenericSend+0xd6>
	__asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd2:	b672      	cpsid	i
 8002bd4:	f383 8811 	msr	BASEPRI, r3
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	b662      	cpsie	i
 8002be2:	61fb      	str	r3, [r7, #28]
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	e7fd      	b.n	8002be6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bea:	f001 ff6f 	bl	8004acc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d302      	bcc.n	8002c00 <xQueueGenericSend+0xec>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d129      	bne.n	8002c54 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c06:	f000 fa1b 	bl	8003040 <prvCopyDataToQueue>
 8002c0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d010      	beq.n	8002c36 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c16:	3324      	adds	r3, #36	@ 0x24
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 f829 	bl	8003c70 <xTaskRemoveFromEventList>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c24:	4b3f      	ldr	r3, [pc, #252]	@ (8002d24 <xQueueGenericSend+0x210>)
 8002c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	e00a      	b.n	8002c4c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c3c:	4b39      	ldr	r3, [pc, #228]	@ (8002d24 <xQueueGenericSend+0x210>)
 8002c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c4c:	f001 ff74 	bl	8004b38 <vPortExitCritical>
				return pdPASS;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e063      	b.n	8002d1c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c5a:	f001 ff6d 	bl	8004b38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e05c      	b.n	8002d1c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d106      	bne.n	8002c76 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f001 f865 	bl	8003d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c72:	2301      	movs	r3, #1
 8002c74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c76:	f001 ff5f 	bl	8004b38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c7a:	f000 fdc1 	bl	8003800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c7e:	f001 ff25 	bl	8004acc <vPortEnterCritical>
 8002c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8e:	d103      	bne.n	8002c98 <xQueueGenericSend+0x184>
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c9e:	b25b      	sxtb	r3, r3
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d103      	bne.n	8002cae <xQueueGenericSend+0x19a>
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cae:	f001 ff43 	bl	8004b38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cb2:	1d3a      	adds	r2, r7, #4
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f001 f854 	bl	8003d68 <xTaskCheckForTimeOut>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d124      	bne.n	8002d10 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cc8:	f000 fab2 	bl	8003230 <prvIsQueueFull>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d018      	beq.n	8002d04 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd4:	3310      	adds	r3, #16
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 ff72 	bl	8003bc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ce0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ce2:	f000 fa3d 	bl	8003160 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ce6:	f000 fd99 	bl	800381c <xTaskResumeAll>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f47f af7c 	bne.w	8002bea <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <xQueueGenericSend+0x210>)
 8002cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	e772      	b.n	8002bea <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d06:	f000 fa2b 	bl	8003160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d0a:	f000 fd87 	bl	800381c <xTaskResumeAll>
 8002d0e:	e76c      	b.n	8002bea <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d12:	f000 fa25 	bl	8003160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d16:	f000 fd81 	bl	800381c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3738      	adds	r7, #56	@ 0x38
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	e000ed04 	.word	0xe000ed04

08002d28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08e      	sub	sp, #56	@ 0x38
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10d      	bne.n	8002d5c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8002d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d44:	b672      	cpsid	i
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	b662      	cpsie	i
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d56:	bf00      	nop
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <xQueueGenericSendFromISR+0x42>
 8002d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <xQueueGenericSendFromISR+0x46>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <xQueueGenericSendFromISR+0x48>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10d      	bne.n	8002d90 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d78:	b672      	cpsid	i
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	b662      	cpsie	i
 8002d88:	623b      	str	r3, [r7, #32]
}
 8002d8a:	bf00      	nop
 8002d8c:	bf00      	nop
 8002d8e:	e7fd      	b.n	8002d8c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d103      	bne.n	8002d9e <xQueueGenericSendFromISR+0x76>
 8002d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <xQueueGenericSendFromISR+0x7a>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <xQueueGenericSendFromISR+0x7c>
 8002da2:	2300      	movs	r3, #0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10d      	bne.n	8002dc4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dac:	b672      	cpsid	i
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	b662      	cpsie	i
 8002dbc:	61fb      	str	r3, [r7, #28]
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dc4:	f001 ff6a 	bl	8004c9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002dc8:	f3ef 8211 	mrs	r2, BASEPRI
 8002dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd0:	b672      	cpsid	i
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	b662      	cpsie	i
 8002de0:	61ba      	str	r2, [r7, #24]
 8002de2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002de4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d302      	bcc.n	8002dfa <xQueueGenericSendFromISR+0xd2>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d12c      	bne.n	8002e54 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e0a:	f000 f919 	bl	8003040 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e0e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d112      	bne.n	8002e3e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d016      	beq.n	8002e4e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e22:	3324      	adds	r3, #36	@ 0x24
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 ff23 	bl	8003c70 <xTaskRemoveFromEventList>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00e      	beq.n	8002e4e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e007      	b.n	8002e4e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e42:	3301      	adds	r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	b25a      	sxtb	r2, r3
 8002e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002e52:	e001      	b.n	8002e58 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3738      	adds	r7, #56	@ 0x38
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	@ 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <xQueueReceive+0x36>
	__asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e8e:	b672      	cpsid	i
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	b662      	cpsie	i
 8002e9e:	623b      	str	r3, [r7, #32]
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	e7fd      	b.n	8002ea2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <xQueueReceive+0x44>
 8002eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <xQueueReceive+0x48>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <xQueueReceive+0x4a>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10d      	bne.n	8002eda <xQueueReceive+0x6a>
	__asm volatile
 8002ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec2:	b672      	cpsid	i
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	b662      	cpsie	i
 8002ed2:	61fb      	str	r3, [r7, #28]
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	e7fd      	b.n	8002ed6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eda:	f001 f897 	bl	800400c <xTaskGetSchedulerState>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <xQueueReceive+0x7a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <xQueueReceive+0x7e>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <xQueueReceive+0x80>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10d      	bne.n	8002f10 <xQueueReceive+0xa0>
	__asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef8:	b672      	cpsid	i
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	b662      	cpsie	i
 8002f08:	61bb      	str	r3, [r7, #24]
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	e7fd      	b.n	8002f0c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f10:	f001 fddc 	bl	8004acc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01f      	beq.n	8002f60 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f24:	f000 f8f6 	bl	8003114 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	1e5a      	subs	r2, r3, #1
 8002f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00f      	beq.n	8002f58 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3a:	3310      	adds	r3, #16
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fe97 	bl	8003c70 <xTaskRemoveFromEventList>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f48:	4b3c      	ldr	r3, [pc, #240]	@ (800303c <xQueueReceive+0x1cc>)
 8002f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f58:	f001 fdee 	bl	8004b38 <vPortExitCritical>
				return pdPASS;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e069      	b.n	8003034 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d103      	bne.n	8002f6e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f66:	f001 fde7 	bl	8004b38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e062      	b.n	8003034 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f74:	f107 0310 	add.w	r3, r7, #16
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fedf 	bl	8003d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f82:	f001 fdd9 	bl	8004b38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f86:	f000 fc3b 	bl	8003800 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f8a:	f001 fd9f 	bl	8004acc <vPortEnterCritical>
 8002f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f94:	b25b      	sxtb	r3, r3
 8002f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9a:	d103      	bne.n	8002fa4 <xQueueReceive+0x134>
 8002f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d103      	bne.n	8002fba <xQueueReceive+0x14a>
 8002fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fba:	f001 fdbd 	bl	8004b38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fbe:	1d3a      	adds	r2, r7, #4
 8002fc0:	f107 0310 	add.w	r3, r7, #16
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fece 	bl	8003d68 <xTaskCheckForTimeOut>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d123      	bne.n	800301a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fd4:	f000 f916 	bl	8003204 <prvIsQueueEmpty>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d017      	beq.n	800300e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe0:	3324      	adds	r3, #36	@ 0x24
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fdec 	bl	8003bc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fee:	f000 f8b7 	bl	8003160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ff2:	f000 fc13 	bl	800381c <xTaskResumeAll>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d189      	bne.n	8002f10 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800303c <xQueueReceive+0x1cc>)
 8002ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	e780      	b.n	8002f10 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800300e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003010:	f000 f8a6 	bl	8003160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003014:	f000 fc02 	bl	800381c <xTaskResumeAll>
 8003018:	e77a      	b.n	8002f10 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800301a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800301c:	f000 f8a0 	bl	8003160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003020:	f000 fbfc 	bl	800381c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003026:	f000 f8ed 	bl	8003204 <prvIsQueueEmpty>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	f43f af6f 	beq.w	8002f10 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003032:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003034:	4618      	mov	r0, r3
 8003036:	3730      	adds	r7, #48	@ 0x30
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	e000ed04 	.word	0xe000ed04

08003040 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003054:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10d      	bne.n	800307a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d14d      	bne.n	8003102 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 ffec 	bl	8004048 <xTaskPriorityDisinherit>
 8003070:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	e043      	b.n	8003102 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d119      	bne.n	80030b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6858      	ldr	r0, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	461a      	mov	r2, r3
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	f002 f8ba 	bl	8005204 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	441a      	add	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d32b      	bcc.n	8003102 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	e026      	b.n	8003102 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	68d8      	ldr	r0, [r3, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	461a      	mov	r2, r3
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	f002 f8a0 	bl	8005204 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	425b      	negs	r3, r3
 80030ce:	441a      	add	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d207      	bcs.n	80030f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	425b      	negs	r3, r3
 80030ea:	441a      	add	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d105      	bne.n	8003102 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	3b01      	subs	r3, #1
 8003100:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800310a:	697b      	ldr	r3, [r7, #20]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d018      	beq.n	8003158 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	441a      	add	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	429a      	cmp	r2, r3
 800313e:	d303      	bcc.n	8003148 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68d9      	ldr	r1, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	461a      	mov	r2, r3
 8003152:	6838      	ldr	r0, [r7, #0]
 8003154:	f002 f856 	bl	8005204 <memcpy>
	}
}
 8003158:	bf00      	nop
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003168:	f001 fcb0 	bl	8004acc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003172:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003174:	e011      	b.n	800319a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	2b00      	cmp	r3, #0
 800317c:	d012      	beq.n	80031a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3324      	adds	r3, #36	@ 0x24
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fd74 	bl	8003c70 <xTaskRemoveFromEventList>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800318e:	f000 fe53 	bl	8003e38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	3b01      	subs	r3, #1
 8003196:	b2db      	uxtb	r3, r3
 8003198:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800319a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	dce9      	bgt.n	8003176 <prvUnlockQueue+0x16>
 80031a2:	e000      	b.n	80031a6 <prvUnlockQueue+0x46>
					break;
 80031a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	22ff      	movs	r2, #255	@ 0xff
 80031aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80031ae:	f001 fcc3 	bl	8004b38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80031b2:	f001 fc8b 	bl	8004acc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031be:	e011      	b.n	80031e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d012      	beq.n	80031ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3310      	adds	r3, #16
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fd4f 	bl	8003c70 <xTaskRemoveFromEventList>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031d8:	f000 fe2e 	bl	8003e38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031dc:	7bbb      	ldrb	r3, [r7, #14]
 80031de:	3b01      	subs	r3, #1
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	dce9      	bgt.n	80031c0 <prvUnlockQueue+0x60>
 80031ec:	e000      	b.n	80031f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	22ff      	movs	r2, #255	@ 0xff
 80031f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80031f8:	f001 fc9e 	bl	8004b38 <vPortExitCritical>
}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800320c:	f001 fc5e 	bl	8004acc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003218:	2301      	movs	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e001      	b.n	8003222 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003222:	f001 fc89 	bl	8004b38 <vPortExitCritical>

	return xReturn;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003238:	f001 fc48 	bl	8004acc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003244:	429a      	cmp	r2, r3
 8003246:	d102      	bne.n	800324e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003248:	2301      	movs	r3, #1
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e001      	b.n	8003252 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003252:	f001 fc71 	bl	8004b38 <vPortExitCritical>

	return xReturn;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	e014      	b.n	800329a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003270:	4a0f      	ldr	r2, [pc, #60]	@ (80032b0 <vQueueAddToRegistry+0x50>)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800327c:	490c      	ldr	r1, [pc, #48]	@ (80032b0 <vQueueAddToRegistry+0x50>)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003286:	4a0a      	ldr	r2, [pc, #40]	@ (80032b0 <vQueueAddToRegistry+0x50>)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003292:	e006      	b.n	80032a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3301      	adds	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b07      	cmp	r3, #7
 800329e:	d9e7      	bls.n	8003270 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80032a0:	bf00      	nop
 80032a2:	bf00      	nop
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	2000081c 	.word	0x2000081c

080032b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032c4:	f001 fc02 	bl	8004acc <vPortEnterCritical>
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032ce:	b25b      	sxtb	r3, r3
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d103      	bne.n	80032de <vQueueWaitForMessageRestricted+0x2a>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d103      	bne.n	80032f4 <vQueueWaitForMessageRestricted+0x40>
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032f4:	f001 fc20 	bl	8004b38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d106      	bne.n	800330e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3324      	adds	r3, #36	@ 0x24
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fc83 	bl	8003c14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800330e:	6978      	ldr	r0, [r7, #20]
 8003310:	f7ff ff26 	bl	8003160 <prvUnlockQueue>
	}
 8003314:	bf00      	nop
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08e      	sub	sp, #56	@ 0x38
 8003320:	af04      	add	r7, sp, #16
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800332a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10d      	bne.n	800334c <xTaskCreateStatic+0x30>
	__asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003334:	b672      	cpsid	i
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	b662      	cpsie	i
 8003344:	623b      	str	r3, [r7, #32]
}
 8003346:	bf00      	nop
 8003348:	bf00      	nop
 800334a:	e7fd      	b.n	8003348 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800334c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10d      	bne.n	800336e <xTaskCreateStatic+0x52>
	__asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003356:	b672      	cpsid	i
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	b662      	cpsie	i
 8003366:	61fb      	str	r3, [r7, #28]
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	e7fd      	b.n	800336a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800336e:	23a8      	movs	r3, #168	@ 0xa8
 8003370:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2ba8      	cmp	r3, #168	@ 0xa8
 8003376:	d00d      	beq.n	8003394 <xTaskCreateStatic+0x78>
	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337c:	b672      	cpsid	i
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	b662      	cpsie	i
 800338c:	61bb      	str	r3, [r7, #24]
}
 800338e:	bf00      	nop
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003394:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01e      	beq.n	80033da <xTaskCreateStatic+0xbe>
 800339c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d01b      	beq.n	80033da <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033b4:	2300      	movs	r3, #0
 80033b6:	9303      	str	r3, [sp, #12]
 80033b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ba:	9302      	str	r3, [sp, #8]
 80033bc:	f107 0314 	add.w	r3, r7, #20
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f851 	bl	8003474 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033d4:	f000 f8f8 	bl	80035c8 <prvAddNewTaskToReadyList>
 80033d8:	e001      	b.n	80033de <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033de:	697b      	ldr	r3, [r7, #20]
	}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3728      	adds	r7, #40	@ 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08c      	sub	sp, #48	@ 0x30
 80033ec:	af04      	add	r7, sp, #16
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 fc93 	bl	8004d28 <pvPortMalloc>
 8003402:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00e      	beq.n	8003428 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800340a:	20a8      	movs	r0, #168	@ 0xa8
 800340c:	f001 fc8c 	bl	8004d28 <pvPortMalloc>
 8003410:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	631a      	str	r2, [r3, #48]	@ 0x30
 800341e:	e005      	b.n	800342c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003420:	6978      	ldr	r0, [r7, #20]
 8003422:	f001 fd4f 	bl	8004ec4 <vPortFree>
 8003426:	e001      	b.n	800342c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d017      	beq.n	8003462 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800343a:	88fa      	ldrh	r2, [r7, #6]
 800343c:	2300      	movs	r3, #0
 800343e:	9303      	str	r3, [sp, #12]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	9302      	str	r3, [sp, #8]
 8003444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f80f 	bl	8003474 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003456:	69f8      	ldr	r0, [r7, #28]
 8003458:	f000 f8b6 	bl	80035c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800345c:	2301      	movs	r3, #1
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	e002      	b.n	8003468 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003468:	69bb      	ldr	r3, [r7, #24]
	}
 800346a:	4618      	mov	r0, r3
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003484:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	461a      	mov	r2, r3
 800348c:	21a5      	movs	r1, #165	@ 0xa5
 800348e:	f001 fe35 	bl	80050fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800349c:	440b      	add	r3, r1
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f023 0307 	bic.w	r3, r3, #7
 80034aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00d      	beq.n	80034d2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ba:	b672      	cpsid	i
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	b662      	cpsie	i
 80034ca:	617b      	str	r3, [r7, #20]
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	e7fd      	b.n	80034ce <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01f      	beq.n	8003518 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	e012      	b.n	8003504 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	4413      	add	r3, r2
 80034e4:	7819      	ldrb	r1, [r3, #0]
 80034e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	4413      	add	r3, r2
 80034ec:	3334      	adds	r3, #52	@ 0x34
 80034ee:	460a      	mov	r2, r1
 80034f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	4413      	add	r3, r2
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d006      	beq.n	800350c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3301      	adds	r3, #1
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	2b0f      	cmp	r3, #15
 8003508:	d9e9      	bls.n	80034de <prvInitialiseNewTask+0x6a>
 800350a:	e000      	b.n	800350e <prvInitialiseNewTask+0x9a>
			{
				break;
 800350c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003516:	e003      	b.n	8003520 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	2b37      	cmp	r3, #55	@ 0x37
 8003524:	d901      	bls.n	800352a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003526:	2337      	movs	r3, #55	@ 0x37
 8003528:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800352a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800352e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003534:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	2200      	movs	r2, #0
 800353a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800353c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353e:	3304      	adds	r3, #4
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff f93d 	bl	80027c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003548:	3318      	adds	r3, #24
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff f938 	bl	80027c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003554:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003558:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003564:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	2200      	movs	r2, #0
 800356a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003570:	2200      	movs	r2, #0
 8003572:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003578:	3354      	adds	r3, #84	@ 0x54
 800357a:	224c      	movs	r2, #76	@ 0x4c
 800357c:	2100      	movs	r1, #0
 800357e:	4618      	mov	r0, r3
 8003580:	f001 fdbc 	bl	80050fc <memset>
 8003584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003586:	4a0d      	ldr	r2, [pc, #52]	@ (80035bc <prvInitialiseNewTask+0x148>)
 8003588:	659a      	str	r2, [r3, #88]	@ 0x58
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	4a0c      	ldr	r2, [pc, #48]	@ (80035c0 <prvInitialiseNewTask+0x14c>)
 800358e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003592:	4a0c      	ldr	r2, [pc, #48]	@ (80035c4 <prvInitialiseNewTask+0x150>)
 8003594:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	68f9      	ldr	r1, [r7, #12]
 800359a:	69b8      	ldr	r0, [r7, #24]
 800359c:	f001 f984 	bl	80048a8 <pxPortInitialiseStack>
 80035a0:	4602      	mov	r2, r0
 80035a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035b2:	bf00      	nop
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20004aa8 	.word	0x20004aa8
 80035c0:	20004b10 	.word	0x20004b10
 80035c4:	20004b78 	.word	0x20004b78

080035c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035d0:	f001 fa7c 	bl	8004acc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035d4:	4b2d      	ldr	r3, [pc, #180]	@ (800368c <prvAddNewTaskToReadyList+0xc4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3301      	adds	r3, #1
 80035da:	4a2c      	ldr	r2, [pc, #176]	@ (800368c <prvAddNewTaskToReadyList+0xc4>)
 80035dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035de:	4b2c      	ldr	r3, [pc, #176]	@ (8003690 <prvAddNewTaskToReadyList+0xc8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003690 <prvAddNewTaskToReadyList+0xc8>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035ec:	4b27      	ldr	r3, [pc, #156]	@ (800368c <prvAddNewTaskToReadyList+0xc4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d110      	bne.n	8003616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035f4:	f000 fc44 	bl	8003e80 <prvInitialiseTaskLists>
 80035f8:	e00d      	b.n	8003616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035fa:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <prvAddNewTaskToReadyList+0xcc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003602:	4b23      	ldr	r3, [pc, #140]	@ (8003690 <prvAddNewTaskToReadyList+0xc8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360c:	429a      	cmp	r2, r3
 800360e:	d802      	bhi.n	8003616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003610:	4a1f      	ldr	r2, [pc, #124]	@ (8003690 <prvAddNewTaskToReadyList+0xc8>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003616:	4b20      	ldr	r3, [pc, #128]	@ (8003698 <prvAddNewTaskToReadyList+0xd0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3301      	adds	r3, #1
 800361c:	4a1e      	ldr	r2, [pc, #120]	@ (8003698 <prvAddNewTaskToReadyList+0xd0>)
 800361e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003620:	4b1d      	ldr	r3, [pc, #116]	@ (8003698 <prvAddNewTaskToReadyList+0xd0>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800362c:	4b1b      	ldr	r3, [pc, #108]	@ (800369c <prvAddNewTaskToReadyList+0xd4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d903      	bls.n	800363c <prvAddNewTaskToReadyList+0x74>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	4a18      	ldr	r2, [pc, #96]	@ (800369c <prvAddNewTaskToReadyList+0xd4>)
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4a15      	ldr	r2, [pc, #84]	@ (80036a0 <prvAddNewTaskToReadyList+0xd8>)
 800364a:	441a      	add	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f7ff f8c1 	bl	80027da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003658:	f001 fa6e 	bl	8004b38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800365c:	4b0d      	ldr	r3, [pc, #52]	@ (8003694 <prvAddNewTaskToReadyList+0xcc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00e      	beq.n	8003682 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003664:	4b0a      	ldr	r3, [pc, #40]	@ (8003690 <prvAddNewTaskToReadyList+0xc8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366e:	429a      	cmp	r2, r3
 8003670:	d207      	bcs.n	8003682 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003672:	4b0c      	ldr	r3, [pc, #48]	@ (80036a4 <prvAddNewTaskToReadyList+0xdc>)
 8003674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000d30 	.word	0x20000d30
 8003690:	2000085c 	.word	0x2000085c
 8003694:	20000d3c 	.word	0x20000d3c
 8003698:	20000d4c 	.word	0x20000d4c
 800369c:	20000d38 	.word	0x20000d38
 80036a0:	20000860 	.word	0x20000860
 80036a4:	e000ed04 	.word	0xe000ed04

080036a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d01a      	beq.n	80036f0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036ba:	4b15      	ldr	r3, [pc, #84]	@ (8003710 <vTaskDelay+0x68>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00d      	beq.n	80036de <vTaskDelay+0x36>
	__asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c6:	b672      	cpsid	i
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	b662      	cpsie	i
 80036d6:	60bb      	str	r3, [r7, #8]
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	e7fd      	b.n	80036da <vTaskDelay+0x32>
			vTaskSuspendAll();
 80036de:	f000 f88f 	bl	8003800 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036e2:	2100      	movs	r1, #0
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fd23 	bl	8004130 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036ea:	f000 f897 	bl	800381c <xTaskResumeAll>
 80036ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d107      	bne.n	8003706 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80036f6:	4b07      	ldr	r3, [pc, #28]	@ (8003714 <vTaskDelay+0x6c>)
 80036f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000d58 	.word	0x20000d58
 8003714:	e000ed04 	.word	0xe000ed04

08003718 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	@ 0x28
 800371c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003726:	463a      	mov	r2, r7
 8003728:	1d39      	adds	r1, r7, #4
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fff2 	bl	8002718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003734:	6839      	ldr	r1, [r7, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	9202      	str	r2, [sp, #8]
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	2300      	movs	r3, #0
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	2300      	movs	r3, #0
 8003744:	460a      	mov	r2, r1
 8003746:	4926      	ldr	r1, [pc, #152]	@ (80037e0 <vTaskStartScheduler+0xc8>)
 8003748:	4826      	ldr	r0, [pc, #152]	@ (80037e4 <vTaskStartScheduler+0xcc>)
 800374a:	f7ff fde7 	bl	800331c <xTaskCreateStatic>
 800374e:	4603      	mov	r3, r0
 8003750:	4a25      	ldr	r2, [pc, #148]	@ (80037e8 <vTaskStartScheduler+0xd0>)
 8003752:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003754:	4b24      	ldr	r3, [pc, #144]	@ (80037e8 <vTaskStartScheduler+0xd0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800375c:	2301      	movs	r3, #1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	e001      	b.n	8003766 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d102      	bne.n	8003772 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800376c:	f000 fd34 	bl	80041d8 <xTimerCreateTimerTask>
 8003770:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d11d      	bne.n	80037b4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377c:	b672      	cpsid	i
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	b662      	cpsie	i
 800378c:	613b      	str	r3, [r7, #16]
}
 800378e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003790:	4b16      	ldr	r3, [pc, #88]	@ (80037ec <vTaskStartScheduler+0xd4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3354      	adds	r3, #84	@ 0x54
 8003796:	4a16      	ldr	r2, [pc, #88]	@ (80037f0 <vTaskStartScheduler+0xd8>)
 8003798:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800379a:	4b16      	ldr	r3, [pc, #88]	@ (80037f4 <vTaskStartScheduler+0xdc>)
 800379c:	f04f 32ff 	mov.w	r2, #4294967295
 80037a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037a2:	4b15      	ldr	r3, [pc, #84]	@ (80037f8 <vTaskStartScheduler+0xe0>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80037a8:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <vTaskStartScheduler+0xe4>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037ae:	f001 f90f 	bl	80049d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037b2:	e011      	b.n	80037d8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ba:	d10d      	bne.n	80037d8 <vTaskStartScheduler+0xc0>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c0:	b672      	cpsid	i
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	b662      	cpsie	i
 80037d0:	60fb      	str	r3, [r7, #12]
}
 80037d2:	bf00      	nop
 80037d4:	bf00      	nop
 80037d6:	e7fd      	b.n	80037d4 <vTaskStartScheduler+0xbc>
}
 80037d8:	bf00      	nop
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	080052ec 	.word	0x080052ec
 80037e4:	08003e51 	.word	0x08003e51
 80037e8:	20000d54 	.word	0x20000d54
 80037ec:	2000085c 	.word	0x2000085c
 80037f0:	20000010 	.word	0x20000010
 80037f4:	20000d50 	.word	0x20000d50
 80037f8:	20000d3c 	.word	0x20000d3c
 80037fc:	20000d34 	.word	0x20000d34

08003800 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <vTaskSuspendAll+0x18>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	4a03      	ldr	r2, [pc, #12]	@ (8003818 <vTaskSuspendAll+0x18>)
 800380c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800380e:	bf00      	nop
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	20000d58 	.word	0x20000d58

0800381c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800382a:	4b43      	ldr	r3, [pc, #268]	@ (8003938 <xTaskResumeAll+0x11c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10d      	bne.n	800384e <xTaskResumeAll+0x32>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003836:	b672      	cpsid	i
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	b662      	cpsie	i
 8003846:	603b      	str	r3, [r7, #0]
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	e7fd      	b.n	800384a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800384e:	f001 f93d 	bl	8004acc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003852:	4b39      	ldr	r3, [pc, #228]	@ (8003938 <xTaskResumeAll+0x11c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3b01      	subs	r3, #1
 8003858:	4a37      	ldr	r2, [pc, #220]	@ (8003938 <xTaskResumeAll+0x11c>)
 800385a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800385c:	4b36      	ldr	r3, [pc, #216]	@ (8003938 <xTaskResumeAll+0x11c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d162      	bne.n	800392a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003864:	4b35      	ldr	r3, [pc, #212]	@ (800393c <xTaskResumeAll+0x120>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d05e      	beq.n	800392a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800386c:	e02f      	b.n	80038ce <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800386e:	4b34      	ldr	r3, [pc, #208]	@ (8003940 <xTaskResumeAll+0x124>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3318      	adds	r3, #24
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff f80a 	bl	8002894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3304      	adds	r3, #4
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff f805 	bl	8002894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800388e:	4b2d      	ldr	r3, [pc, #180]	@ (8003944 <xTaskResumeAll+0x128>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d903      	bls.n	800389e <xTaskResumeAll+0x82>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389a:	4a2a      	ldr	r2, [pc, #168]	@ (8003944 <xTaskResumeAll+0x128>)
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4a27      	ldr	r2, [pc, #156]	@ (8003948 <xTaskResumeAll+0x12c>)
 80038ac:	441a      	add	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f7fe ff90 	bl	80027da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038be:	4b23      	ldr	r3, [pc, #140]	@ (800394c <xTaskResumeAll+0x130>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80038c8:	4b21      	ldr	r3, [pc, #132]	@ (8003950 <xTaskResumeAll+0x134>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003940 <xTaskResumeAll+0x124>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1cb      	bne.n	800386e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038dc:	f000 fb76 	bl	8003fcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80038e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003954 <xTaskResumeAll+0x138>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d010      	beq.n	800390e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038ec:	f000 f846 	bl	800397c <xTaskIncrementTick>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80038f6:	4b16      	ldr	r3, [pc, #88]	@ (8003950 <xTaskResumeAll+0x134>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3b01      	subs	r3, #1
 8003900:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f1      	bne.n	80038ec <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8003908:	4b12      	ldr	r3, [pc, #72]	@ (8003954 <xTaskResumeAll+0x138>)
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800390e:	4b10      	ldr	r3, [pc, #64]	@ (8003950 <xTaskResumeAll+0x134>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003916:	2301      	movs	r3, #1
 8003918:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800391a:	4b0f      	ldr	r3, [pc, #60]	@ (8003958 <xTaskResumeAll+0x13c>)
 800391c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800392a:	f001 f905 	bl	8004b38 <vPortExitCritical>

	return xAlreadyYielded;
 800392e:	68bb      	ldr	r3, [r7, #8]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000d58 	.word	0x20000d58
 800393c:	20000d30 	.word	0x20000d30
 8003940:	20000cf0 	.word	0x20000cf0
 8003944:	20000d38 	.word	0x20000d38
 8003948:	20000860 	.word	0x20000860
 800394c:	2000085c 	.word	0x2000085c
 8003950:	20000d44 	.word	0x20000d44
 8003954:	20000d40 	.word	0x20000d40
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003962:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <xTaskGetTickCount+0x1c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003968:	687b      	ldr	r3, [r7, #4]
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000d34 	.word	0x20000d34

0800397c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003986:	4b50      	ldr	r3, [pc, #320]	@ (8003ac8 <xTaskIncrementTick+0x14c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 808c 	bne.w	8003aa8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003990:	4b4e      	ldr	r3, [pc, #312]	@ (8003acc <xTaskIncrementTick+0x150>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3301      	adds	r3, #1
 8003996:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003998:	4a4c      	ldr	r2, [pc, #304]	@ (8003acc <xTaskIncrementTick+0x150>)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d123      	bne.n	80039ec <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80039a4:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad0 <xTaskIncrementTick+0x154>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00d      	beq.n	80039ca <xTaskIncrementTick+0x4e>
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b2:	b672      	cpsid	i
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	b662      	cpsie	i
 80039c2:	603b      	str	r3, [r7, #0]
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	e7fd      	b.n	80039c6 <xTaskIncrementTick+0x4a>
 80039ca:	4b41      	ldr	r3, [pc, #260]	@ (8003ad0 <xTaskIncrementTick+0x154>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	4b40      	ldr	r3, [pc, #256]	@ (8003ad4 <xTaskIncrementTick+0x158>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a3e      	ldr	r2, [pc, #248]	@ (8003ad0 <xTaskIncrementTick+0x154>)
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4a3e      	ldr	r2, [pc, #248]	@ (8003ad4 <xTaskIncrementTick+0x158>)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b3e      	ldr	r3, [pc, #248]	@ (8003ad8 <xTaskIncrementTick+0x15c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ad8 <xTaskIncrementTick+0x15c>)
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	f000 faf0 	bl	8003fcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039ec:	4b3b      	ldr	r3, [pc, #236]	@ (8003adc <xTaskIncrementTick+0x160>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d349      	bcc.n	8003a8a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039f6:	4b36      	ldr	r3, [pc, #216]	@ (8003ad0 <xTaskIncrementTick+0x154>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d104      	bne.n	8003a0a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a00:	4b36      	ldr	r3, [pc, #216]	@ (8003adc <xTaskIncrementTick+0x160>)
 8003a02:	f04f 32ff 	mov.w	r2, #4294967295
 8003a06:	601a      	str	r2, [r3, #0]
					break;
 8003a08:	e03f      	b.n	8003a8a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a0a:	4b31      	ldr	r3, [pc, #196]	@ (8003ad0 <xTaskIncrementTick+0x154>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d203      	bcs.n	8003a2a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a22:	4a2e      	ldr	r2, [pc, #184]	@ (8003adc <xTaskIncrementTick+0x160>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a28:	e02f      	b.n	8003a8a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe ff30 	bl	8002894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d004      	beq.n	8003a46 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3318      	adds	r3, #24
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe ff27 	bl	8002894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ae0 <xTaskIncrementTick+0x164>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d903      	bls.n	8003a5a <xTaskIncrementTick+0xde>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	4a22      	ldr	r2, [pc, #136]	@ (8003ae0 <xTaskIncrementTick+0x164>)
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae4 <xTaskIncrementTick+0x168>)
 8003a68:	441a      	add	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f7fe feb2 	bl	80027da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae8 <xTaskIncrementTick+0x16c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d3b8      	bcc.n	80039f6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8003a84:	2301      	movs	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a88:	e7b5      	b.n	80039f6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a8a:	4b17      	ldr	r3, [pc, #92]	@ (8003ae8 <xTaskIncrementTick+0x16c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a90:	4914      	ldr	r1, [pc, #80]	@ (8003ae4 <xTaskIncrementTick+0x168>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d907      	bls.n	8003ab2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e004      	b.n	8003ab2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003aa8:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <xTaskIncrementTick+0x170>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	4a0f      	ldr	r2, [pc, #60]	@ (8003aec <xTaskIncrementTick+0x170>)
 8003ab0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8003af0 <xTaskIncrementTick+0x174>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003aba:	2301      	movs	r3, #1
 8003abc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003abe:	697b      	ldr	r3, [r7, #20]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000d58 	.word	0x20000d58
 8003acc:	20000d34 	.word	0x20000d34
 8003ad0:	20000ce8 	.word	0x20000ce8
 8003ad4:	20000cec 	.word	0x20000cec
 8003ad8:	20000d48 	.word	0x20000d48
 8003adc:	20000d50 	.word	0x20000d50
 8003ae0:	20000d38 	.word	0x20000d38
 8003ae4:	20000860 	.word	0x20000860
 8003ae8:	2000085c 	.word	0x2000085c
 8003aec:	20000d40 	.word	0x20000d40
 8003af0:	20000d44 	.word	0x20000d44

08003af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003afa:	4b2c      	ldr	r3, [pc, #176]	@ (8003bac <vTaskSwitchContext+0xb8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b02:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb0 <vTaskSwitchContext+0xbc>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b08:	e049      	b.n	8003b9e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8003b0a:	4b29      	ldr	r3, [pc, #164]	@ (8003bb0 <vTaskSwitchContext+0xbc>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b10:	4b28      	ldr	r3, [pc, #160]	@ (8003bb4 <vTaskSwitchContext+0xc0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e013      	b.n	8003b40 <vTaskSwitchContext+0x4c>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10d      	bne.n	8003b3a <vTaskSwitchContext+0x46>
	__asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b22:	b672      	cpsid	i
 8003b24:	f383 8811 	msr	BASEPRI, r3
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	b662      	cpsie	i
 8003b32:	607b      	str	r3, [r7, #4]
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	e7fd      	b.n	8003b36 <vTaskSwitchContext+0x42>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	491d      	ldr	r1, [pc, #116]	@ (8003bb8 <vTaskSwitchContext+0xc4>)
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0e1      	beq.n	8003b18 <vTaskSwitchContext+0x24>
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4a16      	ldr	r2, [pc, #88]	@ (8003bb8 <vTaskSwitchContext+0xc4>)
 8003b60:	4413      	add	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	3308      	adds	r3, #8
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d104      	bne.n	8003b84 <vTaskSwitchContext+0x90>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003bbc <vTaskSwitchContext+0xc8>)
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4a09      	ldr	r2, [pc, #36]	@ (8003bb4 <vTaskSwitchContext+0xc0>)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b94:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <vTaskSwitchContext+0xc8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3354      	adds	r3, #84	@ 0x54
 8003b9a:	4a09      	ldr	r2, [pc, #36]	@ (8003bc0 <vTaskSwitchContext+0xcc>)
 8003b9c:	6013      	str	r3, [r2, #0]
}
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000d58 	.word	0x20000d58
 8003bb0:	20000d44 	.word	0x20000d44
 8003bb4:	20000d38 	.word	0x20000d38
 8003bb8:	20000860 	.word	0x20000860
 8003bbc:	2000085c 	.word	0x2000085c
 8003bc0:	20000010 	.word	0x20000010

08003bc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10d      	bne.n	8003bf0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8003bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd8:	b672      	cpsid	i
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	b662      	cpsie	i
 8003be8:	60fb      	str	r3, [r7, #12]
}
 8003bea:	bf00      	nop
 8003bec:	bf00      	nop
 8003bee:	e7fd      	b.n	8003bec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bf0:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <vTaskPlaceOnEventList+0x4c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3318      	adds	r3, #24
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7fe fe12 	bl	8002822 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bfe:	2101      	movs	r1, #1
 8003c00:	6838      	ldr	r0, [r7, #0]
 8003c02:	f000 fa95 	bl	8004130 <prvAddCurrentTaskToDelayedList>
}
 8003c06:	bf00      	nop
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	2000085c 	.word	0x2000085c

08003c14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10d      	bne.n	8003c42 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8003c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2a:	b672      	cpsid	i
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	b662      	cpsie	i
 8003c3a:	617b      	str	r3, [r7, #20]
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	e7fd      	b.n	8003c3e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <vTaskPlaceOnEventListRestricted+0x58>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3318      	adds	r3, #24
 8003c48:	4619      	mov	r1, r3
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7fe fdc5 	bl	80027da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	68b8      	ldr	r0, [r7, #8]
 8003c60:	f000 fa66 	bl	8004130 <prvAddCurrentTaskToDelayedList>
	}
 8003c64:	bf00      	nop
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	2000085c 	.word	0x2000085c

08003c70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10d      	bne.n	8003ca2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8a:	b672      	cpsid	i
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	b662      	cpsie	i
 8003c9a:	60fb      	str	r3, [r7, #12]
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	e7fd      	b.n	8003c9e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	3318      	adds	r3, #24
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe fdf4 	bl	8002894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cac:	4b1d      	ldr	r3, [pc, #116]	@ (8003d24 <xTaskRemoveFromEventList+0xb4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d11d      	bne.n	8003cf0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fe fdeb 	bl	8002894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc2:	4b19      	ldr	r3, [pc, #100]	@ (8003d28 <xTaskRemoveFromEventList+0xb8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d903      	bls.n	8003cd2 <xTaskRemoveFromEventList+0x62>
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cce:	4a16      	ldr	r2, [pc, #88]	@ (8003d28 <xTaskRemoveFromEventList+0xb8>)
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4a13      	ldr	r2, [pc, #76]	@ (8003d2c <xTaskRemoveFromEventList+0xbc>)
 8003ce0:	441a      	add	r2, r3
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f7fe fd76 	bl	80027da <vListInsertEnd>
 8003cee:	e005      	b.n	8003cfc <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	3318      	adds	r3, #24
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	480e      	ldr	r0, [pc, #56]	@ (8003d30 <xTaskRemoveFromEventList+0xc0>)
 8003cf8:	f7fe fd6f 	bl	80027da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d00:	4b0c      	ldr	r3, [pc, #48]	@ (8003d34 <xTaskRemoveFromEventList+0xc4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d905      	bls.n	8003d16 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d38 <xTaskRemoveFromEventList+0xc8>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e001      	b.n	8003d1a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d1a:	697b      	ldr	r3, [r7, #20]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000d58 	.word	0x20000d58
 8003d28:	20000d38 	.word	0x20000d38
 8003d2c:	20000860 	.word	0x20000860
 8003d30:	20000cf0 	.word	0x20000cf0
 8003d34:	2000085c 	.word	0x2000085c
 8003d38:	20000d44 	.word	0x20000d44

08003d3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d44:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <vTaskInternalSetTimeOutState+0x24>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d4c:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <vTaskInternalSetTimeOutState+0x28>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	605a      	str	r2, [r3, #4]
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	20000d48 	.word	0x20000d48
 8003d64:	20000d34 	.word	0x20000d34

08003d68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10d      	bne.n	8003d94 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7c:	b672      	cpsid	i
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	b662      	cpsie	i
 8003d8c:	613b      	str	r3, [r7, #16]
}
 8003d8e:	bf00      	nop
 8003d90:	bf00      	nop
 8003d92:	e7fd      	b.n	8003d90 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9e:	b672      	cpsid	i
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	b662      	cpsie	i
 8003dae:	60fb      	str	r3, [r7, #12]
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	e7fd      	b.n	8003db2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8003db6:	f000 fe89 	bl	8004acc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dba:	4b1d      	ldr	r3, [pc, #116]	@ (8003e30 <xTaskCheckForTimeOut+0xc8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d102      	bne.n	8003dda <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61fb      	str	r3, [r7, #28]
 8003dd8:	e023      	b.n	8003e22 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4b15      	ldr	r3, [pc, #84]	@ (8003e34 <xTaskCheckForTimeOut+0xcc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d007      	beq.n	8003df6 <xTaskCheckForTimeOut+0x8e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d302      	bcc.n	8003df6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	e015      	b.n	8003e22 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d20b      	bcs.n	8003e18 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	1ad2      	subs	r2, r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ff95 	bl	8003d3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	e004      	b.n	8003e22 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e22:	f000 fe89 	bl	8004b38 <vPortExitCritical>

	return xReturn;
 8003e26:	69fb      	ldr	r3, [r7, #28]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20000d34 	.word	0x20000d34
 8003e34:	20000d48 	.word	0x20000d48

08003e38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	@ (8003e4c <vTaskMissedYield+0x14>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	20000d44 	.word	0x20000d44

08003e50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e58:	f000 f852 	bl	8003f00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e5c:	4b06      	ldr	r3, [pc, #24]	@ (8003e78 <prvIdleTask+0x28>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d9f9      	bls.n	8003e58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e64:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <prvIdleTask+0x2c>)
 8003e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e74:	e7f0      	b.n	8003e58 <prvIdleTask+0x8>
 8003e76:	bf00      	nop
 8003e78:	20000860 	.word	0x20000860
 8003e7c:	e000ed04 	.word	0xe000ed04

08003e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e86:	2300      	movs	r3, #0
 8003e88:	607b      	str	r3, [r7, #4]
 8003e8a:	e00c      	b.n	8003ea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4a12      	ldr	r2, [pc, #72]	@ (8003ee0 <prvInitialiseTaskLists+0x60>)
 8003e98:	4413      	add	r3, r2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe fc70 	bl	8002780 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	607b      	str	r3, [r7, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b37      	cmp	r3, #55	@ 0x37
 8003eaa:	d9ef      	bls.n	8003e8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003eac:	480d      	ldr	r0, [pc, #52]	@ (8003ee4 <prvInitialiseTaskLists+0x64>)
 8003eae:	f7fe fc67 	bl	8002780 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003eb2:	480d      	ldr	r0, [pc, #52]	@ (8003ee8 <prvInitialiseTaskLists+0x68>)
 8003eb4:	f7fe fc64 	bl	8002780 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003eb8:	480c      	ldr	r0, [pc, #48]	@ (8003eec <prvInitialiseTaskLists+0x6c>)
 8003eba:	f7fe fc61 	bl	8002780 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ebe:	480c      	ldr	r0, [pc, #48]	@ (8003ef0 <prvInitialiseTaskLists+0x70>)
 8003ec0:	f7fe fc5e 	bl	8002780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ec4:	480b      	ldr	r0, [pc, #44]	@ (8003ef4 <prvInitialiseTaskLists+0x74>)
 8003ec6:	f7fe fc5b 	bl	8002780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003eca:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <prvInitialiseTaskLists+0x78>)
 8003ecc:	4a05      	ldr	r2, [pc, #20]	@ (8003ee4 <prvInitialiseTaskLists+0x64>)
 8003ece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8003efc <prvInitialiseTaskLists+0x7c>)
 8003ed2:	4a05      	ldr	r2, [pc, #20]	@ (8003ee8 <prvInitialiseTaskLists+0x68>)
 8003ed4:	601a      	str	r2, [r3, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000860 	.word	0x20000860
 8003ee4:	20000cc0 	.word	0x20000cc0
 8003ee8:	20000cd4 	.word	0x20000cd4
 8003eec:	20000cf0 	.word	0x20000cf0
 8003ef0:	20000d04 	.word	0x20000d04
 8003ef4:	20000d1c 	.word	0x20000d1c
 8003ef8:	20000ce8 	.word	0x20000ce8
 8003efc:	20000cec 	.word	0x20000cec

08003f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f06:	e019      	b.n	8003f3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f08:	f000 fde0 	bl	8004acc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f0c:	4b10      	ldr	r3, [pc, #64]	@ (8003f50 <prvCheckTasksWaitingTermination+0x50>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe fcbb 	bl	8002894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f54 <prvCheckTasksWaitingTermination+0x54>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	4a0b      	ldr	r2, [pc, #44]	@ (8003f54 <prvCheckTasksWaitingTermination+0x54>)
 8003f26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f28:	4b0b      	ldr	r3, [pc, #44]	@ (8003f58 <prvCheckTasksWaitingTermination+0x58>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f58 <prvCheckTasksWaitingTermination+0x58>)
 8003f30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f32:	f000 fe01 	bl	8004b38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f810 	bl	8003f5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f3c:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <prvCheckTasksWaitingTermination+0x58>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e1      	bne.n	8003f08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000d04 	.word	0x20000d04
 8003f54:	20000d30 	.word	0x20000d30
 8003f58:	20000d18 	.word	0x20000d18

08003f5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3354      	adds	r3, #84	@ 0x54
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 f8cf 	bl	800510c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d108      	bne.n	8003f8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 ffa1 	bl	8004ec4 <vPortFree>
				vPortFree( pxTCB );
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 ff9e 	bl	8004ec4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f88:	e01b      	b.n	8003fc2 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d103      	bne.n	8003f9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 ff95 	bl	8004ec4 <vPortFree>
	}
 8003f9a:	e012      	b.n	8003fc2 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d00d      	beq.n	8003fc2 <prvDeleteTCB+0x66>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003faa:	b672      	cpsid	i
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	b662      	cpsie	i
 8003fba:	60fb      	str	r3, [r7, #12]
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	e7fd      	b.n	8003fbe <prvDeleteTCB+0x62>
	}
 8003fc2:	bf00      	nop
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <prvResetNextTaskUnblockTime+0x38>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d104      	bne.n	8003fe6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <prvResetNextTaskUnblockTime+0x3c>)
 8003fde:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fe4:	e008      	b.n	8003ff8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe6:	4b07      	ldr	r3, [pc, #28]	@ (8004004 <prvResetNextTaskUnblockTime+0x38>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4a04      	ldr	r2, [pc, #16]	@ (8004008 <prvResetNextTaskUnblockTime+0x3c>)
 8003ff6:	6013      	str	r3, [r2, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	20000ce8 	.word	0x20000ce8
 8004008:	20000d50 	.word	0x20000d50

0800400c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004012:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <xTaskGetSchedulerState+0x34>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800401a:	2301      	movs	r3, #1
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	e008      	b.n	8004032 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004020:	4b08      	ldr	r3, [pc, #32]	@ (8004044 <xTaskGetSchedulerState+0x38>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004028:	2302      	movs	r3, #2
 800402a:	607b      	str	r3, [r7, #4]
 800402c:	e001      	b.n	8004032 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800402e:	2300      	movs	r3, #0
 8004030:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004032:	687b      	ldr	r3, [r7, #4]
	}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	20000d3c 	.word	0x20000d3c
 8004044:	20000d58 	.word	0x20000d58

08004048 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d05c      	beq.n	8004118 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800405e:	4b31      	ldr	r3, [pc, #196]	@ (8004124 <xTaskPriorityDisinherit+0xdc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	429a      	cmp	r2, r3
 8004066:	d00d      	beq.n	8004084 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406c:	b672      	cpsid	i
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	b662      	cpsie	i
 800407c:	60fb      	str	r3, [r7, #12]
}
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	e7fd      	b.n	8004080 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10d      	bne.n	80040a8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004090:	b672      	cpsid	i
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	b662      	cpsie	i
 80040a0:	60bb      	str	r3, [r7, #8]
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ac:	1e5a      	subs	r2, r3, #1
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d02c      	beq.n	8004118 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d128      	bne.n	8004118 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	3304      	adds	r3, #4
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe fbe2 	bl	8002894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004128 <xTaskPriorityDisinherit+0xe0>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d903      	bls.n	80040f8 <xTaskPriorityDisinherit+0xb0>
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004128 <xTaskPriorityDisinherit+0xe0>)
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4a09      	ldr	r2, [pc, #36]	@ (800412c <xTaskPriorityDisinherit+0xe4>)
 8004106:	441a      	add	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f7fe fb63 	bl	80027da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004114:	2301      	movs	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004118:	697b      	ldr	r3, [r7, #20]
	}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	2000085c 	.word	0x2000085c
 8004128:	20000d38 	.word	0x20000d38
 800412c:	20000860 	.word	0x20000860

08004130 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800413a:	4b21      	ldr	r3, [pc, #132]	@ (80041c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004140:	4b20      	ldr	r3, [pc, #128]	@ (80041c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3304      	adds	r3, #4
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe fba4 	bl	8002894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d10a      	bne.n	800416a <prvAddCurrentTaskToDelayedList+0x3a>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800415a:	4b1a      	ldr	r3, [pc, #104]	@ (80041c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3304      	adds	r3, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4819      	ldr	r0, [pc, #100]	@ (80041c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004164:	f7fe fb39 	bl	80027da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004168:	e026      	b.n	80041b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4413      	add	r3, r2
 8004170:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004172:	4b14      	ldr	r3, [pc, #80]	@ (80041c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	429a      	cmp	r2, r3
 8004180:	d209      	bcs.n	8004196 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004182:	4b12      	ldr	r3, [pc, #72]	@ (80041cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4b0f      	ldr	r3, [pc, #60]	@ (80041c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3304      	adds	r3, #4
 800418c:	4619      	mov	r1, r3
 800418e:	4610      	mov	r0, r2
 8004190:	f7fe fb47 	bl	8002822 <vListInsert>
}
 8004194:	e010      	b.n	80041b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004196:	4b0e      	ldr	r3, [pc, #56]	@ (80041d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4b0a      	ldr	r3, [pc, #40]	@ (80041c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3304      	adds	r3, #4
 80041a0:	4619      	mov	r1, r3
 80041a2:	4610      	mov	r0, r2
 80041a4:	f7fe fb3d 	bl	8002822 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041a8:	4b0a      	ldr	r3, [pc, #40]	@ (80041d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d202      	bcs.n	80041b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80041b2:	4a08      	ldr	r2, [pc, #32]	@ (80041d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	6013      	str	r3, [r2, #0]
}
 80041b8:	bf00      	nop
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20000d34 	.word	0x20000d34
 80041c4:	2000085c 	.word	0x2000085c
 80041c8:	20000d1c 	.word	0x20000d1c
 80041cc:	20000cec 	.word	0x20000cec
 80041d0:	20000ce8 	.word	0x20000ce8
 80041d4:	20000d50 	.word	0x20000d50

080041d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08a      	sub	sp, #40	@ 0x28
 80041dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80041e2:	f000 fb21 	bl	8004828 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80041e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004260 <xTimerCreateTimerTask+0x88>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d021      	beq.n	8004232 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80041f6:	1d3a      	adds	r2, r7, #4
 80041f8:	f107 0108 	add.w	r1, r7, #8
 80041fc:	f107 030c 	add.w	r3, r7, #12
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe faa3 	bl	800274c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	9202      	str	r2, [sp, #8]
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	2302      	movs	r3, #2
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2300      	movs	r3, #0
 8004216:	460a      	mov	r2, r1
 8004218:	4912      	ldr	r1, [pc, #72]	@ (8004264 <xTimerCreateTimerTask+0x8c>)
 800421a:	4813      	ldr	r0, [pc, #76]	@ (8004268 <xTimerCreateTimerTask+0x90>)
 800421c:	f7ff f87e 	bl	800331c <xTaskCreateStatic>
 8004220:	4603      	mov	r3, r0
 8004222:	4a12      	ldr	r2, [pc, #72]	@ (800426c <xTimerCreateTimerTask+0x94>)
 8004224:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004226:	4b11      	ldr	r3, [pc, #68]	@ (800426c <xTimerCreateTimerTask+0x94>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800422e:	2301      	movs	r3, #1
 8004230:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10d      	bne.n	8004254 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423c:	b672      	cpsid	i
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	b662      	cpsie	i
 800424c:	613b      	str	r3, [r7, #16]
}
 800424e:	bf00      	nop
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8004254:	697b      	ldr	r3, [r7, #20]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000d8c 	.word	0x20000d8c
 8004264:	080052f4 	.word	0x080052f4
 8004268:	080043b1 	.word	0x080043b1
 800426c:	20000d90 	.word	0x20000d90

08004270 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	@ 0x28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10d      	bne.n	80042a4 <xTimerGenericCommand+0x34>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428c:	b672      	cpsid	i
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	b662      	cpsie	i
 800429c:	623b      	str	r3, [r7, #32]
}
 800429e:	bf00      	nop
 80042a0:	bf00      	nop
 80042a2:	e7fd      	b.n	80042a0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80042a4:	4b19      	ldr	r3, [pc, #100]	@ (800430c <xTimerGenericCommand+0x9c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d02a      	beq.n	8004302 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	dc18      	bgt.n	80042f0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80042be:	f7ff fea5 	bl	800400c <xTaskGetSchedulerState>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d109      	bne.n	80042dc <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80042c8:	4b10      	ldr	r3, [pc, #64]	@ (800430c <xTimerGenericCommand+0x9c>)
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	f107 0110 	add.w	r1, r7, #16
 80042d0:	2300      	movs	r3, #0
 80042d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d4:	f7fe fc1e 	bl	8002b14 <xQueueGenericSend>
 80042d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80042da:	e012      	b.n	8004302 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80042dc:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <xTimerGenericCommand+0x9c>)
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	f107 0110 	add.w	r1, r7, #16
 80042e4:	2300      	movs	r3, #0
 80042e6:	2200      	movs	r2, #0
 80042e8:	f7fe fc14 	bl	8002b14 <xQueueGenericSend>
 80042ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80042ee:	e008      	b.n	8004302 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042f0:	4b06      	ldr	r3, [pc, #24]	@ (800430c <xTimerGenericCommand+0x9c>)
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	f107 0110 	add.w	r1, r7, #16
 80042f8:	2300      	movs	r3, #0
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	f7fe fd14 	bl	8002d28 <xQueueGenericSendFromISR>
 8004300:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004304:	4618      	mov	r0, r3
 8004306:	3728      	adds	r7, #40	@ 0x28
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000d8c 	.word	0x20000d8c

08004310 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af02      	add	r7, sp, #8
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800431a:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <prvProcessExpiredTimer+0x9c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	3304      	adds	r3, #4
 8004328:	4618      	mov	r0, r3
 800432a:	f7fe fab3 	bl	8002894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d025      	beq.n	8004388 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	18d1      	adds	r1, r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	6978      	ldr	r0, [r7, #20]
 800434a:	f000 f8d7 	bl	80044fc <prvInsertTimerInActiveList>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d022      	beq.n	800439a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004354:	2300      	movs	r3, #0
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	2300      	movs	r3, #0
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	2100      	movs	r1, #0
 800435e:	6978      	ldr	r0, [r7, #20]
 8004360:	f7ff ff86 	bl	8004270 <xTimerGenericCommand>
 8004364:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d116      	bne.n	800439a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004370:	b672      	cpsid	i
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	b662      	cpsie	i
 8004380:	60fb      	str	r3, [r7, #12]
}
 8004382:	bf00      	nop
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	b2da      	uxtb	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	6978      	ldr	r0, [r7, #20]
 80043a0:	4798      	blx	r3
}
 80043a2:	bf00      	nop
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000d84 	.word	0x20000d84

080043b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043b8:	f107 0308 	add.w	r3, r7, #8
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f859 	bl	8004474 <prvGetNextExpireTime>
 80043c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4619      	mov	r1, r3
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f805 	bl	80043d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80043ce:	f000 f8d7 	bl	8004580 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80043d2:	bf00      	nop
 80043d4:	e7f0      	b.n	80043b8 <prvTimerTask+0x8>
	...

080043d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80043e2:	f7ff fa0d 	bl	8003800 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043e6:	f107 0308 	add.w	r3, r7, #8
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f866 	bl	80044bc <prvSampleTimeNow>
 80043f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d130      	bne.n	800445a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <prvProcessTimerOrBlockTask+0x3c>
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	429a      	cmp	r2, r3
 8004404:	d806      	bhi.n	8004414 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004406:	f7ff fa09 	bl	800381c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800440a:	68f9      	ldr	r1, [r7, #12]
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff ff7f 	bl	8004310 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004412:	e024      	b.n	800445e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d008      	beq.n	800442c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800441a:	4b13      	ldr	r3, [pc, #76]	@ (8004468 <prvProcessTimerOrBlockTask+0x90>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <prvProcessTimerOrBlockTask+0x50>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <prvProcessTimerOrBlockTask+0x52>
 8004428:	2300      	movs	r3, #0
 800442a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800442c:	4b0f      	ldr	r3, [pc, #60]	@ (800446c <prvProcessTimerOrBlockTask+0x94>)
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	4619      	mov	r1, r3
 800443a:	f7fe ff3b 	bl	80032b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800443e:	f7ff f9ed 	bl	800381c <xTaskResumeAll>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004448:	4b09      	ldr	r3, [pc, #36]	@ (8004470 <prvProcessTimerOrBlockTask+0x98>)
 800444a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	f3bf 8f6f 	isb	sy
}
 8004458:	e001      	b.n	800445e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800445a:	f7ff f9df 	bl	800381c <xTaskResumeAll>
}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20000d88 	.word	0x20000d88
 800446c:	20000d8c 	.word	0x20000d8c
 8004470:	e000ed04 	.word	0xe000ed04

08004474 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800447c:	4b0e      	ldr	r3, [pc, #56]	@ (80044b8 <prvGetNextExpireTime+0x44>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <prvGetNextExpireTime+0x16>
 8004486:	2201      	movs	r2, #1
 8004488:	e000      	b.n	800448c <prvGetNextExpireTime+0x18>
 800448a:	2200      	movs	r2, #0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004498:	4b07      	ldr	r3, [pc, #28]	@ (80044b8 <prvGetNextExpireTime+0x44>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	e001      	b.n	80044a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80044a8:	68fb      	ldr	r3, [r7, #12]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000d84 	.word	0x20000d84

080044bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80044c4:	f7ff fa4a 	bl	800395c <xTaskGetTickCount>
 80044c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80044ca:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <prvSampleTimeNow+0x3c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d205      	bcs.n	80044e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80044d4:	f000 f940 	bl	8004758 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e002      	b.n	80044e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80044e6:	4a04      	ldr	r2, [pc, #16]	@ (80044f8 <prvSampleTimeNow+0x3c>)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80044ec:	68fb      	ldr	r3, [r7, #12]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000d94 	.word	0x20000d94

080044fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d812      	bhi.n	8004548 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	1ad2      	subs	r2, r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	429a      	cmp	r2, r3
 800452e:	d302      	bcc.n	8004536 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004530:	2301      	movs	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e01b      	b.n	800456e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004536:	4b10      	ldr	r3, [pc, #64]	@ (8004578 <prvInsertTimerInActiveList+0x7c>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f7fe f96e 	bl	8002822 <vListInsert>
 8004546:	e012      	b.n	800456e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d206      	bcs.n	800455e <prvInsertTimerInActiveList+0x62>
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d302      	bcc.n	800455e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004558:	2301      	movs	r3, #1
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	e007      	b.n	800456e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800455e:	4b07      	ldr	r3, [pc, #28]	@ (800457c <prvInsertTimerInActiveList+0x80>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3304      	adds	r3, #4
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f7fe f95a 	bl	8002822 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800456e:	697b      	ldr	r3, [r7, #20]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000d88 	.word	0x20000d88
 800457c:	20000d84 	.word	0x20000d84

08004580 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08e      	sub	sp, #56	@ 0x38
 8004584:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004586:	e0d4      	b.n	8004732 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	da1b      	bge.n	80045c6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800458e:	1d3b      	adds	r3, r7, #4
 8004590:	3304      	adds	r3, #4
 8004592:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10d      	bne.n	80045b6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459e:	b672      	cpsid	i
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	b662      	cpsie	i
 80045ae:	61fb      	str	r3, [r7, #28]
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	e7fd      	b.n	80045b2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80045b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045bc:	6850      	ldr	r0, [r2, #4]
 80045be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045c0:	6892      	ldr	r2, [r2, #8]
 80045c2:	4611      	mov	r1, r2
 80045c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f2c0 80b2 	blt.w	8004732 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d004      	beq.n	80045e4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045dc:	3304      	adds	r3, #4
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe f958 	bl	8002894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045e4:	463b      	mov	r3, r7
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff ff68 	bl	80044bc <prvSampleTimeNow>
 80045ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b09      	cmp	r3, #9
 80045f2:	f200 809b 	bhi.w	800472c <prvProcessReceivedCommands+0x1ac>
 80045f6:	a201      	add	r2, pc, #4	@ (adr r2, 80045fc <prvProcessReceivedCommands+0x7c>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	08004625 	.word	0x08004625
 8004600:	08004625 	.word	0x08004625
 8004604:	08004625 	.word	0x08004625
 8004608:	0800469f 	.word	0x0800469f
 800460c:	080046b3 	.word	0x080046b3
 8004610:	08004703 	.word	0x08004703
 8004614:	08004625 	.word	0x08004625
 8004618:	08004625 	.word	0x08004625
 800461c:	0800469f 	.word	0x0800469f
 8004620:	080046b3 	.word	0x080046b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004626:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	b2da      	uxtb	r2, r3
 8004630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004632:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	18d1      	adds	r1, r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004644:	f7ff ff5a 	bl	80044fc <prvInsertTimerInActiveList>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d070      	beq.n	8004730 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004654:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004658:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d065      	beq.n	8004730 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	441a      	add	r2, r3
 800466c:	2300      	movs	r3, #0
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	2300      	movs	r3, #0
 8004672:	2100      	movs	r1, #0
 8004674:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004676:	f7ff fdfb 	bl	8004270 <xTimerGenericCommand>
 800467a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d156      	bne.n	8004730 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004686:	b672      	cpsid	i
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	b662      	cpsie	i
 8004696:	61bb      	str	r3, [r7, #24]
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	e7fd      	b.n	800469a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80046b0:	e03f      	b.n	8004732 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80046ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10d      	bne.n	80046ee <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d6:	b672      	cpsid	i
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	b662      	cpsie	i
 80046e6:	617b      	str	r3, [r7, #20]
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	e7fd      	b.n	80046ea <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	18d1      	adds	r1, r2, r3
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046fc:	f7ff fefe 	bl	80044fc <prvInsertTimerInActiveList>
					break;
 8004700:	e017      	b.n	8004732 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004704:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d103      	bne.n	8004718 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8004710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004712:	f000 fbd7 	bl	8004ec4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004716:	e00c      	b.n	8004732 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	b2da      	uxtb	r2, r3
 8004724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004726:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800472a:	e002      	b.n	8004732 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800472c:	bf00      	nop
 800472e:	e000      	b.n	8004732 <prvProcessReceivedCommands+0x1b2>
					break;
 8004730:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004732:	4b08      	ldr	r3, [pc, #32]	@ (8004754 <prvProcessReceivedCommands+0x1d4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	1d39      	adds	r1, r7, #4
 8004738:	2200      	movs	r2, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f7fe fb98 	bl	8002e70 <xQueueReceive>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	f47f af20 	bne.w	8004588 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	3730      	adds	r7, #48	@ 0x30
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20000d8c 	.word	0x20000d8c

08004758 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800475e:	e04b      	b.n	80047f8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004760:	4b2f      	ldr	r3, [pc, #188]	@ (8004820 <prvSwitchTimerLists+0xc8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800476a:	4b2d      	ldr	r3, [pc, #180]	@ (8004820 <prvSwitchTimerLists+0xc8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3304      	adds	r3, #4
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe f88b 	bl	8002894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d031      	beq.n	80047f8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4413      	add	r3, r2
 800479c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d90e      	bls.n	80047c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004820 <prvSwitchTimerLists+0xc8>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3304      	adds	r3, #4
 80047ba:	4619      	mov	r1, r3
 80047bc:	4610      	mov	r0, r2
 80047be:	f7fe f830 	bl	8002822 <vListInsert>
 80047c2:	e019      	b.n	80047f8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047c4:	2300      	movs	r3, #0
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2300      	movs	r3, #0
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	2100      	movs	r1, #0
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f7ff fd4e 	bl	8004270 <xTimerGenericCommand>
 80047d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10d      	bne.n	80047f8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e0:	b672      	cpsid	i
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	b662      	cpsie	i
 80047f0:	603b      	str	r3, [r7, #0]
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	e7fd      	b.n	80047f4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047f8:	4b09      	ldr	r3, [pc, #36]	@ (8004820 <prvSwitchTimerLists+0xc8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1ae      	bne.n	8004760 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004802:	4b07      	ldr	r3, [pc, #28]	@ (8004820 <prvSwitchTimerLists+0xc8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004808:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <prvSwitchTimerLists+0xcc>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a04      	ldr	r2, [pc, #16]	@ (8004820 <prvSwitchTimerLists+0xc8>)
 800480e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004810:	4a04      	ldr	r2, [pc, #16]	@ (8004824 <prvSwitchTimerLists+0xcc>)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	6013      	str	r3, [r2, #0]
}
 8004816:	bf00      	nop
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20000d84 	.word	0x20000d84
 8004824:	20000d88 	.word	0x20000d88

08004828 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800482e:	f000 f94d 	bl	8004acc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004832:	4b15      	ldr	r3, [pc, #84]	@ (8004888 <prvCheckForValidListAndQueue+0x60>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d120      	bne.n	800487c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800483a:	4814      	ldr	r0, [pc, #80]	@ (800488c <prvCheckForValidListAndQueue+0x64>)
 800483c:	f7fd ffa0 	bl	8002780 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004840:	4813      	ldr	r0, [pc, #76]	@ (8004890 <prvCheckForValidListAndQueue+0x68>)
 8004842:	f7fd ff9d 	bl	8002780 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004846:	4b13      	ldr	r3, [pc, #76]	@ (8004894 <prvCheckForValidListAndQueue+0x6c>)
 8004848:	4a10      	ldr	r2, [pc, #64]	@ (800488c <prvCheckForValidListAndQueue+0x64>)
 800484a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800484c:	4b12      	ldr	r3, [pc, #72]	@ (8004898 <prvCheckForValidListAndQueue+0x70>)
 800484e:	4a10      	ldr	r2, [pc, #64]	@ (8004890 <prvCheckForValidListAndQueue+0x68>)
 8004850:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004852:	2300      	movs	r3, #0
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	4b11      	ldr	r3, [pc, #68]	@ (800489c <prvCheckForValidListAndQueue+0x74>)
 8004858:	4a11      	ldr	r2, [pc, #68]	@ (80048a0 <prvCheckForValidListAndQueue+0x78>)
 800485a:	2110      	movs	r1, #16
 800485c:	200a      	movs	r0, #10
 800485e:	f7fe f8af 	bl	80029c0 <xQueueGenericCreateStatic>
 8004862:	4603      	mov	r3, r0
 8004864:	4a08      	ldr	r2, [pc, #32]	@ (8004888 <prvCheckForValidListAndQueue+0x60>)
 8004866:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004868:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <prvCheckForValidListAndQueue+0x60>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004870:	4b05      	ldr	r3, [pc, #20]	@ (8004888 <prvCheckForValidListAndQueue+0x60>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	490b      	ldr	r1, [pc, #44]	@ (80048a4 <prvCheckForValidListAndQueue+0x7c>)
 8004876:	4618      	mov	r0, r3
 8004878:	f7fe fcf2 	bl	8003260 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800487c:	f000 f95c 	bl	8004b38 <vPortExitCritical>
}
 8004880:	bf00      	nop
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000d8c 	.word	0x20000d8c
 800488c:	20000d5c 	.word	0x20000d5c
 8004890:	20000d70 	.word	0x20000d70
 8004894:	20000d84 	.word	0x20000d84
 8004898:	20000d88 	.word	0x20000d88
 800489c:	20000e38 	.word	0x20000e38
 80048a0:	20000d98 	.word	0x20000d98
 80048a4:	080052fc 	.word	0x080052fc

080048a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3b04      	subs	r3, #4
 80048b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3b04      	subs	r3, #4
 80048c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f023 0201 	bic.w	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3b04      	subs	r3, #4
 80048d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048d8:	4a0c      	ldr	r2, [pc, #48]	@ (800490c <pxPortInitialiseStack+0x64>)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3b14      	subs	r3, #20
 80048e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3b04      	subs	r3, #4
 80048ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f06f 0202 	mvn.w	r2, #2
 80048f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3b20      	subs	r3, #32
 80048fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048fe:	68fb      	ldr	r3, [r7, #12]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	08004911 	.word	0x08004911

08004910 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800491a:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <prvTaskExitError+0x60>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	d00d      	beq.n	8004940 <prvTaskExitError+0x30>
	__asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004928:	b672      	cpsid	i
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	b662      	cpsie	i
 8004938:	60fb      	str	r3, [r7, #12]
}
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	e7fd      	b.n	800493c <prvTaskExitError+0x2c>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004944:	b672      	cpsid	i
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	b662      	cpsie	i
 8004954:	60bb      	str	r3, [r7, #8]
}
 8004956:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004958:	bf00      	nop
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0fc      	beq.n	800495a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	2000000c 	.word	0x2000000c
	...

08004980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004980:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <pxCurrentTCBConst2>)
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	6808      	ldr	r0, [r1, #0]
 8004986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498a:	f380 8809 	msr	PSP, r0
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8811 	msr	BASEPRI, r0
 800499a:	4770      	bx	lr
 800499c:	f3af 8000 	nop.w

080049a0 <pxCurrentTCBConst2>:
 80049a0:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop

080049a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049a8:	4808      	ldr	r0, [pc, #32]	@ (80049cc <prvPortStartFirstTask+0x24>)
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	6800      	ldr	r0, [r0, #0]
 80049ae:	f380 8808 	msr	MSP, r0
 80049b2:	f04f 0000 	mov.w	r0, #0
 80049b6:	f380 8814 	msr	CONTROL, r0
 80049ba:	b662      	cpsie	i
 80049bc:	b661      	cpsie	f
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	df00      	svc	0
 80049c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049ca:	bf00      	nop
 80049cc:	e000ed08 	.word	0xe000ed08

080049d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049d6:	4b37      	ldr	r3, [pc, #220]	@ (8004ab4 <xPortStartScheduler+0xe4>)
 80049d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	22ff      	movs	r2, #255	@ 0xff
 80049e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab8 <xPortStartScheduler+0xe8>)
 80049fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049fe:	4b2f      	ldr	r3, [pc, #188]	@ (8004abc <xPortStartScheduler+0xec>)
 8004a00:	2207      	movs	r2, #7
 8004a02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a04:	e009      	b.n	8004a1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004a06:	4b2d      	ldr	r3, [pc, #180]	@ (8004abc <xPortStartScheduler+0xec>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004abc <xPortStartScheduler+0xec>)
 8004a0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a22:	2b80      	cmp	r3, #128	@ 0x80
 8004a24:	d0ef      	beq.n	8004a06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a26:	4b25      	ldr	r3, [pc, #148]	@ (8004abc <xPortStartScheduler+0xec>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f1c3 0307 	rsb	r3, r3, #7
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d00d      	beq.n	8004a4e <xPortStartScheduler+0x7e>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a36:	b672      	cpsid	i
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	b662      	cpsie	i
 8004a46:	60bb      	str	r3, [r7, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	bf00      	nop
 8004a4c:	e7fd      	b.n	8004a4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004abc <xPortStartScheduler+0xec>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	4a19      	ldr	r2, [pc, #100]	@ (8004abc <xPortStartScheduler+0xec>)
 8004a56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a58:	4b18      	ldr	r3, [pc, #96]	@ (8004abc <xPortStartScheduler+0xec>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a60:	4a16      	ldr	r2, [pc, #88]	@ (8004abc <xPortStartScheduler+0xec>)
 8004a62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a6c:	4b14      	ldr	r3, [pc, #80]	@ (8004ac0 <xPortStartScheduler+0xf0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a13      	ldr	r2, [pc, #76]	@ (8004ac0 <xPortStartScheduler+0xf0>)
 8004a72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a78:	4b11      	ldr	r3, [pc, #68]	@ (8004ac0 <xPortStartScheduler+0xf0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a10      	ldr	r2, [pc, #64]	@ (8004ac0 <xPortStartScheduler+0xf0>)
 8004a7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a84:	f000 f8dc 	bl	8004c40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a88:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac4 <xPortStartScheduler+0xf4>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a8e:	f000 f8fb 	bl	8004c88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac8 <xPortStartScheduler+0xf8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a0c      	ldr	r2, [pc, #48]	@ (8004ac8 <xPortStartScheduler+0xf8>)
 8004a98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004a9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a9e:	f7ff ff83 	bl	80049a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004aa2:	f7ff f827 	bl	8003af4 <vTaskSwitchContext>
	prvTaskExitError();
 8004aa6:	f7ff ff33 	bl	8004910 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	e000e400 	.word	0xe000e400
 8004ab8:	20000e88 	.word	0x20000e88
 8004abc:	20000e8c 	.word	0x20000e8c
 8004ac0:	e000ed20 	.word	0xe000ed20
 8004ac4:	2000000c 	.word	0x2000000c
 8004ac8:	e000ef34 	.word	0xe000ef34

08004acc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad6:	b672      	cpsid	i
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	b662      	cpsie	i
 8004ae6:	607b      	str	r3, [r7, #4]
}
 8004ae8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004aea:	4b11      	ldr	r3, [pc, #68]	@ (8004b30 <vPortEnterCritical+0x64>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3301      	adds	r3, #1
 8004af0:	4a0f      	ldr	r2, [pc, #60]	@ (8004b30 <vPortEnterCritical+0x64>)
 8004af2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004af4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b30 <vPortEnterCritical+0x64>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d112      	bne.n	8004b22 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004afc:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <vPortEnterCritical+0x68>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00d      	beq.n	8004b22 <vPortEnterCritical+0x56>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0a:	b672      	cpsid	i
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	b662      	cpsie	i
 8004b1a:	603b      	str	r3, [r7, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	e7fd      	b.n	8004b1e <vPortEnterCritical+0x52>
	}
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	2000000c 	.word	0x2000000c
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b3e:	4b13      	ldr	r3, [pc, #76]	@ (8004b8c <vPortExitCritical+0x54>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10d      	bne.n	8004b62 <vPortExitCritical+0x2a>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4a:	b672      	cpsid	i
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	b662      	cpsie	i
 8004b5a:	607b      	str	r3, [r7, #4]
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	e7fd      	b.n	8004b5e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004b62:	4b0a      	ldr	r3, [pc, #40]	@ (8004b8c <vPortExitCritical+0x54>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	4a08      	ldr	r2, [pc, #32]	@ (8004b8c <vPortExitCritical+0x54>)
 8004b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b6c:	4b07      	ldr	r3, [pc, #28]	@ (8004b8c <vPortExitCritical+0x54>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <vPortExitCritical+0x48>
 8004b74:	2300      	movs	r3, #0
 8004b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	f383 8811 	msr	BASEPRI, r3
}
 8004b7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	2000000c 	.word	0x2000000c

08004b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b90:	f3ef 8009 	mrs	r0, PSP
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	4b15      	ldr	r3, [pc, #84]	@ (8004bf0 <pxCurrentTCBConst>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	f01e 0f10 	tst.w	lr, #16
 8004ba0:	bf08      	it	eq
 8004ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004baa:	6010      	str	r0, [r2, #0]
 8004bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004bb4:	b672      	cpsid	i
 8004bb6:	f380 8811 	msr	BASEPRI, r0
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	b662      	cpsie	i
 8004bc4:	f7fe ff96 	bl	8003af4 <vTaskSwitchContext>
 8004bc8:	f04f 0000 	mov.w	r0, #0
 8004bcc:	f380 8811 	msr	BASEPRI, r0
 8004bd0:	bc09      	pop	{r0, r3}
 8004bd2:	6819      	ldr	r1, [r3, #0]
 8004bd4:	6808      	ldr	r0, [r1, #0]
 8004bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bda:	f01e 0f10 	tst.w	lr, #16
 8004bde:	bf08      	it	eq
 8004be0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004be4:	f380 8809 	msr	PSP, r0
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop

08004bf0 <pxCurrentTCBConst>:
 8004bf0:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c02:	b672      	cpsid	i
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	b662      	cpsie	i
 8004c12:	607b      	str	r3, [r7, #4]
}
 8004c14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c16:	f7fe feb1 	bl	800397c <xTaskIncrementTick>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c20:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <SysTick_Handler+0x44>)
 8004c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	f383 8811 	msr	BASEPRI, r3
}
 8004c32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	e000ed04 	.word	0xe000ed04

08004c40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c44:	4b0b      	ldr	r3, [pc, #44]	@ (8004c74 <vPortSetupTimerInterrupt+0x34>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c78 <vPortSetupTimerInterrupt+0x38>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c50:	4b0a      	ldr	r3, [pc, #40]	@ (8004c7c <vPortSetupTimerInterrupt+0x3c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a0a      	ldr	r2, [pc, #40]	@ (8004c80 <vPortSetupTimerInterrupt+0x40>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	099b      	lsrs	r3, r3, #6
 8004c5c:	4a09      	ldr	r2, [pc, #36]	@ (8004c84 <vPortSetupTimerInterrupt+0x44>)
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c62:	4b04      	ldr	r3, [pc, #16]	@ (8004c74 <vPortSetupTimerInterrupt+0x34>)
 8004c64:	2207      	movs	r2, #7
 8004c66:	601a      	str	r2, [r3, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	e000e010 	.word	0xe000e010
 8004c78:	e000e018 	.word	0xe000e018
 8004c7c:	20000000 	.word	0x20000000
 8004c80:	10624dd3 	.word	0x10624dd3
 8004c84:	e000e014 	.word	0xe000e014

08004c88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004c98 <vPortEnableVFP+0x10>
 8004c8c:	6801      	ldr	r1, [r0, #0]
 8004c8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004c92:	6001      	str	r1, [r0, #0]
 8004c94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c96:	bf00      	nop
 8004c98:	e000ed88 	.word	0xe000ed88

08004c9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ca2:	f3ef 8305 	mrs	r3, IPSR
 8004ca6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	d917      	bls.n	8004cde <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cae:	4a1a      	ldr	r2, [pc, #104]	@ (8004d18 <vPortValidateInterruptPriority+0x7c>)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cb8:	4b18      	ldr	r3, [pc, #96]	@ (8004d1c <vPortValidateInterruptPriority+0x80>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	7afa      	ldrb	r2, [r7, #11]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d20d      	bcs.n	8004cde <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc6:	b672      	cpsid	i
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	b662      	cpsie	i
 8004cd6:	607b      	str	r3, [r7, #4]
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	e7fd      	b.n	8004cda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cde:	4b10      	ldr	r3, [pc, #64]	@ (8004d20 <vPortValidateInterruptPriority+0x84>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8004d24 <vPortValidateInterruptPriority+0x88>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d90d      	bls.n	8004d0a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf2:	b672      	cpsid	i
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	b662      	cpsie	i
 8004d02:	603b      	str	r3, [r7, #0]
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	e7fd      	b.n	8004d06 <vPortValidateInterruptPriority+0x6a>
	}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	e000e3f0 	.word	0xe000e3f0
 8004d1c:	20000e88 	.word	0x20000e88
 8004d20:	e000ed0c 	.word	0xe000ed0c
 8004d24:	20000e8c 	.word	0x20000e8c

08004d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08a      	sub	sp, #40	@ 0x28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d34:	f7fe fd64 	bl	8003800 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d38:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb0 <pvPortMalloc+0x188>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d40:	f000 f920 	bl	8004f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d44:	4b5b      	ldr	r3, [pc, #364]	@ (8004eb4 <pvPortMalloc+0x18c>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f040 8094 	bne.w	8004e7a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d020      	beq.n	8004d9a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8004d58:	2208      	movs	r2, #8
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d017      	beq.n	8004d9a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f023 0307 	bic.w	r3, r3, #7
 8004d70:	3308      	adds	r3, #8
 8004d72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00d      	beq.n	8004d9a <pvPortMalloc+0x72>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d82:	b672      	cpsid	i
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	b662      	cpsie	i
 8004d92:	617b      	str	r3, [r7, #20]
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	e7fd      	b.n	8004d96 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d06c      	beq.n	8004e7a <pvPortMalloc+0x152>
 8004da0:	4b45      	ldr	r3, [pc, #276]	@ (8004eb8 <pvPortMalloc+0x190>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d867      	bhi.n	8004e7a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004daa:	4b44      	ldr	r3, [pc, #272]	@ (8004ebc <pvPortMalloc+0x194>)
 8004dac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004dae:	4b43      	ldr	r3, [pc, #268]	@ (8004ebc <pvPortMalloc+0x194>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004db4:	e004      	b.n	8004dc0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d903      	bls.n	8004dd2 <pvPortMalloc+0xaa>
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f1      	bne.n	8004db6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004dd2:	4b37      	ldr	r3, [pc, #220]	@ (8004eb0 <pvPortMalloc+0x188>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d04e      	beq.n	8004e7a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2208      	movs	r2, #8
 8004de2:	4413      	add	r3, r2
 8004de4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	1ad2      	subs	r2, r2, r3
 8004df6:	2308      	movs	r3, #8
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d922      	bls.n	8004e44 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4413      	add	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00d      	beq.n	8004e2c <pvPortMalloc+0x104>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e14:	b672      	cpsid	i
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	b662      	cpsie	i
 8004e24:	613b      	str	r3, [r7, #16]
}
 8004e26:	bf00      	nop
 8004e28:	bf00      	nop
 8004e2a:	e7fd      	b.n	8004e28 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	1ad2      	subs	r2, r2, r3
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e3e:	69b8      	ldr	r0, [r7, #24]
 8004e40:	f000 f902 	bl	8005048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e44:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb8 <pvPortMalloc+0x190>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb8 <pvPortMalloc+0x190>)
 8004e50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e52:	4b19      	ldr	r3, [pc, #100]	@ (8004eb8 <pvPortMalloc+0x190>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec0 <pvPortMalloc+0x198>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d203      	bcs.n	8004e66 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e5e:	4b16      	ldr	r3, [pc, #88]	@ (8004eb8 <pvPortMalloc+0x190>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a17      	ldr	r2, [pc, #92]	@ (8004ec0 <pvPortMalloc+0x198>)
 8004e64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	4b12      	ldr	r3, [pc, #72]	@ (8004eb4 <pvPortMalloc+0x18c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e7a:	f7fe fccf 	bl	800381c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00d      	beq.n	8004ea4 <pvPortMalloc+0x17c>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8c:	b672      	cpsid	i
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	b662      	cpsie	i
 8004e9c:	60fb      	str	r3, [r7, #12]
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <pvPortMalloc+0x178>
	return pvReturn;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3728      	adds	r7, #40	@ 0x28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20004a98 	.word	0x20004a98
 8004eb4:	20004aa4 	.word	0x20004aa4
 8004eb8:	20004a9c 	.word	0x20004a9c
 8004ebc:	20004a90 	.word	0x20004a90
 8004ec0:	20004aa0 	.word	0x20004aa0

08004ec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d04e      	beq.n	8004f74 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	425b      	negs	r3, r3
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4413      	add	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	4b24      	ldr	r3, [pc, #144]	@ (8004f7c <vPortFree+0xb8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10d      	bne.n	8004f0e <vPortFree+0x4a>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef6:	b672      	cpsid	i
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	b662      	cpsie	i
 8004f06:	60fb      	str	r3, [r7, #12]
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	e7fd      	b.n	8004f0a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <vPortFree+0x6e>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1a:	b672      	cpsid	i
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	b662      	cpsie	i
 8004f2a:	60bb      	str	r3, [r7, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	4b11      	ldr	r3, [pc, #68]	@ (8004f7c <vPortFree+0xb8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d019      	beq.n	8004f74 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d115      	bne.n	8004f74 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <vPortFree+0xb8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f58:	f7fe fc52 	bl	8003800 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	4b07      	ldr	r3, [pc, #28]	@ (8004f80 <vPortFree+0xbc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4413      	add	r3, r2
 8004f66:	4a06      	ldr	r2, [pc, #24]	@ (8004f80 <vPortFree+0xbc>)
 8004f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f6a:	6938      	ldr	r0, [r7, #16]
 8004f6c:	f000 f86c 	bl	8005048 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f70:	f7fe fc54 	bl	800381c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f74:	bf00      	nop
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20004aa4 	.word	0x20004aa4
 8004f80:	20004a9c 	.word	0x20004a9c

08004f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f8a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f90:	4b27      	ldr	r3, [pc, #156]	@ (8005030 <prvHeapInit+0xac>)
 8004f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3307      	adds	r3, #7
 8004fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0307 	bic.w	r3, r3, #7
 8004faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8005030 <prvHeapInit+0xac>)
 8004fb4:	4413      	add	r3, r2
 8004fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005034 <prvHeapInit+0xb0>)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8005034 <prvHeapInit+0xb0>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4413      	add	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0307 	bic.w	r3, r3, #7
 8004fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4a15      	ldr	r2, [pc, #84]	@ (8005038 <prvHeapInit+0xb4>)
 8004fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fe6:	4b14      	ldr	r3, [pc, #80]	@ (8005038 <prvHeapInit+0xb4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2200      	movs	r2, #0
 8004fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fee:	4b12      	ldr	r3, [pc, #72]	@ (8005038 <prvHeapInit+0xb4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	1ad2      	subs	r2, r2, r3
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005004:	4b0c      	ldr	r3, [pc, #48]	@ (8005038 <prvHeapInit+0xb4>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	4a0a      	ldr	r2, [pc, #40]	@ (800503c <prvHeapInit+0xb8>)
 8005012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	4a09      	ldr	r2, [pc, #36]	@ (8005040 <prvHeapInit+0xbc>)
 800501a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800501c:	4b09      	ldr	r3, [pc, #36]	@ (8005044 <prvHeapInit+0xc0>)
 800501e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005022:	601a      	str	r2, [r3, #0]
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	20000e90 	.word	0x20000e90
 8005034:	20004a90 	.word	0x20004a90
 8005038:	20004a98 	.word	0x20004a98
 800503c:	20004aa0 	.word	0x20004aa0
 8005040:	20004a9c 	.word	0x20004a9c
 8005044:	20004aa4 	.word	0x20004aa4

08005048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005050:	4b28      	ldr	r3, [pc, #160]	@ (80050f4 <prvInsertBlockIntoFreeList+0xac>)
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	e002      	b.n	800505c <prvInsertBlockIntoFreeList+0x14>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	429a      	cmp	r2, r3
 8005064:	d8f7      	bhi.n	8005056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	4413      	add	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	d108      	bne.n	800508a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	441a      	add	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	441a      	add	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d118      	bne.n	80050d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b15      	ldr	r3, [pc, #84]	@ (80050f8 <prvInsertBlockIntoFreeList+0xb0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d00d      	beq.n	80050c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	441a      	add	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	e008      	b.n	80050d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050c6:	4b0c      	ldr	r3, [pc, #48]	@ (80050f8 <prvInsertBlockIntoFreeList+0xb0>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e003      	b.n	80050d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d002      	beq.n	80050e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20004a90 	.word	0x20004a90
 80050f8:	20004a98 	.word	0x20004a98

080050fc <memset>:
 80050fc:	4402      	add	r2, r0
 80050fe:	4603      	mov	r3, r0
 8005100:	4293      	cmp	r3, r2
 8005102:	d100      	bne.n	8005106 <memset+0xa>
 8005104:	4770      	bx	lr
 8005106:	f803 1b01 	strb.w	r1, [r3], #1
 800510a:	e7f9      	b.n	8005100 <memset+0x4>

0800510c <_reclaim_reent>:
 800510c:	4b29      	ldr	r3, [pc, #164]	@ (80051b4 <_reclaim_reent+0xa8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4283      	cmp	r3, r0
 8005112:	b570      	push	{r4, r5, r6, lr}
 8005114:	4604      	mov	r4, r0
 8005116:	d04b      	beq.n	80051b0 <_reclaim_reent+0xa4>
 8005118:	69c3      	ldr	r3, [r0, #28]
 800511a:	b1ab      	cbz	r3, 8005148 <_reclaim_reent+0x3c>
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	b16b      	cbz	r3, 800513c <_reclaim_reent+0x30>
 8005120:	2500      	movs	r5, #0
 8005122:	69e3      	ldr	r3, [r4, #28]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	5959      	ldr	r1, [r3, r5]
 8005128:	2900      	cmp	r1, #0
 800512a:	d13b      	bne.n	80051a4 <_reclaim_reent+0x98>
 800512c:	3504      	adds	r5, #4
 800512e:	2d80      	cmp	r5, #128	@ 0x80
 8005130:	d1f7      	bne.n	8005122 <_reclaim_reent+0x16>
 8005132:	69e3      	ldr	r3, [r4, #28]
 8005134:	4620      	mov	r0, r4
 8005136:	68d9      	ldr	r1, [r3, #12]
 8005138:	f000 f872 	bl	8005220 <_free_r>
 800513c:	69e3      	ldr	r3, [r4, #28]
 800513e:	6819      	ldr	r1, [r3, #0]
 8005140:	b111      	cbz	r1, 8005148 <_reclaim_reent+0x3c>
 8005142:	4620      	mov	r0, r4
 8005144:	f000 f86c 	bl	8005220 <_free_r>
 8005148:	6961      	ldr	r1, [r4, #20]
 800514a:	b111      	cbz	r1, 8005152 <_reclaim_reent+0x46>
 800514c:	4620      	mov	r0, r4
 800514e:	f000 f867 	bl	8005220 <_free_r>
 8005152:	69e1      	ldr	r1, [r4, #28]
 8005154:	b111      	cbz	r1, 800515c <_reclaim_reent+0x50>
 8005156:	4620      	mov	r0, r4
 8005158:	f000 f862 	bl	8005220 <_free_r>
 800515c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800515e:	b111      	cbz	r1, 8005166 <_reclaim_reent+0x5a>
 8005160:	4620      	mov	r0, r4
 8005162:	f000 f85d 	bl	8005220 <_free_r>
 8005166:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005168:	b111      	cbz	r1, 8005170 <_reclaim_reent+0x64>
 800516a:	4620      	mov	r0, r4
 800516c:	f000 f858 	bl	8005220 <_free_r>
 8005170:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005172:	b111      	cbz	r1, 800517a <_reclaim_reent+0x6e>
 8005174:	4620      	mov	r0, r4
 8005176:	f000 f853 	bl	8005220 <_free_r>
 800517a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800517c:	b111      	cbz	r1, 8005184 <_reclaim_reent+0x78>
 800517e:	4620      	mov	r0, r4
 8005180:	f000 f84e 	bl	8005220 <_free_r>
 8005184:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005186:	b111      	cbz	r1, 800518e <_reclaim_reent+0x82>
 8005188:	4620      	mov	r0, r4
 800518a:	f000 f849 	bl	8005220 <_free_r>
 800518e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005190:	b111      	cbz	r1, 8005198 <_reclaim_reent+0x8c>
 8005192:	4620      	mov	r0, r4
 8005194:	f000 f844 	bl	8005220 <_free_r>
 8005198:	6a23      	ldr	r3, [r4, #32]
 800519a:	b14b      	cbz	r3, 80051b0 <_reclaim_reent+0xa4>
 800519c:	4620      	mov	r0, r4
 800519e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80051a2:	4718      	bx	r3
 80051a4:	680e      	ldr	r6, [r1, #0]
 80051a6:	4620      	mov	r0, r4
 80051a8:	f000 f83a 	bl	8005220 <_free_r>
 80051ac:	4631      	mov	r1, r6
 80051ae:	e7bb      	b.n	8005128 <_reclaim_reent+0x1c>
 80051b0:	bd70      	pop	{r4, r5, r6, pc}
 80051b2:	bf00      	nop
 80051b4:	20000010 	.word	0x20000010

080051b8 <__libc_init_array>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	4d0d      	ldr	r5, [pc, #52]	@ (80051f0 <__libc_init_array+0x38>)
 80051bc:	4c0d      	ldr	r4, [pc, #52]	@ (80051f4 <__libc_init_array+0x3c>)
 80051be:	1b64      	subs	r4, r4, r5
 80051c0:	10a4      	asrs	r4, r4, #2
 80051c2:	2600      	movs	r6, #0
 80051c4:	42a6      	cmp	r6, r4
 80051c6:	d109      	bne.n	80051dc <__libc_init_array+0x24>
 80051c8:	4d0b      	ldr	r5, [pc, #44]	@ (80051f8 <__libc_init_array+0x40>)
 80051ca:	4c0c      	ldr	r4, [pc, #48]	@ (80051fc <__libc_init_array+0x44>)
 80051cc:	f000 f87e 	bl	80052cc <_init>
 80051d0:	1b64      	subs	r4, r4, r5
 80051d2:	10a4      	asrs	r4, r4, #2
 80051d4:	2600      	movs	r6, #0
 80051d6:	42a6      	cmp	r6, r4
 80051d8:	d105      	bne.n	80051e6 <__libc_init_array+0x2e>
 80051da:	bd70      	pop	{r4, r5, r6, pc}
 80051dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e0:	4798      	blx	r3
 80051e2:	3601      	adds	r6, #1
 80051e4:	e7ee      	b.n	80051c4 <__libc_init_array+0xc>
 80051e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ea:	4798      	blx	r3
 80051ec:	3601      	adds	r6, #1
 80051ee:	e7f2      	b.n	80051d6 <__libc_init_array+0x1e>
 80051f0:	08005324 	.word	0x08005324
 80051f4:	08005324 	.word	0x08005324
 80051f8:	08005324 	.word	0x08005324
 80051fc:	08005328 	.word	0x08005328

08005200 <__retarget_lock_acquire_recursive>:
 8005200:	4770      	bx	lr

08005202 <__retarget_lock_release_recursive>:
 8005202:	4770      	bx	lr

08005204 <memcpy>:
 8005204:	440a      	add	r2, r1
 8005206:	4291      	cmp	r1, r2
 8005208:	f100 33ff 	add.w	r3, r0, #4294967295
 800520c:	d100      	bne.n	8005210 <memcpy+0xc>
 800520e:	4770      	bx	lr
 8005210:	b510      	push	{r4, lr}
 8005212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800521a:	4291      	cmp	r1, r2
 800521c:	d1f9      	bne.n	8005212 <memcpy+0xe>
 800521e:	bd10      	pop	{r4, pc}

08005220 <_free_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	4605      	mov	r5, r0
 8005224:	2900      	cmp	r1, #0
 8005226:	d041      	beq.n	80052ac <_free_r+0x8c>
 8005228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800522c:	1f0c      	subs	r4, r1, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	bfb8      	it	lt
 8005232:	18e4      	addlt	r4, r4, r3
 8005234:	f000 f83e 	bl	80052b4 <__malloc_lock>
 8005238:	4a1d      	ldr	r2, [pc, #116]	@ (80052b0 <_free_r+0x90>)
 800523a:	6813      	ldr	r3, [r2, #0]
 800523c:	b933      	cbnz	r3, 800524c <_free_r+0x2c>
 800523e:	6063      	str	r3, [r4, #4]
 8005240:	6014      	str	r4, [r2, #0]
 8005242:	4628      	mov	r0, r5
 8005244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005248:	f000 b83a 	b.w	80052c0 <__malloc_unlock>
 800524c:	42a3      	cmp	r3, r4
 800524e:	d908      	bls.n	8005262 <_free_r+0x42>
 8005250:	6820      	ldr	r0, [r4, #0]
 8005252:	1821      	adds	r1, r4, r0
 8005254:	428b      	cmp	r3, r1
 8005256:	bf01      	itttt	eq
 8005258:	6819      	ldreq	r1, [r3, #0]
 800525a:	685b      	ldreq	r3, [r3, #4]
 800525c:	1809      	addeq	r1, r1, r0
 800525e:	6021      	streq	r1, [r4, #0]
 8005260:	e7ed      	b.n	800523e <_free_r+0x1e>
 8005262:	461a      	mov	r2, r3
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	b10b      	cbz	r3, 800526c <_free_r+0x4c>
 8005268:	42a3      	cmp	r3, r4
 800526a:	d9fa      	bls.n	8005262 <_free_r+0x42>
 800526c:	6811      	ldr	r1, [r2, #0]
 800526e:	1850      	adds	r0, r2, r1
 8005270:	42a0      	cmp	r0, r4
 8005272:	d10b      	bne.n	800528c <_free_r+0x6c>
 8005274:	6820      	ldr	r0, [r4, #0]
 8005276:	4401      	add	r1, r0
 8005278:	1850      	adds	r0, r2, r1
 800527a:	4283      	cmp	r3, r0
 800527c:	6011      	str	r1, [r2, #0]
 800527e:	d1e0      	bne.n	8005242 <_free_r+0x22>
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	6053      	str	r3, [r2, #4]
 8005286:	4408      	add	r0, r1
 8005288:	6010      	str	r0, [r2, #0]
 800528a:	e7da      	b.n	8005242 <_free_r+0x22>
 800528c:	d902      	bls.n	8005294 <_free_r+0x74>
 800528e:	230c      	movs	r3, #12
 8005290:	602b      	str	r3, [r5, #0]
 8005292:	e7d6      	b.n	8005242 <_free_r+0x22>
 8005294:	6820      	ldr	r0, [r4, #0]
 8005296:	1821      	adds	r1, r4, r0
 8005298:	428b      	cmp	r3, r1
 800529a:	bf04      	itt	eq
 800529c:	6819      	ldreq	r1, [r3, #0]
 800529e:	685b      	ldreq	r3, [r3, #4]
 80052a0:	6063      	str	r3, [r4, #4]
 80052a2:	bf04      	itt	eq
 80052a4:	1809      	addeq	r1, r1, r0
 80052a6:	6021      	streq	r1, [r4, #0]
 80052a8:	6054      	str	r4, [r2, #4]
 80052aa:	e7ca      	b.n	8005242 <_free_r+0x22>
 80052ac:	bd38      	pop	{r3, r4, r5, pc}
 80052ae:	bf00      	nop
 80052b0:	20004be4 	.word	0x20004be4

080052b4 <__malloc_lock>:
 80052b4:	4801      	ldr	r0, [pc, #4]	@ (80052bc <__malloc_lock+0x8>)
 80052b6:	f7ff bfa3 	b.w	8005200 <__retarget_lock_acquire_recursive>
 80052ba:	bf00      	nop
 80052bc:	20004be0 	.word	0x20004be0

080052c0 <__malloc_unlock>:
 80052c0:	4801      	ldr	r0, [pc, #4]	@ (80052c8 <__malloc_unlock+0x8>)
 80052c2:	f7ff bf9e 	b.w	8005202 <__retarget_lock_release_recursive>
 80052c6:	bf00      	nop
 80052c8:	20004be0 	.word	0x20004be0

080052cc <_init>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	bf00      	nop
 80052d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d2:	bc08      	pop	{r3}
 80052d4:	469e      	mov	lr, r3
 80052d6:	4770      	bx	lr

080052d8 <_fini>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	bf00      	nop
 80052dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052de:	bc08      	pop	{r3}
 80052e0:	469e      	mov	lr, r3
 80052e2:	4770      	bx	lr
