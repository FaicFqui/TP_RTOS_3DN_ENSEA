
TP_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096c8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08009898  08009898  0000a898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d54  08009d54  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009d54  08009d54  0000ad54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d5c  08009d5c  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d5c  08009d5c  0000ad5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d60  08009d60  0000ad60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009d64  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fa4  20000074  08009dd8  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005018  08009dd8  0000c018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf4c  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041b8  00000000  00000000  00027ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  0002c1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011be  00000000  00000000  0002d888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a771  00000000  00000000  0002ea46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d75c  00000000  00000000  000591b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe49b  00000000  00000000  00076913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00174dae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068b8  00000000  00000000  00174df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0017b6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009880 	.word	0x08009880

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08009880 	.word	0x08009880

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b4:	4a04      	ldr	r2, [pc, #16]	@ (80005c8 <MX_FREERTOS_Init+0x18>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4804      	ldr	r0, [pc, #16]	@ (80005cc <MX_FREERTOS_Init+0x1c>)
 80005ba:	f004 fb51 	bl	8004c60 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a03      	ldr	r2, [pc, #12]	@ (80005d0 <MX_FREERTOS_Init+0x20>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	08009be4 	.word	0x08009be4
 80005cc:	080005d5 	.word	0x080005d5
 80005d0:	20000090 	.word	0x20000090

080005d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005dc:	2001      	movs	r0, #1
 80005de:	f004 fbe5 	bl	8004dac <osDelay>
 80005e2:	e7fb      	b.n	80005dc <StartDefaultTask+0x8>

080005e4 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b090      	sub	sp, #64	@ 0x40
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fa:	4bad      	ldr	r3, [pc, #692]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4aac      	ldr	r2, [pc, #688]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000600:	f043 0310 	orr.w	r3, r3, #16
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4baa      	ldr	r3, [pc, #680]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0310 	and.w	r3, r3, #16
 800060e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000612:	4ba7      	ldr	r3, [pc, #668]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4aa6      	ldr	r2, [pc, #664]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4ba4      	ldr	r3, [pc, #656]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000626:	627b      	str	r3, [r7, #36]	@ 0x24
 8000628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	4ba1      	ldr	r3, [pc, #644]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4aa0      	ldr	r2, [pc, #640]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b9e      	ldr	r3, [pc, #632]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	623b      	str	r3, [r7, #32]
 8000640:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000642:	4b9b      	ldr	r3, [pc, #620]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a9a      	ldr	r2, [pc, #616]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000648:	f043 0308 	orr.w	r3, r3, #8
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b98      	ldr	r3, [pc, #608]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0308 	and.w	r3, r3, #8
 8000656:	61fb      	str	r3, [r7, #28]
 8000658:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b95      	ldr	r3, [pc, #596]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a94      	ldr	r2, [pc, #592]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b92      	ldr	r3, [pc, #584]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b8f      	ldr	r3, [pc, #572]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a8e      	ldr	r2, [pc, #568]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b8c      	ldr	r3, [pc, #560]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800068a:	4b89      	ldr	r3, [pc, #548]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	4a88      	ldr	r2, [pc, #544]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000690:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000694:	6313      	str	r3, [r2, #48]	@ 0x30
 8000696:	4b86      	ldr	r3, [pc, #536]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006a2:	4b83      	ldr	r3, [pc, #524]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a82      	ldr	r2, [pc, #520]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b80      	ldr	r3, [pc, #512]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006ba:	4b7d      	ldr	r3, [pc, #500]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a7c      	ldr	r2, [pc, #496]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 80006c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b7a      	ldr	r3, [pc, #488]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d2:	4b77      	ldr	r3, [pc, #476]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a76      	ldr	r2, [pc, #472]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 80006d8:	f043 0320 	orr.w	r3, r3, #32
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b74      	ldr	r3, [pc, #464]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0320 	and.w	r3, r3, #32
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	4b71      	ldr	r3, [pc, #452]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a70      	ldr	r2, [pc, #448]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b6e      	ldr	r3, [pc, #440]	@ (80008b0 <MX_GPIO_Init+0x2cc>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f241 010e 	movw	r1, #4110	@ 0x100e
 8000708:	486a      	ldr	r0, [pc, #424]	@ (80008b4 <MX_GPIO_Init+0x2d0>)
 800070a:	f001 fb63 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2108      	movs	r1, #8
 8000712:	4869      	ldr	r0, [pc, #420]	@ (80008b8 <MX_GPIO_Init+0x2d4>)
 8000714:	f001 fb5e 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800071e:	4867      	ldr	r0, [pc, #412]	@ (80008bc <MX_GPIO_Init+0x2d8>)
 8000720:	f001 fb58 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	21c8      	movs	r1, #200	@ 0xc8
 8000728:	4865      	ldr	r0, [pc, #404]	@ (80008c0 <MX_GPIO_Init+0x2dc>)
 800072a:	f001 fb53 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800072e:	2310      	movs	r3, #16
 8000730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800073e:	230e      	movs	r3, #14
 8000740:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000746:	4619      	mov	r1, r3
 8000748:	485e      	ldr	r0, [pc, #376]	@ (80008c4 <MX_GPIO_Init+0x2e0>)
 800074a:	f001 f997 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800074e:	2308      	movs	r3, #8
 8000750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800075e:	4619      	mov	r1, r3
 8000760:	4858      	ldr	r0, [pc, #352]	@ (80008c4 <MX_GPIO_Init+0x2e0>)
 8000762:	f001 f98b 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000766:	2304      	movs	r3, #4
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000776:	2309      	movs	r3, #9
 8000778:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800077e:	4619      	mov	r1, r3
 8000780:	4850      	ldr	r0, [pc, #320]	@ (80008c4 <MX_GPIO_Init+0x2e0>)
 8000782:	f001 f97b 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000786:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000798:	230b      	movs	r3, #11
 800079a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800079c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007a0:	4619      	mov	r1, r3
 80007a2:	4847      	ldr	r0, [pc, #284]	@ (80008c0 <MX_GPIO_Init+0x2dc>)
 80007a4:	f001 f96a 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80007a8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80007ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007ba:	230c      	movs	r3, #12
 80007bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007c2:	4619      	mov	r1, r3
 80007c4:	483f      	ldr	r0, [pc, #252]	@ (80008c4 <MX_GPIO_Init+0x2e0>)
 80007c6:	f001 f959 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80007ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d0:	2312      	movs	r3, #18
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007dc:	2304      	movs	r3, #4
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007e4:	4619      	mov	r1, r3
 80007e6:	4838      	ldr	r0, [pc, #224]	@ (80008c8 <MX_GPIO_Init+0x2e4>)
 80007e8:	f001 f948 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80007ec:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80007fe:	230a      	movs	r3, #10
 8000800:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000806:	4619      	mov	r1, r3
 8000808:	482f      	ldr	r0, [pc, #188]	@ (80008c8 <MX_GPIO_Init+0x2e4>)
 800080a:	f001 f937 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800080e:	2310      	movs	r3, #16
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800081e:	2302      	movs	r3, #2
 8000820:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000826:	4619      	mov	r1, r3
 8000828:	4827      	ldr	r0, [pc, #156]	@ (80008c8 <MX_GPIO_Init+0x2e4>)
 800082a:	f001 f927 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800082e:	2380      	movs	r3, #128	@ 0x80
 8000830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800083e:	2308      	movs	r3, #8
 8000840:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000846:	4619      	mov	r1, r3
 8000848:	4820      	ldr	r0, [pc, #128]	@ (80008cc <MX_GPIO_Init+0x2e8>)
 800084a:	f001 f917 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800084e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000860:	230c      	movs	r3, #12
 8000862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000868:	4619      	mov	r1, r3
 800086a:	4819      	ldr	r0, [pc, #100]	@ (80008d0 <MX_GPIO_Init+0x2ec>)
 800086c:	f001 f906 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000870:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000882:	2301      	movs	r3, #1
 8000884:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800088a:	4619      	mov	r1, r3
 800088c:	4811      	ldr	r0, [pc, #68]	@ (80008d4 <MX_GPIO_Init+0x2f0>)
 800088e:	f001 f8f5 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000892:	2360      	movs	r3, #96	@ 0x60
 8000894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008a2:	230d      	movs	r3, #13
 80008a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008aa:	4619      	mov	r1, r3
 80008ac:	e014      	b.n	80008d8 <MX_GPIO_Init+0x2f4>
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40022000 	.word	0x40022000
 80008b8:	40022800 	.word	0x40022800
 80008bc:	40021c00 	.word	0x40021c00
 80008c0:	40021800 	.word	0x40021800
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020000 	.word	0x40020000
 80008d8:	48bb      	ldr	r0, [pc, #748]	@ (8000bc8 <MX_GPIO_Init+0x5e4>)
 80008da:	f001 f8cf 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80008de:	2340      	movs	r3, #64	@ 0x40
 80008e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008ee:	230a      	movs	r3, #10
 80008f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008f6:	4619      	mov	r1, r3
 80008f8:	48b4      	ldr	r0, [pc, #720]	@ (8000bcc <MX_GPIO_Init+0x5e8>)
 80008fa:	f001 f8bf 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80008fe:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000910:	230c      	movs	r3, #12
 8000912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000914:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000918:	4619      	mov	r1, r3
 800091a:	48ad      	ldr	r0, [pc, #692]	@ (8000bd0 <MX_GPIO_Init+0x5ec>)
 800091c:	f001 f8ae 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000920:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000932:	230e      	movs	r3, #14
 8000934:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000936:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800093a:	4619      	mov	r1, r3
 800093c:	48a5      	ldr	r0, [pc, #660]	@ (8000bd4 <MX_GPIO_Init+0x5f0>)
 800093e:	f001 f89d 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000942:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000954:	230c      	movs	r3, #12
 8000956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000958:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800095c:	4619      	mov	r1, r3
 800095e:	489e      	ldr	r0, [pc, #632]	@ (8000bd8 <MX_GPIO_Init+0x5f4>)
 8000960:	f001 f88c 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8000964:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000976:	230a      	movs	r3, #10
 8000978:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800097e:	4619      	mov	r1, r3
 8000980:	4896      	ldr	r0, [pc, #600]	@ (8000bdc <MX_GPIO_Init+0x5f8>)
 8000982:	f001 f87b 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000986:	23f0      	movs	r3, #240	@ 0xf0
 8000988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000996:	230a      	movs	r3, #10
 8000998:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	488f      	ldr	r0, [pc, #572]	@ (8000be0 <MX_GPIO_Init+0x5fc>)
 80009a2:	f001 f86b 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80009a6:	23f7      	movs	r3, #247	@ 0xf7
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009b6:	230e      	movs	r3, #14
 80009b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009be:	4619      	mov	r1, r3
 80009c0:	4888      	ldr	r0, [pc, #544]	@ (8000be4 <MX_GPIO_Init+0x600>)
 80009c2:	f001 f85b 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80009c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009d8:	2309      	movs	r3, #9
 80009da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009e0:	4619      	mov	r1, r3
 80009e2:	487b      	ldr	r0, [pc, #492]	@ (8000bd0 <MX_GPIO_Init+0x5ec>)
 80009e4:	f001 f84a 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80009e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009fa:	230a      	movs	r3, #10
 80009fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a02:	4619      	mov	r1, r3
 8000a04:	4872      	ldr	r0, [pc, #456]	@ (8000bd0 <MX_GPIO_Init+0x5ec>)
 8000a06:	f001 f839 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a22:	4619      	mov	r1, r3
 8000a24:	486c      	ldr	r0, [pc, #432]	@ (8000bd8 <MX_GPIO_Init+0x5f4>)
 8000a26:	f001 f829 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a3a:	230d      	movs	r3, #13
 8000a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a42:	4619      	mov	r1, r3
 8000a44:	4864      	ldr	r0, [pc, #400]	@ (8000bd8 <MX_GPIO_Init+0x5f4>)
 8000a46:	f001 f819 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8000a4a:	f241 030e 	movw	r3, #4110	@ 0x100e
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a60:	4619      	mov	r1, r3
 8000a62:	485f      	ldr	r0, [pc, #380]	@ (8000be0 <MX_GPIO_Init+0x5fc>)
 8000a64:	f001 f80a 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000a68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	485a      	ldr	r0, [pc, #360]	@ (8000be8 <MX_GPIO_Init+0x604>)
 8000a7e:	f000 fffd 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a82:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a94:	230c      	movs	r3, #12
 8000a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4853      	ldr	r0, [pc, #332]	@ (8000bec <MX_GPIO_Init+0x608>)
 8000aa0:	f000 ffec 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000aa4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8000aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ab6:	230e      	movs	r3, #14
 8000ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000aba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4847      	ldr	r0, [pc, #284]	@ (8000be0 <MX_GPIO_Init+0x5fc>)
 8000ac2:	f000 ffdb 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ada:	4619      	mov	r1, r3
 8000adc:	4841      	ldr	r0, [pc, #260]	@ (8000be4 <MX_GPIO_Init+0x600>)
 8000ade:	f000 ffcd 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000ae2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000af4:	230d      	movs	r3, #13
 8000af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000afc:	4619      	mov	r1, r3
 8000afe:	4834      	ldr	r0, [pc, #208]	@ (8000bd0 <MX_GPIO_Init+0x5ec>)
 8000b00:	f000 ffbc 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b04:	2310      	movs	r3, #16
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b14:	4619      	mov	r1, r3
 8000b16:	4830      	ldr	r0, [pc, #192]	@ (8000bd8 <MX_GPIO_Init+0x5f4>)
 8000b18:	f000 ffb0 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b34:	4619      	mov	r1, r3
 8000b36:	4828      	ldr	r0, [pc, #160]	@ (8000bd8 <MX_GPIO_Init+0x5f4>)
 8000b38:	f000 ffa0 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b3c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4827      	ldr	r0, [pc, #156]	@ (8000bf0 <MX_GPIO_Init+0x60c>)
 8000b52:	f000 ff93 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4820      	ldr	r0, [pc, #128]	@ (8000bf0 <MX_GPIO_Init+0x60c>)
 8000b70:	f000 ff84 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b74:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b86:	230d      	movs	r3, #13
 8000b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4817      	ldr	r0, [pc, #92]	@ (8000bf0 <MX_GPIO_Init+0x60c>)
 8000b92:	f000 ff73 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480b      	ldr	r0, [pc, #44]	@ (8000be0 <MX_GPIO_Init+0x5fc>)
 8000bb2:	f000 ff63 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000bb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e015      	b.n	8000bf4 <MX_GPIO_Init+0x610>
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	40021800 	.word	0x40021800
 8000bd4:	40022400 	.word	0x40022400
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40022000 	.word	0x40022000
 8000be4:	40022800 	.word	0x40022800
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40021400 	.word	0x40021400
 8000bf0:	40021c00 	.word	0x40021c00
 8000bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4895      	ldr	r0, [pc, #596]	@ (8000e58 <MX_GPIO_Init+0x874>)
 8000c02:	f000 ff3b 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c0c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	488f      	ldr	r0, [pc, #572]	@ (8000e5c <MX_GPIO_Init+0x878>)
 8000c1e:	f000 ff2d 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000c22:	23c0      	movs	r3, #192	@ 0xc0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c32:	2308      	movs	r3, #8
 8000c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4888      	ldr	r0, [pc, #544]	@ (8000e60 <MX_GPIO_Init+0x87c>)
 8000c3e:	f000 ff1d 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c42:	2310      	movs	r3, #16
 8000c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c52:	230a      	movs	r3, #10
 8000c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4881      	ldr	r0, [pc, #516]	@ (8000e64 <MX_GPIO_Init+0x880>)
 8000c5e:	f000 ff0d 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c62:	2328      	movs	r3, #40	@ 0x28
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c72:	230c      	movs	r3, #12
 8000c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4879      	ldr	r0, [pc, #484]	@ (8000e64 <MX_GPIO_Init+0x880>)
 8000c7e:	f000 fefd 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000c82:	23c8      	movs	r3, #200	@ 0xc8
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	4873      	ldr	r0, [pc, #460]	@ (8000e68 <MX_GPIO_Init+0x884>)
 8000c9a:	f000 feef 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c9e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	486e      	ldr	r0, [pc, #440]	@ (8000e6c <MX_GPIO_Init+0x888>)
 8000cb4:	f000 fee2 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cc8:	230c      	movs	r3, #12
 8000cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4863      	ldr	r0, [pc, #396]	@ (8000e60 <MX_GPIO_Init+0x87c>)
 8000cd4:	f000 fed2 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ce8:	230a      	movs	r3, #10
 8000cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	485b      	ldr	r0, [pc, #364]	@ (8000e60 <MX_GPIO_Init+0x87c>)
 8000cf4:	f000 fec2 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cf8:	2332      	movs	r3, #50	@ 0x32
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d08:	230b      	movs	r3, #11
 8000d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d10:	4619      	mov	r1, r3
 8000d12:	4853      	ldr	r0, [pc, #332]	@ (8000e60 <MX_GPIO_Init+0x87c>)
 8000d14:	f000 feb2 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d28:	2309      	movs	r3, #9
 8000d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d30:	4619      	mov	r1, r3
 8000d32:	484f      	ldr	r0, [pc, #316]	@ (8000e70 <MX_GPIO_Init+0x88c>)
 8000d34:	f000 fea2 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d38:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d4a:	2309      	movs	r3, #9
 8000d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d52:	4619      	mov	r1, r3
 8000d54:	4847      	ldr	r0, [pc, #284]	@ (8000e74 <MX_GPIO_Init+0x890>)
 8000d56:	f000 fe91 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	483e      	ldr	r0, [pc, #248]	@ (8000e68 <MX_GPIO_Init+0x884>)
 8000d6e:	f000 fe85 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8000d72:	2382      	movs	r3, #130	@ 0x82
 8000d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d82:	230b      	movs	r3, #11
 8000d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4832      	ldr	r0, [pc, #200]	@ (8000e58 <MX_GPIO_Init+0x874>)
 8000d8e:	f000 fe75 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000d92:	2301      	movs	r3, #1
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d96:	2303      	movs	r3, #3
 8000d98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da2:	4619      	mov	r1, r3
 8000da4:	482c      	ldr	r0, [pc, #176]	@ (8000e58 <MX_GPIO_Init+0x874>)
 8000da6:	f000 fe69 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000daa:	2310      	movs	r3, #16
 8000dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000dba:	230d      	movs	r3, #13
 8000dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4824      	ldr	r0, [pc, #144]	@ (8000e58 <MX_GPIO_Init+0x874>)
 8000dc6:	f000 fe59 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000dca:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000de0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de4:	4619      	mov	r1, r3
 8000de6:	481f      	ldr	r0, [pc, #124]	@ (8000e64 <MX_GPIO_Init+0x880>)
 8000de8:	f000 fe48 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_CLK_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin;
 8000dec:	2320      	movs	r3, #32
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e04:	4619      	mov	r1, r3
 8000e06:	4814      	ldr	r0, [pc, #80]	@ (8000e58 <MX_GPIO_Init+0x874>)
 8000e08:	f000 fe38 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000e0c:	2340      	movs	r3, #64	@ 0x40
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e24:	4619      	mov	r1, r3
 8000e26:	480f      	ldr	r0, [pc, #60]	@ (8000e64 <MX_GPIO_Init+0x880>)
 8000e28:	f000 fe28 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e2c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e3e:	2305      	movs	r3, #5
 8000e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e46:	4619      	mov	r1, r3
 8000e48:	4809      	ldr	r0, [pc, #36]	@ (8000e70 <MX_GPIO_Init+0x88c>)
 8000e4a:	f000 fe17 	bl	8001a7c <HAL_GPIO_Init>

}
 8000e4e:	bf00      	nop
 8000e50:	3740      	adds	r7, #64	@ 0x40
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40022000 	.word	0x40022000
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40021c00 	.word	0x40021c00
 8000e68:	40021800 	.word	0x40021800
 8000e6c:	40021400 	.word	0x40021400
 8000e70:	40020400 	.word	0x40020400
 8000e74:	40020c00 	.word	0x40020c00

08000e78 <__io_putchar>:
/* USER CODE BEGIN 0 */

volatile uint32_t tim6_overflow_count = 0;
extern TIM_HandleTypeDef htim6;

int __io_putchar(int ch) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e80:	1d39      	adds	r1, r7, #4
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	2201      	movs	r2, #1
 8000e88:	4803      	ldr	r0, [pc, #12]	@ (8000e98 <__io_putchar+0x20>)
 8000e8a:	f002 fbdb 	bl	8003644 <HAL_UART_Transmit>
return ch;
 8000e8e:	687b      	ldr	r3, [r7, #4]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000444 	.word	0x20000444

08000e9c <fonction>:


h_shell_t shell;

int fonction(int argc, char ** argv)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	printf("Je suis une fonction bidon\r\n");
 8000ea6:	4810      	ldr	r0, [pc, #64]	@ (8000ee8 <fonction+0x4c>)
 8000ea8:	f007 fc1e 	bl	80086e8 <puts>

	printf("Nombre d'arguments : %d\r\n", argc);
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	480f      	ldr	r0, [pc, #60]	@ (8000eec <fonction+0x50>)
 8000eb0:	f007 fbb2 	bl	8008618 <iprintf>

	    for (int i = 0; i < argc; i++) {
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	e00c      	b.n	8000ed4 <fonction+0x38>
	        printf("Arg[%d] = %s\r\n", i, argv[i]);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68f9      	ldr	r1, [r7, #12]
 8000ec8:	4809      	ldr	r0, [pc, #36]	@ (8000ef0 <fonction+0x54>)
 8000eca:	f007 fba5 	bl	8008618 <iprintf>
	    for (int i = 0; i < argc; i++) {
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbee      	blt.n	8000eba <fonction+0x1e>
	    }



	return 0;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	080098a4 	.word	0x080098a4
 8000eec:	080098c0 	.word	0x080098c0
 8000ef0:	080098dc 	.word	0x080098dc

08000ef4 <addition>:

int addition(int argc, char ** argv)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
    if (argc < 3) {
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	dc05      	bgt.n	8000f10 <addition+0x1c>
        printf("Erreur : 2 paramètres requis\r\n");
 8000f04:	4811      	ldr	r0, [pc, #68]	@ (8000f4c <addition+0x58>)
 8000f06:	f007 fbef 	bl	80086e8 <puts>
        return -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	e018      	b.n	8000f42 <addition+0x4e>
    }

    int a = atoi(argv[1]);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	3304      	adds	r3, #4
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f007 fa34 	bl	8008384 <atoi>
 8000f1c:	6178      	str	r0, [r7, #20]
    int b = atoi(argv[2]);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	3308      	adds	r3, #8
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f007 fa2d 	bl	8008384 <atoi>
 8000f2a:	6138      	str	r0, [r7, #16]
    int result = a + b;
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4413      	add	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]

    printf("Addition : %d + %d = %d\r\n", a, b, result);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	6979      	ldr	r1, [r7, #20]
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <addition+0x5c>)
 8000f3c:	f007 fb6c 	bl	8008618 <iprintf>

    return 0;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	080098ec 	.word	0x080098ec
 8000f50:	0800990c 	.word	0x0800990c

08000f54 <allume_led>:

// allumer une led en dure, à améliorer pour choisir la led et le port, éteintre la led
int allume_led(int argc, char **argv) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2102      	movs	r1, #2
 8000f62:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <allume_led+0x24>)
 8000f64:	f000 ff36 	bl	8001dd4 <HAL_GPIO_WritePin>
    printf("LED PIN1 GPIOI est allumee !\r\n");
 8000f68:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <allume_led+0x28>)
 8000f6a:	f007 fbbd 	bl	80086e8 <puts>
    return 0;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40022000 	.word	0x40022000
 8000f7c:	08009928 	.word	0x08009928

08000f80 <eteint_led>:

int eteint_led(int argc, char **argv) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <eteint_led+0x24>)
 8000f90:	f000 ff20 	bl	8001dd4 <HAL_GPIO_WritePin>
    printf("LED PIN1 GPIOI est eteinte !\r\n");
 8000f94:	4804      	ldr	r0, [pc, #16]	@ (8000fa8 <eteint_led+0x28>)
 8000f96:	f007 fba7 	bl	80086e8 <puts>
    return 0;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40022000 	.word	0x40022000
 8000fa8:	08009948 	.word	0x08009948

08000fac <configureTimerForRunTimeStats>:


/// fonctions pour statistiques
void configureTimerForRunTimeStats(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim6);  // Lancer TIM6 avec IT
 8000fb0:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <configureTimerForRunTimeStats+0x14>)
 8000fb2:	f002 f887 	bl	80030c4 <HAL_TIM_Base_Start_IT>
    tim6_overflow_count = 0;
 8000fb6:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <configureTimerForRunTimeStats+0x18>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200003f4 	.word	0x200003f4
 8000fc4:	20000094 	.word	0x20000094

08000fc8 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void) {
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
    return (tim6_overflow_count << 16) + __HAL_TIM_GET_COUNTER(&htim6);
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <getRunTimeCounterValue+0x1c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	041a      	lsls	r2, r3, #16
 8000fd2:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <getRunTimeCounterValue+0x20>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd8:	4413      	add	r3, r2
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	20000094 	.word	0x20000094
 8000fe8:	200003f4 	.word	0x200003f4

08000fec <TacheStats>:


void TacheStats(void *pvParameters) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ff8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ffc:	6018      	str	r0, [r3, #0]
    char buffer[512];

    for (;;) {
        vTaskGetRunTimeStats(buffer);
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4618      	mov	r0, r3
 8001004:	f005 fe56 	bl	8006cb4 <vTaskGetRunTimeStats>
        printf("=== RunTime Stats ===\n%s\n", buffer);
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	4619      	mov	r1, r3
 800100e:	4804      	ldr	r0, [pc, #16]	@ (8001020 <TacheStats+0x34>)
 8001010:	f007 fb02 	bl	8008618 <iprintf>
        vTaskDelay(pdMS_TO_TICKS(2000)); // Toutes les 2 secondes
 8001014:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001018:	f004 fec0 	bl	8005d9c <vTaskDelay>
        vTaskGetRunTimeStats(buffer);
 800101c:	bf00      	nop
 800101e:	e7ee      	b.n	8000ffe <TacheStats+0x12>
 8001020:	08009968 	.word	0x08009968

08001024 <ShellTask>:
}




void ShellTask(void *argument) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    shell.io.drv_shell_transmit = drv_uart_transmit;
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <ShellTask+0x6c>)
 800102e:	4a19      	ldr	r2, [pc, #100]	@ (8001094 <ShellTask+0x70>)
 8001030:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    shell.io.drv_shell_receive  = drv_uart_receive;
 8001034:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <ShellTask+0x6c>)
 8001036:	4a18      	ldr	r2, [pc, #96]	@ (8001098 <ShellTask+0x74>)
 8001038:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358

    drv_uart_init_IT();  // // Lancement de la première réception en IT
 800103c:	f006 ff86 	bl	8007f4c <drv_uart_init_IT>

    shell_init(&shell);
 8001040:	4813      	ldr	r0, [pc, #76]	@ (8001090 <ShellTask+0x6c>)
 8001042:	f007 f849 	bl	80080d8 <shell_init>
    shell_add(&shell, 'f', fonction, "Une fonction inutile");
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <ShellTask+0x78>)
 8001048:	4a15      	ldr	r2, [pc, #84]	@ (80010a0 <ShellTask+0x7c>)
 800104a:	2166      	movs	r1, #102	@ 0x66
 800104c:	4810      	ldr	r0, [pc, #64]	@ (8001090 <ShellTask+0x6c>)
 800104e:	f007 f873 	bl	8008138 <shell_add>
    shell_add(&shell, 'a', addition, "Addition de deux entiers");
 8001052:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <ShellTask+0x80>)
 8001054:	4a14      	ldr	r2, [pc, #80]	@ (80010a8 <ShellTask+0x84>)
 8001056:	2161      	movs	r1, #97	@ 0x61
 8001058:	480d      	ldr	r0, [pc, #52]	@ (8001090 <ShellTask+0x6c>)
 800105a:	f007 f86d 	bl	8008138 <shell_add>
    shell_add(&shell, 'l', allume_led, "Allumer LED (GPIOI_PIN1)");
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <ShellTask+0x88>)
 8001060:	4a13      	ldr	r2, [pc, #76]	@ (80010b0 <ShellTask+0x8c>)
 8001062:	216c      	movs	r1, #108	@ 0x6c
 8001064:	480a      	ldr	r0, [pc, #40]	@ (8001090 <ShellTask+0x6c>)
 8001066:	f007 f867 	bl	8008138 <shell_add>
    shell_add(&shell, 'e', eteint_led, "Eteindre LED (GPIOI_PIN1)");
 800106a:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <ShellTask+0x90>)
 800106c:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <ShellTask+0x94>)
 800106e:	2165      	movs	r1, #101	@ 0x65
 8001070:	4807      	ldr	r0, [pc, #28]	@ (8001090 <ShellTask+0x6c>)
 8001072:	f007 f861 	bl	8008138 <shell_add>
    shell_add(&shell, 's', TacheStats, "Statitiques taches/CPU/MEMOIRE");
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <ShellTask+0x98>)
 8001078:	4a11      	ldr	r2, [pc, #68]	@ (80010c0 <ShellTask+0x9c>)
 800107a:	2173      	movs	r1, #115	@ 0x73
 800107c:	4804      	ldr	r0, [pc, #16]	@ (8001090 <ShellTask+0x6c>)
 800107e:	f007 f85b 	bl	8008138 <shell_add>

    shell_run(&shell);  // éxécute une boucle while(1)
 8001082:	4803      	ldr	r0, [pc, #12]	@ (8001090 <ShellTask+0x6c>)
 8001084:	f007 f904 	bl	8008290 <shell_run>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000098 	.word	0x20000098
 8001094:	08007f69 	.word	0x08007f69
 8001098:	08007f9d 	.word	0x08007f9d
 800109c:	08009984 	.word	0x08009984
 80010a0:	08000e9d 	.word	0x08000e9d
 80010a4:	0800999c 	.word	0x0800999c
 80010a8:	08000ef5 	.word	0x08000ef5
 80010ac:	080099b8 	.word	0x080099b8
 80010b0:	08000f55 	.word	0x08000f55
 80010b4:	080099d4 	.word	0x080099d4
 80010b8:	08000f81 	.word	0x08000f81
 80010bc:	080099f0 	.word	0x080099f0
 80010c0:	08000fed 	.word	0x08000fed

080010c4 <vApplicationStackOverflowHook>:
        i++;
    }
}


void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]

    printf(" Dépassement de pile detecte dans la tache : %s\n", pcTaskName);
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <vApplicationStackOverflowHook+0x30>)
 80010d2:	f007 faa1 	bl	8008618 <iprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80010d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010da:	b672      	cpsid	i
 80010dc:	f383 8811 	msr	BASEPRI, r3
 80010e0:	f3bf 8f6f 	isb	sy
 80010e4:	f3bf 8f4f 	dsb	sy
 80010e8:	b662      	cpsie	i
 80010ea:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80010ec:	bf00      	nop


    taskDISABLE_INTERRUPTS();
    while (1); //pour debbuger
 80010ee:	bf00      	nop
 80010f0:	e7fd      	b.n	80010ee <vApplicationStackOverflowHook+0x2a>
 80010f2:	bf00      	nop
 80010f4:	08009a88 	.word	0x08009a88

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fe:	f000 fb1c 	bl	800173a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001102:	f000 f823 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001106:	f7ff fa6d 	bl	80005e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800110a:	f000 fa33 	bl	8001574 <MX_USART1_UART_Init>





  xTaskCreate(ShellTask, "Shell", 512, NULL, 1, NULL);
 800110e:	2300      	movs	r3, #0
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	2301      	movs	r3, #1
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2300      	movs	r3, #0
 8001118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800111c:	4908      	ldr	r1, [pc, #32]	@ (8001140 <main+0x48>)
 800111e:	4809      	ldr	r0, [pc, #36]	@ (8001144 <main+0x4c>)
 8001120:	f004 fcda 	bl	8005ad8 <xTaskCreate>
  //Pour la création plusieurs tache pour generer un dépassement de mémoire
  //cree_plusieurs_taches();



	vTaskStartScheduler();
 8001124:	f004 fedc 	bl	8005ee0 <vTaskStartScheduler>

  // Si le scheduler échoue, on arrive ici
	printf("Erreur : démarrage du scheduler echoue\n");
 8001128:	4807      	ldr	r0, [pc, #28]	@ (8001148 <main+0x50>)
 800112a:	f007 fadd 	bl	80086e8 <puts>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800112e:	f003 fd2d 	bl	8004b8c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001132:	f7ff fa3d 	bl	80005b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001136:	f003 fd5d 	bl	8004bf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800113a:	bf00      	nop
 800113c:	e7fd      	b.n	800113a <main+0x42>
 800113e:	bf00      	nop
 8001140:	08009b1c 	.word	0x08009b1c
 8001144:	08001025 	.word	0x08001025
 8001148:	08009b24 	.word	0x08009b24

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b094      	sub	sp, #80	@ 0x50
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0320 	add.w	r3, r7, #32
 8001156:	2230      	movs	r2, #48	@ 0x30
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f007 fbf8 	bl	8008950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001170:	4b2b      	ldr	r3, [pc, #172]	@ (8001220 <SystemClock_Config+0xd4>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001174:	4a2a      	ldr	r2, [pc, #168]	@ (8001220 <SystemClock_Config+0xd4>)
 8001176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800117a:	6413      	str	r3, [r2, #64]	@ 0x40
 800117c:	4b28      	ldr	r3, [pc, #160]	@ (8001220 <SystemClock_Config+0xd4>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001188:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <SystemClock_Config+0xd8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a25      	ldr	r2, [pc, #148]	@ (8001224 <SystemClock_Config+0xd8>)
 800118e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <SystemClock_Config+0xd8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011b4:	2319      	movs	r3, #25
 80011b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80011b8:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80011bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011be:	2302      	movs	r3, #2
 80011c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fe6c 	bl	8001ea8 <HAL_RCC_OscConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011d6:	f000 f83f 	bl	8001258 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011da:	f000 fe15 	bl	8001e08 <HAL_PWREx_EnableOverDrive>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011e4:	f000 f838 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e8:	230f      	movs	r3, #15
 80011ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ec:	2302      	movs	r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2107      	movs	r1, #7
 8001206:	4618      	mov	r0, r3
 8001208:	f001 f8f2 	bl	80023f0 <HAL_RCC_ClockConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001212:	f000 f821 	bl	8001258 <Error_Handler>
  }
}
 8001216:	bf00      	nop
 8001218:	3750      	adds	r7, #80	@ 0x50
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40007000 	.word	0x40007000

08001228 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a06      	ldr	r2, [pc, #24]	@ (8001250 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d106      	bne.n	8001248 <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
 800123a:	f000 fa8b 	bl	8001754 <HAL_IncTick>
    tim6_overflow_count++;
 800123e:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a03      	ldr	r2, [pc, #12]	@ (8001254 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001246:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40001000 	.word	0x40001000
 8001254:	20000094 	.word	0x20000094

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <Error_Handler+0x8>

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <HAL_MspInit+0x4c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	4a10      	ldr	r2, [pc, #64]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001274:	6413      	str	r3, [r2, #64]	@ 0x40
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128c:	6453      	str	r3, [r2, #68]	@ 0x44
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	210f      	movs	r1, #15
 800129e:	f06f 0001 	mvn.w	r0, #1
 80012a2:	f000 fb2f 	bl	8001904 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08e      	sub	sp, #56	@ 0x38
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012c4:	4b33      	ldr	r3, [pc, #204]	@ (8001394 <HAL_InitTick+0xe0>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	4a32      	ldr	r2, [pc, #200]	@ (8001394 <HAL_InitTick+0xe0>)
 80012ca:	f043 0310 	orr.w	r3, r3, #16
 80012ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80012d0:	4b30      	ldr	r3, [pc, #192]	@ (8001394 <HAL_InitTick+0xe0>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012dc:	f107 0210 	add.w	r2, r7, #16
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 fa68 	bl	80027bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d103      	bne.n	80012fe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012f6:	f001 fa39 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 80012fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80012fc:	e004      	b.n	8001308 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012fe:	f001 fa35 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8001302:	4603      	mov	r3, r0
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800130a:	4a23      	ldr	r2, [pc, #140]	@ (8001398 <HAL_InitTick+0xe4>)
 800130c:	fba2 2303 	umull	r2, r3, r2, r3
 8001310:	0c9b      	lsrs	r3, r3, #18
 8001312:	3b01      	subs	r3, #1
 8001314:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001316:	4b21      	ldr	r3, [pc, #132]	@ (800139c <HAL_InitTick+0xe8>)
 8001318:	4a21      	ldr	r2, [pc, #132]	@ (80013a0 <HAL_InitTick+0xec>)
 800131a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800131c:	4b1f      	ldr	r3, [pc, #124]	@ (800139c <HAL_InitTick+0xe8>)
 800131e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001322:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001324:	4a1d      	ldr	r2, [pc, #116]	@ (800139c <HAL_InitTick+0xe8>)
 8001326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001328:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <HAL_InitTick+0xe8>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <HAL_InitTick+0xe8>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	@ (800139c <HAL_InitTick+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800133c:	4817      	ldr	r0, [pc, #92]	@ (800139c <HAL_InitTick+0xe8>)
 800133e:	f001 fe5f 	bl	8003000 <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001348:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800134c:	2b00      	cmp	r3, #0
 800134e:	d11b      	bne.n	8001388 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001350:	4812      	ldr	r0, [pc, #72]	@ (800139c <HAL_InitTick+0xe8>)
 8001352:	f001 feb7 	bl	80030c4 <HAL_TIM_Base_Start_IT>
 8001356:	4603      	mov	r3, r0
 8001358:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800135c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001360:	2b00      	cmp	r3, #0
 8001362:	d111      	bne.n	8001388 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001364:	2036      	movs	r0, #54	@ 0x36
 8001366:	f000 fae9 	bl	800193c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d808      	bhi.n	8001382 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	2036      	movs	r0, #54	@ 0x36
 8001376:	f000 fac5 	bl	8001904 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <HAL_InitTick+0xf0>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e002      	b.n	8001388 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001388:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800138c:	4618      	mov	r0, r3
 800138e:	3738      	adds	r7, #56	@ 0x38
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	431bde83 	.word	0x431bde83
 800139c:	200003f4 	.word	0x200003f4
 80013a0:	40001000 	.word	0x40001000
 80013a4:	20000004 	.word	0x20000004

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <NMI_Handler+0x4>

080013b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <HardFault_Handler+0x4>

080013b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <MemManage_Handler+0x4>

080013c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <UsageFault_Handler+0x4>

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013e4:	4802      	ldr	r0, [pc, #8]	@ (80013f0 <USART1_IRQHandler+0x10>)
 80013e6:	f002 f9fb 	bl	80037e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000444 	.word	0x20000444

080013f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <TIM6_DAC_IRQHandler+0x10>)
 80013fa:	f001 fedb 	bl	80031b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200003f4 	.word	0x200003f4

08001408 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	e00a      	b.n	8001430 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800141a:	f3af 8000 	nop.w
 800141e:	4601      	mov	r1, r0
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	60ba      	str	r2, [r7, #8]
 8001426:	b2ca      	uxtb	r2, r1
 8001428:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	dbf0      	blt.n	800141a <_read+0x12>
  }

  return len;
 8001438:	687b      	ldr	r3, [r7, #4]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	e009      	b.n	8001468 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fd0b 	bl	8000e78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbf1      	blt.n	8001454 <_write+0x12>
  }
  return len;
 8001470:	687b      	ldr	r3, [r7, #4]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_close>:

int _close(int file)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a2:	605a      	str	r2, [r3, #4]
  return 0;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <_isatty>:

int _isatty(int file)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ec:	4a14      	ldr	r2, [pc, #80]	@ (8001540 <_sbrk+0x5c>)
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <_sbrk+0x60>)
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f8:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <_sbrk+0x64>)
 8001502:	4a12      	ldr	r2, [pc, #72]	@ (800154c <_sbrk+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	429a      	cmp	r2, r3
 8001512:	d207      	bcs.n	8001524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001514:	f007 fac0 	bl	8008a98 <__errno>
 8001518:	4603      	mov	r3, r0
 800151a:	220c      	movs	r2, #12
 800151c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	e009      	b.n	8001538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001524:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <_sbrk+0x64>)
 8001534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20050000 	.word	0x20050000
 8001544:	00000400 	.word	0x00000400
 8001548:	20000440 	.word	0x20000440
 800154c:	20005018 	.word	0x20005018

08001550 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <SystemInit+0x20>)
 8001556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <SystemInit+0x20>)
 800155c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001560:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <MX_USART1_UART_Init+0x58>)
 800157a:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <MX_USART1_UART_Init+0x5c>)
 800157c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_USART1_UART_Init+0x58>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_USART1_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_USART1_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_USART1_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <MX_USART1_UART_Init+0x58>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <MX_USART1_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <MX_USART1_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <MX_USART1_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_USART1_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_USART1_UART_Init+0x58>)
 80015b8:	f001 fff6 	bl	80035a8 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015c2:	f7ff fe49 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000444 	.word	0x20000444
 80015d0:	40011000 	.word	0x40011000

080015d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b0ac      	sub	sp, #176	@ 0xb0
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ec:	f107 0318 	add.w	r3, r7, #24
 80015f0:	2284      	movs	r2, #132	@ 0x84
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f007 f9ab 	bl	8008950 <memset>
  if(uartHandle->Instance==USART1)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a36      	ldr	r2, [pc, #216]	@ (80016d8 <HAL_UART_MspInit+0x104>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d164      	bne.n	80016ce <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001604:	2340      	movs	r3, #64	@ 0x40
 8001606:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001608:	2300      	movs	r3, #0
 800160a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160c:	f107 0318 	add.w	r3, r7, #24
 8001610:	4618      	mov	r0, r3
 8001612:	f001 f905 	bl	8002820 <HAL_RCCEx_PeriphCLKConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800161c:	f7ff fe1c 	bl	8001258 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001620:	4b2e      	ldr	r3, [pc, #184]	@ (80016dc <HAL_UART_MspInit+0x108>)
 8001622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001624:	4a2d      	ldr	r2, [pc, #180]	@ (80016dc <HAL_UART_MspInit+0x108>)
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	6453      	str	r3, [r2, #68]	@ 0x44
 800162c:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <HAL_UART_MspInit+0x108>)
 800162e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <HAL_UART_MspInit+0x108>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163c:	4a27      	ldr	r2, [pc, #156]	@ (80016dc <HAL_UART_MspInit+0x108>)
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	6313      	str	r3, [r2, #48]	@ 0x30
 8001644:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <HAL_UART_MspInit+0x108>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <HAL_UART_MspInit+0x108>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001654:	4a21      	ldr	r2, [pc, #132]	@ (80016dc <HAL_UART_MspInit+0x108>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6313      	str	r3, [r2, #48]	@ 0x30
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <HAL_UART_MspInit+0x108>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001680:	2307      	movs	r3, #7
 8001682:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001686:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800168a:	4619      	mov	r1, r3
 800168c:	4814      	ldr	r0, [pc, #80]	@ (80016e0 <HAL_UART_MspInit+0x10c>)
 800168e:	f000 f9f5 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001692:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001696:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ac:	2307      	movs	r3, #7
 80016ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016b6:	4619      	mov	r1, r3
 80016b8:	480a      	ldr	r0, [pc, #40]	@ (80016e4 <HAL_UART_MspInit+0x110>)
 80016ba:	f000 f9df 	bl	8001a7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2105      	movs	r1, #5
 80016c2:	2025      	movs	r0, #37	@ 0x25
 80016c4:	f000 f91e 	bl	8001904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016c8:	2025      	movs	r0, #37	@ 0x25
 80016ca:	f000 f937 	bl	800193c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016ce:	bf00      	nop
 80016d0:	37b0      	adds	r7, #176	@ 0xb0
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020000 	.word	0x40020000

080016e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001720 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ec:	f7ff ff30 	bl	8001550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f0:	480c      	ldr	r0, [pc, #48]	@ (8001724 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016f2:	490d      	ldr	r1, [pc, #52]	@ (8001728 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001708:	4c0a      	ldr	r4, [pc, #40]	@ (8001734 <LoopFillZerobss+0x22>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001716:	f007 f9c5 	bl	8008aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171a:	f7ff fced 	bl	80010f8 <main>
  bx  lr    
 800171e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001720:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800172c:	08009d64 	.word	0x08009d64
  ldr r2, =_sbss
 8001730:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001734:	20005018 	.word	0x20005018

08001738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC_IRQHandler>

0800173a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173e:	2003      	movs	r0, #3
 8001740:	f000 f8d5 	bl	80018ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff fdb5 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174a:	f7ff fd8b 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	@ (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008
 8001778:	200004cc 	.word	0x200004cc

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	200004cc 	.word	0x200004cc

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <__NVIC_SetPriorityGrouping+0x40>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <__NVIC_SetPriorityGrouping+0x40>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00
 80017d8:	05fa0000 	.word	0x05fa0000

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	@ (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	@ (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	@ (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ff4c 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001916:	f7ff ff61 	bl	80017dc <__NVIC_GetPriorityGrouping>
 800191a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68b9      	ldr	r1, [r7, #8]
 8001920:	6978      	ldr	r0, [r7, #20]
 8001922:	f7ff ffb1 	bl	8001888 <NVIC_EncodePriority>
 8001926:	4602      	mov	r2, r0
 8001928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff80 	bl	8001834 <__NVIC_SetPriority>
}
 8001934:	bf00      	nop
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff54 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001964:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001966:	f7ff ff09 	bl	800177c <HAL_GetTick>
 800196a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d008      	beq.n	800198a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2280      	movs	r2, #128	@ 0x80
 800197c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e052      	b.n	8001a30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0216 	bic.w	r2, r2, #22
 8001998:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <HAL_DMA_Abort+0x62>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0208 	bic.w	r2, r2, #8
 80019c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0201 	bic.w	r2, r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019da:	e013      	b.n	8001a04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019dc:	f7ff fece 	bl	800177c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d90c      	bls.n	8001a04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2220      	movs	r2, #32
 80019ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2203      	movs	r2, #3
 80019f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e015      	b.n	8001a30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1e4      	bne.n	80019dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a16:	223f      	movs	r2, #63	@ 0x3f
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d004      	beq.n	8001a56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2280      	movs	r2, #128	@ 0x80
 8001a50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00c      	b.n	8001a70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2205      	movs	r2, #5
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	e175      	b.n	8001d88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	f040 8164 	bne.w	8001d82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d005      	beq.n	8001ad2 <HAL_GPIO_Init+0x56>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d130      	bne.n	8001b34 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 0201 	and.w	r2, r3, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d017      	beq.n	8001b70 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d123      	bne.n	8001bc4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	69b9      	ldr	r1, [r7, #24]
 8001bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0203 	and.w	r2, r3, #3
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80be 	beq.w	8001d82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	4b66      	ldr	r3, [pc, #408]	@ (8001da0 <HAL_GPIO_Init+0x324>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	4a65      	ldr	r2, [pc, #404]	@ (8001da0 <HAL_GPIO_Init+0x324>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c12:	4b63      	ldr	r3, [pc, #396]	@ (8001da0 <HAL_GPIO_Init+0x324>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c1e:	4a61      	ldr	r2, [pc, #388]	@ (8001da4 <HAL_GPIO_Init+0x328>)
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	220f      	movs	r2, #15
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a58      	ldr	r2, [pc, #352]	@ (8001da8 <HAL_GPIO_Init+0x32c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d037      	beq.n	8001cba <HAL_GPIO_Init+0x23e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a57      	ldr	r2, [pc, #348]	@ (8001dac <HAL_GPIO_Init+0x330>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d031      	beq.n	8001cb6 <HAL_GPIO_Init+0x23a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a56      	ldr	r2, [pc, #344]	@ (8001db0 <HAL_GPIO_Init+0x334>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02b      	beq.n	8001cb2 <HAL_GPIO_Init+0x236>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a55      	ldr	r2, [pc, #340]	@ (8001db4 <HAL_GPIO_Init+0x338>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d025      	beq.n	8001cae <HAL_GPIO_Init+0x232>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a54      	ldr	r2, [pc, #336]	@ (8001db8 <HAL_GPIO_Init+0x33c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <HAL_GPIO_Init+0x22e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a53      	ldr	r2, [pc, #332]	@ (8001dbc <HAL_GPIO_Init+0x340>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x22a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a52      	ldr	r2, [pc, #328]	@ (8001dc0 <HAL_GPIO_Init+0x344>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x226>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a51      	ldr	r2, [pc, #324]	@ (8001dc4 <HAL_GPIO_Init+0x348>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x222>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a50      	ldr	r2, [pc, #320]	@ (8001dc8 <HAL_GPIO_Init+0x34c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x21e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8001dcc <HAL_GPIO_Init+0x350>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x21a>
 8001c92:	2309      	movs	r3, #9
 8001c94:	e012      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001c96:	230a      	movs	r3, #10
 8001c98:	e010      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	e00e      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	e00c      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	e00a      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	e008      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001caa:	2304      	movs	r3, #4
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e004      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e002      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_GPIO_Init+0x240>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	f002 0203 	and.w	r2, r2, #3
 8001cc2:	0092      	lsls	r2, r2, #2
 8001cc4:	4093      	lsls	r3, r2
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ccc:	4935      	ldr	r1, [pc, #212]	@ (8001da4 <HAL_GPIO_Init+0x328>)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cda:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd0 <HAL_GPIO_Init+0x354>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cfe:	4a34      	ldr	r2, [pc, #208]	@ (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d04:	4b32      	ldr	r3, [pc, #200]	@ (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d28:	4a29      	ldr	r2, [pc, #164]	@ (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d2e:	4b28      	ldr	r3, [pc, #160]	@ (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d52:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	@ (8001dd0 <HAL_GPIO_Init+0x354>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3301      	adds	r3, #1
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2b0f      	cmp	r3, #15
 8001d8c:	f67f ae86 	bls.w	8001a9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3724      	adds	r7, #36	@ 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40013800 	.word	0x40013800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40020c00 	.word	0x40020c00
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40021400 	.word	0x40021400
 8001dc0:	40021800 	.word	0x40021800
 8001dc4:	40021c00 	.word	0x40021c00
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40022400 	.word	0x40022400
 8001dd0:	40013c00 	.word	0x40013c00

08001dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
 8001de0:	4613      	mov	r3, r2
 8001de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001de4:	787b      	ldrb	r3, [r7, #1]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001df0:	e003      	b.n	8001dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001df2:	887b      	ldrh	r3, [r7, #2]
 8001df4:	041a      	lsls	r2, r3, #16
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	619a      	str	r2, [r3, #24]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	4b23      	ldr	r3, [pc, #140]	@ (8001ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	4a22      	ldr	r2, [pc, #136]	@ (8001ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ea0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e36:	f7ff fca1 	bl	800177c <HAL_GetTick>
 8001e3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e3c:	e009      	b.n	8001e52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e3e:	f7ff fc9d 	bl	800177c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e4c:	d901      	bls.n	8001e52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e022      	b.n	8001e98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e52:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e5e:	d1ee      	bne.n	8001e3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e60:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e6c:	f7ff fc86 	bl	800177c <HAL_GetTick>
 8001e70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e72:	e009      	b.n	8001e88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e74:	f7ff fc82 	bl	800177c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e82:	d901      	bls.n	8001e88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e007      	b.n	8001e98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e94:	d1ee      	bne.n	8001e74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40007000 	.word	0x40007000

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e291      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8087 	beq.w	8001fda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ecc:	4b96      	ldr	r3, [pc, #600]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 030c 	and.w	r3, r3, #12
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d00c      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed8:	4b93      	ldr	r3, [pc, #588]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d112      	bne.n	8001f0a <HAL_RCC_OscConfig+0x62>
 8001ee4:	4b90      	ldr	r3, [pc, #576]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ef0:	d10b      	bne.n	8001f0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef2:	4b8d      	ldr	r3, [pc, #564]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d06c      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x130>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d168      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e26b      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_OscConfig+0x7a>
 8001f14:	4b84      	ldr	r3, [pc, #528]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a83      	ldr	r2, [pc, #524]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	e02e      	b.n	8001f80 <HAL_RCC_OscConfig+0xd8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x9c>
 8001f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b7c      	ldr	r3, [pc, #496]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7b      	ldr	r2, [pc, #492]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e01d      	b.n	8001f80 <HAL_RCC_OscConfig+0xd8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0xc0>
 8001f4e:	4b76      	ldr	r3, [pc, #472]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a75      	ldr	r2, [pc, #468]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b73      	ldr	r3, [pc, #460]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a72      	ldr	r2, [pc, #456]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e00b      	b.n	8001f80 <HAL_RCC_OscConfig+0xd8>
 8001f68:	4b6f      	ldr	r3, [pc, #444]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b6c      	ldr	r3, [pc, #432]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a6b      	ldr	r2, [pc, #428]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff fbf8 	bl	800177c <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff fbf4 	bl	800177c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	@ 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e21f      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	4b61      	ldr	r3, [pc, #388]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0xe8>
 8001fae:	e014      	b.n	8001fda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fbe4 	bl	800177c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff fbe0 	bl	800177c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	@ 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e20b      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	4b57      	ldr	r3, [pc, #348]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x110>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d069      	beq.n	80020ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe6:	4b50      	ldr	r3, [pc, #320]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d11c      	bne.n	8002038 <HAL_RCC_OscConfig+0x190>
 8001ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d116      	bne.n	8002038 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	4b47      	ldr	r3, [pc, #284]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_RCC_OscConfig+0x17a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e1df      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b41      	ldr	r3, [pc, #260]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	493d      	ldr	r1, [pc, #244]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	e040      	b.n	80020ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d023      	beq.n	8002088 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002040:	4b39      	ldr	r3, [pc, #228]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a38      	ldr	r2, [pc, #224]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff fb96 	bl	800177c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002054:	f7ff fb92 	bl	800177c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1bd      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002066:	4b30      	ldr	r3, [pc, #192]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	4b2d      	ldr	r3, [pc, #180]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4929      	ldr	r1, [pc, #164]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
 8002086:	e018      	b.n	80020ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002088:	4b27      	ldr	r3, [pc, #156]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a26      	ldr	r2, [pc, #152]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff fb72 	bl	800177c <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209c:	f7ff fb6e 	bl	800177c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e199      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d038      	beq.n	8002138 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d019      	beq.n	8002102 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 80020d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d2:	4a15      	ldr	r2, [pc, #84]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7ff fb4f 	bl	800177c <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e2:	f7ff fb4b 	bl	800177c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e176      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 80020f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x23a>
 8002100:	e01a      	b.n	8002138 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8002104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002106:	4a08      	ldr	r2, [pc, #32]	@ (8002128 <HAL_RCC_OscConfig+0x280>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210e:	f7ff fb35 	bl	800177c <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002114:	e00a      	b.n	800212c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002116:	f7ff fb31 	bl	800177c <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d903      	bls.n	800212c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e15c      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
 8002128:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	4b91      	ldr	r3, [pc, #580]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 800212e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1ee      	bne.n	8002116 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80a4 	beq.w	800228e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002146:	4b8b      	ldr	r3, [pc, #556]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10d      	bne.n	800216e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4b88      	ldr	r3, [pc, #544]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	4a87      	ldr	r2, [pc, #540]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800215c:	6413      	str	r3, [r2, #64]	@ 0x40
 800215e:	4b85      	ldr	r3, [pc, #532]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216a:	2301      	movs	r3, #1
 800216c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216e:	4b82      	ldr	r3, [pc, #520]	@ (8002378 <HAL_RCC_OscConfig+0x4d0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d118      	bne.n	80021ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800217a:	4b7f      	ldr	r3, [pc, #508]	@ (8002378 <HAL_RCC_OscConfig+0x4d0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a7e      	ldr	r2, [pc, #504]	@ (8002378 <HAL_RCC_OscConfig+0x4d0>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002186:	f7ff faf9 	bl	800177c <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218e:	f7ff faf5 	bl	800177c <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b64      	cmp	r3, #100	@ 0x64
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e120      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a0:	4b75      	ldr	r3, [pc, #468]	@ (8002378 <HAL_RCC_OscConfig+0x4d0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x31a>
 80021b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6713      	str	r3, [r2, #112]	@ 0x70
 80021c0:	e02d      	b.n	800221e <HAL_RCC_OscConfig+0x376>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x33c>
 80021ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ce:	4a69      	ldr	r2, [pc, #420]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d6:	4b67      	ldr	r3, [pc, #412]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021da:	4a66      	ldr	r2, [pc, #408]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e2:	e01c      	b.n	800221e <HAL_RCC_OscConfig+0x376>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d10c      	bne.n	8002206 <HAL_RCC_OscConfig+0x35e>
 80021ec:	4b61      	ldr	r3, [pc, #388]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f0:	4a60      	ldr	r2, [pc, #384]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	@ 0x70
 8002204:	e00b      	b.n	800221e <HAL_RCC_OscConfig+0x376>
 8002206:	4b5b      	ldr	r3, [pc, #364]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220a:	4a5a      	ldr	r2, [pc, #360]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6713      	str	r3, [r2, #112]	@ 0x70
 8002212:	4b58      	ldr	r3, [pc, #352]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002216:	4a57      	ldr	r2, [pc, #348]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d015      	beq.n	8002252 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002226:	f7ff faa9 	bl	800177c <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7ff faa5 	bl	800177c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0ce      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	4b4b      	ldr	r3, [pc, #300]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ee      	beq.n	800222e <HAL_RCC_OscConfig+0x386>
 8002250:	e014      	b.n	800227c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7ff fa93 	bl	800177c <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7ff fa8f 	bl	800177c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e0b8      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	4b40      	ldr	r3, [pc, #256]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1ee      	bne.n	800225a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4b3c      	ldr	r3, [pc, #240]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	4a3b      	ldr	r2, [pc, #236]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800228c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80a4 	beq.w	80023e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002298:	4b36      	ldr	r3, [pc, #216]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d06b      	beq.n	800237c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d149      	bne.n	8002340 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ac:	4b31      	ldr	r3, [pc, #196]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a30      	ldr	r2, [pc, #192]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 80022b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7ff fa60 	bl	800177c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7ff fa5c 	bl	800177c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e087      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	4b28      	ldr	r3, [pc, #160]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	4313      	orrs	r3, r2
 8002304:	4a1b      	ldr	r2, [pc, #108]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002306:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800230a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a18      	ldr	r2, [pc, #96]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7ff fa30 	bl	800177c <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002320:	f7ff fa2c 	bl	800177c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e057      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x478>
 800233e:	e04f      	b.n	80023e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002340:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0b      	ldr	r2, [pc, #44]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800234a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7ff fa16 	bl	800177c <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7ff fa12 	bl	800177c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e03d      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002366:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <HAL_RCC_OscConfig+0x4cc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x4ac>
 8002372:	e035      	b.n	80023e0 <HAL_RCC_OscConfig+0x538>
 8002374:	40023800 	.word	0x40023800
 8002378:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800237c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <HAL_RCC_OscConfig+0x544>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d028      	beq.n	80023dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d121      	bne.n	80023dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d11a      	bne.n	80023dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023ac:	4013      	ands	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d111      	bne.n	80023dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	3b01      	subs	r3, #1
 80023c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800

080023f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0d0      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002408:	4b6a      	ldr	r3, [pc, #424]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d910      	bls.n	8002438 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b67      	ldr	r3, [pc, #412]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 020f 	bic.w	r2, r3, #15
 800241e:	4965      	ldr	r1, [pc, #404]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b63      	ldr	r3, [pc, #396]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0b8      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002450:	4b59      	ldr	r3, [pc, #356]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a58      	ldr	r2, [pc, #352]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002456:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800245a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002468:	4b53      	ldr	r3, [pc, #332]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a52      	ldr	r2, [pc, #328]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 800246e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002472:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b50      	ldr	r3, [pc, #320]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	494d      	ldr	r1, [pc, #308]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d040      	beq.n	8002514 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b47      	ldr	r3, [pc, #284]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d115      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e07f      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b2:	4b41      	ldr	r3, [pc, #260]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e073      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c2:	4b3d      	ldr	r3, [pc, #244]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e06b      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d2:	4b39      	ldr	r3, [pc, #228]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f023 0203 	bic.w	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	4936      	ldr	r1, [pc, #216]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e4:	f7ff f94a 	bl	800177c <HAL_GetTick>
 80024e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	e00a      	b.n	8002502 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ec:	f7ff f946 	bl	800177c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e053      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	4b2d      	ldr	r3, [pc, #180]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 020c 	and.w	r2, r3, #12
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	429a      	cmp	r2, r3
 8002512:	d1eb      	bne.n	80024ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002514:	4b27      	ldr	r3, [pc, #156]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d210      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 020f 	bic.w	r2, r3, #15
 800252a:	4922      	ldr	r1, [pc, #136]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e032      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002550:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4916      	ldr	r1, [pc, #88]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800256e:	4b12      	ldr	r3, [pc, #72]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	490e      	ldr	r1, [pc, #56]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002582:	f000 f821 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8002586:	4602      	mov	r2, r0
 8002588:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	490a      	ldr	r1, [pc, #40]	@ (80025bc <HAL_RCC_ClockConfig+0x1cc>)
 8002594:	5ccb      	ldrb	r3, [r1, r3]
 8002596:	fa22 f303 	lsr.w	r3, r2, r3
 800259a:	4a09      	ldr	r2, [pc, #36]	@ (80025c0 <HAL_RCC_ClockConfig+0x1d0>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800259e:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <HAL_RCC_ClockConfig+0x1d4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fe86 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023c00 	.word	0x40023c00
 80025b8:	40023800 	.word	0x40023800
 80025bc:	08009c08 	.word	0x08009c08
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000004 	.word	0x20000004

080025c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025cc:	b090      	sub	sp, #64	@ 0x40
 80025ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80025d4:	2300      	movs	r3, #0
 80025d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025d8:	2300      	movs	r3, #0
 80025da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025e0:	4b59      	ldr	r3, [pc, #356]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x180>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d00d      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x40>
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	f200 80a1 	bhi.w	8002734 <HAL_RCC_GetSysClockFreq+0x16c>
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x34>
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_GetSysClockFreq+0x3a>
 80025fa:	e09b      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025fc:	4b53      	ldr	r3, [pc, #332]	@ (800274c <HAL_RCC_GetSysClockFreq+0x184>)
 80025fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002600:	e09b      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002602:	4b53      	ldr	r3, [pc, #332]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x188>)
 8002604:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002606:	e098      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002608:	4b4f      	ldr	r3, [pc, #316]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x180>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002610:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002612:	4b4d      	ldr	r3, [pc, #308]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x180>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d028      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261e:	4b4a      	ldr	r3, [pc, #296]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x180>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	2200      	movs	r2, #0
 8002626:	623b      	str	r3, [r7, #32]
 8002628:	627a      	str	r2, [r7, #36]	@ 0x24
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002630:	2100      	movs	r1, #0
 8002632:	4b47      	ldr	r3, [pc, #284]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x188>)
 8002634:	fb03 f201 	mul.w	r2, r3, r1
 8002638:	2300      	movs	r3, #0
 800263a:	fb00 f303 	mul.w	r3, r0, r3
 800263e:	4413      	add	r3, r2
 8002640:	4a43      	ldr	r2, [pc, #268]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x188>)
 8002642:	fba0 1202 	umull	r1, r2, r0, r2
 8002646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002648:	460a      	mov	r2, r1
 800264a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800264c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800264e:	4413      	add	r3, r2
 8002650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002654:	2200      	movs	r2, #0
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	61fa      	str	r2, [r7, #28]
 800265a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800265e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002662:	f7fd fe2d 	bl	80002c0 <__aeabi_uldivmod>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4613      	mov	r3, r2
 800266c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800266e:	e053      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002670:	4b35      	ldr	r3, [pc, #212]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x180>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	099b      	lsrs	r3, r3, #6
 8002676:	2200      	movs	r2, #0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	617a      	str	r2, [r7, #20]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002682:	f04f 0b00 	mov.w	fp, #0
 8002686:	4652      	mov	r2, sl
 8002688:	465b      	mov	r3, fp
 800268a:	f04f 0000 	mov.w	r0, #0
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	0159      	lsls	r1, r3, #5
 8002694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002698:	0150      	lsls	r0, r2, #5
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	ebb2 080a 	subs.w	r8, r2, sl
 80026a2:	eb63 090b 	sbc.w	r9, r3, fp
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026ba:	ebb2 0408 	subs.w	r4, r2, r8
 80026be:	eb63 0509 	sbc.w	r5, r3, r9
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	00eb      	lsls	r3, r5, #3
 80026cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026d0:	00e2      	lsls	r2, r4, #3
 80026d2:	4614      	mov	r4, r2
 80026d4:	461d      	mov	r5, r3
 80026d6:	eb14 030a 	adds.w	r3, r4, sl
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	eb45 030b 	adc.w	r3, r5, fp
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ee:	4629      	mov	r1, r5
 80026f0:	028b      	lsls	r3, r1, #10
 80026f2:	4621      	mov	r1, r4
 80026f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026f8:	4621      	mov	r1, r4
 80026fa:	028a      	lsls	r2, r1, #10
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002702:	2200      	movs	r2, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	60fa      	str	r2, [r7, #12]
 8002708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800270c:	f7fd fdd8 	bl	80002c0 <__aeabi_uldivmod>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4613      	mov	r3, r2
 8002716:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x180>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	0c1b      	lsrs	r3, r3, #16
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	3301      	adds	r3, #1
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002728:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800272a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002732:	e002      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002734:	4b05      	ldr	r3, [pc, #20]	@ (800274c <HAL_RCC_GetSysClockFreq+0x184>)
 8002736:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800273c:	4618      	mov	r0, r3
 800273e:	3740      	adds	r7, #64	@ 0x40
 8002740:	46bd      	mov	sp, r7
 8002742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	00f42400 	.word	0x00f42400
 8002750:	017d7840 	.word	0x017d7840

08002754 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002758:	4b03      	ldr	r3, [pc, #12]	@ (8002768 <HAL_RCC_GetHCLKFreq+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000000 	.word	0x20000000

0800276c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002770:	f7ff fff0 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b05      	ldr	r3, [pc, #20]	@ (800278c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0a9b      	lsrs	r3, r3, #10
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4903      	ldr	r1, [pc, #12]	@ (8002790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	08009c18 	.word	0x08009c18

08002794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002798:	f7ff ffdc 	bl	8002754 <HAL_RCC_GetHCLKFreq>
 800279c:	4602      	mov	r2, r0
 800279e:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	0b5b      	lsrs	r3, r3, #13
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4903      	ldr	r1, [pc, #12]	@ (80027b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027aa:	5ccb      	ldrb	r3, [r1, r3]
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	08009c18 	.word	0x08009c18

080027bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	220f      	movs	r2, #15
 80027ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027cc:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <HAL_RCC_GetClockConfig+0x5c>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0203 	and.w	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002818 <HAL_RCC_GetClockConfig+0x5c>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <HAL_RCC_GetClockConfig+0x5c>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80027f0:	4b09      	ldr	r3, [pc, #36]	@ (8002818 <HAL_RCC_GetClockConfig+0x5c>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	08db      	lsrs	r3, r3, #3
 80027f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027fe:	4b07      	ldr	r3, [pc, #28]	@ (800281c <HAL_RCC_GetClockConfig+0x60>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 020f 	and.w	r2, r3, #15
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	601a      	str	r2, [r3, #0]
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	40023c00 	.word	0x40023c00

08002820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d012      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002848:	4b69      	ldr	r3, [pc, #420]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a68      	ldr	r2, [pc, #416]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002852:	6093      	str	r3, [r2, #8]
 8002854:	4b66      	ldr	r3, [pc, #408]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285c:	4964      	ldr	r1, [pc, #400]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d017      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800287a:	4b5d      	ldr	r3, [pc, #372]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002880:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002888:	4959      	ldr	r1, [pc, #356]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002894:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002898:	d101      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800289a:	2301      	movs	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d017      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028b6:	4b4e      	ldr	r3, [pc, #312]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	494a      	ldr	r1, [pc, #296]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028d4:	d101      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028d6:	2301      	movs	r3, #1
 80028d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 808b 	beq.w	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002904:	4b3a      	ldr	r3, [pc, #232]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	4a39      	ldr	r2, [pc, #228]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800290e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002910:	4b37      	ldr	r3, [pc, #220]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800291c:	4b35      	ldr	r3, [pc, #212]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a34      	ldr	r2, [pc, #208]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002928:	f7fe ff28 	bl	800177c <HAL_GetTick>
 800292c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002930:	f7fe ff24 	bl	800177c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	@ 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e357      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002942:	4b2c      	ldr	r3, [pc, #176]	@ (80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800294e:	4b28      	ldr	r3, [pc, #160]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002956:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d035      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	429a      	cmp	r2, r3
 800296a:	d02e      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800296c:	4b20      	ldr	r3, [pc, #128]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002974:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002976:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	4a1d      	ldr	r2, [pc, #116]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002980:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002982:	4b1b      	ldr	r3, [pc, #108]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	4a1a      	ldr	r2, [pc, #104]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800298c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800298e:	4a18      	ldr	r2, [pc, #96]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002994:	4b16      	ldr	r3, [pc, #88]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d114      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7fe feec 	bl	800177c <HAL_GetTick>
 80029a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe fee8 	bl	800177c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e319      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0ee      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029d6:	d111      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029d8:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029e4:	4b04      	ldr	r3, [pc, #16]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029e6:	400b      	ands	r3, r1
 80029e8:	4901      	ldr	r1, [pc, #4]	@ (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
 80029ee:	e00b      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40007000 	.word	0x40007000
 80029f8:	0ffffcff 	.word	0x0ffffcff
 80029fc:	4baa      	ldr	r3, [pc, #680]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4aa9      	ldr	r2, [pc, #676]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a06:	6093      	str	r3, [r2, #8]
 8002a08:	4ba7      	ldr	r3, [pc, #668]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a14:	49a4      	ldr	r1, [pc, #656]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d010      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a26:	4ba0      	ldr	r3, [pc, #640]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a2c:	4a9e      	ldr	r2, [pc, #632]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a36:	4b9c      	ldr	r3, [pc, #624]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a38:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a40:	4999      	ldr	r1, [pc, #612]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a54:	4b94      	ldr	r3, [pc, #592]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a62:	4991      	ldr	r1, [pc, #580]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a76:	4b8c      	ldr	r3, [pc, #560]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a84:	4988      	ldr	r1, [pc, #544]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a98:	4b83      	ldr	r3, [pc, #524]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002aa6:	4980      	ldr	r1, [pc, #512]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002aba:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac8:	4977      	ldr	r1, [pc, #476]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002adc:	4b72      	ldr	r3, [pc, #456]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae2:	f023 0203 	bic.w	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aea:	496f      	ldr	r1, [pc, #444]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002afe:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b04:	f023 020c 	bic.w	r2, r3, #12
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b0c:	4966      	ldr	r1, [pc, #408]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b20:	4b61      	ldr	r3, [pc, #388]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b26:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2e:	495e      	ldr	r1, [pc, #376]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b42:	4b59      	ldr	r3, [pc, #356]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b48:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b50:	4955      	ldr	r1, [pc, #340]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b64:	4b50      	ldr	r3, [pc, #320]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b72:	494d      	ldr	r1, [pc, #308]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b86:	4b48      	ldr	r3, [pc, #288]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	4944      	ldr	r1, [pc, #272]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ba8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb6:	493c      	ldr	r1, [pc, #240]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002bca:	4b37      	ldr	r3, [pc, #220]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd8:	4933      	ldr	r1, [pc, #204]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bfa:	492b      	ldr	r1, [pc, #172]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d011      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c14:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c1c:	4922      	ldr	r1, [pc, #136]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c54:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5c:	4912      	ldr	r1, [pc, #72]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c80:	4909      	ldr	r1, [pc, #36]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d006      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80d9 	beq.w	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c9c:	4b02      	ldr	r3, [pc, #8]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a01      	ldr	r2, [pc, #4]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ca6:	e001      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cae:	f7fe fd65 	bl	800177c <HAL_GetTick>
 8002cb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cb6:	f7fe fd61 	bl	800177c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b64      	cmp	r3, #100	@ 0x64
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e194      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f0      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d021      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d11d      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ce8:	4b64      	ldr	r3, [pc, #400]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cee:	0c1b      	lsrs	r3, r3, #16
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cf6:	4b61      	ldr	r3, [pc, #388]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cfc:	0e1b      	lsrs	r3, r3, #24
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	019a      	lsls	r2, r3, #6
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	041b      	lsls	r3, r3, #16
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	061b      	lsls	r3, r3, #24
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	071b      	lsls	r3, r3, #28
 8002d1c:	4957      	ldr	r1, [pc, #348]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d02e      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d4e:	d129      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d50:	4b4a      	ldr	r3, [pc, #296]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d56:	0c1b      	lsrs	r3, r3, #16
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d5e:	4b47      	ldr	r3, [pc, #284]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d64:	0f1b      	lsrs	r3, r3, #28
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	019a      	lsls	r2, r3, #6
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	041b      	lsls	r3, r3, #16
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	071b      	lsls	r3, r3, #28
 8002d84:	493d      	ldr	r1, [pc, #244]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d92:	f023 021f 	bic.w	r2, r3, #31
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	4937      	ldr	r1, [pc, #220]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01d      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002db0:	4b32      	ldr	r3, [pc, #200]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002db6:	0e1b      	lsrs	r3, r3, #24
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dc4:	0f1b      	lsrs	r3, r3, #28
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	019a      	lsls	r2, r3, #6
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	431a      	orrs	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	071b      	lsls	r3, r3, #28
 8002de4:	4925      	ldr	r1, [pc, #148]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d011      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	019a      	lsls	r2, r3, #6
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	061b      	lsls	r3, r3, #24
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	071b      	lsls	r3, r3, #28
 8002e14:	4919      	ldr	r1, [pc, #100]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e1c:	4b17      	ldr	r3, [pc, #92]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a16      	ldr	r2, [pc, #88]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e28:	f7fe fca8 	bl	800177c <HAL_GetTick>
 8002e2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e30:	f7fe fca4 	bl	800177c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	@ 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0d7      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e42:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	f040 80cd 	bne.w	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e56:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a08      	ldr	r2, [pc, #32]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e62:	f7fe fc8b 	bl	800177c <HAL_GetTick>
 8002e66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e6a:	f7fe fc87 	bl	800177c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b64      	cmp	r3, #100	@ 0x64
 8002e76:	d903      	bls.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0ba      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002e7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e80:	4b5e      	ldr	r3, [pc, #376]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e8c:	d0ed      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d02e      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d12a      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eb6:	4b51      	ldr	r3, [pc, #324]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eca:	0f1b      	lsrs	r3, r3, #28
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	019a      	lsls	r2, r3, #6
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	041b      	lsls	r3, r3, #16
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	061b      	lsls	r3, r3, #24
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	071b      	lsls	r3, r3, #28
 8002eea:	4944      	ldr	r1, [pc, #272]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ef2:	4b42      	ldr	r3, [pc, #264]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ef8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	493d      	ldr	r1, [pc, #244]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d022      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f20:	d11d      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f22:	4b36      	ldr	r3, [pc, #216]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f28:	0e1b      	lsrs	r3, r3, #24
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f30:	4b32      	ldr	r3, [pc, #200]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	0f1b      	lsrs	r3, r3, #28
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	019a      	lsls	r2, r3, #6
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	061b      	lsls	r3, r3, #24
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	071b      	lsls	r3, r3, #28
 8002f56:	4929      	ldr	r1, [pc, #164]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d028      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f6a:	4b24      	ldr	r3, [pc, #144]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f70:	0e1b      	lsrs	r3, r3, #24
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f78:	4b20      	ldr	r3, [pc, #128]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	019a      	lsls	r2, r3, #6
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	041b      	lsls	r3, r3, #16
 8002f90:	431a      	orrs	r2, r3
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	071b      	lsls	r3, r3, #28
 8002f9e:	4917      	ldr	r1, [pc, #92]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002fa6:	4b15      	ldr	r3, [pc, #84]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	4911      	ldr	r1, [pc, #68]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc8:	f7fe fbd8 	bl	800177c <HAL_GetTick>
 8002fcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fd0:	f7fe fbd4 	bl	800177c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	@ 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e007      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fe2:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fee:	d1ef      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800

08003000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e049      	b.n	80030a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f841 	bl	80030ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f000 f9e8 	bl	8003414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d001      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e054      	b.n	8003186 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a26      	ldr	r2, [pc, #152]	@ (8003194 <HAL_TIM_Base_Start_IT+0xd0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d022      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003106:	d01d      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a22      	ldr	r2, [pc, #136]	@ (8003198 <HAL_TIM_Base_Start_IT+0xd4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d018      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a21      	ldr	r2, [pc, #132]	@ (800319c <HAL_TIM_Base_Start_IT+0xd8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d013      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1f      	ldr	r2, [pc, #124]	@ (80031a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00e      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1e      	ldr	r2, [pc, #120]	@ (80031a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d009      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1c      	ldr	r2, [pc, #112]	@ (80031a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_TIM_Base_Start_IT+0x80>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1b      	ldr	r2, [pc, #108]	@ (80031ac <HAL_TIM_Base_Start_IT+0xe8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d115      	bne.n	8003170 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	4b19      	ldr	r3, [pc, #100]	@ (80031b0 <HAL_TIM_Base_Start_IT+0xec>)
 800314c:	4013      	ands	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b06      	cmp	r3, #6
 8003154:	d015      	beq.n	8003182 <HAL_TIM_Base_Start_IT+0xbe>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800315c:	d011      	beq.n	8003182 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316e:	e008      	b.n	8003182 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	e000      	b.n	8003184 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003182:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40010000 	.word	0x40010000
 8003198:	40000400 	.word	0x40000400
 800319c:	40000800 	.word	0x40000800
 80031a0:	40000c00 	.word	0x40000c00
 80031a4:	40010400 	.word	0x40010400
 80031a8:	40014000 	.word	0x40014000
 80031ac:	40001800 	.word	0x40001800
 80031b0:	00010007 	.word	0x00010007

080031b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d020      	beq.n	8003218 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01b      	beq.n	8003218 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0202 	mvn.w	r2, #2
 80031e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f8e9 	bl	80033d6 <HAL_TIM_IC_CaptureCallback>
 8003204:	e005      	b.n	8003212 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8db 	bl	80033c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f8ec 	bl	80033ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d020      	beq.n	8003264 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01b      	beq.n	8003264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0204 	mvn.w	r2, #4
 8003234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8c3 	bl	80033d6 <HAL_TIM_IC_CaptureCallback>
 8003250:	e005      	b.n	800325e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f8b5 	bl	80033c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8c6 	bl	80033ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d020      	beq.n	80032b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01b      	beq.n	80032b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0208 	mvn.w	r2, #8
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2204      	movs	r2, #4
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f89d 	bl	80033d6 <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f88f 	bl	80033c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f8a0 	bl	80033ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d020      	beq.n	80032fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01b      	beq.n	80032fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0210 	mvn.w	r2, #16
 80032cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2208      	movs	r2, #8
 80032d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f877 	bl	80033d6 <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f869 	bl	80033c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f87a 	bl	80033ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00c      	beq.n	8003320 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0201 	mvn.w	r2, #1
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd ff84 	bl	8001228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003326:	2b00      	cmp	r3, #0
 8003328:	d104      	bne.n	8003334 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00c      	beq.n	800334e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f919 	bl	8003580 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00c      	beq.n	8003372 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800336a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f911 	bl	8003594 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00c      	beq.n	8003396 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800338e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f834 	bl	80033fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00c      	beq.n	80033ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f06f 0220 	mvn.w	r2, #32
 80033b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f8d9 	bl	800356c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a46      	ldr	r2, [pc, #280]	@ (8003540 <TIM_Base_SetConfig+0x12c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d013      	beq.n	8003454 <TIM_Base_SetConfig+0x40>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003432:	d00f      	beq.n	8003454 <TIM_Base_SetConfig+0x40>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a43      	ldr	r2, [pc, #268]	@ (8003544 <TIM_Base_SetConfig+0x130>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00b      	beq.n	8003454 <TIM_Base_SetConfig+0x40>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a42      	ldr	r2, [pc, #264]	@ (8003548 <TIM_Base_SetConfig+0x134>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d007      	beq.n	8003454 <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a41      	ldr	r2, [pc, #260]	@ (800354c <TIM_Base_SetConfig+0x138>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d003      	beq.n	8003454 <TIM_Base_SetConfig+0x40>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a40      	ldr	r2, [pc, #256]	@ (8003550 <TIM_Base_SetConfig+0x13c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d108      	bne.n	8003466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800345a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a35      	ldr	r2, [pc, #212]	@ (8003540 <TIM_Base_SetConfig+0x12c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d02b      	beq.n	80034c6 <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003474:	d027      	beq.n	80034c6 <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a32      	ldr	r2, [pc, #200]	@ (8003544 <TIM_Base_SetConfig+0x130>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d023      	beq.n	80034c6 <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a31      	ldr	r2, [pc, #196]	@ (8003548 <TIM_Base_SetConfig+0x134>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01f      	beq.n	80034c6 <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a30      	ldr	r2, [pc, #192]	@ (800354c <TIM_Base_SetConfig+0x138>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01b      	beq.n	80034c6 <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2f      	ldr	r2, [pc, #188]	@ (8003550 <TIM_Base_SetConfig+0x13c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d017      	beq.n	80034c6 <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a2e      	ldr	r2, [pc, #184]	@ (8003554 <TIM_Base_SetConfig+0x140>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003558 <TIM_Base_SetConfig+0x144>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00f      	beq.n	80034c6 <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a2c      	ldr	r2, [pc, #176]	@ (800355c <TIM_Base_SetConfig+0x148>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00b      	beq.n	80034c6 <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003560 <TIM_Base_SetConfig+0x14c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d007      	beq.n	80034c6 <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2a      	ldr	r2, [pc, #168]	@ (8003564 <TIM_Base_SetConfig+0x150>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a29      	ldr	r2, [pc, #164]	@ (8003568 <TIM_Base_SetConfig+0x154>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d108      	bne.n	80034d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a10      	ldr	r2, [pc, #64]	@ (8003540 <TIM_Base_SetConfig+0x12c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_Base_SetConfig+0xf8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a12      	ldr	r2, [pc, #72]	@ (8003550 <TIM_Base_SetConfig+0x13c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d103      	bne.n	8003514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d105      	bne.n	8003532 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f023 0201 	bic.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	611a      	str	r2, [r3, #16]
  }
}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40010000 	.word	0x40010000
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40000c00 	.word	0x40000c00
 8003550:	40010400 	.word	0x40010400
 8003554:	40014000 	.word	0x40014000
 8003558:	40014400 	.word	0x40014400
 800355c:	40014800 	.word	0x40014800
 8003560:	40001800 	.word	0x40001800
 8003564:	40001c00 	.word	0x40001c00
 8003568:	40002000 	.word	0x40002000

0800356c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e040      	b.n	800363c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fe f802 	bl	80015d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2224      	movs	r2, #36	@ 0x24
 80035d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fe4c 	bl	800428c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fbe5 	bl	8003dc4 <UART_SetConfig>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e01b      	b.n	800363c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003612:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003622:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fecb 	bl	80043d0 <UART_CheckIdleState>
 800363a:	4603      	mov	r3, r0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	@ 0x28
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003658:	2b20      	cmp	r3, #32
 800365a:	d177      	bne.n	800374c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_UART_Transmit+0x24>
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e070      	b.n	800374e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2221      	movs	r2, #33	@ 0x21
 8003678:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800367a:	f7fe f87f 	bl	800177c <HAL_GetTick>
 800367e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	88fa      	ldrh	r2, [r7, #6]
 800368c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003698:	d108      	bne.n	80036ac <HAL_UART_Transmit+0x68>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	e003      	b.n	80036b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036b4:	e02f      	b.n	8003716 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2200      	movs	r2, #0
 80036be:	2180      	movs	r1, #128	@ 0x80
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fedc 	bl	800447e <UART_WaitOnFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d004      	beq.n	80036d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e03b      	b.n	800374e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10b      	bne.n	80036f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	3302      	adds	r3, #2
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	e007      	b.n	8003704 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	781a      	ldrb	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3301      	adds	r3, #1
 8003702:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1c9      	bne.n	80036b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2200      	movs	r2, #0
 800372a:	2140      	movs	r1, #64	@ 0x40
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fea6 	bl	800447e <UART_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d004      	beq.n	8003742 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e005      	b.n	800374e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	e000      	b.n	800374e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800374c:	2302      	movs	r3, #2
  }
}
 800374e:	4618      	mov	r0, r3
 8003750:	3720      	adds	r7, #32
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b08a      	sub	sp, #40	@ 0x28
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	4613      	mov	r3, r2
 8003762:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800376a:	2b20      	cmp	r3, #32
 800376c:	d132      	bne.n	80037d4 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_UART_Receive_IT+0x24>
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e02b      	b.n	80037d6 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d018      	beq.n	80037c4 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	613b      	str	r3, [r7, #16]
   return(result);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	69f9      	ldr	r1, [r7, #28]
 80037b6:	6a3a      	ldr	r2, [r7, #32]
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e6      	bne.n	8003792 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	461a      	mov	r2, r3
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 fec4 	bl	8004558 <UART_Start_Receive_IT>
 80037d0:	4603      	mov	r3, r0
 80037d2:	e000      	b.n	80037d6 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
  }
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3728      	adds	r7, #40	@ 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b0ba      	sub	sp, #232	@ 0xe8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003806:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800380a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800380e:	4013      	ands	r3, r2
 8003810:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d115      	bne.n	8003848 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800381c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00f      	beq.n	8003848 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d009      	beq.n	8003848 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8297 	beq.w	8003d6c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
      }
      return;
 8003846:	e291      	b.n	8003d6c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8117 	beq.w	8003a80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800385e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003862:	4b85      	ldr	r3, [pc, #532]	@ (8003a78 <HAL_UART_IRQHandler+0x298>)
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 810a 	beq.w	8003a80 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800386c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d011      	beq.n	800389c <HAL_UART_IRQHandler+0xbc>
 8003878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2201      	movs	r2, #1
 800388a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003892:	f043 0201 	orr.w	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800389c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d011      	beq.n	80038cc <HAL_UART_IRQHandler+0xec>
 80038a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00b      	beq.n	80038cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2202      	movs	r2, #2
 80038ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c2:	f043 0204 	orr.w	r2, r3, #4
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d011      	beq.n	80038fc <HAL_UART_IRQHandler+0x11c>
 80038d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00b      	beq.n	80038fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2204      	movs	r2, #4
 80038ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038f2:	f043 0202 	orr.w	r2, r3, #2
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d017      	beq.n	8003938 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d105      	bne.n	8003920 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003918:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00b      	beq.n	8003938 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2208      	movs	r2, #8
 8003926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800392e:	f043 0208 	orr.w	r2, r3, #8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800393c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003940:	2b00      	cmp	r3, #0
 8003942:	d012      	beq.n	800396a <HAL_UART_IRQHandler+0x18a>
 8003944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003948:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00c      	beq.n	800396a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003958:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 81fd 	beq.w	8003d70 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00d      	beq.n	800399e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b2:	2b40      	cmp	r3, #64	@ 0x40
 80039b4:	d005      	beq.n	80039c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d04f      	beq.n	8003a62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fe8e 	bl	80046e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d2:	2b40      	cmp	r3, #64	@ 0x40
 80039d4:	d141      	bne.n	8003a5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3308      	adds	r3, #8
 80039dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039e4:	e853 3f00 	ldrex	r3, [r3]
 80039e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3308      	adds	r3, #8
 80039fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1d9      	bne.n	80039d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d013      	beq.n	8003a52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2e:	4a13      	ldr	r2, [pc, #76]	@ (8003a7c <HAL_UART_IRQHandler+0x29c>)
 8003a30:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd fffe 	bl	8001a38 <HAL_DMA_Abort_IT>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d017      	beq.n	8003a72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a50:	e00f      	b.n	8003a72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f9a0 	bl	8003d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	e00b      	b.n	8003a72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f99c 	bl	8003d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a60:	e007      	b.n	8003a72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f998 	bl	8003d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003a70:	e17e      	b.n	8003d70 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a72:	bf00      	nop
    return;
 8003a74:	e17c      	b.n	8003d70 <HAL_UART_IRQHandler+0x590>
 8003a76:	bf00      	nop
 8003a78:	04000120 	.word	0x04000120
 8003a7c:	080047ad 	.word	0x080047ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	f040 814c 	bne.w	8003d22 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8145 	beq.w	8003d22 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 813e 	beq.w	8003d22 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2210      	movs	r2, #16
 8003aac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab8:	2b40      	cmp	r3, #64	@ 0x40
 8003aba:	f040 80b6 	bne.w	8003c2a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003aca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 8150 	beq.w	8003d74 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	f080 8148 	bcs.w	8003d74 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af8:	f000 8086 	beq.w	8003c08 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b2a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1da      	bne.n	8003afc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b50:	e853 3f00 	ldrex	r3, [r3]
 8003b54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e1      	bne.n	8003b46 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3308      	adds	r3, #8
 8003b88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3308      	adds	r3, #8
 8003ba2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ba6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003bac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003bb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e3      	bne.n	8003b82 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bd8:	f023 0310 	bic.w	r3, r3, #16
 8003bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e4      	bne.n	8003bc8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fd fea8 	bl	8001958 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	4619      	mov	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f8c2 	bl	8003dac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c28:	e0a4      	b.n	8003d74 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8096 	beq.w	8003d78 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003c4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8091 	beq.w	8003d78 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e4      	bne.n	8003c56 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3308      	adds	r3, #8
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	623b      	str	r3, [r7, #32]
   return(result);
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3308      	adds	r3, #8
 8003cac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003cb0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e3      	bne.n	8003c8c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f023 0310 	bic.w	r3, r3, #16
 8003cec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	69b9      	ldr	r1, [r7, #24]
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	617b      	str	r3, [r7, #20]
   return(result);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e4      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2202      	movs	r2, #2
 8003d12:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d18:	4619      	mov	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f846 	bl	8003dac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d20:	e02a      	b.n	8003d78 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00e      	beq.n	8003d4c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01c      	beq.n	8003d7c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	4798      	blx	r3
    }
    return;
 8003d4a:	e017      	b.n	8003d7c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d012      	beq.n	8003d7e <HAL_UART_IRQHandler+0x59e>
 8003d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00c      	beq.n	8003d7e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fd37 	bl	80047d8 <UART_EndTransmit_IT>
    return;
 8003d6a:	e008      	b.n	8003d7e <HAL_UART_IRQHandler+0x59e>
      return;
 8003d6c:	bf00      	nop
 8003d6e:	e006      	b.n	8003d7e <HAL_UART_IRQHandler+0x59e>
    return;
 8003d70:	bf00      	nop
 8003d72:	e004      	b.n	8003d7e <HAL_UART_IRQHandler+0x59e>
      return;
 8003d74:	bf00      	nop
 8003d76:	e002      	b.n	8003d7e <HAL_UART_IRQHandler+0x59e>
      return;
 8003d78:	bf00      	nop
 8003d7a:	e000      	b.n	8003d7e <HAL_UART_IRQHandler+0x59e>
    return;
 8003d7c:	bf00      	nop
  }

}
 8003d7e:	37e8      	adds	r7, #232	@ 0xe8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4ba6      	ldr	r3, [pc, #664]	@ (8004088 <UART_SetConfig+0x2c4>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	6979      	ldr	r1, [r7, #20]
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a94      	ldr	r2, [pc, #592]	@ (800408c <UART_SetConfig+0x2c8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d120      	bne.n	8003e82 <UART_SetConfig+0xbe>
 8003e40:	4b93      	ldr	r3, [pc, #588]	@ (8004090 <UART_SetConfig+0x2cc>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d816      	bhi.n	8003e7c <UART_SetConfig+0xb8>
 8003e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e54 <UART_SetConfig+0x90>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003e71 	.word	0x08003e71
 8003e5c:	08003e6b 	.word	0x08003e6b
 8003e60:	08003e77 	.word	0x08003e77
 8003e64:	2301      	movs	r3, #1
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e150      	b.n	800410c <UART_SetConfig+0x348>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e14d      	b.n	800410c <UART_SetConfig+0x348>
 8003e70:	2304      	movs	r3, #4
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e14a      	b.n	800410c <UART_SetConfig+0x348>
 8003e76:	2308      	movs	r3, #8
 8003e78:	77fb      	strb	r3, [r7, #31]
 8003e7a:	e147      	b.n	800410c <UART_SetConfig+0x348>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	77fb      	strb	r3, [r7, #31]
 8003e80:	e144      	b.n	800410c <UART_SetConfig+0x348>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a83      	ldr	r2, [pc, #524]	@ (8004094 <UART_SetConfig+0x2d0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d132      	bne.n	8003ef2 <UART_SetConfig+0x12e>
 8003e8c:	4b80      	ldr	r3, [pc, #512]	@ (8004090 <UART_SetConfig+0x2cc>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b0c      	cmp	r3, #12
 8003e98:	d828      	bhi.n	8003eec <UART_SetConfig+0x128>
 8003e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea0 <UART_SetConfig+0xdc>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003ed5 	.word	0x08003ed5
 8003ea4:	08003eed 	.word	0x08003eed
 8003ea8:	08003eed 	.word	0x08003eed
 8003eac:	08003eed 	.word	0x08003eed
 8003eb0:	08003ee1 	.word	0x08003ee1
 8003eb4:	08003eed 	.word	0x08003eed
 8003eb8:	08003eed 	.word	0x08003eed
 8003ebc:	08003eed 	.word	0x08003eed
 8003ec0:	08003edb 	.word	0x08003edb
 8003ec4:	08003eed 	.word	0x08003eed
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	08003eed 	.word	0x08003eed
 8003ed0:	08003ee7 	.word	0x08003ee7
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e118      	b.n	800410c <UART_SetConfig+0x348>
 8003eda:	2302      	movs	r3, #2
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e115      	b.n	800410c <UART_SetConfig+0x348>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e112      	b.n	800410c <UART_SetConfig+0x348>
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	77fb      	strb	r3, [r7, #31]
 8003eea:	e10f      	b.n	800410c <UART_SetConfig+0x348>
 8003eec:	2310      	movs	r3, #16
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e10c      	b.n	800410c <UART_SetConfig+0x348>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a68      	ldr	r2, [pc, #416]	@ (8004098 <UART_SetConfig+0x2d4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d120      	bne.n	8003f3e <UART_SetConfig+0x17a>
 8003efc:	4b64      	ldr	r3, [pc, #400]	@ (8004090 <UART_SetConfig+0x2cc>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f06:	2b30      	cmp	r3, #48	@ 0x30
 8003f08:	d013      	beq.n	8003f32 <UART_SetConfig+0x16e>
 8003f0a:	2b30      	cmp	r3, #48	@ 0x30
 8003f0c:	d814      	bhi.n	8003f38 <UART_SetConfig+0x174>
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d009      	beq.n	8003f26 <UART_SetConfig+0x162>
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d810      	bhi.n	8003f38 <UART_SetConfig+0x174>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <UART_SetConfig+0x15c>
 8003f1a:	2b10      	cmp	r3, #16
 8003f1c:	d006      	beq.n	8003f2c <UART_SetConfig+0x168>
 8003f1e:	e00b      	b.n	8003f38 <UART_SetConfig+0x174>
 8003f20:	2300      	movs	r3, #0
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e0f2      	b.n	800410c <UART_SetConfig+0x348>
 8003f26:	2302      	movs	r3, #2
 8003f28:	77fb      	strb	r3, [r7, #31]
 8003f2a:	e0ef      	b.n	800410c <UART_SetConfig+0x348>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e0ec      	b.n	800410c <UART_SetConfig+0x348>
 8003f32:	2308      	movs	r3, #8
 8003f34:	77fb      	strb	r3, [r7, #31]
 8003f36:	e0e9      	b.n	800410c <UART_SetConfig+0x348>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e0e6      	b.n	800410c <UART_SetConfig+0x348>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a56      	ldr	r2, [pc, #344]	@ (800409c <UART_SetConfig+0x2d8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d120      	bne.n	8003f8a <UART_SetConfig+0x1c6>
 8003f48:	4b51      	ldr	r3, [pc, #324]	@ (8004090 <UART_SetConfig+0x2cc>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f52:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f54:	d013      	beq.n	8003f7e <UART_SetConfig+0x1ba>
 8003f56:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f58:	d814      	bhi.n	8003f84 <UART_SetConfig+0x1c0>
 8003f5a:	2b80      	cmp	r3, #128	@ 0x80
 8003f5c:	d009      	beq.n	8003f72 <UART_SetConfig+0x1ae>
 8003f5e:	2b80      	cmp	r3, #128	@ 0x80
 8003f60:	d810      	bhi.n	8003f84 <UART_SetConfig+0x1c0>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <UART_SetConfig+0x1a8>
 8003f66:	2b40      	cmp	r3, #64	@ 0x40
 8003f68:	d006      	beq.n	8003f78 <UART_SetConfig+0x1b4>
 8003f6a:	e00b      	b.n	8003f84 <UART_SetConfig+0x1c0>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e0cc      	b.n	800410c <UART_SetConfig+0x348>
 8003f72:	2302      	movs	r3, #2
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e0c9      	b.n	800410c <UART_SetConfig+0x348>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e0c6      	b.n	800410c <UART_SetConfig+0x348>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e0c3      	b.n	800410c <UART_SetConfig+0x348>
 8003f84:	2310      	movs	r3, #16
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e0c0      	b.n	800410c <UART_SetConfig+0x348>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a44      	ldr	r2, [pc, #272]	@ (80040a0 <UART_SetConfig+0x2dc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d125      	bne.n	8003fe0 <UART_SetConfig+0x21c>
 8003f94:	4b3e      	ldr	r3, [pc, #248]	@ (8004090 <UART_SetConfig+0x2cc>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fa2:	d017      	beq.n	8003fd4 <UART_SetConfig+0x210>
 8003fa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fa8:	d817      	bhi.n	8003fda <UART_SetConfig+0x216>
 8003faa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fae:	d00b      	beq.n	8003fc8 <UART_SetConfig+0x204>
 8003fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fb4:	d811      	bhi.n	8003fda <UART_SetConfig+0x216>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <UART_SetConfig+0x1fe>
 8003fba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fbe:	d006      	beq.n	8003fce <UART_SetConfig+0x20a>
 8003fc0:	e00b      	b.n	8003fda <UART_SetConfig+0x216>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e0a1      	b.n	800410c <UART_SetConfig+0x348>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e09e      	b.n	800410c <UART_SetConfig+0x348>
 8003fce:	2304      	movs	r3, #4
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e09b      	b.n	800410c <UART_SetConfig+0x348>
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e098      	b.n	800410c <UART_SetConfig+0x348>
 8003fda:	2310      	movs	r3, #16
 8003fdc:	77fb      	strb	r3, [r7, #31]
 8003fde:	e095      	b.n	800410c <UART_SetConfig+0x348>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80040a4 <UART_SetConfig+0x2e0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d125      	bne.n	8004036 <UART_SetConfig+0x272>
 8003fea:	4b29      	ldr	r3, [pc, #164]	@ (8004090 <UART_SetConfig+0x2cc>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ff4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ff8:	d017      	beq.n	800402a <UART_SetConfig+0x266>
 8003ffa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ffe:	d817      	bhi.n	8004030 <UART_SetConfig+0x26c>
 8004000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004004:	d00b      	beq.n	800401e <UART_SetConfig+0x25a>
 8004006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800400a:	d811      	bhi.n	8004030 <UART_SetConfig+0x26c>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <UART_SetConfig+0x254>
 8004010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004014:	d006      	beq.n	8004024 <UART_SetConfig+0x260>
 8004016:	e00b      	b.n	8004030 <UART_SetConfig+0x26c>
 8004018:	2301      	movs	r3, #1
 800401a:	77fb      	strb	r3, [r7, #31]
 800401c:	e076      	b.n	800410c <UART_SetConfig+0x348>
 800401e:	2302      	movs	r3, #2
 8004020:	77fb      	strb	r3, [r7, #31]
 8004022:	e073      	b.n	800410c <UART_SetConfig+0x348>
 8004024:	2304      	movs	r3, #4
 8004026:	77fb      	strb	r3, [r7, #31]
 8004028:	e070      	b.n	800410c <UART_SetConfig+0x348>
 800402a:	2308      	movs	r3, #8
 800402c:	77fb      	strb	r3, [r7, #31]
 800402e:	e06d      	b.n	800410c <UART_SetConfig+0x348>
 8004030:	2310      	movs	r3, #16
 8004032:	77fb      	strb	r3, [r7, #31]
 8004034:	e06a      	b.n	800410c <UART_SetConfig+0x348>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1b      	ldr	r2, [pc, #108]	@ (80040a8 <UART_SetConfig+0x2e4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d138      	bne.n	80040b2 <UART_SetConfig+0x2ee>
 8004040:	4b13      	ldr	r3, [pc, #76]	@ (8004090 <UART_SetConfig+0x2cc>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800404a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800404e:	d017      	beq.n	8004080 <UART_SetConfig+0x2bc>
 8004050:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004054:	d82a      	bhi.n	80040ac <UART_SetConfig+0x2e8>
 8004056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800405a:	d00b      	beq.n	8004074 <UART_SetConfig+0x2b0>
 800405c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004060:	d824      	bhi.n	80040ac <UART_SetConfig+0x2e8>
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <UART_SetConfig+0x2aa>
 8004066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800406a:	d006      	beq.n	800407a <UART_SetConfig+0x2b6>
 800406c:	e01e      	b.n	80040ac <UART_SetConfig+0x2e8>
 800406e:	2300      	movs	r3, #0
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e04b      	b.n	800410c <UART_SetConfig+0x348>
 8004074:	2302      	movs	r3, #2
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e048      	b.n	800410c <UART_SetConfig+0x348>
 800407a:	2304      	movs	r3, #4
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e045      	b.n	800410c <UART_SetConfig+0x348>
 8004080:	2308      	movs	r3, #8
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e042      	b.n	800410c <UART_SetConfig+0x348>
 8004086:	bf00      	nop
 8004088:	efff69f3 	.word	0xefff69f3
 800408c:	40011000 	.word	0x40011000
 8004090:	40023800 	.word	0x40023800
 8004094:	40004400 	.word	0x40004400
 8004098:	40004800 	.word	0x40004800
 800409c:	40004c00 	.word	0x40004c00
 80040a0:	40005000 	.word	0x40005000
 80040a4:	40011400 	.word	0x40011400
 80040a8:	40007800 	.word	0x40007800
 80040ac:	2310      	movs	r3, #16
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e02c      	b.n	800410c <UART_SetConfig+0x348>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a72      	ldr	r2, [pc, #456]	@ (8004280 <UART_SetConfig+0x4bc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d125      	bne.n	8004108 <UART_SetConfig+0x344>
 80040bc:	4b71      	ldr	r3, [pc, #452]	@ (8004284 <UART_SetConfig+0x4c0>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80040c6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040ca:	d017      	beq.n	80040fc <UART_SetConfig+0x338>
 80040cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040d0:	d817      	bhi.n	8004102 <UART_SetConfig+0x33e>
 80040d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040d6:	d00b      	beq.n	80040f0 <UART_SetConfig+0x32c>
 80040d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040dc:	d811      	bhi.n	8004102 <UART_SetConfig+0x33e>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <UART_SetConfig+0x326>
 80040e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040e6:	d006      	beq.n	80040f6 <UART_SetConfig+0x332>
 80040e8:	e00b      	b.n	8004102 <UART_SetConfig+0x33e>
 80040ea:	2300      	movs	r3, #0
 80040ec:	77fb      	strb	r3, [r7, #31]
 80040ee:	e00d      	b.n	800410c <UART_SetConfig+0x348>
 80040f0:	2302      	movs	r3, #2
 80040f2:	77fb      	strb	r3, [r7, #31]
 80040f4:	e00a      	b.n	800410c <UART_SetConfig+0x348>
 80040f6:	2304      	movs	r3, #4
 80040f8:	77fb      	strb	r3, [r7, #31]
 80040fa:	e007      	b.n	800410c <UART_SetConfig+0x348>
 80040fc:	2308      	movs	r3, #8
 80040fe:	77fb      	strb	r3, [r7, #31]
 8004100:	e004      	b.n	800410c <UART_SetConfig+0x348>
 8004102:	2310      	movs	r3, #16
 8004104:	77fb      	strb	r3, [r7, #31]
 8004106:	e001      	b.n	800410c <UART_SetConfig+0x348>
 8004108:	2310      	movs	r3, #16
 800410a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004114:	d15b      	bne.n	80041ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004116:	7ffb      	ldrb	r3, [r7, #31]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d828      	bhi.n	800416e <UART_SetConfig+0x3aa>
 800411c:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <UART_SetConfig+0x360>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004149 	.word	0x08004149
 8004128:	08004151 	.word	0x08004151
 800412c:	08004159 	.word	0x08004159
 8004130:	0800416f 	.word	0x0800416f
 8004134:	0800415f 	.word	0x0800415f
 8004138:	0800416f 	.word	0x0800416f
 800413c:	0800416f 	.word	0x0800416f
 8004140:	0800416f 	.word	0x0800416f
 8004144:	08004167 	.word	0x08004167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004148:	f7fe fb10 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 800414c:	61b8      	str	r0, [r7, #24]
        break;
 800414e:	e013      	b.n	8004178 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004150:	f7fe fb20 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8004154:	61b8      	str	r0, [r7, #24]
        break;
 8004156:	e00f      	b.n	8004178 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004158:	4b4b      	ldr	r3, [pc, #300]	@ (8004288 <UART_SetConfig+0x4c4>)
 800415a:	61bb      	str	r3, [r7, #24]
        break;
 800415c:	e00c      	b.n	8004178 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415e:	f7fe fa33 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8004162:	61b8      	str	r0, [r7, #24]
        break;
 8004164:	e008      	b.n	8004178 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800416a:	61bb      	str	r3, [r7, #24]
        break;
 800416c:	e004      	b.n	8004178 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	77bb      	strb	r3, [r7, #30]
        break;
 8004176:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d074      	beq.n	8004268 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	005a      	lsls	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	441a      	add	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b0f      	cmp	r3, #15
 8004198:	d916      	bls.n	80041c8 <UART_SetConfig+0x404>
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a0:	d212      	bcs.n	80041c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	f023 030f 	bic.w	r3, r3, #15
 80041aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	085b      	lsrs	r3, r3, #1
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	89fb      	ldrh	r3, [r7, #14]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	89fa      	ldrh	r2, [r7, #14]
 80041c4:	60da      	str	r2, [r3, #12]
 80041c6:	e04f      	b.n	8004268 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	77bb      	strb	r3, [r7, #30]
 80041cc:	e04c      	b.n	8004268 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ce:	7ffb      	ldrb	r3, [r7, #31]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d828      	bhi.n	8004226 <UART_SetConfig+0x462>
 80041d4:	a201      	add	r2, pc, #4	@ (adr r2, 80041dc <UART_SetConfig+0x418>)
 80041d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041da:	bf00      	nop
 80041dc:	08004201 	.word	0x08004201
 80041e0:	08004209 	.word	0x08004209
 80041e4:	08004211 	.word	0x08004211
 80041e8:	08004227 	.word	0x08004227
 80041ec:	08004217 	.word	0x08004217
 80041f0:	08004227 	.word	0x08004227
 80041f4:	08004227 	.word	0x08004227
 80041f8:	08004227 	.word	0x08004227
 80041fc:	0800421f 	.word	0x0800421f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004200:	f7fe fab4 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 8004204:	61b8      	str	r0, [r7, #24]
        break;
 8004206:	e013      	b.n	8004230 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004208:	f7fe fac4 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 800420c:	61b8      	str	r0, [r7, #24]
        break;
 800420e:	e00f      	b.n	8004230 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004210:	4b1d      	ldr	r3, [pc, #116]	@ (8004288 <UART_SetConfig+0x4c4>)
 8004212:	61bb      	str	r3, [r7, #24]
        break;
 8004214:	e00c      	b.n	8004230 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004216:	f7fe f9d7 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 800421a:	61b8      	str	r0, [r7, #24]
        break;
 800421c:	e008      	b.n	8004230 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004222:	61bb      	str	r3, [r7, #24]
        break;
 8004224:	e004      	b.n	8004230 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	77bb      	strb	r3, [r7, #30]
        break;
 800422e:	bf00      	nop
    }

    if (pclk != 0U)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d018      	beq.n	8004268 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	085a      	lsrs	r2, r3, #1
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	441a      	add	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b0f      	cmp	r3, #15
 800424e:	d909      	bls.n	8004264 <UART_SetConfig+0x4a0>
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004256:	d205      	bcs.n	8004264 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60da      	str	r2, [r3, #12]
 8004262:	e001      	b.n	8004268 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004274:	7fbb      	ldrb	r3, [r7, #30]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40007c00 	.word	0x40007c00
 8004284:	40023800 	.word	0x40023800
 8004288:	00f42400 	.word	0x00f42400

0800428c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01a      	beq.n	80043a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800438a:	d10a      	bne.n	80043a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	605a      	str	r2, [r3, #4]
  }
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08c      	sub	sp, #48	@ 0x30
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043e0:	f7fd f9cc 	bl	800177c <HAL_GetTick>
 80043e4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d12e      	bne.n	8004452 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	2200      	movs	r2, #0
 80043fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f83b 	bl	800447e <UART_WaitOnFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d021      	beq.n	8004452 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	60fb      	str	r3, [r7, #12]
   return(result);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004422:	623b      	str	r3, [r7, #32]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	69b9      	ldr	r1, [r7, #24]
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	617b      	str	r3, [r7, #20]
   return(result);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e6      	bne.n	800440e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e011      	b.n	8004476 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3728      	adds	r7, #40	@ 0x28
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448e:	e04f      	b.n	8004530 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004496:	d04b      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004498:	f7fd f970 	bl	800177c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d302      	bcc.n	80044ae <UART_WaitOnFlagUntilTimeout+0x30>
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e04e      	b.n	8004550 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d037      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b80      	cmp	r3, #128	@ 0x80
 80044c4:	d034      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b40      	cmp	r3, #64	@ 0x40
 80044ca:	d031      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d110      	bne.n	80044fc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2208      	movs	r2, #8
 80044e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f8fe 	bl	80046e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2208      	movs	r2, #8
 80044ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e029      	b.n	8004550 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004506:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800450a:	d111      	bne.n	8004530 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004514:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f8e4 	bl	80046e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e00f      	b.n	8004550 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69da      	ldr	r2, [r3, #28]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4013      	ands	r3, r2
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	bf0c      	ite	eq
 8004540:	2301      	moveq	r3, #1
 8004542:	2300      	movne	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	429a      	cmp	r2, r3
 800454c:	d0a0      	beq.n	8004490 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004558:	b480      	push	{r7}
 800455a:	b097      	sub	sp, #92	@ 0x5c
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	88fa      	ldrh	r2, [r7, #6]
 8004578:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458a:	d10e      	bne.n	80045aa <UART_Start_Receive_IT+0x52>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <UART_Start_Receive_IT+0x48>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800459a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800459e:	e02d      	b.n	80045fc <UART_Start_Receive_IT+0xa4>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	22ff      	movs	r2, #255	@ 0xff
 80045a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045a8:	e028      	b.n	80045fc <UART_Start_Receive_IT+0xa4>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10d      	bne.n	80045ce <UART_Start_Receive_IT+0x76>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d104      	bne.n	80045c4 <UART_Start_Receive_IT+0x6c>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	22ff      	movs	r2, #255	@ 0xff
 80045be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045c2:	e01b      	b.n	80045fc <UART_Start_Receive_IT+0xa4>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	227f      	movs	r2, #127	@ 0x7f
 80045c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045cc:	e016      	b.n	80045fc <UART_Start_Receive_IT+0xa4>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045d6:	d10d      	bne.n	80045f4 <UART_Start_Receive_IT+0x9c>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <UART_Start_Receive_IT+0x92>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	227f      	movs	r2, #127	@ 0x7f
 80045e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045e8:	e008      	b.n	80045fc <UART_Start_Receive_IT+0xa4>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	223f      	movs	r2, #63	@ 0x3f
 80045ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045f2:	e003      	b.n	80045fc <UART_Start_Receive_IT+0xa4>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2222      	movs	r2, #34	@ 0x22
 8004608:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3308      	adds	r3, #8
 8004612:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800461c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	657b      	str	r3, [r7, #84]	@ 0x54
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3308      	adds	r3, #8
 800462a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800462c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800462e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800463a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e5      	bne.n	800460c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004648:	d107      	bne.n	800465a <UART_Start_Receive_IT+0x102>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4a21      	ldr	r2, [pc, #132]	@ (80046dc <UART_Start_Receive_IT+0x184>)
 8004656:	669a      	str	r2, [r3, #104]	@ 0x68
 8004658:	e002      	b.n	8004660 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a20      	ldr	r2, [pc, #128]	@ (80046e0 <UART_Start_Receive_IT+0x188>)
 800465e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d019      	beq.n	800469c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800467c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004686:	637b      	str	r3, [r7, #52]	@ 0x34
 8004688:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800468c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e6      	bne.n	8004668 <UART_Start_Receive_IT+0x110>
 800469a:	e018      	b.n	80046ce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	613b      	str	r3, [r7, #16]
   return(result);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f043 0320 	orr.w	r3, r3, #32
 80046b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	69f9      	ldr	r1, [r7, #28]
 80046c0:	6a3a      	ldr	r2, [r7, #32]
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e6      	bne.n	800469c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	375c      	adds	r7, #92	@ 0x5c
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	080049d5 	.word	0x080049d5
 80046e0:	0800482d 	.word	0x0800482d

080046e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b095      	sub	sp, #84	@ 0x54
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f4:	e853 3f00 	ldrex	r3, [r3]
 80046f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004700:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800470a:	643b      	str	r3, [r7, #64]	@ 0x40
 800470c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004710:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e6      	bne.n	80046ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3308      	adds	r3, #8
 8004724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	61fb      	str	r3, [r7, #28]
   return(result);
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3308      	adds	r3, #8
 800473c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800473e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004740:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e5      	bne.n	800471e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004756:	2b01      	cmp	r3, #1
 8004758:	d118      	bne.n	800478c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	60bb      	str	r3, [r7, #8]
   return(result);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f023 0310 	bic.w	r3, r3, #16
 800476e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	6979      	ldr	r1, [r7, #20]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	613b      	str	r3, [r7, #16]
   return(result);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e6      	bne.n	800475a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80047a0:	bf00      	nop
 80047a2:	3754      	adds	r7, #84	@ 0x54
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7ff fae4 	bl	8003d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047f4:	61fb      	str	r3, [r7, #28]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6979      	ldr	r1, [r7, #20]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	613b      	str	r3, [r7, #16]
   return(result);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e6      	bne.n	80047e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fab0 	bl	8003d84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004824:	bf00      	nop
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b09c      	sub	sp, #112	@ 0x70
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800483a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004844:	2b22      	cmp	r3, #34	@ 0x22
 8004846:	f040 80b9 	bne.w	80049bc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004854:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004858:	b2d9      	uxtb	r1, r3
 800485a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800485e:	b2da      	uxtb	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004864:	400a      	ands	r2, r1
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	f040 809c 	bne.w	80049cc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e6      	bne.n	8004894 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3308      	adds	r3, #8
 80048cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3308      	adds	r3, #8
 80048e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80048e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80048e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e5      	bne.n	80048c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d018      	beq.n	800494e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	623b      	str	r3, [r7, #32]
   return(result);
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004930:	663b      	str	r3, [r7, #96]	@ 0x60
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800493a:	633b      	str	r3, [r7, #48]	@ 0x30
 800493c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e6      	bne.n	800491c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004952:	2b01      	cmp	r3, #1
 8004954:	d12e      	bne.n	80049b4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	60fb      	str	r3, [r7, #12]
   return(result);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f023 0310 	bic.w	r3, r3, #16
 8004970:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	69b9      	ldr	r1, [r7, #24]
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	617b      	str	r3, [r7, #20]
   return(result);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e6      	bne.n	800495c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b10      	cmp	r3, #16
 800499a:	d103      	bne.n	80049a4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2210      	movs	r2, #16
 80049a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80049aa:	4619      	mov	r1, r3
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff f9fd 	bl	8003dac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049b2:	e00b      	b.n	80049cc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f003 fb13 	bl	8007fe0 <HAL_UART_RxCpltCallback>
}
 80049ba:	e007      	b.n	80049cc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0208 	orr.w	r2, r2, #8
 80049ca:	619a      	str	r2, [r3, #24]
}
 80049cc:	bf00      	nop
 80049ce:	3770      	adds	r7, #112	@ 0x70
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b09c      	sub	sp, #112	@ 0x70
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80049e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049ec:	2b22      	cmp	r3, #34	@ 0x22
 80049ee:	f040 80b9 	bne.w	8004b64 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a00:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a02:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004a06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a16:	1c9a      	adds	r2, r3, #2
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f040 809c 	bne.w	8004b74 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a50:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a5c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004a60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e6      	bne.n	8004a3c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3308      	adds	r3, #8
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e5      	bne.n	8004a6e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d018      	beq.n	8004af6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ae8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e6      	bne.n	8004ac4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d12e      	bne.n	8004b5c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f023 0310 	bic.w	r3, r3, #16
 8004b18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b22:	61bb      	str	r3, [r7, #24]
 8004b24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	6979      	ldr	r1, [r7, #20]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1e6      	bne.n	8004b04 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d103      	bne.n	8004b4c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2210      	movs	r2, #16
 8004b4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff f929 	bl	8003dac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b5a:	e00b      	b.n	8004b74 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f003 fa3f 	bl	8007fe0 <HAL_UART_RxCpltCallback>
}
 8004b62:	e007      	b.n	8004b74 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0208 	orr.w	r2, r2, #8
 8004b72:	619a      	str	r2, [r3, #24]
}
 8004b74:	bf00      	nop
 8004b76:	3770      	adds	r7, #112	@ 0x70
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004b80:	bf00      	nop
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b92:	f3ef 8305 	mrs	r3, IPSR
 8004b96:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10f      	bne.n	8004bbe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004ba2:	607b      	str	r3, [r7, #4]
  return(result);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d105      	bne.n	8004bb6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004baa:	f3ef 8311 	mrs	r3, BASEPRI
 8004bae:	603b      	str	r3, [r7, #0]
  return(result);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d007      	beq.n	8004bc6 <osKernelInitialize+0x3a>
 8004bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf0 <osKernelInitialize+0x64>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d103      	bne.n	8004bc6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004bbe:	f06f 0305 	mvn.w	r3, #5
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e00c      	b.n	8004be0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <osKernelInitialize+0x64>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d105      	bne.n	8004bda <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004bce:	4b08      	ldr	r3, [pc, #32]	@ (8004bf0 <osKernelInitialize+0x64>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	e002      	b.n	8004be0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004bda:	f04f 33ff 	mov.w	r3, #4294967295
 8004bde:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004be0:	68fb      	ldr	r3, [r7, #12]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	200004d0 	.word	0x200004d0

08004bf4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bfa:	f3ef 8305 	mrs	r3, IPSR
 8004bfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c06:	f3ef 8310 	mrs	r3, PRIMASK
 8004c0a:	607b      	str	r3, [r7, #4]
  return(result);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d105      	bne.n	8004c1e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c12:	f3ef 8311 	mrs	r3, BASEPRI
 8004c16:	603b      	str	r3, [r7, #0]
  return(result);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <osKernelStart+0x3a>
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c5c <osKernelStart+0x68>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d103      	bne.n	8004c2e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004c26:	f06f 0305 	mvn.w	r3, #5
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	e010      	b.n	8004c50 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <osKernelStart+0x68>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d109      	bne.n	8004c4a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c36:	f7ff ffa1 	bl	8004b7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c3a:	4b08      	ldr	r3, [pc, #32]	@ (8004c5c <osKernelStart+0x68>)
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c40:	f001 f94e 	bl	8005ee0 <vTaskStartScheduler>
      stat = osOK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	e002      	b.n	8004c50 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004c50:	68fb      	ldr	r3, [r7, #12]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	200004d0 	.word	0x200004d0

08004c60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b090      	sub	sp, #64	@ 0x40
 8004c64:	af04      	add	r7, sp, #16
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c70:	f3ef 8305 	mrs	r3, IPSR
 8004c74:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c76:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f040 808f 	bne.w	8004d9c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c82:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d105      	bne.n	8004c96 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c8e:	617b      	str	r3, [r7, #20]
  return(result);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <osThreadNew+0x3e>
 8004c96:	4b44      	ldr	r3, [pc, #272]	@ (8004da8 <osThreadNew+0x148>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d07e      	beq.n	8004d9c <osThreadNew+0x13c>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d07b      	beq.n	8004d9c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004ca4:	2380      	movs	r3, #128	@ 0x80
 8004ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004ca8:	2318      	movs	r3, #24
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d045      	beq.n	8004d48 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <osThreadNew+0x6a>
        name = attr->name;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d008      	beq.n	8004cf0 <osThreadNew+0x90>
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	2b38      	cmp	r3, #56	@ 0x38
 8004ce2:	d805      	bhi.n	8004cf0 <osThreadNew+0x90>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <osThreadNew+0x94>
        return (NULL);
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e054      	b.n	8004d9e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	089b      	lsrs	r3, r3, #2
 8004d02:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00e      	beq.n	8004d2a <osThreadNew+0xca>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	2bab      	cmp	r3, #171	@ 0xab
 8004d12:	d90a      	bls.n	8004d2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d006      	beq.n	8004d2a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <osThreadNew+0xca>
        mem = 1;
 8004d24:	2301      	movs	r3, #1
 8004d26:	623b      	str	r3, [r7, #32]
 8004d28:	e010      	b.n	8004d4c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10c      	bne.n	8004d4c <osThreadNew+0xec>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d108      	bne.n	8004d4c <osThreadNew+0xec>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <osThreadNew+0xec>
          mem = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	623b      	str	r3, [r7, #32]
 8004d46:	e001      	b.n	8004d4c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d110      	bne.n	8004d74 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d5a:	9202      	str	r2, [sp, #8]
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fe4f 	bl	8005a0c <xTaskCreateStatic>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	e013      	b.n	8004d9c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d110      	bne.n	8004d9c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	f107 0310 	add.w	r3, r7, #16
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fea3 	bl	8005ad8 <xTaskCreate>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d001      	beq.n	8004d9c <osThreadNew+0x13c>
          hTask = NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d9c:	693b      	ldr	r3, [r7, #16]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3730      	adds	r7, #48	@ 0x30
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	200004d0 	.word	0x200004d0

08004dac <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db4:	f3ef 8305 	mrs	r3, IPSR
 8004db8:	613b      	str	r3, [r7, #16]
  return(result);
 8004dba:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10f      	bne.n	8004de0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d105      	bne.n	8004dd8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8004dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d007      	beq.n	8004de8 <osDelay+0x3c>
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004e04 <osDelay+0x58>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d103      	bne.n	8004de8 <osDelay+0x3c>
    stat = osErrorISR;
 8004de0:	f06f 0305 	mvn.w	r3, #5
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	e007      	b.n	8004df8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 ffd2 	bl	8005d9c <vTaskDelay>
    }
  }

  return (stat);
 8004df8:	697b      	ldr	r3, [r7, #20]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	200004d0 	.word	0x200004d0

08004e08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4a07      	ldr	r2, [pc, #28]	@ (8004e34 <vApplicationGetIdleTaskMemory+0x2c>)
 8004e18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4a06      	ldr	r2, [pc, #24]	@ (8004e38 <vApplicationGetIdleTaskMemory+0x30>)
 8004e1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2280      	movs	r2, #128	@ 0x80
 8004e24:	601a      	str	r2, [r3, #0]
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	200004d4 	.word	0x200004d4
 8004e38:	20000580 	.word	0x20000580

08004e3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a07      	ldr	r2, [pc, #28]	@ (8004e68 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4a06      	ldr	r2, [pc, #24]	@ (8004e6c <vApplicationGetTimerTaskMemory+0x30>)
 8004e52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e5a:	601a      	str	r2, [r3, #0]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	20000780 	.word	0x20000780
 8004e6c:	2000082c 	.word	0x2000082c

08004e70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f103 0208 	add.w	r2, r3, #8
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f04f 32ff 	mov.w	r2, #4294967295
 8004e88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f103 0208 	add.w	r2, r3, #8
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f103 0208 	add.w	r2, r3, #8
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	601a      	str	r2, [r3, #0]
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f12:	b480      	push	{r7}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d103      	bne.n	8004f32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e00c      	b.n	8004f4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3308      	adds	r3, #8
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e002      	b.n	8004f40 <vListInsert+0x2e>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d2f6      	bcs.n	8004f3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	601a      	str	r2, [r3, #0]
}
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6892      	ldr	r2, [r2, #8]
 8004f9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6852      	ldr	r2, [r2, #4]
 8004fa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d103      	bne.n	8004fb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	1e5a      	subs	r2, r3, #1
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10d      	bne.n	8005008 <xQueueGenericReset+0x30>
	__asm volatile
 8004fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff0:	b672      	cpsid	i
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	b662      	cpsie	i
 8005000:	60bb      	str	r3, [r7, #8]
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	e7fd      	b.n	8005004 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005008:	f002 fc88 	bl	800791c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005014:	68f9      	ldr	r1, [r7, #12]
 8005016:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	441a      	add	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005038:	3b01      	subs	r3, #1
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800503e:	fb01 f303 	mul.w	r3, r1, r3
 8005042:	441a      	add	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	22ff      	movs	r2, #255	@ 0xff
 800504c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	22ff      	movs	r2, #255	@ 0xff
 8005054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d114      	bne.n	8005088 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01a      	beq.n	800509c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3310      	adds	r3, #16
 800506a:	4618      	mov	r0, r3
 800506c:	f001 fab8 	bl	80065e0 <xTaskRemoveFromEventList>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d012      	beq.n	800509c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005076:	4b0d      	ldr	r3, [pc, #52]	@ (80050ac <xQueueGenericReset+0xd4>)
 8005078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	e009      	b.n	800509c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3310      	adds	r3, #16
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff feef 	bl	8004e70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3324      	adds	r3, #36	@ 0x24
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff feea 	bl	8004e70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800509c:	f002 fc74 	bl	8007988 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050a0:	2301      	movs	r3, #1
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	e000ed04 	.word	0xe000ed04

080050b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08e      	sub	sp, #56	@ 0x38
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10d      	bne.n	80050e0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c8:	b672      	cpsid	i
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	b662      	cpsie	i
 80050d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	e7fd      	b.n	80050dc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10d      	bne.n	8005102 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ea:	b672      	cpsid	i
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	b662      	cpsie	i
 80050fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	e7fd      	b.n	80050fe <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <xQueueGenericCreateStatic+0x5e>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <xQueueGenericCreateStatic+0x62>
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <xQueueGenericCreateStatic+0x64>
 8005112:	2300      	movs	r3, #0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10d      	bne.n	8005134 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511c:	b672      	cpsid	i
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	b662      	cpsie	i
 800512c:	623b      	str	r3, [r7, #32]
}
 800512e:	bf00      	nop
 8005130:	bf00      	nop
 8005132:	e7fd      	b.n	8005130 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d102      	bne.n	8005140 <xQueueGenericCreateStatic+0x90>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <xQueueGenericCreateStatic+0x94>
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <xQueueGenericCreateStatic+0x96>
 8005144:	2300      	movs	r3, #0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10d      	bne.n	8005166 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514e:	b672      	cpsid	i
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	b662      	cpsie	i
 800515e:	61fb      	str	r3, [r7, #28]
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	e7fd      	b.n	8005162 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005166:	2350      	movs	r3, #80	@ 0x50
 8005168:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b50      	cmp	r3, #80	@ 0x50
 800516e:	d00d      	beq.n	800518c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005174:	b672      	cpsid	i
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	b662      	cpsie	i
 8005184:	61bb      	str	r3, [r7, #24]
}
 8005186:	bf00      	nop
 8005188:	bf00      	nop
 800518a:	e7fd      	b.n	8005188 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800518c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00d      	beq.n	80051b4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80051a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	4613      	mov	r3, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 f805 	bl	80051be <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3730      	adds	r7, #48	@ 0x30
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	607a      	str	r2, [r7, #4]
 80051ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	e002      	b.n	80051e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051ec:	2101      	movs	r1, #1
 80051ee:	69b8      	ldr	r0, [r7, #24]
 80051f0:	f7ff fef2 	bl	8004fd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	78fa      	ldrb	r2, [r7, #3]
 80051f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051fc:	bf00      	nop
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08e      	sub	sp, #56	@ 0x38
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005212:	2300      	movs	r3, #0
 8005214:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10d      	bne.n	800523c <xQueueGenericSend+0x38>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	b672      	cpsid	i
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	b662      	cpsie	i
 8005234:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005236:	bf00      	nop
 8005238:	bf00      	nop
 800523a:	e7fd      	b.n	8005238 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <xQueueGenericSend+0x46>
 8005242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <xQueueGenericSend+0x4a>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <xQueueGenericSend+0x4c>
 800524e:	2300      	movs	r3, #0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10d      	bne.n	8005270 <xQueueGenericSend+0x6c>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005258:	b672      	cpsid	i
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	b662      	cpsie	i
 8005268:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800526a:	bf00      	nop
 800526c:	bf00      	nop
 800526e:	e7fd      	b.n	800526c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d103      	bne.n	800527e <xQueueGenericSend+0x7a>
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <xQueueGenericSend+0x7e>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <xQueueGenericSend+0x80>
 8005282:	2300      	movs	r3, #0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10d      	bne.n	80052a4 <xQueueGenericSend+0xa0>
	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528c:	b672      	cpsid	i
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	b662      	cpsie	i
 800529c:	623b      	str	r3, [r7, #32]
}
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
 80052a2:	e7fd      	b.n	80052a0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052a4:	f001 fc4e 	bl	8006b44 <xTaskGetSchedulerState>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d102      	bne.n	80052b4 <xQueueGenericSend+0xb0>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <xQueueGenericSend+0xb4>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <xQueueGenericSend+0xb6>
 80052b8:	2300      	movs	r3, #0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10d      	bne.n	80052da <xQueueGenericSend+0xd6>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c2:	b672      	cpsid	i
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	b662      	cpsie	i
 80052d2:	61fb      	str	r3, [r7, #28]
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	e7fd      	b.n	80052d6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052da:	f002 fb1f 	bl	800791c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <xQueueGenericSend+0xec>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d129      	bne.n	8005344 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052f6:	f000 fa1b 	bl	8005730 <prvCopyDataToQueue>
 80052fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005300:	2b00      	cmp	r3, #0
 8005302:	d010      	beq.n	8005326 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005306:	3324      	adds	r3, #36	@ 0x24
 8005308:	4618      	mov	r0, r3
 800530a:	f001 f969 	bl	80065e0 <xTaskRemoveFromEventList>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d013      	beq.n	800533c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005314:	4b3f      	ldr	r3, [pc, #252]	@ (8005414 <xQueueGenericSend+0x210>)
 8005316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	e00a      	b.n	800533c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d007      	beq.n	800533c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800532c:	4b39      	ldr	r3, [pc, #228]	@ (8005414 <xQueueGenericSend+0x210>)
 800532e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800533c:	f002 fb24 	bl	8007988 <vPortExitCritical>
				return pdPASS;
 8005340:	2301      	movs	r3, #1
 8005342:	e063      	b.n	800540c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d103      	bne.n	8005352 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800534a:	f002 fb1d 	bl	8007988 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800534e:	2300      	movs	r3, #0
 8005350:	e05c      	b.n	800540c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005354:	2b00      	cmp	r3, #0
 8005356:	d106      	bne.n	8005366 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005358:	f107 0314 	add.w	r3, r7, #20
 800535c:	4618      	mov	r0, r3
 800535e:	f001 f9a5 	bl	80066ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005362:	2301      	movs	r3, #1
 8005364:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005366:	f002 fb0f 	bl	8007988 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800536a:	f000 fe2f 	bl	8005fcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800536e:	f002 fad5 	bl	800791c <vPortEnterCritical>
 8005372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005374:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005378:	b25b      	sxtb	r3, r3
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	d103      	bne.n	8005388 <xQueueGenericSend+0x184>
 8005380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800538e:	b25b      	sxtb	r3, r3
 8005390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005394:	d103      	bne.n	800539e <xQueueGenericSend+0x19a>
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800539e:	f002 faf3 	bl	8007988 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053a2:	1d3a      	adds	r2, r7, #4
 80053a4:	f107 0314 	add.w	r3, r7, #20
 80053a8:	4611      	mov	r1, r2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f001 f994 	bl	80066d8 <xTaskCheckForTimeOut>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d124      	bne.n	8005400 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053b8:	f000 fab2 	bl	8005920 <prvIsQueueFull>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d018      	beq.n	80053f4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	3310      	adds	r3, #16
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	4611      	mov	r1, r2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f001 f8b2 	bl	8006534 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053d2:	f000 fa3d 	bl	8005850 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053d6:	f000 fe07 	bl	8005fe8 <xTaskResumeAll>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f47f af7c 	bne.w	80052da <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80053e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005414 <xQueueGenericSend+0x210>)
 80053e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	e772      	b.n	80052da <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80053f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053f6:	f000 fa2b 	bl	8005850 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053fa:	f000 fdf5 	bl	8005fe8 <xTaskResumeAll>
 80053fe:	e76c      	b.n	80052da <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005400:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005402:	f000 fa25 	bl	8005850 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005406:	f000 fdef 	bl	8005fe8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800540a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800540c:	4618      	mov	r0, r3
 800540e:	3738      	adds	r7, #56	@ 0x38
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08e      	sub	sp, #56	@ 0x38
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800542a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10d      	bne.n	800544c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005434:	b672      	cpsid	i
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	b662      	cpsie	i
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005446:	bf00      	nop
 8005448:	bf00      	nop
 800544a:	e7fd      	b.n	8005448 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d103      	bne.n	800545a <xQueueGenericSendFromISR+0x42>
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <xQueueGenericSendFromISR+0x46>
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <xQueueGenericSendFromISR+0x48>
 800545e:	2300      	movs	r3, #0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10d      	bne.n	8005480 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005468:	b672      	cpsid	i
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	b662      	cpsie	i
 8005478:	623b      	str	r3, [r7, #32]
}
 800547a:	bf00      	nop
 800547c:	bf00      	nop
 800547e:	e7fd      	b.n	800547c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d103      	bne.n	800548e <xQueueGenericSendFromISR+0x76>
 8005486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <xQueueGenericSendFromISR+0x7a>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <xQueueGenericSendFromISR+0x7c>
 8005492:	2300      	movs	r3, #0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10d      	bne.n	80054b4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549c:	b672      	cpsid	i
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	b662      	cpsie	i
 80054ac:	61fb      	str	r3, [r7, #28]
}
 80054ae:	bf00      	nop
 80054b0:	bf00      	nop
 80054b2:	e7fd      	b.n	80054b0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054b4:	f002 fb1a 	bl	8007aec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054b8:	f3ef 8211 	mrs	r2, BASEPRI
 80054bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c0:	b672      	cpsid	i
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	b662      	cpsie	i
 80054d0:	61ba      	str	r2, [r7, #24]
 80054d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80054d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d302      	bcc.n	80054ea <xQueueGenericSendFromISR+0xd2>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d12c      	bne.n	8005544 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054fa:	f000 f919 	bl	8005730 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d112      	bne.n	800552e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550c:	2b00      	cmp	r3, #0
 800550e:	d016      	beq.n	800553e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005512:	3324      	adds	r3, #36	@ 0x24
 8005514:	4618      	mov	r0, r3
 8005516:	f001 f863 	bl	80065e0 <xTaskRemoveFromEventList>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00e      	beq.n	800553e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e007      	b.n	800553e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800552e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005532:	3301      	adds	r3, #1
 8005534:	b2db      	uxtb	r3, r3
 8005536:	b25a      	sxtb	r2, r3
 8005538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800553e:	2301      	movs	r3, #1
 8005540:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005542:	e001      	b.n	8005548 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005544:	2300      	movs	r3, #0
 8005546:	637b      	str	r3, [r7, #52]	@ 0x34
 8005548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005552:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005556:	4618      	mov	r0, r3
 8005558:	3738      	adds	r7, #56	@ 0x38
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08c      	sub	sp, #48	@ 0x30
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800556c:	2300      	movs	r3, #0
 800556e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10d      	bne.n	8005596 <xQueueReceive+0x36>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557e:	b672      	cpsid	i
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	b662      	cpsie	i
 800558e:	623b      	str	r3, [r7, #32]
}
 8005590:	bf00      	nop
 8005592:	bf00      	nop
 8005594:	e7fd      	b.n	8005592 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d103      	bne.n	80055a4 <xQueueReceive+0x44>
 800559c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <xQueueReceive+0x48>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <xQueueReceive+0x4a>
 80055a8:	2300      	movs	r3, #0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10d      	bne.n	80055ca <xQueueReceive+0x6a>
	__asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b2:	b672      	cpsid	i
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	b662      	cpsie	i
 80055c2:	61fb      	str	r3, [r7, #28]
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop
 80055c8:	e7fd      	b.n	80055c6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055ca:	f001 fabb 	bl	8006b44 <xTaskGetSchedulerState>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d102      	bne.n	80055da <xQueueReceive+0x7a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <xQueueReceive+0x7e>
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <xQueueReceive+0x80>
 80055de:	2300      	movs	r3, #0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10d      	bne.n	8005600 <xQueueReceive+0xa0>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e8:	b672      	cpsid	i
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	b662      	cpsie	i
 80055f8:	61bb      	str	r3, [r7, #24]
}
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
 80055fe:	e7fd      	b.n	80055fc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005600:	f002 f98c 	bl	800791c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01f      	beq.n	8005650 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005614:	f000 f8f6 	bl	8005804 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	1e5a      	subs	r2, r3, #1
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00f      	beq.n	8005648 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562a:	3310      	adds	r3, #16
 800562c:	4618      	mov	r0, r3
 800562e:	f000 ffd7 	bl	80065e0 <xTaskRemoveFromEventList>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005638:	4b3c      	ldr	r3, [pc, #240]	@ (800572c <xQueueReceive+0x1cc>)
 800563a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005648:	f002 f99e 	bl	8007988 <vPortExitCritical>
				return pdPASS;
 800564c:	2301      	movs	r3, #1
 800564e:	e069      	b.n	8005724 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005656:	f002 f997 	bl	8007988 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800565a:	2300      	movs	r3, #0
 800565c:	e062      	b.n	8005724 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800565e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d106      	bne.n	8005672 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005664:	f107 0310 	add.w	r3, r7, #16
 8005668:	4618      	mov	r0, r3
 800566a:	f001 f81f 	bl	80066ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800566e:	2301      	movs	r3, #1
 8005670:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005672:	f002 f989 	bl	8007988 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005676:	f000 fca9 	bl	8005fcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800567a:	f002 f94f 	bl	800791c <vPortEnterCritical>
 800567e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005684:	b25b      	sxtb	r3, r3
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568a:	d103      	bne.n	8005694 <xQueueReceive+0x134>
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005696:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800569a:	b25b      	sxtb	r3, r3
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d103      	bne.n	80056aa <xQueueReceive+0x14a>
 80056a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056aa:	f002 f96d 	bl	8007988 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056ae:	1d3a      	adds	r2, r7, #4
 80056b0:	f107 0310 	add.w	r3, r7, #16
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 f80e 	bl	80066d8 <xTaskCheckForTimeOut>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d123      	bne.n	800570a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056c4:	f000 f916 	bl	80058f4 <prvIsQueueEmpty>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d017      	beq.n	80056fe <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d0:	3324      	adds	r3, #36	@ 0x24
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	4611      	mov	r1, r2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 ff2c 	bl	8006534 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056de:	f000 f8b7 	bl	8005850 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056e2:	f000 fc81 	bl	8005fe8 <xTaskResumeAll>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d189      	bne.n	8005600 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80056ec:	4b0f      	ldr	r3, [pc, #60]	@ (800572c <xQueueReceive+0x1cc>)
 80056ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	e780      	b.n	8005600 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80056fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005700:	f000 f8a6 	bl	8005850 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005704:	f000 fc70 	bl	8005fe8 <xTaskResumeAll>
 8005708:	e77a      	b.n	8005600 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800570a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800570c:	f000 f8a0 	bl	8005850 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005710:	f000 fc6a 	bl	8005fe8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005716:	f000 f8ed 	bl	80058f4 <prvIsQueueEmpty>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	f43f af6f 	beq.w	8005600 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005722:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005724:	4618      	mov	r0, r3
 8005726:	3730      	adds	r7, #48	@ 0x30
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	e000ed04 	.word	0xe000ed04

08005730 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005744:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10d      	bne.n	800576a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d14d      	bne.n	80057f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	4618      	mov	r0, r3
 800575c:	f001 fa10 	bl	8006b80 <xTaskPriorityDisinherit>
 8005760:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	609a      	str	r2, [r3, #8]
 8005768:	e043      	b.n	80057f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d119      	bne.n	80057a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6858      	ldr	r0, [r3, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	461a      	mov	r2, r3
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	f003 f9c1 	bl	8008b02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005788:	441a      	add	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	429a      	cmp	r2, r3
 8005798:	d32b      	bcc.n	80057f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	e026      	b.n	80057f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	68d8      	ldr	r0, [r3, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ac:	461a      	mov	r2, r3
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	f003 f9a7 	bl	8008b02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	425b      	negs	r3, r3
 80057be:	441a      	add	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d207      	bcs.n	80057e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d8:	425b      	negs	r3, r3
 80057da:	441a      	add	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d105      	bne.n	80057f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80057fa:	697b      	ldr	r3, [r7, #20]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d018      	beq.n	8005848 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581e:	441a      	add	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	d303      	bcc.n	8005838 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68d9      	ldr	r1, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005840:	461a      	mov	r2, r3
 8005842:	6838      	ldr	r0, [r7, #0]
 8005844:	f003 f95d 	bl	8008b02 <memcpy>
	}
}
 8005848:	bf00      	nop
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005858:	f002 f860 	bl	800791c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005862:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005864:	e011      	b.n	800588a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	2b00      	cmp	r3, #0
 800586c:	d012      	beq.n	8005894 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3324      	adds	r3, #36	@ 0x24
 8005872:	4618      	mov	r0, r3
 8005874:	f000 feb4 	bl	80065e0 <xTaskRemoveFromEventList>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800587e:	f000 ff93 	bl	80067a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	3b01      	subs	r3, #1
 8005886:	b2db      	uxtb	r3, r3
 8005888:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800588a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800588e:	2b00      	cmp	r3, #0
 8005890:	dce9      	bgt.n	8005866 <prvUnlockQueue+0x16>
 8005892:	e000      	b.n	8005896 <prvUnlockQueue+0x46>
					break;
 8005894:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	22ff      	movs	r2, #255	@ 0xff
 800589a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800589e:	f002 f873 	bl	8007988 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058a2:	f002 f83b 	bl	800791c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058ae:	e011      	b.n	80058d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d012      	beq.n	80058de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3310      	adds	r3, #16
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fe8f 	bl	80065e0 <xTaskRemoveFromEventList>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058c8:	f000 ff6e 	bl	80067a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058cc:	7bbb      	ldrb	r3, [r7, #14]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	dce9      	bgt.n	80058b0 <prvUnlockQueue+0x60>
 80058dc:	e000      	b.n	80058e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80058de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	22ff      	movs	r2, #255	@ 0xff
 80058e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80058e8:	f002 f84e 	bl	8007988 <vPortExitCritical>
}
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058fc:	f002 f80e 	bl	800791c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005908:	2301      	movs	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	e001      	b.n	8005912 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005912:	f002 f839 	bl	8007988 <vPortExitCritical>

	return xReturn;
 8005916:	68fb      	ldr	r3, [r7, #12]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005928:	f001 fff8 	bl	800791c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005934:	429a      	cmp	r2, r3
 8005936:	d102      	bne.n	800593e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005938:	2301      	movs	r3, #1
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e001      	b.n	8005942 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005942:	f002 f821 	bl	8007988 <vPortExitCritical>

	return xReturn;
 8005946:	68fb      	ldr	r3, [r7, #12]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	e014      	b.n	800598a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005960:	4a0f      	ldr	r2, [pc, #60]	@ (80059a0 <vQueueAddToRegistry+0x50>)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10b      	bne.n	8005984 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800596c:	490c      	ldr	r1, [pc, #48]	@ (80059a0 <vQueueAddToRegistry+0x50>)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005976:	4a0a      	ldr	r2, [pc, #40]	@ (80059a0 <vQueueAddToRegistry+0x50>)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4413      	add	r3, r2
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005982:	e006      	b.n	8005992 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	3301      	adds	r3, #1
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b07      	cmp	r3, #7
 800598e:	d9e7      	bls.n	8005960 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005990:	bf00      	nop
 8005992:	bf00      	nop
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	20000c2c 	.word	0x20000c2c

080059a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059b4:	f001 ffb2 	bl	800791c <vPortEnterCritical>
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059be:	b25b      	sxtb	r3, r3
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d103      	bne.n	80059ce <vQueueWaitForMessageRestricted+0x2a>
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059d4:	b25b      	sxtb	r3, r3
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d103      	bne.n	80059e4 <vQueueWaitForMessageRestricted+0x40>
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059e4:	f001 ffd0 	bl	8007988 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d106      	bne.n	80059fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	3324      	adds	r3, #36	@ 0x24
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fdc3 	bl	8006584 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80059fe:	6978      	ldr	r0, [r7, #20]
 8005a00:	f7ff ff26 	bl	8005850 <prvUnlockQueue>
	}
 8005a04:	bf00      	nop
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08e      	sub	sp, #56	@ 0x38
 8005a10:	af04      	add	r7, sp, #16
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10d      	bne.n	8005a3c <xTaskCreateStatic+0x30>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a24:	b672      	cpsid	i
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	b662      	cpsie	i
 8005a34:	623b      	str	r3, [r7, #32]
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	e7fd      	b.n	8005a38 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10d      	bne.n	8005a5e <xTaskCreateStatic+0x52>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	b672      	cpsid	i
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	b662      	cpsie	i
 8005a56:	61fb      	str	r3, [r7, #28]
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	e7fd      	b.n	8005a5a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a5e:	23ac      	movs	r3, #172	@ 0xac
 8005a60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2bac      	cmp	r3, #172	@ 0xac
 8005a66:	d00d      	beq.n	8005a84 <xTaskCreateStatic+0x78>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6c:	b672      	cpsid	i
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	b662      	cpsie	i
 8005a7c:	61bb      	str	r3, [r7, #24]
}
 8005a7e:	bf00      	nop
 8005a80:	bf00      	nop
 8005a82:	e7fd      	b.n	8005a80 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d01e      	beq.n	8005aca <xTaskCreateStatic+0xbe>
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d01b      	beq.n	8005aca <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a9a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9303      	str	r3, [sp, #12]
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aaa:	9302      	str	r3, [sp, #8]
 8005aac:	f107 0314 	add.w	r3, r7, #20
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f851 	bl	8005b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ac2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ac4:	f000 f8fa 	bl	8005cbc <prvAddNewTaskToReadyList>
 8005ac8:	e001      	b.n	8005ace <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ace:	697b      	ldr	r3, [r7, #20]
	}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3728      	adds	r7, #40	@ 0x28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08c      	sub	sp, #48	@ 0x30
 8005adc:	af04      	add	r7, sp, #16
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ae8:	88fb      	ldrh	r3, [r7, #6]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f002 f843 	bl	8007b78 <pvPortMalloc>
 8005af2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00e      	beq.n	8005b18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005afa:	20ac      	movs	r0, #172	@ 0xac
 8005afc:	f002 f83c 	bl	8007b78 <pvPortMalloc>
 8005b00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b0e:	e005      	b.n	8005b1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b10:	6978      	ldr	r0, [r7, #20]
 8005b12:	f002 f8ff 	bl	8007d14 <vPortFree>
 8005b16:	e001      	b.n	8005b1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d017      	beq.n	8005b52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b2a:	88fa      	ldrh	r2, [r7, #6]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9303      	str	r3, [sp, #12]
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	9302      	str	r3, [sp, #8]
 8005b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f80f 	bl	8005b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b46:	69f8      	ldr	r0, [r7, #28]
 8005b48:	f000 f8b8 	bl	8005cbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	61bb      	str	r3, [r7, #24]
 8005b50:	e002      	b.n	8005b58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295
 8005b56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b58:	69bb      	ldr	r3, [r7, #24]
	}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b74:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	21a5      	movs	r1, #165	@ 0xa5
 8005b7e:	f002 fee7 	bl	8008950 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005b8c:	440b      	add	r3, r1
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	f023 0307 	bic.w	r3, r3, #7
 8005b9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00d      	beq.n	8005bc2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005baa:	b672      	cpsid	i
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	b662      	cpsie	i
 8005bba:	617b      	str	r3, [r7, #20]
}
 8005bbc:	bf00      	nop
 8005bbe:	bf00      	nop
 8005bc0:	e7fd      	b.n	8005bbe <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01f      	beq.n	8005c08 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]
 8005bcc:	e012      	b.n	8005bf4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	7819      	ldrb	r1, [r3, #0]
 8005bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	3334      	adds	r3, #52	@ 0x34
 8005bde:	460a      	mov	r2, r1
 8005be0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	4413      	add	r3, r2
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d006      	beq.n	8005bfc <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d9e9      	bls.n	8005bce <prvInitialiseNewTask+0x6a>
 8005bfa:	e000      	b.n	8005bfe <prvInitialiseNewTask+0x9a>
			{
				break;
 8005bfc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c06:	e003      	b.n	8005c10 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c12:	2b37      	cmp	r3, #55	@ 0x37
 8005c14:	d901      	bls.n	8005c1a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c16:	2337      	movs	r3, #55	@ 0x37
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c24:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c28:	2200      	movs	r2, #0
 8005c2a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff f93d 	bl	8004eb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	3318      	adds	r3, #24
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff f938 	bl	8004eb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c54:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c58:	2200      	movs	r2, #0
 8005c5a:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6e:	3358      	adds	r3, #88	@ 0x58
 8005c70:	224c      	movs	r2, #76	@ 0x4c
 8005c72:	2100      	movs	r1, #0
 8005c74:	4618      	mov	r0, r3
 8005c76:	f002 fe6b 	bl	8008950 <memset>
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8005cb0 <prvInitialiseNewTask+0x14c>)
 8005c7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c82:	4a0c      	ldr	r2, [pc, #48]	@ (8005cb4 <prvInitialiseNewTask+0x150>)
 8005c84:	661a      	str	r2, [r3, #96]	@ 0x60
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	4a0b      	ldr	r2, [pc, #44]	@ (8005cb8 <prvInitialiseNewTask+0x154>)
 8005c8a:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	69b8      	ldr	r0, [r7, #24]
 8005c92:	f001 fd37 	bl	8007704 <pxPortInitialiseStack>
 8005c96:	4602      	mov	r2, r0
 8005c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ca6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ca8:	bf00      	nop
 8005caa:	3720      	adds	r7, #32
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20004ecc 	.word	0x20004ecc
 8005cb4:	20004f34 	.word	0x20004f34
 8005cb8:	20004f9c 	.word	0x20004f9c

08005cbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005cc4:	f001 fe2a 	bl	800791c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8005d80 <prvAddNewTaskToReadyList+0xc4>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	4a2c      	ldr	r2, [pc, #176]	@ (8005d80 <prvAddNewTaskToReadyList+0xc4>)
 8005cd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8005d84 <prvAddNewTaskToReadyList+0xc8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cda:	4a2a      	ldr	r2, [pc, #168]	@ (8005d84 <prvAddNewTaskToReadyList+0xc8>)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ce0:	4b27      	ldr	r3, [pc, #156]	@ (8005d80 <prvAddNewTaskToReadyList+0xc4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d110      	bne.n	8005d0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ce8:	f000 fd82 	bl	80067f0 <prvInitialiseTaskLists>
 8005cec:	e00d      	b.n	8005d0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cee:	4b26      	ldr	r3, [pc, #152]	@ (8005d88 <prvAddNewTaskToReadyList+0xcc>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d109      	bne.n	8005d0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cf6:	4b23      	ldr	r3, [pc, #140]	@ (8005d84 <prvAddNewTaskToReadyList+0xc8>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d802      	bhi.n	8005d0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d04:	4a1f      	ldr	r2, [pc, #124]	@ (8005d84 <prvAddNewTaskToReadyList+0xc8>)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d0a:	4b20      	ldr	r3, [pc, #128]	@ (8005d8c <prvAddNewTaskToReadyList+0xd0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	4a1e      	ldr	r2, [pc, #120]	@ (8005d8c <prvAddNewTaskToReadyList+0xd0>)
 8005d12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d14:	4b1d      	ldr	r3, [pc, #116]	@ (8005d8c <prvAddNewTaskToReadyList+0xd0>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d20:	4b1b      	ldr	r3, [pc, #108]	@ (8005d90 <prvAddNewTaskToReadyList+0xd4>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d903      	bls.n	8005d30 <prvAddNewTaskToReadyList+0x74>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2c:	4a18      	ldr	r2, [pc, #96]	@ (8005d90 <prvAddNewTaskToReadyList+0xd4>)
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4a15      	ldr	r2, [pc, #84]	@ (8005d94 <prvAddNewTaskToReadyList+0xd8>)
 8005d3e:	441a      	add	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3304      	adds	r3, #4
 8005d44:	4619      	mov	r1, r3
 8005d46:	4610      	mov	r0, r2
 8005d48:	f7ff f8bf 	bl	8004eca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d4c:	f001 fe1c 	bl	8007988 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d50:	4b0d      	ldr	r3, [pc, #52]	@ (8005d88 <prvAddNewTaskToReadyList+0xcc>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00e      	beq.n	8005d76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d58:	4b0a      	ldr	r3, [pc, #40]	@ (8005d84 <prvAddNewTaskToReadyList+0xc8>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d207      	bcs.n	8005d76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d66:	4b0c      	ldr	r3, [pc, #48]	@ (8005d98 <prvAddNewTaskToReadyList+0xdc>)
 8005d68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20001140 	.word	0x20001140
 8005d84:	20000c6c 	.word	0x20000c6c
 8005d88:	2000114c 	.word	0x2000114c
 8005d8c:	2000115c 	.word	0x2000115c
 8005d90:	20001148 	.word	0x20001148
 8005d94:	20000c70 	.word	0x20000c70
 8005d98:	e000ed04 	.word	0xe000ed04

08005d9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01a      	beq.n	8005de4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dae:	4b15      	ldr	r3, [pc, #84]	@ (8005e04 <vTaskDelay+0x68>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00d      	beq.n	8005dd2 <vTaskDelay+0x36>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dba:	b672      	cpsid	i
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	b662      	cpsie	i
 8005dca:	60bb      	str	r3, [r7, #8]
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	e7fd      	b.n	8005dce <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005dd2:	f000 f8fb 	bl	8005fcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f001 f8d7 	bl	8006f8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005dde:	f000 f903 	bl	8005fe8 <xTaskResumeAll>
 8005de2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d107      	bne.n	8005dfa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005dea:	4b07      	ldr	r3, [pc, #28]	@ (8005e08 <vTaskDelay+0x6c>)
 8005dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dfa:	bf00      	nop
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20001168 	.word	0x20001168
 8005e08:	e000ed04 	.word	0xe000ed04

08005e0c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10d      	bne.n	8005e3a <eTaskGetState+0x2e>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	b672      	cpsid	i
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	b662      	cpsie	i
 8005e32:	60bb      	str	r3, [r7, #8]
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	e7fd      	b.n	8005e36 <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 8005e3a:	4b24      	ldr	r3, [pc, #144]	@ (8005ecc <eTaskGetState+0xc0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d102      	bne.n	8005e4a <eTaskGetState+0x3e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8005e44:	2300      	movs	r3, #0
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e03a      	b.n	8005ec0 <eTaskGetState+0xb4>
		}
		else
		{
			taskENTER_CRITICAL();
 8005e4a:	f001 fd67 	bl	800791c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8005e54:	4b1e      	ldr	r3, [pc, #120]	@ (8005ed0 <eTaskGetState+0xc4>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8005e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ed4 <eTaskGetState+0xc8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8005e60:	f001 fd92 	bl	8007988 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d003      	beq.n	8005e74 <eTaskGetState+0x68>
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d102      	bne.n	8005e7a <eTaskGetState+0x6e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8005e74:	2302      	movs	r3, #2
 8005e76:	77fb      	strb	r3, [r7, #31]
 8005e78:	e022      	b.n	8005ec0 <eTaskGetState+0xb4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	4a16      	ldr	r2, [pc, #88]	@ (8005ed8 <eTaskGetState+0xcc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d112      	bne.n	8005ea8 <eTaskGetState+0x9c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10b      	bne.n	8005ea2 <eTaskGetState+0x96>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d102      	bne.n	8005e9c <eTaskGetState+0x90>
							{
								eReturn = eBlocked;
 8005e96:	2302      	movs	r3, #2
 8005e98:	77fb      	strb	r3, [r7, #31]
 8005e9a:	e011      	b.n	8005ec0 <eTaskGetState+0xb4>
							}
							else
							{
								eReturn = eSuspended;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e00e      	b.n	8005ec0 <eTaskGetState+0xb4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e00b      	b.n	8005ec0 <eTaskGetState+0xb4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8005edc <eTaskGetState+0xd0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d002      	beq.n	8005eb6 <eTaskGetState+0xaa>
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d102      	bne.n	8005ebc <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8005eb6:	2304      	movs	r3, #4
 8005eb8:	77fb      	strb	r3, [r7, #31]
 8005eba:	e001      	b.n	8005ec0 <eTaskGetState+0xb4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8005ec0:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000c6c 	.word	0x20000c6c
 8005ed0:	200010f8 	.word	0x200010f8
 8005ed4:	200010fc 	.word	0x200010fc
 8005ed8:	2000112c 	.word	0x2000112c
 8005edc:	20001114 	.word	0x20001114

08005ee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08a      	sub	sp, #40	@ 0x28
 8005ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005eee:	463a      	mov	r2, r7
 8005ef0:	1d39      	adds	r1, r7, #4
 8005ef2:	f107 0308 	add.w	r3, r7, #8
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe ff86 	bl	8004e08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	9202      	str	r2, [sp, #8]
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	2300      	movs	r3, #0
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	460a      	mov	r2, r1
 8005f0e:	4927      	ldr	r1, [pc, #156]	@ (8005fac <vTaskStartScheduler+0xcc>)
 8005f10:	4827      	ldr	r0, [pc, #156]	@ (8005fb0 <vTaskStartScheduler+0xd0>)
 8005f12:	f7ff fd7b 	bl	8005a0c <xTaskCreateStatic>
 8005f16:	4603      	mov	r3, r0
 8005f18:	4a26      	ldr	r2, [pc, #152]	@ (8005fb4 <vTaskStartScheduler+0xd4>)
 8005f1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f1c:	4b25      	ldr	r3, [pc, #148]	@ (8005fb4 <vTaskStartScheduler+0xd4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f24:	2301      	movs	r3, #1
 8005f26:	617b      	str	r3, [r7, #20]
 8005f28:	e001      	b.n	8005f2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d102      	bne.n	8005f3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f34:	f001 f87e 	bl	8007034 <xTimerCreateTimerTask>
 8005f38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d11f      	bne.n	8005f80 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f44:	b672      	cpsid	i
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	b662      	cpsie	i
 8005f54:	613b      	str	r3, [r7, #16]
}
 8005f56:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f58:	4b17      	ldr	r3, [pc, #92]	@ (8005fb8 <vTaskStartScheduler+0xd8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3358      	adds	r3, #88	@ 0x58
 8005f5e:	4a17      	ldr	r2, [pc, #92]	@ (8005fbc <vTaskStartScheduler+0xdc>)
 8005f60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f62:	4b17      	ldr	r3, [pc, #92]	@ (8005fc0 <vTaskStartScheduler+0xe0>)
 8005f64:	f04f 32ff 	mov.w	r2, #4294967295
 8005f68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f6a:	4b16      	ldr	r3, [pc, #88]	@ (8005fc4 <vTaskStartScheduler+0xe4>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f70:	4b15      	ldr	r3, [pc, #84]	@ (8005fc8 <vTaskStartScheduler+0xe8>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005f76:	f7fb f819 	bl	8000fac <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f7a:	f001 fc51 	bl	8007820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f7e:	e011      	b.n	8005fa4 <vTaskStartScheduler+0xc4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	d10d      	bne.n	8005fa4 <vTaskStartScheduler+0xc4>
	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8c:	b672      	cpsid	i
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	b662      	cpsie	i
 8005f9c:	60fb      	str	r3, [r7, #12]
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	e7fd      	b.n	8005fa0 <vTaskStartScheduler+0xc0>
}
 8005fa4:	bf00      	nop
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	08009b4c 	.word	0x08009b4c
 8005fb0:	080067c1 	.word	0x080067c1
 8005fb4:	20001164 	.word	0x20001164
 8005fb8:	20000c6c 	.word	0x20000c6c
 8005fbc:	20000024 	.word	0x20000024
 8005fc0:	20001160 	.word	0x20001160
 8005fc4:	2000114c 	.word	0x2000114c
 8005fc8:	20001144 	.word	0x20001144

08005fcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005fd0:	4b04      	ldr	r3, [pc, #16]	@ (8005fe4 <vTaskSuspendAll+0x18>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	4a03      	ldr	r2, [pc, #12]	@ (8005fe4 <vTaskSuspendAll+0x18>)
 8005fd8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005fda:	bf00      	nop
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	20001168 	.word	0x20001168

08005fe8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ff6:	4b43      	ldr	r3, [pc, #268]	@ (8006104 <xTaskResumeAll+0x11c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10d      	bne.n	800601a <xTaskResumeAll+0x32>
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	b672      	cpsid	i
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	b662      	cpsie	i
 8006012:	603b      	str	r3, [r7, #0]
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	e7fd      	b.n	8006016 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800601a:	f001 fc7f 	bl	800791c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800601e:	4b39      	ldr	r3, [pc, #228]	@ (8006104 <xTaskResumeAll+0x11c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3b01      	subs	r3, #1
 8006024:	4a37      	ldr	r2, [pc, #220]	@ (8006104 <xTaskResumeAll+0x11c>)
 8006026:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006028:	4b36      	ldr	r3, [pc, #216]	@ (8006104 <xTaskResumeAll+0x11c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d162      	bne.n	80060f6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006030:	4b35      	ldr	r3, [pc, #212]	@ (8006108 <xTaskResumeAll+0x120>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d05e      	beq.n	80060f6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006038:	e02f      	b.n	800609a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800603a:	4b34      	ldr	r3, [pc, #208]	@ (800610c <xTaskResumeAll+0x124>)
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3318      	adds	r3, #24
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe ff9c 	bl	8004f84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3304      	adds	r3, #4
 8006050:	4618      	mov	r0, r3
 8006052:	f7fe ff97 	bl	8004f84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800605a:	4b2d      	ldr	r3, [pc, #180]	@ (8006110 <xTaskResumeAll+0x128>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d903      	bls.n	800606a <xTaskResumeAll+0x82>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006066:	4a2a      	ldr	r2, [pc, #168]	@ (8006110 <xTaskResumeAll+0x128>)
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4a27      	ldr	r2, [pc, #156]	@ (8006114 <xTaskResumeAll+0x12c>)
 8006078:	441a      	add	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3304      	adds	r3, #4
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f7fe ff22 	bl	8004eca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800608a:	4b23      	ldr	r3, [pc, #140]	@ (8006118 <xTaskResumeAll+0x130>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006090:	429a      	cmp	r2, r3
 8006092:	d302      	bcc.n	800609a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006094:	4b21      	ldr	r3, [pc, #132]	@ (800611c <xTaskResumeAll+0x134>)
 8006096:	2201      	movs	r2, #1
 8006098:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800609a:	4b1c      	ldr	r3, [pc, #112]	@ (800610c <xTaskResumeAll+0x124>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1cb      	bne.n	800603a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060a8:	f000 fd1c 	bl	8006ae4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006120 <xTaskResumeAll+0x138>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d010      	beq.n	80060da <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060b8:	f000 f8d6 	bl	8006268 <xTaskIncrementTick>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80060c2:	4b16      	ldr	r3, [pc, #88]	@ (800611c <xTaskResumeAll+0x134>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f1      	bne.n	80060b8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80060d4:	4b12      	ldr	r3, [pc, #72]	@ (8006120 <xTaskResumeAll+0x138>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060da:	4b10      	ldr	r3, [pc, #64]	@ (800611c <xTaskResumeAll+0x134>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d009      	beq.n	80060f6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060e2:	2301      	movs	r3, #1
 80060e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006124 <xTaskResumeAll+0x13c>)
 80060e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	f3bf 8f4f 	dsb	sy
 80060f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060f6:	f001 fc47 	bl	8007988 <vPortExitCritical>

	return xAlreadyYielded;
 80060fa:	68bb      	ldr	r3, [r7, #8]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20001168 	.word	0x20001168
 8006108:	20001140 	.word	0x20001140
 800610c:	20001100 	.word	0x20001100
 8006110:	20001148 	.word	0x20001148
 8006114:	20000c70 	.word	0x20000c70
 8006118:	20000c6c 	.word	0x20000c6c
 800611c:	20001154 	.word	0x20001154
 8006120:	20001150 	.word	0x20001150
 8006124:	e000ed04 	.word	0xe000ed04

08006128 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800612e:	4b05      	ldr	r3, [pc, #20]	@ (8006144 <xTaskGetTickCount+0x1c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006134:	687b      	ldr	r3, [r7, #4]
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20001144 	.word	0x20001144

08006148 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	2338      	movs	r3, #56	@ 0x38
 800615a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800615c:	f7ff ff36 	bl	8005fcc <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8006160:	4b3b      	ldr	r3, [pc, #236]	@ (8006250 <uxTaskGetSystemState+0x108>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	429a      	cmp	r2, r3
 8006168:	d36a      	bcc.n	8006240 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3b01      	subs	r3, #1
 800616e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4613      	mov	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	461a      	mov	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	1898      	adds	r0, r3, r2
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4a32      	ldr	r2, [pc, #200]	@ (8006254 <uxTaskGetSystemState+0x10c>)
 800618c:	4413      	add	r3, r2
 800618e:	2201      	movs	r2, #1
 8006190:	4619      	mov	r1, r3
 8006192:	f000 fc01 	bl	8006998 <prvListTasksWithinSingleList>
 8006196:	4602      	mov	r2, r0
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	4413      	add	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e2      	bne.n	800616a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4613      	mov	r3, r2
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	461a      	mov	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	4a28      	ldr	r2, [pc, #160]	@ (8006258 <uxTaskGetSystemState+0x110>)
 80061b6:	6811      	ldr	r1, [r2, #0]
 80061b8:	2202      	movs	r2, #2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fbec 	bl	8006998 <prvListTasksWithinSingleList>
 80061c0:	4602      	mov	r2, r0
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	4413      	add	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4613      	mov	r3, r2
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	461a      	mov	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	4a20      	ldr	r2, [pc, #128]	@ (800625c <uxTaskGetSystemState+0x114>)
 80061da:	6811      	ldr	r1, [r2, #0]
 80061dc:	2202      	movs	r2, #2
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fbda 	bl	8006998 <prvListTasksWithinSingleList>
 80061e4:	4602      	mov	r2, r0
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	4413      	add	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4613      	mov	r3, r2
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	461a      	mov	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4413      	add	r3, r2
 80061fc:	2204      	movs	r2, #4
 80061fe:	4918      	ldr	r1, [pc, #96]	@ (8006260 <uxTaskGetSystemState+0x118>)
 8006200:	4618      	mov	r0, r3
 8006202:	f000 fbc9 	bl	8006998 <prvListTasksWithinSingleList>
 8006206:	4602      	mov	r2, r0
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	4413      	add	r3, r2
 800620c:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4613      	mov	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	461a      	mov	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4413      	add	r3, r2
 800621e:	2203      	movs	r2, #3
 8006220:	4910      	ldr	r1, [pc, #64]	@ (8006264 <uxTaskGetSystemState+0x11c>)
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fbb8 	bl	8006998 <prvListTasksWithinSingleList>
 8006228:	4602      	mov	r2, r0
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	4413      	add	r3, r2
 800622e:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d004      	beq.n	8006240 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006236:	f7fa fec7 	bl	8000fc8 <getRunTimeCounterValue>
 800623a:	4602      	mov	r2, r0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8006240:	f7ff fed2 	bl	8005fe8 <xTaskResumeAll>

		return uxTask;
 8006244:	697b      	ldr	r3, [r7, #20]
	}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20001140 	.word	0x20001140
 8006254:	20000c70 	.word	0x20000c70
 8006258:	200010f8 	.word	0x200010f8
 800625c:	200010fc 	.word	0x200010fc
 8006260:	20001114 	.word	0x20001114
 8006264:	2000112c 	.word	0x2000112c

08006268 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006272:	4b50      	ldr	r3, [pc, #320]	@ (80063b4 <xTaskIncrementTick+0x14c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	f040 808c 	bne.w	8006394 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800627c:	4b4e      	ldr	r3, [pc, #312]	@ (80063b8 <xTaskIncrementTick+0x150>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006284:	4a4c      	ldr	r2, [pc, #304]	@ (80063b8 <xTaskIncrementTick+0x150>)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d123      	bne.n	80062d8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006290:	4b4a      	ldr	r3, [pc, #296]	@ (80063bc <xTaskIncrementTick+0x154>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00d      	beq.n	80062b6 <xTaskIncrementTick+0x4e>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629e:	b672      	cpsid	i
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	b662      	cpsie	i
 80062ae:	603b      	str	r3, [r7, #0]
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	e7fd      	b.n	80062b2 <xTaskIncrementTick+0x4a>
 80062b6:	4b41      	ldr	r3, [pc, #260]	@ (80063bc <xTaskIncrementTick+0x154>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	4b40      	ldr	r3, [pc, #256]	@ (80063c0 <xTaskIncrementTick+0x158>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a3e      	ldr	r2, [pc, #248]	@ (80063bc <xTaskIncrementTick+0x154>)
 80062c2:	6013      	str	r3, [r2, #0]
 80062c4:	4a3e      	ldr	r2, [pc, #248]	@ (80063c0 <xTaskIncrementTick+0x158>)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	4b3e      	ldr	r3, [pc, #248]	@ (80063c4 <xTaskIncrementTick+0x15c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	3301      	adds	r3, #1
 80062d0:	4a3c      	ldr	r2, [pc, #240]	@ (80063c4 <xTaskIncrementTick+0x15c>)
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	f000 fc06 	bl	8006ae4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062d8:	4b3b      	ldr	r3, [pc, #236]	@ (80063c8 <xTaskIncrementTick+0x160>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d349      	bcc.n	8006376 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062e2:	4b36      	ldr	r3, [pc, #216]	@ (80063bc <xTaskIncrementTick+0x154>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ec:	4b36      	ldr	r3, [pc, #216]	@ (80063c8 <xTaskIncrementTick+0x160>)
 80062ee:	f04f 32ff 	mov.w	r2, #4294967295
 80062f2:	601a      	str	r2, [r3, #0]
					break;
 80062f4:	e03f      	b.n	8006376 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f6:	4b31      	ldr	r3, [pc, #196]	@ (80063bc <xTaskIncrementTick+0x154>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	429a      	cmp	r2, r3
 800630c:	d203      	bcs.n	8006316 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800630e:	4a2e      	ldr	r2, [pc, #184]	@ (80063c8 <xTaskIncrementTick+0x160>)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006314:	e02f      	b.n	8006376 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	3304      	adds	r3, #4
 800631a:	4618      	mov	r0, r3
 800631c:	f7fe fe32 	bl	8004f84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006324:	2b00      	cmp	r3, #0
 8006326:	d004      	beq.n	8006332 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	3318      	adds	r3, #24
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe fe29 	bl	8004f84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006336:	4b25      	ldr	r3, [pc, #148]	@ (80063cc <xTaskIncrementTick+0x164>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d903      	bls.n	8006346 <xTaskIncrementTick+0xde>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006342:	4a22      	ldr	r2, [pc, #136]	@ (80063cc <xTaskIncrementTick+0x164>)
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4a1f      	ldr	r2, [pc, #124]	@ (80063d0 <xTaskIncrementTick+0x168>)
 8006354:	441a      	add	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	3304      	adds	r3, #4
 800635a:	4619      	mov	r1, r3
 800635c:	4610      	mov	r0, r2
 800635e:	f7fe fdb4 	bl	8004eca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006366:	4b1b      	ldr	r3, [pc, #108]	@ (80063d4 <xTaskIncrementTick+0x16c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	429a      	cmp	r2, r3
 800636e:	d3b8      	bcc.n	80062e2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006370:	2301      	movs	r3, #1
 8006372:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006374:	e7b5      	b.n	80062e2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006376:	4b17      	ldr	r3, [pc, #92]	@ (80063d4 <xTaskIncrementTick+0x16c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800637c:	4914      	ldr	r1, [pc, #80]	@ (80063d0 <xTaskIncrementTick+0x168>)
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d907      	bls.n	800639e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800638e:	2301      	movs	r3, #1
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	e004      	b.n	800639e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006394:	4b10      	ldr	r3, [pc, #64]	@ (80063d8 <xTaskIncrementTick+0x170>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3301      	adds	r3, #1
 800639a:	4a0f      	ldr	r2, [pc, #60]	@ (80063d8 <xTaskIncrementTick+0x170>)
 800639c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800639e:	4b0f      	ldr	r3, [pc, #60]	@ (80063dc <xTaskIncrementTick+0x174>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80063a6:	2301      	movs	r3, #1
 80063a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80063aa:	697b      	ldr	r3, [r7, #20]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	20001168 	.word	0x20001168
 80063b8:	20001144 	.word	0x20001144
 80063bc:	200010f8 	.word	0x200010f8
 80063c0:	200010fc 	.word	0x200010fc
 80063c4:	20001158 	.word	0x20001158
 80063c8:	20001160 	.word	0x20001160
 80063cc:	20001148 	.word	0x20001148
 80063d0:	20000c70 	.word	0x20000c70
 80063d4:	20000c6c 	.word	0x20000c6c
 80063d8:	20001150 	.word	0x20001150
 80063dc:	20001154 	.word	0x20001154

080063e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063e6:	4b4b      	ldr	r3, [pc, #300]	@ (8006514 <vTaskSwitchContext+0x134>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006518 <vTaskSwitchContext+0x138>)
 80063f0:	2201      	movs	r2, #1
 80063f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063f4:	e089      	b.n	800650a <vTaskSwitchContext+0x12a>
		xYieldPending = pdFALSE;
 80063f6:	4b48      	ldr	r3, [pc, #288]	@ (8006518 <vTaskSwitchContext+0x138>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80063fc:	f7fa fde4 	bl	8000fc8 <getRunTimeCounterValue>
 8006400:	4603      	mov	r3, r0
 8006402:	4a46      	ldr	r2, [pc, #280]	@ (800651c <vTaskSwitchContext+0x13c>)
 8006404:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006406:	4b45      	ldr	r3, [pc, #276]	@ (800651c <vTaskSwitchContext+0x13c>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4b45      	ldr	r3, [pc, #276]	@ (8006520 <vTaskSwitchContext+0x140>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d909      	bls.n	8006426 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006412:	4b44      	ldr	r3, [pc, #272]	@ (8006524 <vTaskSwitchContext+0x144>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006418:	4a40      	ldr	r2, [pc, #256]	@ (800651c <vTaskSwitchContext+0x13c>)
 800641a:	6810      	ldr	r0, [r2, #0]
 800641c:	4a40      	ldr	r2, [pc, #256]	@ (8006520 <vTaskSwitchContext+0x140>)
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	1a82      	subs	r2, r0, r2
 8006422:	440a      	add	r2, r1
 8006424:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006426:	4b3d      	ldr	r3, [pc, #244]	@ (800651c <vTaskSwitchContext+0x13c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a3d      	ldr	r2, [pc, #244]	@ (8006520 <vTaskSwitchContext+0x140>)
 800642c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800642e:	4b3d      	ldr	r3, [pc, #244]	@ (8006524 <vTaskSwitchContext+0x144>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	429a      	cmp	r2, r3
 8006444:	d111      	bne.n	800646a <vTaskSwitchContext+0x8a>
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	3304      	adds	r3, #4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	429a      	cmp	r2, r3
 8006450:	d10b      	bne.n	800646a <vTaskSwitchContext+0x8a>
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	3308      	adds	r3, #8
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	429a      	cmp	r2, r3
 800645c:	d105      	bne.n	800646a <vTaskSwitchContext+0x8a>
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	330c      	adds	r3, #12
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	429a      	cmp	r2, r3
 8006468:	d008      	beq.n	800647c <vTaskSwitchContext+0x9c>
 800646a:	4b2e      	ldr	r3, [pc, #184]	@ (8006524 <vTaskSwitchContext+0x144>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	4b2d      	ldr	r3, [pc, #180]	@ (8006524 <vTaskSwitchContext+0x144>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3334      	adds	r3, #52	@ 0x34
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f7fa fe24 	bl	80010c4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800647c:	4b2a      	ldr	r3, [pc, #168]	@ (8006528 <vTaskSwitchContext+0x148>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	e013      	b.n	80064ac <vTaskSwitchContext+0xcc>
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10d      	bne.n	80064a6 <vTaskSwitchContext+0xc6>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648e:	b672      	cpsid	i
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	b662      	cpsie	i
 800649e:	607b      	str	r3, [r7, #4]
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	e7fd      	b.n	80064a2 <vTaskSwitchContext+0xc2>
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	491f      	ldr	r1, [pc, #124]	@ (800652c <vTaskSwitchContext+0x14c>)
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0e1      	beq.n	8006484 <vTaskSwitchContext+0xa4>
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4a18      	ldr	r2, [pc, #96]	@ (800652c <vTaskSwitchContext+0x14c>)
 80064cc:	4413      	add	r3, r2
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	605a      	str	r2, [r3, #4]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	3308      	adds	r3, #8
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d104      	bne.n	80064f0 <vTaskSwitchContext+0x110>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	605a      	str	r2, [r3, #4]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	4a0b      	ldr	r2, [pc, #44]	@ (8006524 <vTaskSwitchContext+0x144>)
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	4a0b      	ldr	r2, [pc, #44]	@ (8006528 <vTaskSwitchContext+0x148>)
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006500:	4b08      	ldr	r3, [pc, #32]	@ (8006524 <vTaskSwitchContext+0x144>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3358      	adds	r3, #88	@ 0x58
 8006506:	4a0a      	ldr	r2, [pc, #40]	@ (8006530 <vTaskSwitchContext+0x150>)
 8006508:	6013      	str	r3, [r2, #0]
}
 800650a:	bf00      	nop
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20001168 	.word	0x20001168
 8006518:	20001154 	.word	0x20001154
 800651c:	20001170 	.word	0x20001170
 8006520:	2000116c 	.word	0x2000116c
 8006524:	20000c6c 	.word	0x20000c6c
 8006528:	20001148 	.word	0x20001148
 800652c:	20000c70 	.word	0x20000c70
 8006530:	20000024 	.word	0x20000024

08006534 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10d      	bne.n	8006560 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006548:	b672      	cpsid	i
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	b662      	cpsie	i
 8006558:	60fb      	str	r3, [r7, #12]
}
 800655a:	bf00      	nop
 800655c:	bf00      	nop
 800655e:	e7fd      	b.n	800655c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006560:	4b07      	ldr	r3, [pc, #28]	@ (8006580 <vTaskPlaceOnEventList+0x4c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3318      	adds	r3, #24
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7fe fcd2 	bl	8004f12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800656e:	2101      	movs	r1, #1
 8006570:	6838      	ldr	r0, [r7, #0]
 8006572:	f000 fd0b 	bl	8006f8c <prvAddCurrentTaskToDelayedList>
}
 8006576:	bf00      	nop
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000c6c 	.word	0x20000c6c

08006584 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10d      	bne.n	80065b2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659a:	b672      	cpsid	i
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	b662      	cpsie	i
 80065aa:	617b      	str	r3, [r7, #20]
}
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	e7fd      	b.n	80065ae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065b2:	4b0a      	ldr	r3, [pc, #40]	@ (80065dc <vTaskPlaceOnEventListRestricted+0x58>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3318      	adds	r3, #24
 80065b8:	4619      	mov	r1, r3
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f7fe fc85 	bl	8004eca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	68b8      	ldr	r0, [r7, #8]
 80065d0:	f000 fcdc 	bl	8006f8c <prvAddCurrentTaskToDelayedList>
	}
 80065d4:	bf00      	nop
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20000c6c 	.word	0x20000c6c

080065e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10d      	bne.n	8006612 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	b672      	cpsid	i
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	b662      	cpsie	i
 800660a:	60fb      	str	r3, [r7, #12]
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	e7fd      	b.n	800660e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	3318      	adds	r3, #24
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe fcb4 	bl	8004f84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661c:	4b1d      	ldr	r3, [pc, #116]	@ (8006694 <xTaskRemoveFromEventList+0xb4>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d11d      	bne.n	8006660 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	3304      	adds	r3, #4
 8006628:	4618      	mov	r0, r3
 800662a:	f7fe fcab 	bl	8004f84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006632:	4b19      	ldr	r3, [pc, #100]	@ (8006698 <xTaskRemoveFromEventList+0xb8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d903      	bls.n	8006642 <xTaskRemoveFromEventList+0x62>
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663e:	4a16      	ldr	r2, [pc, #88]	@ (8006698 <xTaskRemoveFromEventList+0xb8>)
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4a13      	ldr	r2, [pc, #76]	@ (800669c <xTaskRemoveFromEventList+0xbc>)
 8006650:	441a      	add	r2, r3
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3304      	adds	r3, #4
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f7fe fc36 	bl	8004eca <vListInsertEnd>
 800665e:	e005      	b.n	800666c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	3318      	adds	r3, #24
 8006664:	4619      	mov	r1, r3
 8006666:	480e      	ldr	r0, [pc, #56]	@ (80066a0 <xTaskRemoveFromEventList+0xc0>)
 8006668:	f7fe fc2f 	bl	8004eca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006670:	4b0c      	ldr	r3, [pc, #48]	@ (80066a4 <xTaskRemoveFromEventList+0xc4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006676:	429a      	cmp	r2, r3
 8006678:	d905      	bls.n	8006686 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800667a:	2301      	movs	r3, #1
 800667c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800667e:	4b0a      	ldr	r3, [pc, #40]	@ (80066a8 <xTaskRemoveFromEventList+0xc8>)
 8006680:	2201      	movs	r2, #1
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e001      	b.n	800668a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800668a:	697b      	ldr	r3, [r7, #20]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	20001168 	.word	0x20001168
 8006698:	20001148 	.word	0x20001148
 800669c:	20000c70 	.word	0x20000c70
 80066a0:	20001100 	.word	0x20001100
 80066a4:	20000c6c 	.word	0x20000c6c
 80066a8:	20001154 	.word	0x20001154

080066ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066b4:	4b06      	ldr	r3, [pc, #24]	@ (80066d0 <vTaskInternalSetTimeOutState+0x24>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066bc:	4b05      	ldr	r3, [pc, #20]	@ (80066d4 <vTaskInternalSetTimeOutState+0x28>)
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	605a      	str	r2, [r3, #4]
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	20001158 	.word	0x20001158
 80066d4:	20001144 	.word	0x20001144

080066d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10d      	bne.n	8006704 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ec:	b672      	cpsid	i
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	b662      	cpsie	i
 80066fc:	613b      	str	r3, [r7, #16]
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	e7fd      	b.n	8006700 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10d      	bne.n	8006726 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	b672      	cpsid	i
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	b662      	cpsie	i
 800671e:	60fb      	str	r3, [r7, #12]
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	e7fd      	b.n	8006722 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006726:	f001 f8f9 	bl	800791c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800672a:	4b1d      	ldr	r3, [pc, #116]	@ (80067a0 <xTaskCheckForTimeOut+0xc8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006742:	d102      	bne.n	800674a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006744:	2300      	movs	r3, #0
 8006746:	61fb      	str	r3, [r7, #28]
 8006748:	e023      	b.n	8006792 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	4b15      	ldr	r3, [pc, #84]	@ (80067a4 <xTaskCheckForTimeOut+0xcc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d007      	beq.n	8006766 <xTaskCheckForTimeOut+0x8e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	429a      	cmp	r2, r3
 800675e:	d302      	bcc.n	8006766 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006760:	2301      	movs	r3, #1
 8006762:	61fb      	str	r3, [r7, #28]
 8006764:	e015      	b.n	8006792 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	429a      	cmp	r2, r3
 800676e:	d20b      	bcs.n	8006788 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	1ad2      	subs	r2, r2, r3
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff ff95 	bl	80066ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006782:	2300      	movs	r3, #0
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	e004      	b.n	8006792 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800678e:	2301      	movs	r3, #1
 8006790:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006792:	f001 f8f9 	bl	8007988 <vPortExitCritical>

	return xReturn;
 8006796:	69fb      	ldr	r3, [r7, #28]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20001144 	.word	0x20001144
 80067a4:	20001158 	.word	0x20001158

080067a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067ac:	4b03      	ldr	r3, [pc, #12]	@ (80067bc <vTaskMissedYield+0x14>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
}
 80067b2:	bf00      	nop
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	20001154 	.word	0x20001154

080067c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067c8:	f000 f852 	bl	8006870 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067cc:	4b06      	ldr	r3, [pc, #24]	@ (80067e8 <prvIdleTask+0x28>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d9f9      	bls.n	80067c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80067d4:	4b05      	ldr	r3, [pc, #20]	@ (80067ec <prvIdleTask+0x2c>)
 80067d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067e4:	e7f0      	b.n	80067c8 <prvIdleTask+0x8>
 80067e6:	bf00      	nop
 80067e8:	20000c70 	.word	0x20000c70
 80067ec:	e000ed04 	.word	0xe000ed04

080067f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067f6:	2300      	movs	r3, #0
 80067f8:	607b      	str	r3, [r7, #4]
 80067fa:	e00c      	b.n	8006816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	4613      	mov	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4a12      	ldr	r2, [pc, #72]	@ (8006850 <prvInitialiseTaskLists+0x60>)
 8006808:	4413      	add	r3, r2
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fb30 	bl	8004e70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3301      	adds	r3, #1
 8006814:	607b      	str	r3, [r7, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b37      	cmp	r3, #55	@ 0x37
 800681a:	d9ef      	bls.n	80067fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800681c:	480d      	ldr	r0, [pc, #52]	@ (8006854 <prvInitialiseTaskLists+0x64>)
 800681e:	f7fe fb27 	bl	8004e70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006822:	480d      	ldr	r0, [pc, #52]	@ (8006858 <prvInitialiseTaskLists+0x68>)
 8006824:	f7fe fb24 	bl	8004e70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006828:	480c      	ldr	r0, [pc, #48]	@ (800685c <prvInitialiseTaskLists+0x6c>)
 800682a:	f7fe fb21 	bl	8004e70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800682e:	480c      	ldr	r0, [pc, #48]	@ (8006860 <prvInitialiseTaskLists+0x70>)
 8006830:	f7fe fb1e 	bl	8004e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006834:	480b      	ldr	r0, [pc, #44]	@ (8006864 <prvInitialiseTaskLists+0x74>)
 8006836:	f7fe fb1b 	bl	8004e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800683a:	4b0b      	ldr	r3, [pc, #44]	@ (8006868 <prvInitialiseTaskLists+0x78>)
 800683c:	4a05      	ldr	r2, [pc, #20]	@ (8006854 <prvInitialiseTaskLists+0x64>)
 800683e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006840:	4b0a      	ldr	r3, [pc, #40]	@ (800686c <prvInitialiseTaskLists+0x7c>)
 8006842:	4a05      	ldr	r2, [pc, #20]	@ (8006858 <prvInitialiseTaskLists+0x68>)
 8006844:	601a      	str	r2, [r3, #0]
}
 8006846:	bf00      	nop
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000c70 	.word	0x20000c70
 8006854:	200010d0 	.word	0x200010d0
 8006858:	200010e4 	.word	0x200010e4
 800685c:	20001100 	.word	0x20001100
 8006860:	20001114 	.word	0x20001114
 8006864:	2000112c 	.word	0x2000112c
 8006868:	200010f8 	.word	0x200010f8
 800686c:	200010fc 	.word	0x200010fc

08006870 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006876:	e019      	b.n	80068ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006878:	f001 f850 	bl	800791c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800687c:	4b10      	ldr	r3, [pc, #64]	@ (80068c0 <prvCheckTasksWaitingTermination+0x50>)
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3304      	adds	r3, #4
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe fb7b 	bl	8004f84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800688e:	4b0d      	ldr	r3, [pc, #52]	@ (80068c4 <prvCheckTasksWaitingTermination+0x54>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3b01      	subs	r3, #1
 8006894:	4a0b      	ldr	r2, [pc, #44]	@ (80068c4 <prvCheckTasksWaitingTermination+0x54>)
 8006896:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006898:	4b0b      	ldr	r3, [pc, #44]	@ (80068c8 <prvCheckTasksWaitingTermination+0x58>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3b01      	subs	r3, #1
 800689e:	4a0a      	ldr	r2, [pc, #40]	@ (80068c8 <prvCheckTasksWaitingTermination+0x58>)
 80068a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068a2:	f001 f871 	bl	8007988 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f8e4 	bl	8006a74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068ac:	4b06      	ldr	r3, [pc, #24]	@ (80068c8 <prvCheckTasksWaitingTermination+0x58>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e1      	bne.n	8006878 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20001114 	.word	0x20001114
 80068c4:	20001140 	.word	0x20001140
 80068c8:	20001128 	.word	0x20001128

080068cc <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d102      	bne.n	80068e6 <vTaskGetInfo+0x1a>
 80068e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006994 <vTaskGetInfo+0xc8>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	e000      	b.n	80068e8 <vTaskGetInfo+0x1c>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8006922:	78fb      	ldrb	r3, [r7, #3]
 8006924:	2b05      	cmp	r3, #5
 8006926:	d01a      	beq.n	800695e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8006928:	4b1a      	ldr	r3, [pc, #104]	@ (8006994 <vTaskGetInfo+0xc8>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	429a      	cmp	r2, r3
 8006930:	d103      	bne.n	800693a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2200      	movs	r2, #0
 8006936:	731a      	strb	r2, [r3, #12]
 8006938:	e018      	b.n	800696c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	2b03      	cmp	r3, #3
 8006944:	d112      	bne.n	800696c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8006946:	f7ff fb41 	bl	8005fcc <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2202      	movs	r2, #2
 8006956:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8006958:	f7ff fb46 	bl	8005fe8 <xTaskResumeAll>
 800695c:	e006      	b.n	800696c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800695e:	6978      	ldr	r0, [r7, #20]
 8006960:	f7ff fa54 	bl	8005e0c <eTaskGetState>
 8006964:	4603      	mov	r3, r0
 8006966:	461a      	mov	r2, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006976:	4618      	mov	r0, r3
 8006978:	f000 f860 	bl	8006a3c <prvTaskCheckFreeStackSpace>
 800697c:	4603      	mov	r3, r0
 800697e:	461a      	mov	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8006984:	e002      	b.n	800698c <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2200      	movs	r2, #0
 800698a:	841a      	strh	r2, [r3, #32]
	}
 800698c:	bf00      	nop
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000c6c 	.word	0x20000c6c

08006998 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08a      	sub	sp, #40	@ 0x28
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	4613      	mov	r3, r2
 80069a4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d03f      	beq.n	8006a32 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	623b      	str	r3, [r7, #32]
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	605a      	str	r2, [r3, #4]
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	3308      	adds	r3, #8
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d104      	bne.n	80069d6 <prvListTasksWithinSingleList+0x3e>
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	605a      	str	r2, [r3, #4]
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	605a      	str	r2, [r3, #4]
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	3308      	adds	r3, #8
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d104      	bne.n	8006a02 <prvListTasksWithinSingleList+0x6a>
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	605a      	str	r2, [r3, #4]
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8006a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	461a      	mov	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	1899      	adds	r1, r3, r2
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	6978      	ldr	r0, [r7, #20]
 8006a20:	f7ff ff54 	bl	80068cc <vTaskGetInfo>
				uxTask++;
 8006a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a26:	3301      	adds	r3, #1
 8006a28:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d1d5      	bne.n	80069de <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8006a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3728      	adds	r7, #40	@ 0x28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006a48:	e005      	b.n	8006a56 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2ba5      	cmp	r3, #165	@ 0xa5
 8006a5c:	d0f5      	beq.n	8006a4a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	089b      	lsrs	r3, r3, #2
 8006a62:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	b29b      	uxth	r3, r3
	}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3358      	adds	r3, #88	@ 0x58
 8006a80:	4618      	mov	r0, r3
 8006a82:	f001 ff7d 	bl	8008980 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d108      	bne.n	8006aa2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 f93d 	bl	8007d14 <vPortFree>
				vPortFree( pxTCB );
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 f93a 	bl	8007d14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006aa0:	e01b      	b.n	8006ada <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d103      	bne.n	8006ab4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 f931 	bl	8007d14 <vPortFree>
	}
 8006ab2:	e012      	b.n	8006ada <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d00d      	beq.n	8006ada <prvDeleteTCB+0x66>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac2:	b672      	cpsid	i
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	b662      	cpsie	i
 8006ad2:	60fb      	str	r3, [r7, #12]
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	e7fd      	b.n	8006ad6 <prvDeleteTCB+0x62>
	}
 8006ada:	bf00      	nop
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aea:	4b0c      	ldr	r3, [pc, #48]	@ (8006b1c <prvResetNextTaskUnblockTime+0x38>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d104      	bne.n	8006afe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006af4:	4b0a      	ldr	r3, [pc, #40]	@ (8006b20 <prvResetNextTaskUnblockTime+0x3c>)
 8006af6:	f04f 32ff 	mov.w	r2, #4294967295
 8006afa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006afc:	e008      	b.n	8006b10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006afe:	4b07      	ldr	r3, [pc, #28]	@ (8006b1c <prvResetNextTaskUnblockTime+0x38>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	4a04      	ldr	r2, [pc, #16]	@ (8006b20 <prvResetNextTaskUnblockTime+0x3c>)
 8006b0e:	6013      	str	r3, [r2, #0]
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	200010f8 	.word	0x200010f8
 8006b20:	20001160 	.word	0x20001160

08006b24 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006b2a:	4b05      	ldr	r3, [pc, #20]	@ (8006b40 <xTaskGetCurrentTaskHandle+0x1c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006b30:	687b      	ldr	r3, [r7, #4]
	}
 8006b32:	4618      	mov	r0, r3
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	20000c6c 	.word	0x20000c6c

08006b44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b78 <xTaskGetSchedulerState+0x34>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b52:	2301      	movs	r3, #1
 8006b54:	607b      	str	r3, [r7, #4]
 8006b56:	e008      	b.n	8006b6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b58:	4b08      	ldr	r3, [pc, #32]	@ (8006b7c <xTaskGetSchedulerState+0x38>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d102      	bne.n	8006b66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b60:	2302      	movs	r3, #2
 8006b62:	607b      	str	r3, [r7, #4]
 8006b64:	e001      	b.n	8006b6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b66:	2300      	movs	r3, #0
 8006b68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b6a:	687b      	ldr	r3, [r7, #4]
	}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	2000114c 	.word	0x2000114c
 8006b7c:	20001168 	.word	0x20001168

08006b80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d05c      	beq.n	8006c50 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b96:	4b31      	ldr	r3, [pc, #196]	@ (8006c5c <xTaskPriorityDisinherit+0xdc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d00d      	beq.n	8006bbc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba4:	b672      	cpsid	i
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	b662      	cpsie	i
 8006bb4:	60fb      	str	r3, [r7, #12]
}
 8006bb6:	bf00      	nop
 8006bb8:	bf00      	nop
 8006bba:	e7fd      	b.n	8006bb8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10d      	bne.n	8006be0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc8:	b672      	cpsid	i
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	b662      	cpsie	i
 8006bd8:	60bb      	str	r3, [r7, #8]
}
 8006bda:	bf00      	nop
 8006bdc:	bf00      	nop
 8006bde:	e7fd      	b.n	8006bdc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be4:	1e5a      	subs	r2, r3, #1
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d02c      	beq.n	8006c50 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d128      	bne.n	8006c50 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	3304      	adds	r3, #4
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe f9be 	bl	8004f84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c20:	4b0f      	ldr	r3, [pc, #60]	@ (8006c60 <xTaskPriorityDisinherit+0xe0>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d903      	bls.n	8006c30 <xTaskPriorityDisinherit+0xb0>
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8006c60 <xTaskPriorityDisinherit+0xe0>)
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4a09      	ldr	r2, [pc, #36]	@ (8006c64 <xTaskPriorityDisinherit+0xe4>)
 8006c3e:	441a      	add	r2, r3
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	3304      	adds	r3, #4
 8006c44:	4619      	mov	r1, r3
 8006c46:	4610      	mov	r0, r2
 8006c48:	f7fe f93f 	bl	8004eca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c50:	697b      	ldr	r3, [r7, #20]
	}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000c6c 	.word	0x20000c6c
 8006c60:	20001148 	.word	0x20001148
 8006c64:	20000c70 	.word	0x20000c70

08006c68 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 ff3c 	bl	8008af2 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7f9 fac8 	bl	8000210 <strlen>
 8006c80:	60f8      	str	r0, [r7, #12]
 8006c82:	e007      	b.n	8006c94 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4413      	add	r3, r2
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3301      	adds	r3, #1
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b0e      	cmp	r3, #14
 8006c98:	d9f4      	bls.n	8006c84 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4413      	add	r3, r2
	}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8006cc2:	4b3a      	ldr	r3, [pc, #232]	@ (8006dac <vTaskGetRunTimeStats+0xf8>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8006cc8:	4b38      	ldr	r3, [pc, #224]	@ (8006dac <vTaskGetRunTimeStats+0xf8>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 ff4f 	bl	8007b78 <pvPortMalloc>
 8006cda:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d05f      	beq.n	8006da2 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8006ce2:	f107 030c 	add.w	r3, r7, #12
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	69b9      	ldr	r1, [r7, #24]
 8006cea:	6978      	ldr	r0, [r7, #20]
 8006cec:	f7ff fa2c 	bl	8006148 <uxTaskGetSystemState>
 8006cf0:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8006db0 <vTaskGetRunTimeStats+0xfc>)
 8006cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d04b      	beq.n	8006d9c <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8006d04:	2300      	movs	r3, #0
 8006d06:	61fb      	str	r3, [r7, #28]
 8006d08:	e044      	b.n	8006d94 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	461a      	mov	r2, r3
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	4413      	add	r3, r2
 8006d1a:	699a      	ldr	r2, [r3, #24]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d22:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8006d24:	69fa      	ldr	r2, [r7, #28]
 8006d26:	4613      	mov	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	461a      	mov	r2, r3
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	4413      	add	r3, r2
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff ff95 	bl	8006c68 <prvWriteNameToBuffer>
 8006d3e:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00e      	beq.n	8006d64 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	00db      	lsls	r3, r3, #3
 8006d4c:	4413      	add	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	461a      	mov	r2, r3
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	4413      	add	r3, r2
 8006d56:	699a      	ldr	r2, [r3, #24]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	4916      	ldr	r1, [pc, #88]	@ (8006db4 <vTaskGetRunTimeStats+0x100>)
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 fcff 	bl	8008760 <siprintf>
 8006d62:	e00d      	b.n	8006d80 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8006d64:	69fa      	ldr	r2, [r7, #28]
 8006d66:	4613      	mov	r3, r2
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	461a      	mov	r2, r3
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	4413      	add	r3, r2
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	461a      	mov	r2, r3
 8006d78:	490f      	ldr	r1, [pc, #60]	@ (8006db8 <vTaskGetRunTimeStats+0x104>)
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 fcf0 	bl	8008760 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7f9 fa45 	bl	8000210 <strlen>
 8006d86:	4602      	mov	r2, r0
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	3301      	adds	r3, #1
 8006d92:	61fb      	str	r3, [r7, #28]
 8006d94:	69fa      	ldr	r2, [r7, #28]
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d3b6      	bcc.n	8006d0a <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8006d9c:	6978      	ldr	r0, [r7, #20]
 8006d9e:	f000 ffb9 	bl	8007d14 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006da2:	bf00      	nop
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20001140 	.word	0x20001140
 8006db0:	51eb851f 	.word	0x51eb851f
 8006db4:	08009b64 	.word	0x08009b64
 8006db8:	08009b70 	.word	0x08009b70

08006dbc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8006dc6:	f000 fda9 	bl	800791c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006dca:	4b20      	ldr	r3, [pc, #128]	@ (8006e4c <ulTaskNotifyTake+0x90>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d113      	bne.n	8006dfe <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8006e4c <ulTaskNotifyTake+0x90>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00b      	beq.n	8006dfe <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006de6:	2101      	movs	r1, #1
 8006de8:	6838      	ldr	r0, [r7, #0]
 8006dea:	f000 f8cf 	bl	8006f8c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006dee:	4b18      	ldr	r3, [pc, #96]	@ (8006e50 <ulTaskNotifyTake+0x94>)
 8006df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006dfe:	f000 fdc3 	bl	8007988 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006e02:	f000 fd8b 	bl	800791c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8006e06:	4b11      	ldr	r3, [pc, #68]	@ (8006e4c <ulTaskNotifyTake+0x90>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e0e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00e      	beq.n	8006e34 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d005      	beq.n	8006e28 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e4c <ulTaskNotifyTake+0x90>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8006e26:	e005      	b.n	8006e34 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8006e28:	4b08      	ldr	r3, [pc, #32]	@ (8006e4c <ulTaskNotifyTake+0x90>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	3a01      	subs	r2, #1
 8006e30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e34:	4b05      	ldr	r3, [pc, #20]	@ (8006e4c <ulTaskNotifyTake+0x90>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
		}
		taskEXIT_CRITICAL();
 8006e3e:	f000 fda3 	bl	8007988 <vPortExitCritical>

		return ulReturn;
 8006e42:	68fb      	ldr	r3, [r7, #12]
	}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20000c6c 	.word	0x20000c6c
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b08a      	sub	sp, #40	@ 0x28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10d      	bne.n	8006e80 <vTaskNotifyGiveFromISR+0x2c>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e68:	b672      	cpsid	i
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	b662      	cpsie	i
 8006e78:	61bb      	str	r3, [r7, #24]
}
 8006e7a:	bf00      	nop
 8006e7c:	bf00      	nop
 8006e7e:	e7fd      	b.n	8006e7c <vTaskNotifyGiveFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e80:	f000 fe34 	bl	8007aec <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8006e88:	f3ef 8211 	mrs	r2, BASEPRI
 8006e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e90:	b672      	cpsid	i
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	b662      	cpsie	i
 8006ea0:	617a      	str	r2, [r7, #20]
 8006ea2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006ea4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ea6:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8006eae:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006ec6:	7ffb      	ldrb	r3, [r7, #31]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d149      	bne.n	8006f60 <vTaskNotifyGiveFromISR+0x10c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00d      	beq.n	8006ef0 <vTaskNotifyGiveFromISR+0x9c>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed8:	b672      	cpsid	i
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	b662      	cpsie	i
 8006ee8:	60fb      	str	r3, [r7, #12]
}
 8006eea:	bf00      	nop
 8006eec:	bf00      	nop
 8006eee:	e7fd      	b.n	8006eec <vTaskNotifyGiveFromISR+0x98>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ef0:	4b20      	ldr	r3, [pc, #128]	@ (8006f74 <vTaskNotifyGiveFromISR+0x120>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d11d      	bne.n	8006f34 <vTaskNotifyGiveFromISR+0xe0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	3304      	adds	r3, #4
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe f841 	bl	8004f84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f06:	4b1c      	ldr	r3, [pc, #112]	@ (8006f78 <vTaskNotifyGiveFromISR+0x124>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d903      	bls.n	8006f16 <vTaskNotifyGiveFromISR+0xc2>
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f12:	4a19      	ldr	r2, [pc, #100]	@ (8006f78 <vTaskNotifyGiveFromISR+0x124>)
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4a16      	ldr	r2, [pc, #88]	@ (8006f7c <vTaskNotifyGiveFromISR+0x128>)
 8006f24:	441a      	add	r2, r3
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	3304      	adds	r3, #4
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	f7fd ffcc 	bl	8004eca <vListInsertEnd>
 8006f32:	e005      	b.n	8006f40 <vTaskNotifyGiveFromISR+0xec>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	3318      	adds	r3, #24
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4811      	ldr	r0, [pc, #68]	@ (8006f80 <vTaskNotifyGiveFromISR+0x12c>)
 8006f3c:	f7fd ffc5 	bl	8004eca <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f44:	4b0f      	ldr	r3, [pc, #60]	@ (8006f84 <vTaskNotifyGiveFromISR+0x130>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d908      	bls.n	8006f60 <vTaskNotifyGiveFromISR+0x10c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <vTaskNotifyGiveFromISR+0x106>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2201      	movs	r2, #1
 8006f58:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f88 <vTaskNotifyGiveFromISR+0x134>)
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f383 8811 	msr	BASEPRI, r3
}
 8006f6a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8006f6c:	bf00      	nop
 8006f6e:	3728      	adds	r7, #40	@ 0x28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20001168 	.word	0x20001168
 8006f78:	20001148 	.word	0x20001148
 8006f7c:	20000c70 	.word	0x20000c70
 8006f80:	20001100 	.word	0x20001100
 8006f84:	20000c6c 	.word	0x20000c6c
 8006f88:	20001154 	.word	0x20001154

08006f8c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f96:	4b21      	ldr	r3, [pc, #132]	@ (800701c <prvAddCurrentTaskToDelayedList+0x90>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f9c:	4b20      	ldr	r3, [pc, #128]	@ (8007020 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fd ffee 	bl	8004f84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fae:	d10a      	bne.n	8006fc6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d007      	beq.n	8006fc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8007020 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4819      	ldr	r0, [pc, #100]	@ (8007024 <prvAddCurrentTaskToDelayedList+0x98>)
 8006fc0:	f7fd ff83 	bl	8004eca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fc4:	e026      	b.n	8007014 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4413      	add	r3, r2
 8006fcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fce:	4b14      	ldr	r3, [pc, #80]	@ (8007020 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d209      	bcs.n	8006ff2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fde:	4b12      	ldr	r3, [pc, #72]	@ (8007028 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8007020 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4610      	mov	r0, r2
 8006fec:	f7fd ff91 	bl	8004f12 <vListInsert>
}
 8006ff0:	e010      	b.n	8007014 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800702c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8007020 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f7fd ff87 	bl	8004f12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007004:	4b0a      	ldr	r3, [pc, #40]	@ (8007030 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	429a      	cmp	r2, r3
 800700c:	d202      	bcs.n	8007014 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800700e:	4a08      	ldr	r2, [pc, #32]	@ (8007030 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	6013      	str	r3, [r2, #0]
}
 8007014:	bf00      	nop
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	20001144 	.word	0x20001144
 8007020:	20000c6c 	.word	0x20000c6c
 8007024:	2000112c 	.word	0x2000112c
 8007028:	200010fc 	.word	0x200010fc
 800702c:	200010f8 	.word	0x200010f8
 8007030:	20001160 	.word	0x20001160

08007034 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08a      	sub	sp, #40	@ 0x28
 8007038:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800703a:	2300      	movs	r3, #0
 800703c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800703e:	f000 fb21 	bl	8007684 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007042:	4b1e      	ldr	r3, [pc, #120]	@ (80070bc <xTimerCreateTimerTask+0x88>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d021      	beq.n	800708e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800704e:	2300      	movs	r3, #0
 8007050:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007052:	1d3a      	adds	r2, r7, #4
 8007054:	f107 0108 	add.w	r1, r7, #8
 8007058:	f107 030c 	add.w	r3, r7, #12
 800705c:	4618      	mov	r0, r3
 800705e:	f7fd feed 	bl	8004e3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	9202      	str	r2, [sp, #8]
 800706a:	9301      	str	r3, [sp, #4]
 800706c:	2302      	movs	r3, #2
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	2300      	movs	r3, #0
 8007072:	460a      	mov	r2, r1
 8007074:	4912      	ldr	r1, [pc, #72]	@ (80070c0 <xTimerCreateTimerTask+0x8c>)
 8007076:	4813      	ldr	r0, [pc, #76]	@ (80070c4 <xTimerCreateTimerTask+0x90>)
 8007078:	f7fe fcc8 	bl	8005a0c <xTaskCreateStatic>
 800707c:	4603      	mov	r3, r0
 800707e:	4a12      	ldr	r2, [pc, #72]	@ (80070c8 <xTimerCreateTimerTask+0x94>)
 8007080:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007082:	4b11      	ldr	r3, [pc, #68]	@ (80070c8 <xTimerCreateTimerTask+0x94>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800708a:	2301      	movs	r3, #1
 800708c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10d      	bne.n	80070b0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007098:	b672      	cpsid	i
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	b662      	cpsie	i
 80070a8:	613b      	str	r3, [r7, #16]
}
 80070aa:	bf00      	nop
 80070ac:	bf00      	nop
 80070ae:	e7fd      	b.n	80070ac <xTimerCreateTimerTask+0x78>
	return xReturn;
 80070b0:	697b      	ldr	r3, [r7, #20]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	200011a4 	.word	0x200011a4
 80070c0:	08009b7c 	.word	0x08009b7c
 80070c4:	0800720d 	.word	0x0800720d
 80070c8:	200011a8 	.word	0x200011a8

080070cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08a      	sub	sp, #40	@ 0x28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070da:	2300      	movs	r3, #0
 80070dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10d      	bne.n	8007100 <xTimerGenericCommand+0x34>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	b672      	cpsid	i
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	b662      	cpsie	i
 80070f8:	623b      	str	r3, [r7, #32]
}
 80070fa:	bf00      	nop
 80070fc:	bf00      	nop
 80070fe:	e7fd      	b.n	80070fc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007100:	4b19      	ldr	r3, [pc, #100]	@ (8007168 <xTimerGenericCommand+0x9c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d02a      	beq.n	800715e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2b05      	cmp	r3, #5
 8007118:	dc18      	bgt.n	800714c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800711a:	f7ff fd13 	bl	8006b44 <xTaskGetSchedulerState>
 800711e:	4603      	mov	r3, r0
 8007120:	2b02      	cmp	r3, #2
 8007122:	d109      	bne.n	8007138 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007124:	4b10      	ldr	r3, [pc, #64]	@ (8007168 <xTimerGenericCommand+0x9c>)
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	f107 0110 	add.w	r1, r7, #16
 800712c:	2300      	movs	r3, #0
 800712e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007130:	f7fe f868 	bl	8005204 <xQueueGenericSend>
 8007134:	6278      	str	r0, [r7, #36]	@ 0x24
 8007136:	e012      	b.n	800715e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007138:	4b0b      	ldr	r3, [pc, #44]	@ (8007168 <xTimerGenericCommand+0x9c>)
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	f107 0110 	add.w	r1, r7, #16
 8007140:	2300      	movs	r3, #0
 8007142:	2200      	movs	r2, #0
 8007144:	f7fe f85e 	bl	8005204 <xQueueGenericSend>
 8007148:	6278      	str	r0, [r7, #36]	@ 0x24
 800714a:	e008      	b.n	800715e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800714c:	4b06      	ldr	r3, [pc, #24]	@ (8007168 <xTimerGenericCommand+0x9c>)
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	f107 0110 	add.w	r1, r7, #16
 8007154:	2300      	movs	r3, #0
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	f7fe f95e 	bl	8005418 <xQueueGenericSendFromISR>
 800715c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007160:	4618      	mov	r0, r3
 8007162:	3728      	adds	r7, #40	@ 0x28
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	200011a4 	.word	0x200011a4

0800716c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af02      	add	r7, sp, #8
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007176:	4b24      	ldr	r3, [pc, #144]	@ (8007208 <prvProcessExpiredTimer+0x9c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	3304      	adds	r3, #4
 8007184:	4618      	mov	r0, r3
 8007186:	f7fd fefd 	bl	8004f84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d025      	beq.n	80071e4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	699a      	ldr	r2, [r3, #24]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	18d1      	adds	r1, r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	6978      	ldr	r0, [r7, #20]
 80071a6:	f000 f8d7 	bl	8007358 <prvInsertTimerInActiveList>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d022      	beq.n	80071f6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071b0:	2300      	movs	r3, #0
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	2300      	movs	r3, #0
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	2100      	movs	r1, #0
 80071ba:	6978      	ldr	r0, [r7, #20]
 80071bc:	f7ff ff86 	bl	80070cc <xTimerGenericCommand>
 80071c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d116      	bne.n	80071f6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	b672      	cpsid	i
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	b662      	cpsie	i
 80071dc:	60fb      	str	r3, [r7, #12]
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	e7fd      	b.n	80071e0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071ea:	f023 0301 	bic.w	r3, r3, #1
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	6978      	ldr	r0, [r7, #20]
 80071fc:	4798      	blx	r3
}
 80071fe:	bf00      	nop
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	2000119c 	.word	0x2000119c

0800720c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007214:	f107 0308 	add.w	r3, r7, #8
 8007218:	4618      	mov	r0, r3
 800721a:	f000 f859 	bl	80072d0 <prvGetNextExpireTime>
 800721e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4619      	mov	r1, r3
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f805 	bl	8007234 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800722a:	f000 f8d7 	bl	80073dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800722e:	bf00      	nop
 8007230:	e7f0      	b.n	8007214 <prvTimerTask+0x8>
	...

08007234 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800723e:	f7fe fec5 	bl	8005fcc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007242:	f107 0308 	add.w	r3, r7, #8
 8007246:	4618      	mov	r0, r3
 8007248:	f000 f866 	bl	8007318 <prvSampleTimeNow>
 800724c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d130      	bne.n	80072b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10a      	bne.n	8007270 <prvProcessTimerOrBlockTask+0x3c>
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	429a      	cmp	r2, r3
 8007260:	d806      	bhi.n	8007270 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007262:	f7fe fec1 	bl	8005fe8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007266:	68f9      	ldr	r1, [r7, #12]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff ff7f 	bl	800716c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800726e:	e024      	b.n	80072ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d008      	beq.n	8007288 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007276:	4b13      	ldr	r3, [pc, #76]	@ (80072c4 <prvProcessTimerOrBlockTask+0x90>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <prvProcessTimerOrBlockTask+0x50>
 8007280:	2301      	movs	r3, #1
 8007282:	e000      	b.n	8007286 <prvProcessTimerOrBlockTask+0x52>
 8007284:	2300      	movs	r3, #0
 8007286:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007288:	4b0f      	ldr	r3, [pc, #60]	@ (80072c8 <prvProcessTimerOrBlockTask+0x94>)
 800728a:	6818      	ldr	r0, [r3, #0]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	4619      	mov	r1, r3
 8007296:	f7fe fb85 	bl	80059a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800729a:	f7fe fea5 	bl	8005fe8 <xTaskResumeAll>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072a4:	4b09      	ldr	r3, [pc, #36]	@ (80072cc <prvProcessTimerOrBlockTask+0x98>)
 80072a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	f3bf 8f6f 	isb	sy
}
 80072b4:	e001      	b.n	80072ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072b6:	f7fe fe97 	bl	8005fe8 <xTaskResumeAll>
}
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	200011a0 	.word	0x200011a0
 80072c8:	200011a4 	.word	0x200011a4
 80072cc:	e000ed04 	.word	0xe000ed04

080072d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007314 <prvGetNextExpireTime+0x44>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <prvGetNextExpireTime+0x16>
 80072e2:	2201      	movs	r2, #1
 80072e4:	e000      	b.n	80072e8 <prvGetNextExpireTime+0x18>
 80072e6:	2200      	movs	r2, #0
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d105      	bne.n	8007300 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072f4:	4b07      	ldr	r3, [pc, #28]	@ (8007314 <prvGetNextExpireTime+0x44>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	e001      	b.n	8007304 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007304:	68fb      	ldr	r3, [r7, #12]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	2000119c 	.word	0x2000119c

08007318 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007320:	f7fe ff02 	bl	8006128 <xTaskGetTickCount>
 8007324:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007326:	4b0b      	ldr	r3, [pc, #44]	@ (8007354 <prvSampleTimeNow+0x3c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	429a      	cmp	r2, r3
 800732e:	d205      	bcs.n	800733c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007330:	f000 f940 	bl	80075b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	e002      	b.n	8007342 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007342:	4a04      	ldr	r2, [pc, #16]	@ (8007354 <prvSampleTimeNow+0x3c>)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007348:	68fb      	ldr	r3, [r7, #12]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	200011ac 	.word	0x200011ac

08007358 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007366:	2300      	movs	r3, #0
 8007368:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	429a      	cmp	r2, r3
 800737c:	d812      	bhi.n	80073a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	1ad2      	subs	r2, r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	429a      	cmp	r2, r3
 800738a:	d302      	bcc.n	8007392 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800738c:	2301      	movs	r3, #1
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	e01b      	b.n	80073ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007392:	4b10      	ldr	r3, [pc, #64]	@ (80073d4 <prvInsertTimerInActiveList+0x7c>)
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3304      	adds	r3, #4
 800739a:	4619      	mov	r1, r3
 800739c:	4610      	mov	r0, r2
 800739e:	f7fd fdb8 	bl	8004f12 <vListInsert>
 80073a2:	e012      	b.n	80073ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d206      	bcs.n	80073ba <prvInsertTimerInActiveList+0x62>
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d302      	bcc.n	80073ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073b4:	2301      	movs	r3, #1
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	e007      	b.n	80073ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073ba:	4b07      	ldr	r3, [pc, #28]	@ (80073d8 <prvInsertTimerInActiveList+0x80>)
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f7fd fda4 	bl	8004f12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073ca:	697b      	ldr	r3, [r7, #20]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	200011a0 	.word	0x200011a0
 80073d8:	2000119c 	.word	0x2000119c

080073dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08e      	sub	sp, #56	@ 0x38
 80073e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073e2:	e0d4      	b.n	800758e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	da1b      	bge.n	8007422 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073ea:	1d3b      	adds	r3, r7, #4
 80073ec:	3304      	adds	r3, #4
 80073ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10d      	bne.n	8007412 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80073f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fa:	b672      	cpsid	i
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	b662      	cpsie	i
 800740a:	61fb      	str	r3, [r7, #28]
}
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	e7fd      	b.n	800740e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007418:	6850      	ldr	r0, [r2, #4]
 800741a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800741c:	6892      	ldr	r2, [r2, #8]
 800741e:	4611      	mov	r1, r2
 8007420:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f2c0 80b2 	blt.w	800758e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800742e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d004      	beq.n	8007440 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007438:	3304      	adds	r3, #4
 800743a:	4618      	mov	r0, r3
 800743c:	f7fd fda2 	bl	8004f84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007440:	463b      	mov	r3, r7
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff ff68 	bl	8007318 <prvSampleTimeNow>
 8007448:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b09      	cmp	r3, #9
 800744e:	f200 809b 	bhi.w	8007588 <prvProcessReceivedCommands+0x1ac>
 8007452:	a201      	add	r2, pc, #4	@ (adr r2, 8007458 <prvProcessReceivedCommands+0x7c>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	08007481 	.word	0x08007481
 800745c:	08007481 	.word	0x08007481
 8007460:	08007481 	.word	0x08007481
 8007464:	080074fb 	.word	0x080074fb
 8007468:	0800750f 	.word	0x0800750f
 800746c:	0800755f 	.word	0x0800755f
 8007470:	08007481 	.word	0x08007481
 8007474:	08007481 	.word	0x08007481
 8007478:	080074fb 	.word	0x080074fb
 800747c:	0800750f 	.word	0x0800750f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007482:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007486:	f043 0301 	orr.w	r3, r3, #1
 800748a:	b2da      	uxtb	r2, r3
 800748c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	18d1      	adds	r1, r2, r3
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800749e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074a0:	f7ff ff5a 	bl	8007358 <prvInsertTimerInActiveList>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d070      	beq.n	800758c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074b8:	f003 0304 	and.w	r3, r3, #4
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d065      	beq.n	800758c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	441a      	add	r2, r3
 80074c8:	2300      	movs	r3, #0
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	2300      	movs	r3, #0
 80074ce:	2100      	movs	r1, #0
 80074d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074d2:	f7ff fdfb 	bl	80070cc <xTimerGenericCommand>
 80074d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d156      	bne.n	800758c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80074de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e2:	b672      	cpsid	i
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	b662      	cpsie	i
 80074f2:	61bb      	str	r3, [r7, #24]
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop
 80074f8:	e7fd      	b.n	80074f6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007500:	f023 0301 	bic.w	r3, r3, #1
 8007504:	b2da      	uxtb	r2, r3
 8007506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007508:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800750c:	e03f      	b.n	800758e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800750e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007510:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007514:	f043 0301 	orr.w	r3, r3, #1
 8007518:	b2da      	uxtb	r2, r3
 800751a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007524:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10d      	bne.n	800754a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007532:	b672      	cpsid	i
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	b662      	cpsie	i
 8007542:	617b      	str	r3, [r7, #20]
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	e7fd      	b.n	8007546 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800754a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	18d1      	adds	r1, r2, r3
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007558:	f7ff fefe 	bl	8007358 <prvInsertTimerInActiveList>
					break;
 800755c:	e017      	b.n	800758e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800755e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007560:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d103      	bne.n	8007574 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800756c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800756e:	f000 fbd1 	bl	8007d14 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007572:	e00c      	b.n	800758e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800757a:	f023 0301 	bic.w	r3, r3, #1
 800757e:	b2da      	uxtb	r2, r3
 8007580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007582:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007586:	e002      	b.n	800758e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007588:	bf00      	nop
 800758a:	e000      	b.n	800758e <prvProcessReceivedCommands+0x1b2>
					break;
 800758c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800758e:	4b08      	ldr	r3, [pc, #32]	@ (80075b0 <prvProcessReceivedCommands+0x1d4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	1d39      	adds	r1, r7, #4
 8007594:	2200      	movs	r2, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f7fd ffe2 	bl	8005560 <xQueueReceive>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f47f af20 	bne.w	80073e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	3730      	adds	r7, #48	@ 0x30
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	200011a4 	.word	0x200011a4

080075b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b088      	sub	sp, #32
 80075b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075ba:	e04b      	b.n	8007654 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075bc:	4b2f      	ldr	r3, [pc, #188]	@ (800767c <prvSwitchTimerLists+0xc8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c6:	4b2d      	ldr	r3, [pc, #180]	@ (800767c <prvSwitchTimerLists+0xc8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3304      	adds	r3, #4
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fd fcd5 	bl	8004f84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d031      	beq.n	8007654 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	4413      	add	r3, r2
 80075f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d90e      	bls.n	8007620 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800760e:	4b1b      	ldr	r3, [pc, #108]	@ (800767c <prvSwitchTimerLists+0xc8>)
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3304      	adds	r3, #4
 8007616:	4619      	mov	r1, r3
 8007618:	4610      	mov	r0, r2
 800761a:	f7fd fc7a 	bl	8004f12 <vListInsert>
 800761e:	e019      	b.n	8007654 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007620:	2300      	movs	r3, #0
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	2300      	movs	r3, #0
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	2100      	movs	r1, #0
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f7ff fd4e 	bl	80070cc <xTimerGenericCommand>
 8007630:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10d      	bne.n	8007654 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	b672      	cpsid	i
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	b662      	cpsie	i
 800764c:	603b      	str	r3, [r7, #0]
}
 800764e:	bf00      	nop
 8007650:	bf00      	nop
 8007652:	e7fd      	b.n	8007650 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007654:	4b09      	ldr	r3, [pc, #36]	@ (800767c <prvSwitchTimerLists+0xc8>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1ae      	bne.n	80075bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800765e:	4b07      	ldr	r3, [pc, #28]	@ (800767c <prvSwitchTimerLists+0xc8>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007664:	4b06      	ldr	r3, [pc, #24]	@ (8007680 <prvSwitchTimerLists+0xcc>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a04      	ldr	r2, [pc, #16]	@ (800767c <prvSwitchTimerLists+0xc8>)
 800766a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800766c:	4a04      	ldr	r2, [pc, #16]	@ (8007680 <prvSwitchTimerLists+0xcc>)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	6013      	str	r3, [r2, #0]
}
 8007672:	bf00      	nop
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	2000119c 	.word	0x2000119c
 8007680:	200011a0 	.word	0x200011a0

08007684 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800768a:	f000 f947 	bl	800791c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800768e:	4b15      	ldr	r3, [pc, #84]	@ (80076e4 <prvCheckForValidListAndQueue+0x60>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d120      	bne.n	80076d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007696:	4814      	ldr	r0, [pc, #80]	@ (80076e8 <prvCheckForValidListAndQueue+0x64>)
 8007698:	f7fd fbea 	bl	8004e70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800769c:	4813      	ldr	r0, [pc, #76]	@ (80076ec <prvCheckForValidListAndQueue+0x68>)
 800769e:	f7fd fbe7 	bl	8004e70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076a2:	4b13      	ldr	r3, [pc, #76]	@ (80076f0 <prvCheckForValidListAndQueue+0x6c>)
 80076a4:	4a10      	ldr	r2, [pc, #64]	@ (80076e8 <prvCheckForValidListAndQueue+0x64>)
 80076a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076a8:	4b12      	ldr	r3, [pc, #72]	@ (80076f4 <prvCheckForValidListAndQueue+0x70>)
 80076aa:	4a10      	ldr	r2, [pc, #64]	@ (80076ec <prvCheckForValidListAndQueue+0x68>)
 80076ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076ae:	2300      	movs	r3, #0
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	4b11      	ldr	r3, [pc, #68]	@ (80076f8 <prvCheckForValidListAndQueue+0x74>)
 80076b4:	4a11      	ldr	r2, [pc, #68]	@ (80076fc <prvCheckForValidListAndQueue+0x78>)
 80076b6:	2110      	movs	r1, #16
 80076b8:	200a      	movs	r0, #10
 80076ba:	f7fd fcf9 	bl	80050b0 <xQueueGenericCreateStatic>
 80076be:	4603      	mov	r3, r0
 80076c0:	4a08      	ldr	r2, [pc, #32]	@ (80076e4 <prvCheckForValidListAndQueue+0x60>)
 80076c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076c4:	4b07      	ldr	r3, [pc, #28]	@ (80076e4 <prvCheckForValidListAndQueue+0x60>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076cc:	4b05      	ldr	r3, [pc, #20]	@ (80076e4 <prvCheckForValidListAndQueue+0x60>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	490b      	ldr	r1, [pc, #44]	@ (8007700 <prvCheckForValidListAndQueue+0x7c>)
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fe f93c 	bl	8005950 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076d8:	f000 f956 	bl	8007988 <vPortExitCritical>
}
 80076dc:	bf00      	nop
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	200011a4 	.word	0x200011a4
 80076e8:	20001174 	.word	0x20001174
 80076ec:	20001188 	.word	0x20001188
 80076f0:	2000119c 	.word	0x2000119c
 80076f4:	200011a0 	.word	0x200011a0
 80076f8:	20001250 	.word	0x20001250
 80076fc:	200011b0 	.word	0x200011b0
 8007700:	08009b84 	.word	0x08009b84

08007704 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3b04      	subs	r3, #4
 8007714:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800771c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3b04      	subs	r3, #4
 8007722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f023 0201 	bic.w	r2, r3, #1
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3b04      	subs	r3, #4
 8007732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007734:	4a0c      	ldr	r2, [pc, #48]	@ (8007768 <pxPortInitialiseStack+0x64>)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3b14      	subs	r3, #20
 800773e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3b04      	subs	r3, #4
 800774a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f06f 0202 	mvn.w	r2, #2
 8007752:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3b20      	subs	r3, #32
 8007758:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800775a:	68fb      	ldr	r3, [r7, #12]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	0800776d 	.word	0x0800776d

0800776c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007776:	4b15      	ldr	r3, [pc, #84]	@ (80077cc <prvTaskExitError+0x60>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777e:	d00d      	beq.n	800779c <prvTaskExitError+0x30>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007784:	b672      	cpsid	i
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	b662      	cpsie	i
 8007794:	60fb      	str	r3, [r7, #12]
}
 8007796:	bf00      	nop
 8007798:	bf00      	nop
 800779a:	e7fd      	b.n	8007798 <prvTaskExitError+0x2c>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a0:	b672      	cpsid	i
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	b662      	cpsie	i
 80077b0:	60bb      	str	r3, [r7, #8]
}
 80077b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077b4:	bf00      	nop
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d0fc      	beq.n	80077b6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077bc:	bf00      	nop
 80077be:	bf00      	nop
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	2000000c 	.word	0x2000000c

080077d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077d0:	4b07      	ldr	r3, [pc, #28]	@ (80077f0 <pxCurrentTCBConst2>)
 80077d2:	6819      	ldr	r1, [r3, #0]
 80077d4:	6808      	ldr	r0, [r1, #0]
 80077d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077da:	f380 8809 	msr	PSP, r0
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f04f 0000 	mov.w	r0, #0
 80077e6:	f380 8811 	msr	BASEPRI, r0
 80077ea:	4770      	bx	lr
 80077ec:	f3af 8000 	nop.w

080077f0 <pxCurrentTCBConst2>:
 80077f0:	20000c6c 	.word	0x20000c6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop

080077f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077f8:	4808      	ldr	r0, [pc, #32]	@ (800781c <prvPortStartFirstTask+0x24>)
 80077fa:	6800      	ldr	r0, [r0, #0]
 80077fc:	6800      	ldr	r0, [r0, #0]
 80077fe:	f380 8808 	msr	MSP, r0
 8007802:	f04f 0000 	mov.w	r0, #0
 8007806:	f380 8814 	msr	CONTROL, r0
 800780a:	b662      	cpsie	i
 800780c:	b661      	cpsie	f
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	df00      	svc	0
 8007818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800781a:	bf00      	nop
 800781c:	e000ed08 	.word	0xe000ed08

08007820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007826:	4b37      	ldr	r3, [pc, #220]	@ (8007904 <xPortStartScheduler+0xe4>)
 8007828:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	b2db      	uxtb	r3, r3
 8007830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	22ff      	movs	r2, #255	@ 0xff
 8007836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	b2db      	uxtb	r3, r3
 800783e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	b2db      	uxtb	r3, r3
 8007844:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007848:	b2da      	uxtb	r2, r3
 800784a:	4b2f      	ldr	r3, [pc, #188]	@ (8007908 <xPortStartScheduler+0xe8>)
 800784c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800784e:	4b2f      	ldr	r3, [pc, #188]	@ (800790c <xPortStartScheduler+0xec>)
 8007850:	2207      	movs	r2, #7
 8007852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007854:	e009      	b.n	800786a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007856:	4b2d      	ldr	r3, [pc, #180]	@ (800790c <xPortStartScheduler+0xec>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3b01      	subs	r3, #1
 800785c:	4a2b      	ldr	r2, [pc, #172]	@ (800790c <xPortStartScheduler+0xec>)
 800785e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	b2db      	uxtb	r3, r3
 8007868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800786a:	78fb      	ldrb	r3, [r7, #3]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007872:	2b80      	cmp	r3, #128	@ 0x80
 8007874:	d0ef      	beq.n	8007856 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007876:	4b25      	ldr	r3, [pc, #148]	@ (800790c <xPortStartScheduler+0xec>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f1c3 0307 	rsb	r3, r3, #7
 800787e:	2b04      	cmp	r3, #4
 8007880:	d00d      	beq.n	800789e <xPortStartScheduler+0x7e>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007886:	b672      	cpsid	i
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	b662      	cpsie	i
 8007896:	60bb      	str	r3, [r7, #8]
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	e7fd      	b.n	800789a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800789e:	4b1b      	ldr	r3, [pc, #108]	@ (800790c <xPortStartScheduler+0xec>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	4a19      	ldr	r2, [pc, #100]	@ (800790c <xPortStartScheduler+0xec>)
 80078a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078a8:	4b18      	ldr	r3, [pc, #96]	@ (800790c <xPortStartScheduler+0xec>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078b0:	4a16      	ldr	r2, [pc, #88]	@ (800790c <xPortStartScheduler+0xec>)
 80078b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078bc:	4b14      	ldr	r3, [pc, #80]	@ (8007910 <xPortStartScheduler+0xf0>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a13      	ldr	r2, [pc, #76]	@ (8007910 <xPortStartScheduler+0xf0>)
 80078c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80078c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078c8:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <xPortStartScheduler+0xf0>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a10      	ldr	r2, [pc, #64]	@ (8007910 <xPortStartScheduler+0xf0>)
 80078ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80078d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078d4:	f000 f8dc 	bl	8007a90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007914 <xPortStartScheduler+0xf4>)
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078de:	f000 f8fb 	bl	8007ad8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007918 <xPortStartScheduler+0xf8>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007918 <xPortStartScheduler+0xf8>)
 80078e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80078ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078ee:	f7ff ff83 	bl	80077f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078f2:	f7fe fd75 	bl	80063e0 <vTaskSwitchContext>
	prvTaskExitError();
 80078f6:	f7ff ff39 	bl	800776c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	e000e400 	.word	0xe000e400
 8007908:	200012a0 	.word	0x200012a0
 800790c:	200012a4 	.word	0x200012a4
 8007910:	e000ed20 	.word	0xe000ed20
 8007914:	2000000c 	.word	0x2000000c
 8007918:	e000ef34 	.word	0xe000ef34

0800791c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007926:	b672      	cpsid	i
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	b662      	cpsie	i
 8007936:	607b      	str	r3, [r7, #4]
}
 8007938:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800793a:	4b11      	ldr	r3, [pc, #68]	@ (8007980 <vPortEnterCritical+0x64>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3301      	adds	r3, #1
 8007940:	4a0f      	ldr	r2, [pc, #60]	@ (8007980 <vPortEnterCritical+0x64>)
 8007942:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007944:	4b0e      	ldr	r3, [pc, #56]	@ (8007980 <vPortEnterCritical+0x64>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d112      	bne.n	8007972 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800794c:	4b0d      	ldr	r3, [pc, #52]	@ (8007984 <vPortEnterCritical+0x68>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00d      	beq.n	8007972 <vPortEnterCritical+0x56>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	b672      	cpsid	i
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	b662      	cpsie	i
 800796a:	603b      	str	r3, [r7, #0]
}
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	e7fd      	b.n	800796e <vPortEnterCritical+0x52>
	}
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	2000000c 	.word	0x2000000c
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800798e:	4b13      	ldr	r3, [pc, #76]	@ (80079dc <vPortExitCritical+0x54>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10d      	bne.n	80079b2 <vPortExitCritical+0x2a>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799a:	b672      	cpsid	i
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	b662      	cpsie	i
 80079aa:	607b      	str	r3, [r7, #4]
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	e7fd      	b.n	80079ae <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80079b2:	4b0a      	ldr	r3, [pc, #40]	@ (80079dc <vPortExitCritical+0x54>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	4a08      	ldr	r2, [pc, #32]	@ (80079dc <vPortExitCritical+0x54>)
 80079ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079bc:	4b07      	ldr	r3, [pc, #28]	@ (80079dc <vPortExitCritical+0x54>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d105      	bne.n	80079d0 <vPortExitCritical+0x48>
 80079c4:	2300      	movs	r3, #0
 80079c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f383 8811 	msr	BASEPRI, r3
}
 80079ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	2000000c 	.word	0x2000000c

080079e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079e0:	f3ef 8009 	mrs	r0, PSP
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	4b15      	ldr	r3, [pc, #84]	@ (8007a40 <pxCurrentTCBConst>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	f01e 0f10 	tst.w	lr, #16
 80079f0:	bf08      	it	eq
 80079f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fa:	6010      	str	r0, [r2, #0]
 80079fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a04:	b672      	cpsid	i
 8007a06:	f380 8811 	msr	BASEPRI, r0
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	b662      	cpsie	i
 8007a14:	f7fe fce4 	bl	80063e0 <vTaskSwitchContext>
 8007a18:	f04f 0000 	mov.w	r0, #0
 8007a1c:	f380 8811 	msr	BASEPRI, r0
 8007a20:	bc09      	pop	{r0, r3}
 8007a22:	6819      	ldr	r1, [r3, #0]
 8007a24:	6808      	ldr	r0, [r1, #0]
 8007a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2a:	f01e 0f10 	tst.w	lr, #16
 8007a2e:	bf08      	it	eq
 8007a30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a34:	f380 8809 	msr	PSP, r0
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop

08007a40 <pxCurrentTCBConst>:
 8007a40:	20000c6c 	.word	0x20000c6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop

08007a48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a52:	b672      	cpsid	i
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	b662      	cpsie	i
 8007a62:	607b      	str	r3, [r7, #4]
}
 8007a64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a66:	f7fe fbff 	bl	8006268 <xTaskIncrementTick>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a70:	4b06      	ldr	r3, [pc, #24]	@ (8007a8c <SysTick_Handler+0x44>)
 8007a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	2300      	movs	r3, #0
 8007a7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	f383 8811 	msr	BASEPRI, r3
}
 8007a82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	e000ed04 	.word	0xe000ed04

08007a90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a94:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac4 <vPortSetupTimerInterrupt+0x34>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac8 <vPortSetupTimerInterrupt+0x38>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8007acc <vPortSetupTimerInterrupt+0x3c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8007ad0 <vPortSetupTimerInterrupt+0x40>)
 8007aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aaa:	099b      	lsrs	r3, r3, #6
 8007aac:	4a09      	ldr	r2, [pc, #36]	@ (8007ad4 <vPortSetupTimerInterrupt+0x44>)
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ab2:	4b04      	ldr	r3, [pc, #16]	@ (8007ac4 <vPortSetupTimerInterrupt+0x34>)
 8007ab4:	2207      	movs	r2, #7
 8007ab6:	601a      	str	r2, [r3, #0]
}
 8007ab8:	bf00      	nop
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	e000e010 	.word	0xe000e010
 8007ac8:	e000e018 	.word	0xe000e018
 8007acc:	20000000 	.word	0x20000000
 8007ad0:	10624dd3 	.word	0x10624dd3
 8007ad4:	e000e014 	.word	0xe000e014

08007ad8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ad8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ae8 <vPortEnableVFP+0x10>
 8007adc:	6801      	ldr	r1, [r0, #0]
 8007ade:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ae2:	6001      	str	r1, [r0, #0]
 8007ae4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ae6:	bf00      	nop
 8007ae8:	e000ed88 	.word	0xe000ed88

08007aec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007af2:	f3ef 8305 	mrs	r3, IPSR
 8007af6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b0f      	cmp	r3, #15
 8007afc:	d917      	bls.n	8007b2e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007afe:	4a1a      	ldr	r2, [pc, #104]	@ (8007b68 <vPortValidateInterruptPriority+0x7c>)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b08:	4b18      	ldr	r3, [pc, #96]	@ (8007b6c <vPortValidateInterruptPriority+0x80>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	7afa      	ldrb	r2, [r7, #11]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d20d      	bcs.n	8007b2e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b16:	b672      	cpsid	i
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	b662      	cpsie	i
 8007b26:	607b      	str	r3, [r7, #4]
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	e7fd      	b.n	8007b2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b2e:	4b10      	ldr	r3, [pc, #64]	@ (8007b70 <vPortValidateInterruptPriority+0x84>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b36:	4b0f      	ldr	r3, [pc, #60]	@ (8007b74 <vPortValidateInterruptPriority+0x88>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d90d      	bls.n	8007b5a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	b672      	cpsid	i
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	b662      	cpsie	i
 8007b52:	603b      	str	r3, [r7, #0]
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop
 8007b58:	e7fd      	b.n	8007b56 <vPortValidateInterruptPriority+0x6a>
	}
 8007b5a:	bf00      	nop
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	e000e3f0 	.word	0xe000e3f0
 8007b6c:	200012a0 	.word	0x200012a0
 8007b70:	e000ed0c 	.word	0xe000ed0c
 8007b74:	200012a4 	.word	0x200012a4

08007b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08a      	sub	sp, #40	@ 0x28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b84:	f7fe fa22 	bl	8005fcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b88:	4b5d      	ldr	r3, [pc, #372]	@ (8007d00 <pvPortMalloc+0x188>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b90:	f000 f920 	bl	8007dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b94:	4b5b      	ldr	r3, [pc, #364]	@ (8007d04 <pvPortMalloc+0x18c>)
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f040 8094 	bne.w	8007cca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d020      	beq.n	8007bea <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007ba8:	2208      	movs	r2, #8
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4413      	add	r3, r2
 8007bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f003 0307 	and.w	r3, r3, #7
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d017      	beq.n	8007bea <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f023 0307 	bic.w	r3, r3, #7
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00d      	beq.n	8007bea <pvPortMalloc+0x72>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd2:	b672      	cpsid	i
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	b662      	cpsie	i
 8007be2:	617b      	str	r3, [r7, #20]
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop
 8007be8:	e7fd      	b.n	8007be6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d06c      	beq.n	8007cca <pvPortMalloc+0x152>
 8007bf0:	4b45      	ldr	r3, [pc, #276]	@ (8007d08 <pvPortMalloc+0x190>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d867      	bhi.n	8007cca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bfa:	4b44      	ldr	r3, [pc, #272]	@ (8007d0c <pvPortMalloc+0x194>)
 8007bfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bfe:	4b43      	ldr	r3, [pc, #268]	@ (8007d0c <pvPortMalloc+0x194>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c04:	e004      	b.n	8007c10 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d903      	bls.n	8007c22 <pvPortMalloc+0xaa>
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1f1      	bne.n	8007c06 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c22:	4b37      	ldr	r3, [pc, #220]	@ (8007d00 <pvPortMalloc+0x188>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d04e      	beq.n	8007cca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2208      	movs	r2, #8
 8007c32:	4413      	add	r3, r2
 8007c34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	1ad2      	subs	r2, r2, r3
 8007c46:	2308      	movs	r3, #8
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d922      	bls.n	8007c94 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4413      	add	r3, r2
 8007c54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	f003 0307 	and.w	r3, r3, #7
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00d      	beq.n	8007c7c <pvPortMalloc+0x104>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c64:	b672      	cpsid	i
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	b662      	cpsie	i
 8007c74:	613b      	str	r3, [r7, #16]
}
 8007c76:	bf00      	nop
 8007c78:	bf00      	nop
 8007c7a:	e7fd      	b.n	8007c78 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	1ad2      	subs	r2, r2, r3
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c8e:	69b8      	ldr	r0, [r7, #24]
 8007c90:	f000 f902 	bl	8007e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c94:	4b1c      	ldr	r3, [pc, #112]	@ (8007d08 <pvPortMalloc+0x190>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8007d08 <pvPortMalloc+0x190>)
 8007ca0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ca2:	4b19      	ldr	r3, [pc, #100]	@ (8007d08 <pvPortMalloc+0x190>)
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d10 <pvPortMalloc+0x198>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d203      	bcs.n	8007cb6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cae:	4b16      	ldr	r3, [pc, #88]	@ (8007d08 <pvPortMalloc+0x190>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a17      	ldr	r2, [pc, #92]	@ (8007d10 <pvPortMalloc+0x198>)
 8007cb4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	4b12      	ldr	r3, [pc, #72]	@ (8007d04 <pvPortMalloc+0x18c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cca:	f7fe f98d 	bl	8005fe8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00d      	beq.n	8007cf4 <pvPortMalloc+0x17c>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cdc:	b672      	cpsid	i
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	b662      	cpsie	i
 8007cec:	60fb      	str	r3, [r7, #12]
}
 8007cee:	bf00      	nop
 8007cf0:	bf00      	nop
 8007cf2:	e7fd      	b.n	8007cf0 <pvPortMalloc+0x178>
	return pvReturn;
 8007cf4:	69fb      	ldr	r3, [r7, #28]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3728      	adds	r7, #40	@ 0x28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20004eb0 	.word	0x20004eb0
 8007d04:	20004ebc 	.word	0x20004ebc
 8007d08:	20004eb4 	.word	0x20004eb4
 8007d0c:	20004ea8 	.word	0x20004ea8
 8007d10:	20004eb8 	.word	0x20004eb8

08007d14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d04e      	beq.n	8007dc4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d26:	2308      	movs	r3, #8
 8007d28:	425b      	negs	r3, r3
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	4b24      	ldr	r3, [pc, #144]	@ (8007dcc <vPortFree+0xb8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10d      	bne.n	8007d5e <vPortFree+0x4a>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d46:	b672      	cpsid	i
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	b662      	cpsie	i
 8007d56:	60fb      	str	r3, [r7, #12]
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	e7fd      	b.n	8007d5a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00d      	beq.n	8007d82 <vPortFree+0x6e>
	__asm volatile
 8007d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6a:	b672      	cpsid	i
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	b662      	cpsie	i
 8007d7a:	60bb      	str	r3, [r7, #8]
}
 8007d7c:	bf00      	nop
 8007d7e:	bf00      	nop
 8007d80:	e7fd      	b.n	8007d7e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	4b11      	ldr	r3, [pc, #68]	@ (8007dcc <vPortFree+0xb8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d019      	beq.n	8007dc4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d115      	bne.n	8007dc4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dcc <vPortFree+0xb8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	43db      	mvns	r3, r3
 8007da2:	401a      	ands	r2, r3
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007da8:	f7fe f910 	bl	8005fcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	4b07      	ldr	r3, [pc, #28]	@ (8007dd0 <vPortFree+0xbc>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4413      	add	r3, r2
 8007db6:	4a06      	ldr	r2, [pc, #24]	@ (8007dd0 <vPortFree+0xbc>)
 8007db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dba:	6938      	ldr	r0, [r7, #16]
 8007dbc:	f000 f86c 	bl	8007e98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007dc0:	f7fe f912 	bl	8005fe8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dc4:	bf00      	nop
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	20004ebc 	.word	0x20004ebc
 8007dd0:	20004eb4 	.word	0x20004eb4

08007dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dda:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007de0:	4b27      	ldr	r3, [pc, #156]	@ (8007e80 <prvHeapInit+0xac>)
 8007de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f003 0307 	and.w	r3, r3, #7
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00c      	beq.n	8007e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3307      	adds	r3, #7
 8007df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f023 0307 	bic.w	r3, r3, #7
 8007dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	4a1f      	ldr	r2, [pc, #124]	@ (8007e80 <prvHeapInit+0xac>)
 8007e04:	4413      	add	r3, r2
 8007e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e84 <prvHeapInit+0xb0>)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e12:	4b1c      	ldr	r3, [pc, #112]	@ (8007e84 <prvHeapInit+0xb0>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e20:	2208      	movs	r2, #8
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	1a9b      	subs	r3, r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0307 	bic.w	r3, r3, #7
 8007e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4a15      	ldr	r2, [pc, #84]	@ (8007e88 <prvHeapInit+0xb4>)
 8007e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e36:	4b14      	ldr	r3, [pc, #80]	@ (8007e88 <prvHeapInit+0xb4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e3e:	4b12      	ldr	r3, [pc, #72]	@ (8007e88 <prvHeapInit+0xb4>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	1ad2      	subs	r2, r2, r3
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e54:	4b0c      	ldr	r3, [pc, #48]	@ (8007e88 <prvHeapInit+0xb4>)
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	4a0a      	ldr	r2, [pc, #40]	@ (8007e8c <prvHeapInit+0xb8>)
 8007e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	4a09      	ldr	r2, [pc, #36]	@ (8007e90 <prvHeapInit+0xbc>)
 8007e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e6c:	4b09      	ldr	r3, [pc, #36]	@ (8007e94 <prvHeapInit+0xc0>)
 8007e6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e72:	601a      	str	r2, [r3, #0]
}
 8007e74:	bf00      	nop
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	200012a8 	.word	0x200012a8
 8007e84:	20004ea8 	.word	0x20004ea8
 8007e88:	20004eb0 	.word	0x20004eb0
 8007e8c:	20004eb8 	.word	0x20004eb8
 8007e90:	20004eb4 	.word	0x20004eb4
 8007e94:	20004ebc 	.word	0x20004ebc

08007e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ea0:	4b28      	ldr	r3, [pc, #160]	@ (8007f44 <prvInsertBlockIntoFreeList+0xac>)
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	e002      	b.n	8007eac <prvInsertBlockIntoFreeList+0x14>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d8f7      	bhi.n	8007ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d108      	bne.n	8007eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	441a      	add	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	441a      	add	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d118      	bne.n	8007f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b15      	ldr	r3, [pc, #84]	@ (8007f48 <prvInsertBlockIntoFreeList+0xb0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d00d      	beq.n	8007f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	441a      	add	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	e008      	b.n	8007f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f16:	4b0c      	ldr	r3, [pc, #48]	@ (8007f48 <prvInsertBlockIntoFreeList+0xb0>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	e003      	b.n	8007f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d002      	beq.n	8007f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f36:	bf00      	nop
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20004ea8 	.word	0x20004ea8
 8007f48:	20004eb0 	.word	0x20004eb0

08007f4c <drv_uart_init_IT>:
extern UART_HandleTypeDef huart1;

static TaskHandle_t rxTaskHandle = NULL;   // Tâche à notifier quand un caractère arrive
static uint8_t rxBuffer;                   // Buffer pour 1 caractère reçu

void drv_uart_init_IT(void) {
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
    // Lancement de la première réception en IT
    HAL_UART_Receive_IT(&huart1, &rxBuffer, 1);
 8007f50:	2201      	movs	r2, #1
 8007f52:	4903      	ldr	r1, [pc, #12]	@ (8007f60 <drv_uart_init_IT+0x14>)
 8007f54:	4803      	ldr	r0, [pc, #12]	@ (8007f64 <drv_uart_init_IT+0x18>)
 8007f56:	f7fb fbfe 	bl	8003756 <HAL_UART_Receive_IT>
}
 8007f5a:	bf00      	nop
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20004ec4 	.word	0x20004ec4
 8007f64:	20000444 	.word	0x20000444

08007f68 <drv_uart_transmit>:

uint8_t drv_uart_transmit(char *pData, uint16_t size) {
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	807b      	strh	r3, [r7, #2]
    return (HAL_UART_Transmit(&huart1, (uint8_t *)pData, size, HAL_MAX_DELAY) == HAL_OK) ? 0 : 1;
 8007f74:	887a      	ldrh	r2, [r7, #2]
 8007f76:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	4806      	ldr	r0, [pc, #24]	@ (8007f98 <drv_uart_transmit+0x30>)
 8007f7e:	f7fb fb61 	bl	8003644 <HAL_UART_Transmit>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bf14      	ite	ne
 8007f88:	2301      	movne	r3, #1
 8007f8a:	2300      	moveq	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000444 	.word	0x20000444

08007f9c <drv_uart_receive>:

uint8_t drv_uart_receive(char *pData, uint16_t size) {
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	807b      	strh	r3, [r7, #2]
    if (size != 1) return 1;
 8007fa8:	887b      	ldrh	r3, [r7, #2]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d001      	beq.n	8007fb2 <drv_uart_receive+0x16>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e00e      	b.n	8007fd0 <drv_uart_receive+0x34>

    // Enregistrement la tâche courante pour notification
    rxTaskHandle = xTaskGetCurrentTaskHandle();
 8007fb2:	f7fe fdb7 	bl	8006b24 <xTaskGetCurrentTaskHandle>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4a07      	ldr	r2, [pc, #28]	@ (8007fd8 <drv_uart_receive+0x3c>)
 8007fba:	6013      	str	r3, [r2, #0]

    // Attente de la notification de réception
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8007fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8007fc0:	2001      	movs	r0, #1
 8007fc2:	f7fe fefb 	bl	8006dbc <ulTaskNotifyTake>

    *pData = rxBuffer;
 8007fc6:	4b05      	ldr	r3, [pc, #20]	@ (8007fdc <drv_uart_receive+0x40>)
 8007fc8:	781a      	ldrb	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	701a      	strb	r2, [r3, #0]
    return 0;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20004ec0 	.word	0x20004ec0
 8007fdc:	20004ec4 	.word	0x20004ec4

08007fe0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1 && rxTaskHandle != NULL) {
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a13      	ldr	r2, [pc, #76]	@ (800803c <HAL_UART_RxCpltCallback+0x5c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d120      	bne.n	8008034 <HAL_UART_RxCpltCallback+0x54>
 8007ff2:	4b13      	ldr	r3, [pc, #76]	@ (8008040 <HAL_UART_RxCpltCallback+0x60>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01c      	beq.n	8008034 <HAL_UART_RxCpltCallback+0x54>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]

        // Pour debug
        //HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);

        vTaskNotifyGiveFromISR(rxTaskHandle, &xHigherPriorityTaskWoken);
 8007ffe:	4b10      	ldr	r3, [pc, #64]	@ (8008040 <HAL_UART_RxCpltCallback+0x60>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f107 020c 	add.w	r2, r7, #12
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f7fe ff23 	bl	8006e54 <vTaskNotifyGiveFromISR>
        rxTaskHandle = NULL;
 800800e:	4b0c      	ldr	r3, [pc, #48]	@ (8008040 <HAL_UART_RxCpltCallback+0x60>)
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]

        HAL_UART_Receive_IT(huart, &rxBuffer, 1);
 8008014:	2201      	movs	r2, #1
 8008016:	490b      	ldr	r1, [pc, #44]	@ (8008044 <HAL_UART_RxCpltCallback+0x64>)
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7fb fb9c 	bl	8003756 <HAL_UART_Receive_IT>

        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d007      	beq.n	8008034 <HAL_UART_RxCpltCallback+0x54>
 8008024:	4b08      	ldr	r3, [pc, #32]	@ (8008048 <HAL_UART_RxCpltCallback+0x68>)
 8008026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	f3bf 8f6f 	isb	sy
    }
}
 8008034:	bf00      	nop
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	40011000 	.word	0x40011000
 8008040:	20004ec0 	.word	0x20004ec0
 8008044:	20004ec4 	.word	0x20004ec4
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <sh_help>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";


int sh_help(int argc, char **argv) {
 800804c:	b590      	push	{r4, r7, lr}
 800804e:	b087      	sub	sp, #28
 8008050:	af02      	add	r7, sp, #8
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < shell_global->shell_func_list_size; i++) {
 8008056:	2300      	movs	r3, #0
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	e02e      	b.n	80080ba <sh_help+0x6e>
        int size = snprintf(shell_global->print_buffer, BUFFER_SIZE, "%c: %s\r\n",
 800805c:	4b1c      	ldr	r3, [pc, #112]	@ (80080d0 <sh_help+0x84>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f503 7041 	add.w	r0, r3, #772	@ 0x304
                            shell_global->shell_func_list[i].c,
 8008064:	4b1a      	ldr	r3, [pc, #104]	@ (80080d0 <sh_help+0x84>)
 8008066:	6819      	ldr	r1, [r3, #0]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4613      	mov	r3, r2
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	4413      	add	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	440b      	add	r3, r1
 8008074:	3304      	adds	r3, #4
 8008076:	781b      	ldrb	r3, [r3, #0]
        int size = snprintf(shell_global->print_buffer, BUFFER_SIZE, "%c: %s\r\n",
 8008078:	461c      	mov	r4, r3
                            shell_global->shell_func_list[i].description);
 800807a:	4b15      	ldr	r3, [pc, #84]	@ (80080d0 <sh_help+0x84>)
 800807c:	6819      	ldr	r1, [r3, #0]
        int size = snprintf(shell_global->print_buffer, BUFFER_SIZE, "%c: %s\r\n",
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	4613      	mov	r3, r2
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	440b      	add	r3, r1
 800808a:	330c      	adds	r3, #12
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	4623      	mov	r3, r4
 8008092:	4a10      	ldr	r2, [pc, #64]	@ (80080d4 <sh_help+0x88>)
 8008094:	2128      	movs	r1, #40	@ 0x28
 8008096:	f000 fb2f 	bl	80086f8 <sniprintf>
 800809a:	60b8      	str	r0, [r7, #8]
        shell_global->io.drv_shell_transmit(shell_global->print_buffer, size);
 800809c:	4b0c      	ldr	r3, [pc, #48]	@ (80080d0 <sh_help+0x84>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80080a4:	4a0a      	ldr	r2, [pc, #40]	@ (80080d0 <sh_help+0x84>)
 80080a6:	6812      	ldr	r2, [r2, #0]
 80080a8:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80080ac:	68b9      	ldr	r1, [r7, #8]
 80080ae:	b289      	uxth	r1, r1
 80080b0:	4610      	mov	r0, r2
 80080b2:	4798      	blx	r3
    for (int i = 0; i < shell_global->shell_func_list_size; i++) {
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3301      	adds	r3, #1
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	4b05      	ldr	r3, [pc, #20]	@ (80080d0 <sh_help+0x84>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	dbca      	blt.n	800805c <sh_help+0x10>
    }
    return 0;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd90      	pop	{r4, r7, pc}
 80080d0:	20004ec8 	.word	0x20004ec8
 80080d4:	08009b8c 	.word	0x08009b8c

080080d8 <shell_init>:

void shell_init(h_shell_t *shell) {
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
    shell_global = shell;  // Initialise le pointeur global
 80080e0:	4a11      	ldr	r2, [pc, #68]	@ (8008128 <shell_init+0x50>)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6013      	str	r3, [r2, #0]

    shell->shell_func_list_size = 0;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]

    int size = snprintf(shell->print_buffer, BUFFER_SIZE,
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80080f2:	4a0e      	ldr	r2, [pc, #56]	@ (800812c <shell_init+0x54>)
 80080f4:	2128      	movs	r1, #40	@ 0x28
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fafe 	bl	80086f8 <sniprintf>
 80080fc:	60f8      	str	r0, [r7, #12]
                        "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
    shell->io.drv_shell_transmit(shell->print_buffer, size);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800810a:	68f9      	ldr	r1, [r7, #12]
 800810c:	b289      	uxth	r1, r1
 800810e:	4610      	mov	r0, r2
 8008110:	4798      	blx	r3

    shell_add(shell, 'h', sh_help, "Help");
 8008112:	4b07      	ldr	r3, [pc, #28]	@ (8008130 <shell_init+0x58>)
 8008114:	4a07      	ldr	r2, [pc, #28]	@ (8008134 <shell_init+0x5c>)
 8008116:	2168      	movs	r1, #104	@ 0x68
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f80d 	bl	8008138 <shell_add>
}
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20004ec8 	.word	0x20004ec8
 800812c:	08009b98 	.word	0x08009b98
 8008130:	08009bc0 	.word	0x08009bc0
 8008134:	0800804d 	.word	0x0800804d

08008138 <shell_add>:

int shell_add(h_shell_t *shell, char c,
              int (*pfunc)(int, char **),
              char *description) {
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	607a      	str	r2, [r7, #4]
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	460b      	mov	r3, r1
 8008146:	72fb      	strb	r3, [r7, #11]
    if (shell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b3f      	cmp	r3, #63	@ 0x3f
 800814e:	dc27      	bgt.n	80081a0 <shell_add+0x68>
        shell->shell_func_list[shell->shell_func_list_size].c = c;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68f9      	ldr	r1, [r7, #12]
 8008156:	4613      	mov	r3, r2
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	3304      	adds	r3, #4
 8008162:	7afa      	ldrb	r2, [r7, #11]
 8008164:	701a      	strb	r2, [r3, #0]
        shell->shell_func_list[shell->shell_func_list_size].func = pfunc;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68f9      	ldr	r1, [r7, #12]
 800816c:	4613      	mov	r3, r2
 800816e:	005b      	lsls	r3, r3, #1
 8008170:	4413      	add	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	440b      	add	r3, r1
 8008176:	3308      	adds	r3, #8
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	601a      	str	r2, [r3, #0]
        shell->shell_func_list[shell->shell_func_list_size].description = description;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	68f9      	ldr	r1, [r7, #12]
 8008182:	4613      	mov	r3, r2
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	440b      	add	r3, r1
 800818c:	330c      	adds	r3, #12
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	601a      	str	r2, [r3, #0]
        shell->shell_func_list_size++;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	601a      	str	r2, [r3, #0]
        return 0;
 800819c:	2300      	movs	r3, #0
 800819e:	e001      	b.n	80081a4 <shell_add+0x6c>
    }
    return -1;
 80081a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <shell_exec>:

static int shell_exec(h_shell_t *shell, char *buf) {
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b090      	sub	sp, #64	@ 0x40
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
    char c = buf[0];
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    int argc = 1;
 80081c2:	2301      	movs	r3, #1
 80081c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char *argv[ARGC_MAX];
    argv[0] = buf;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	60fb      	str	r3, [r7, #12]

    for (char *p = buf; *p != '\0' && argc < ARGC_MAX; p++) {
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081ce:	e013      	b.n	80081f8 <shell_exec+0x48>
        if (*p == ' ') {
 80081d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	d10c      	bne.n	80081f2 <shell_exec+0x42>
            *p = '\0';
 80081d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]
            argv[argc++] = p + 1;
 80081de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80081e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081e6:	3201      	adds	r2, #1
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	3340      	adds	r3, #64	@ 0x40
 80081ec:	443b      	add	r3, r7
 80081ee:	f843 2c34 	str.w	r2, [r3, #-52]
    for (char *p = buf; *p != '\0' && argc < ARGC_MAX; p++) {
 80081f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f4:	3301      	adds	r3, #1
 80081f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <shell_exec+0x56>
 8008200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008202:	2b07      	cmp	r3, #7
 8008204:	dde4      	ble.n	80081d0 <shell_exec+0x20>
        }
    }

    for (int i = 0; i < shell->shell_func_list_size; i++) {
 8008206:	2300      	movs	r3, #0
 8008208:	637b      	str	r3, [r7, #52]	@ 0x34
 800820a:	e01f      	b.n	800824c <shell_exec+0x9c>
        if (shell->shell_func_list[i].c == c) {
 800820c:	6879      	ldr	r1, [r7, #4]
 800820e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008210:	4613      	mov	r3, r2
 8008212:	005b      	lsls	r3, r3, #1
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	3304      	adds	r3, #4
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008222:	429a      	cmp	r2, r3
 8008224:	d10f      	bne.n	8008246 <shell_exec+0x96>
            return shell->shell_func_list[i].func(argc, argv);
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800822a:	4613      	mov	r3, r2
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	440b      	add	r3, r1
 8008234:	3308      	adds	r3, #8
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f107 020c 	add.w	r2, r7, #12
 800823c:	4611      	mov	r1, r2
 800823e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008240:	4798      	blx	r3
 8008242:	4603      	mov	r3, r0
 8008244:	e01d      	b.n	8008282 <shell_exec+0xd2>
    for (int i = 0; i < shell->shell_func_list_size; i++) {
 8008246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008248:	3301      	adds	r3, #1
 800824a:	637b      	str	r3, [r7, #52]	@ 0x34
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008252:	429a      	cmp	r2, r3
 8008254:	dbda      	blt.n	800820c <shell_exec+0x5c>
        }
    }

    int size = snprintf(shell->print_buffer, BUFFER_SIZE,
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800825c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008260:	4a0a      	ldr	r2, [pc, #40]	@ (800828c <shell_exec+0xdc>)
 8008262:	2128      	movs	r1, #40	@ 0x28
 8008264:	f000 fa48 	bl	80086f8 <sniprintf>
 8008268:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        "%c: no such command\r\n", c);
    shell->io.drv_shell_transmit(shell->print_buffer, size);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8008276:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008278:	b289      	uxth	r1, r1
 800827a:	4610      	mov	r0, r2
 800827c:	4798      	blx	r3
    return -1;
 800827e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008282:	4618      	mov	r0, r3
 8008284:	3740      	adds	r7, #64	@ 0x40
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	08009bc8 	.word	0x08009bc8

08008290 <shell_run>:

int shell_run(h_shell_t *shell) {
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
    int reading = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	617b      	str	r3, [r7, #20]
    int pos = 0;
 800829c:	2300      	movs	r3, #0
 800829e:	613b      	str	r3, [r7, #16]

    while (1) {
        shell->io.drv_shell_transmit(prompt, 2);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80082a6:	2102      	movs	r1, #2
 80082a8:	4833      	ldr	r0, [pc, #204]	@ (8008378 <shell_run+0xe8>)
 80082aa:	4798      	blx	r3
        reading = 1;
 80082ac:	2301      	movs	r3, #1
 80082ae:	617b      	str	r3, [r7, #20]

        while (reading) {
 80082b0:	e05d      	b.n	800836e <shell_run+0xde>
            char c;
            if (shell->io.drv_shell_receive(&c, 1) != 0)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80082b8:	f107 020b 	add.w	r2, r7, #11
 80082bc:	2101      	movs	r1, #1
 80082be:	4610      	mov	r0, r2
 80082c0:	4798      	blx	r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d14d      	bne.n	8008364 <shell_run+0xd4>
                continue;

            int size;
            switch (c) {
 80082c8:	7afb      	ldrb	r3, [r7, #11]
 80082ca:	2b08      	cmp	r3, #8
 80082cc:	d028      	beq.n	8008320 <shell_run+0x90>
 80082ce:	2b0d      	cmp	r3, #13
 80082d0:	d133      	bne.n	800833a <shell_run+0xaa>
            case '\r':
                size = snprintf(shell->print_buffer, BUFFER_SIZE, "\r\n");
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80082d8:	4a28      	ldr	r2, [pc, #160]	@ (800837c <shell_run+0xec>)
 80082da:	2128      	movs	r1, #40	@ 0x28
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 fa0b 	bl	80086f8 <sniprintf>
 80082e2:	60f8      	str	r0, [r7, #12]
                shell->io.drv_shell_transmit(shell->print_buffer, size);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80082f0:	68f9      	ldr	r1, [r7, #12]
 80082f2:	b289      	uxth	r1, r1
 80082f4:	4610      	mov	r0, r2
 80082f6:	4798      	blx	r3
                shell->cmd_buffer[pos++] = 0;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	613a      	str	r2, [r7, #16]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	4413      	add	r3, r2
 8008302:	2200      	movs	r2, #0
 8008304:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
                shell_exec(shell, shell->cmd_buffer);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7ff ff4d 	bl	80081b0 <shell_exec>
                reading = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	617b      	str	r3, [r7, #20]
                pos = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	613b      	str	r3, [r7, #16]
                break;
 800831e:	e026      	b.n	800836e <shell_run+0xde>

            case '\b':
                if (pos > 0) {
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	dd20      	ble.n	8008368 <shell_run+0xd8>
                    pos--;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	3b01      	subs	r3, #1
 800832a:	613b      	str	r3, [r7, #16]
                    shell->io.drv_shell_transmit(backspace, 3);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8008332:	2103      	movs	r1, #3
 8008334:	4812      	ldr	r0, [pc, #72]	@ (8008380 <shell_run+0xf0>)
 8008336:	4798      	blx	r3
                }
                break;
 8008338:	e016      	b.n	8008368 <shell_run+0xd8>

            default:
                if (pos < BUFFER_SIZE - 1) {
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b26      	cmp	r3, #38	@ 0x26
 800833e:	dc15      	bgt.n	800836c <shell_run+0xdc>
                    shell->io.drv_shell_transmit(&c, 1);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8008346:	f107 020b 	add.w	r2, r7, #11
 800834a:	2101      	movs	r1, #1
 800834c:	4610      	mov	r0, r2
 800834e:	4798      	blx	r3
                    shell->cmd_buffer[pos++] = c;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	613a      	str	r2, [r7, #16]
 8008356:	7af9      	ldrb	r1, [r7, #11]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	4413      	add	r3, r2
 800835c:	460a      	mov	r2, r1
 800835e:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
                }
                break;
 8008362:	e003      	b.n	800836c <shell_run+0xdc>
                continue;
 8008364:	bf00      	nop
 8008366:	e002      	b.n	800836e <shell_run+0xde>
                break;
 8008368:	bf00      	nop
 800836a:	e000      	b.n	800836e <shell_run+0xde>
                break;
 800836c:	bf00      	nop
        while (reading) {
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d19e      	bne.n	80082b2 <shell_run+0x22>
        shell->io.drv_shell_transmit(prompt, 2);
 8008374:	e794      	b.n	80082a0 <shell_run+0x10>
 8008376:	bf00      	nop
 8008378:	20000014 	.word	0x20000014
 800837c:	08009be0 	.word	0x08009be0
 8008380:	20000010 	.word	0x20000010

08008384 <atoi>:
 8008384:	220a      	movs	r2, #10
 8008386:	2100      	movs	r1, #0
 8008388:	f000 b87a 	b.w	8008480 <strtol>

0800838c <_strtol_l.constprop.0>:
 800838c:	2b24      	cmp	r3, #36	@ 0x24
 800838e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008392:	4686      	mov	lr, r0
 8008394:	4690      	mov	r8, r2
 8008396:	d801      	bhi.n	800839c <_strtol_l.constprop.0+0x10>
 8008398:	2b01      	cmp	r3, #1
 800839a:	d106      	bne.n	80083aa <_strtol_l.constprop.0+0x1e>
 800839c:	f000 fb7c 	bl	8008a98 <__errno>
 80083a0:	2316      	movs	r3, #22
 80083a2:	6003      	str	r3, [r0, #0]
 80083a4:	2000      	movs	r0, #0
 80083a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083aa:	4834      	ldr	r0, [pc, #208]	@ (800847c <_strtol_l.constprop.0+0xf0>)
 80083ac:	460d      	mov	r5, r1
 80083ae:	462a      	mov	r2, r5
 80083b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083b4:	5d06      	ldrb	r6, [r0, r4]
 80083b6:	f016 0608 	ands.w	r6, r6, #8
 80083ba:	d1f8      	bne.n	80083ae <_strtol_l.constprop.0+0x22>
 80083bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80083be:	d12d      	bne.n	800841c <_strtol_l.constprop.0+0x90>
 80083c0:	782c      	ldrb	r4, [r5, #0]
 80083c2:	2601      	movs	r6, #1
 80083c4:	1c95      	adds	r5, r2, #2
 80083c6:	f033 0210 	bics.w	r2, r3, #16
 80083ca:	d109      	bne.n	80083e0 <_strtol_l.constprop.0+0x54>
 80083cc:	2c30      	cmp	r4, #48	@ 0x30
 80083ce:	d12a      	bne.n	8008426 <_strtol_l.constprop.0+0x9a>
 80083d0:	782a      	ldrb	r2, [r5, #0]
 80083d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80083d6:	2a58      	cmp	r2, #88	@ 0x58
 80083d8:	d125      	bne.n	8008426 <_strtol_l.constprop.0+0x9a>
 80083da:	786c      	ldrb	r4, [r5, #1]
 80083dc:	2310      	movs	r3, #16
 80083de:	3502      	adds	r5, #2
 80083e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80083e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80083e8:	2200      	movs	r2, #0
 80083ea:	fbbc f9f3 	udiv	r9, ip, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80083f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80083f8:	2f09      	cmp	r7, #9
 80083fa:	d81b      	bhi.n	8008434 <_strtol_l.constprop.0+0xa8>
 80083fc:	463c      	mov	r4, r7
 80083fe:	42a3      	cmp	r3, r4
 8008400:	dd27      	ble.n	8008452 <_strtol_l.constprop.0+0xc6>
 8008402:	1c57      	adds	r7, r2, #1
 8008404:	d007      	beq.n	8008416 <_strtol_l.constprop.0+0x8a>
 8008406:	4581      	cmp	r9, r0
 8008408:	d320      	bcc.n	800844c <_strtol_l.constprop.0+0xc0>
 800840a:	d101      	bne.n	8008410 <_strtol_l.constprop.0+0x84>
 800840c:	45a2      	cmp	sl, r4
 800840e:	db1d      	blt.n	800844c <_strtol_l.constprop.0+0xc0>
 8008410:	fb00 4003 	mla	r0, r0, r3, r4
 8008414:	2201      	movs	r2, #1
 8008416:	f815 4b01 	ldrb.w	r4, [r5], #1
 800841a:	e7eb      	b.n	80083f4 <_strtol_l.constprop.0+0x68>
 800841c:	2c2b      	cmp	r4, #43	@ 0x2b
 800841e:	bf04      	itt	eq
 8008420:	782c      	ldrbeq	r4, [r5, #0]
 8008422:	1c95      	addeq	r5, r2, #2
 8008424:	e7cf      	b.n	80083c6 <_strtol_l.constprop.0+0x3a>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1da      	bne.n	80083e0 <_strtol_l.constprop.0+0x54>
 800842a:	2c30      	cmp	r4, #48	@ 0x30
 800842c:	bf0c      	ite	eq
 800842e:	2308      	moveq	r3, #8
 8008430:	230a      	movne	r3, #10
 8008432:	e7d5      	b.n	80083e0 <_strtol_l.constprop.0+0x54>
 8008434:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008438:	2f19      	cmp	r7, #25
 800843a:	d801      	bhi.n	8008440 <_strtol_l.constprop.0+0xb4>
 800843c:	3c37      	subs	r4, #55	@ 0x37
 800843e:	e7de      	b.n	80083fe <_strtol_l.constprop.0+0x72>
 8008440:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008444:	2f19      	cmp	r7, #25
 8008446:	d804      	bhi.n	8008452 <_strtol_l.constprop.0+0xc6>
 8008448:	3c57      	subs	r4, #87	@ 0x57
 800844a:	e7d8      	b.n	80083fe <_strtol_l.constprop.0+0x72>
 800844c:	f04f 32ff 	mov.w	r2, #4294967295
 8008450:	e7e1      	b.n	8008416 <_strtol_l.constprop.0+0x8a>
 8008452:	1c53      	adds	r3, r2, #1
 8008454:	d108      	bne.n	8008468 <_strtol_l.constprop.0+0xdc>
 8008456:	2322      	movs	r3, #34	@ 0x22
 8008458:	f8ce 3000 	str.w	r3, [lr]
 800845c:	4660      	mov	r0, ip
 800845e:	f1b8 0f00 	cmp.w	r8, #0
 8008462:	d0a0      	beq.n	80083a6 <_strtol_l.constprop.0+0x1a>
 8008464:	1e69      	subs	r1, r5, #1
 8008466:	e006      	b.n	8008476 <_strtol_l.constprop.0+0xea>
 8008468:	b106      	cbz	r6, 800846c <_strtol_l.constprop.0+0xe0>
 800846a:	4240      	negs	r0, r0
 800846c:	f1b8 0f00 	cmp.w	r8, #0
 8008470:	d099      	beq.n	80083a6 <_strtol_l.constprop.0+0x1a>
 8008472:	2a00      	cmp	r2, #0
 8008474:	d1f6      	bne.n	8008464 <_strtol_l.constprop.0+0xd8>
 8008476:	f8c8 1000 	str.w	r1, [r8]
 800847a:	e794      	b.n	80083a6 <_strtol_l.constprop.0+0x1a>
 800847c:	08009c21 	.word	0x08009c21

08008480 <strtol>:
 8008480:	4613      	mov	r3, r2
 8008482:	460a      	mov	r2, r1
 8008484:	4601      	mov	r1, r0
 8008486:	4802      	ldr	r0, [pc, #8]	@ (8008490 <strtol+0x10>)
 8008488:	6800      	ldr	r0, [r0, #0]
 800848a:	f7ff bf7f 	b.w	800838c <_strtol_l.constprop.0>
 800848e:	bf00      	nop
 8008490:	20000024 	.word	0x20000024

08008494 <std>:
 8008494:	2300      	movs	r3, #0
 8008496:	b510      	push	{r4, lr}
 8008498:	4604      	mov	r4, r0
 800849a:	e9c0 3300 	strd	r3, r3, [r0]
 800849e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084a2:	6083      	str	r3, [r0, #8]
 80084a4:	8181      	strh	r1, [r0, #12]
 80084a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80084a8:	81c2      	strh	r2, [r0, #14]
 80084aa:	6183      	str	r3, [r0, #24]
 80084ac:	4619      	mov	r1, r3
 80084ae:	2208      	movs	r2, #8
 80084b0:	305c      	adds	r0, #92	@ 0x5c
 80084b2:	f000 fa4d 	bl	8008950 <memset>
 80084b6:	4b0d      	ldr	r3, [pc, #52]	@ (80084ec <std+0x58>)
 80084b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80084ba:	4b0d      	ldr	r3, [pc, #52]	@ (80084f0 <std+0x5c>)
 80084bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084be:	4b0d      	ldr	r3, [pc, #52]	@ (80084f4 <std+0x60>)
 80084c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084c2:	4b0d      	ldr	r3, [pc, #52]	@ (80084f8 <std+0x64>)
 80084c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80084c6:	4b0d      	ldr	r3, [pc, #52]	@ (80084fc <std+0x68>)
 80084c8:	6224      	str	r4, [r4, #32]
 80084ca:	429c      	cmp	r4, r3
 80084cc:	d006      	beq.n	80084dc <std+0x48>
 80084ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084d2:	4294      	cmp	r4, r2
 80084d4:	d002      	beq.n	80084dc <std+0x48>
 80084d6:	33d0      	adds	r3, #208	@ 0xd0
 80084d8:	429c      	cmp	r4, r3
 80084da:	d105      	bne.n	80084e8 <std+0x54>
 80084dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e4:	f000 bb02 	b.w	8008aec <__retarget_lock_init_recursive>
 80084e8:	bd10      	pop	{r4, pc}
 80084ea:	bf00      	nop
 80084ec:	080087a1 	.word	0x080087a1
 80084f0:	080087c3 	.word	0x080087c3
 80084f4:	080087fb 	.word	0x080087fb
 80084f8:	0800881f 	.word	0x0800881f
 80084fc:	20004ecc 	.word	0x20004ecc

08008500 <stdio_exit_handler>:
 8008500:	4a02      	ldr	r2, [pc, #8]	@ (800850c <stdio_exit_handler+0xc>)
 8008502:	4903      	ldr	r1, [pc, #12]	@ (8008510 <stdio_exit_handler+0x10>)
 8008504:	4803      	ldr	r0, [pc, #12]	@ (8008514 <stdio_exit_handler+0x14>)
 8008506:	f000 b869 	b.w	80085dc <_fwalk_sglue>
 800850a:	bf00      	nop
 800850c:	20000018 	.word	0x20000018
 8008510:	08009669 	.word	0x08009669
 8008514:	20000028 	.word	0x20000028

08008518 <cleanup_stdio>:
 8008518:	6841      	ldr	r1, [r0, #4]
 800851a:	4b0c      	ldr	r3, [pc, #48]	@ (800854c <cleanup_stdio+0x34>)
 800851c:	4299      	cmp	r1, r3
 800851e:	b510      	push	{r4, lr}
 8008520:	4604      	mov	r4, r0
 8008522:	d001      	beq.n	8008528 <cleanup_stdio+0x10>
 8008524:	f001 f8a0 	bl	8009668 <_fflush_r>
 8008528:	68a1      	ldr	r1, [r4, #8]
 800852a:	4b09      	ldr	r3, [pc, #36]	@ (8008550 <cleanup_stdio+0x38>)
 800852c:	4299      	cmp	r1, r3
 800852e:	d002      	beq.n	8008536 <cleanup_stdio+0x1e>
 8008530:	4620      	mov	r0, r4
 8008532:	f001 f899 	bl	8009668 <_fflush_r>
 8008536:	68e1      	ldr	r1, [r4, #12]
 8008538:	4b06      	ldr	r3, [pc, #24]	@ (8008554 <cleanup_stdio+0x3c>)
 800853a:	4299      	cmp	r1, r3
 800853c:	d004      	beq.n	8008548 <cleanup_stdio+0x30>
 800853e:	4620      	mov	r0, r4
 8008540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008544:	f001 b890 	b.w	8009668 <_fflush_r>
 8008548:	bd10      	pop	{r4, pc}
 800854a:	bf00      	nop
 800854c:	20004ecc 	.word	0x20004ecc
 8008550:	20004f34 	.word	0x20004f34
 8008554:	20004f9c 	.word	0x20004f9c

08008558 <global_stdio_init.part.0>:
 8008558:	b510      	push	{r4, lr}
 800855a:	4b0b      	ldr	r3, [pc, #44]	@ (8008588 <global_stdio_init.part.0+0x30>)
 800855c:	4c0b      	ldr	r4, [pc, #44]	@ (800858c <global_stdio_init.part.0+0x34>)
 800855e:	4a0c      	ldr	r2, [pc, #48]	@ (8008590 <global_stdio_init.part.0+0x38>)
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	4620      	mov	r0, r4
 8008564:	2200      	movs	r2, #0
 8008566:	2104      	movs	r1, #4
 8008568:	f7ff ff94 	bl	8008494 <std>
 800856c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008570:	2201      	movs	r2, #1
 8008572:	2109      	movs	r1, #9
 8008574:	f7ff ff8e 	bl	8008494 <std>
 8008578:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800857c:	2202      	movs	r2, #2
 800857e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008582:	2112      	movs	r1, #18
 8008584:	f7ff bf86 	b.w	8008494 <std>
 8008588:	20005004 	.word	0x20005004
 800858c:	20004ecc 	.word	0x20004ecc
 8008590:	08008501 	.word	0x08008501

08008594 <__sfp_lock_acquire>:
 8008594:	4801      	ldr	r0, [pc, #4]	@ (800859c <__sfp_lock_acquire+0x8>)
 8008596:	f000 baaa 	b.w	8008aee <__retarget_lock_acquire_recursive>
 800859a:	bf00      	nop
 800859c:	2000500d 	.word	0x2000500d

080085a0 <__sfp_lock_release>:
 80085a0:	4801      	ldr	r0, [pc, #4]	@ (80085a8 <__sfp_lock_release+0x8>)
 80085a2:	f000 baa5 	b.w	8008af0 <__retarget_lock_release_recursive>
 80085a6:	bf00      	nop
 80085a8:	2000500d 	.word	0x2000500d

080085ac <__sinit>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	4604      	mov	r4, r0
 80085b0:	f7ff fff0 	bl	8008594 <__sfp_lock_acquire>
 80085b4:	6a23      	ldr	r3, [r4, #32]
 80085b6:	b11b      	cbz	r3, 80085c0 <__sinit+0x14>
 80085b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085bc:	f7ff bff0 	b.w	80085a0 <__sfp_lock_release>
 80085c0:	4b04      	ldr	r3, [pc, #16]	@ (80085d4 <__sinit+0x28>)
 80085c2:	6223      	str	r3, [r4, #32]
 80085c4:	4b04      	ldr	r3, [pc, #16]	@ (80085d8 <__sinit+0x2c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1f5      	bne.n	80085b8 <__sinit+0xc>
 80085cc:	f7ff ffc4 	bl	8008558 <global_stdio_init.part.0>
 80085d0:	e7f2      	b.n	80085b8 <__sinit+0xc>
 80085d2:	bf00      	nop
 80085d4:	08008519 	.word	0x08008519
 80085d8:	20005004 	.word	0x20005004

080085dc <_fwalk_sglue>:
 80085dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e0:	4607      	mov	r7, r0
 80085e2:	4688      	mov	r8, r1
 80085e4:	4614      	mov	r4, r2
 80085e6:	2600      	movs	r6, #0
 80085e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085ec:	f1b9 0901 	subs.w	r9, r9, #1
 80085f0:	d505      	bpl.n	80085fe <_fwalk_sglue+0x22>
 80085f2:	6824      	ldr	r4, [r4, #0]
 80085f4:	2c00      	cmp	r4, #0
 80085f6:	d1f7      	bne.n	80085e8 <_fwalk_sglue+0xc>
 80085f8:	4630      	mov	r0, r6
 80085fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d907      	bls.n	8008614 <_fwalk_sglue+0x38>
 8008604:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008608:	3301      	adds	r3, #1
 800860a:	d003      	beq.n	8008614 <_fwalk_sglue+0x38>
 800860c:	4629      	mov	r1, r5
 800860e:	4638      	mov	r0, r7
 8008610:	47c0      	blx	r8
 8008612:	4306      	orrs	r6, r0
 8008614:	3568      	adds	r5, #104	@ 0x68
 8008616:	e7e9      	b.n	80085ec <_fwalk_sglue+0x10>

08008618 <iprintf>:
 8008618:	b40f      	push	{r0, r1, r2, r3}
 800861a:	b507      	push	{r0, r1, r2, lr}
 800861c:	4906      	ldr	r1, [pc, #24]	@ (8008638 <iprintf+0x20>)
 800861e:	ab04      	add	r3, sp, #16
 8008620:	6808      	ldr	r0, [r1, #0]
 8008622:	f853 2b04 	ldr.w	r2, [r3], #4
 8008626:	6881      	ldr	r1, [r0, #8]
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	f000 fcf3 	bl	8009014 <_vfiprintf_r>
 800862e:	b003      	add	sp, #12
 8008630:	f85d eb04 	ldr.w	lr, [sp], #4
 8008634:	b004      	add	sp, #16
 8008636:	4770      	bx	lr
 8008638:	20000024 	.word	0x20000024

0800863c <_puts_r>:
 800863c:	6a03      	ldr	r3, [r0, #32]
 800863e:	b570      	push	{r4, r5, r6, lr}
 8008640:	6884      	ldr	r4, [r0, #8]
 8008642:	4605      	mov	r5, r0
 8008644:	460e      	mov	r6, r1
 8008646:	b90b      	cbnz	r3, 800864c <_puts_r+0x10>
 8008648:	f7ff ffb0 	bl	80085ac <__sinit>
 800864c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800864e:	07db      	lsls	r3, r3, #31
 8008650:	d405      	bmi.n	800865e <_puts_r+0x22>
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	0598      	lsls	r0, r3, #22
 8008656:	d402      	bmi.n	800865e <_puts_r+0x22>
 8008658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800865a:	f000 fa48 	bl	8008aee <__retarget_lock_acquire_recursive>
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	0719      	lsls	r1, r3, #28
 8008662:	d502      	bpl.n	800866a <_puts_r+0x2e>
 8008664:	6923      	ldr	r3, [r4, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d135      	bne.n	80086d6 <_puts_r+0x9a>
 800866a:	4621      	mov	r1, r4
 800866c:	4628      	mov	r0, r5
 800866e:	f000 f919 	bl	80088a4 <__swsetup_r>
 8008672:	b380      	cbz	r0, 80086d6 <_puts_r+0x9a>
 8008674:	f04f 35ff 	mov.w	r5, #4294967295
 8008678:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800867a:	07da      	lsls	r2, r3, #31
 800867c:	d405      	bmi.n	800868a <_puts_r+0x4e>
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	059b      	lsls	r3, r3, #22
 8008682:	d402      	bmi.n	800868a <_puts_r+0x4e>
 8008684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008686:	f000 fa33 	bl	8008af0 <__retarget_lock_release_recursive>
 800868a:	4628      	mov	r0, r5
 800868c:	bd70      	pop	{r4, r5, r6, pc}
 800868e:	2b00      	cmp	r3, #0
 8008690:	da04      	bge.n	800869c <_puts_r+0x60>
 8008692:	69a2      	ldr	r2, [r4, #24]
 8008694:	429a      	cmp	r2, r3
 8008696:	dc17      	bgt.n	80086c8 <_puts_r+0x8c>
 8008698:	290a      	cmp	r1, #10
 800869a:	d015      	beq.n	80086c8 <_puts_r+0x8c>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	1c5a      	adds	r2, r3, #1
 80086a0:	6022      	str	r2, [r4, #0]
 80086a2:	7019      	strb	r1, [r3, #0]
 80086a4:	68a3      	ldr	r3, [r4, #8]
 80086a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086aa:	3b01      	subs	r3, #1
 80086ac:	60a3      	str	r3, [r4, #8]
 80086ae:	2900      	cmp	r1, #0
 80086b0:	d1ed      	bne.n	800868e <_puts_r+0x52>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	da11      	bge.n	80086da <_puts_r+0x9e>
 80086b6:	4622      	mov	r2, r4
 80086b8:	210a      	movs	r1, #10
 80086ba:	4628      	mov	r0, r5
 80086bc:	f000 f8b3 	bl	8008826 <__swbuf_r>
 80086c0:	3001      	adds	r0, #1
 80086c2:	d0d7      	beq.n	8008674 <_puts_r+0x38>
 80086c4:	250a      	movs	r5, #10
 80086c6:	e7d7      	b.n	8008678 <_puts_r+0x3c>
 80086c8:	4622      	mov	r2, r4
 80086ca:	4628      	mov	r0, r5
 80086cc:	f000 f8ab 	bl	8008826 <__swbuf_r>
 80086d0:	3001      	adds	r0, #1
 80086d2:	d1e7      	bne.n	80086a4 <_puts_r+0x68>
 80086d4:	e7ce      	b.n	8008674 <_puts_r+0x38>
 80086d6:	3e01      	subs	r6, #1
 80086d8:	e7e4      	b.n	80086a4 <_puts_r+0x68>
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	6022      	str	r2, [r4, #0]
 80086e0:	220a      	movs	r2, #10
 80086e2:	701a      	strb	r2, [r3, #0]
 80086e4:	e7ee      	b.n	80086c4 <_puts_r+0x88>
	...

080086e8 <puts>:
 80086e8:	4b02      	ldr	r3, [pc, #8]	@ (80086f4 <puts+0xc>)
 80086ea:	4601      	mov	r1, r0
 80086ec:	6818      	ldr	r0, [r3, #0]
 80086ee:	f7ff bfa5 	b.w	800863c <_puts_r>
 80086f2:	bf00      	nop
 80086f4:	20000024 	.word	0x20000024

080086f8 <sniprintf>:
 80086f8:	b40c      	push	{r2, r3}
 80086fa:	b530      	push	{r4, r5, lr}
 80086fc:	4b17      	ldr	r3, [pc, #92]	@ (800875c <sniprintf+0x64>)
 80086fe:	1e0c      	subs	r4, r1, #0
 8008700:	681d      	ldr	r5, [r3, #0]
 8008702:	b09d      	sub	sp, #116	@ 0x74
 8008704:	da08      	bge.n	8008718 <sniprintf+0x20>
 8008706:	238b      	movs	r3, #139	@ 0x8b
 8008708:	602b      	str	r3, [r5, #0]
 800870a:	f04f 30ff 	mov.w	r0, #4294967295
 800870e:	b01d      	add	sp, #116	@ 0x74
 8008710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008714:	b002      	add	sp, #8
 8008716:	4770      	bx	lr
 8008718:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800871c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008720:	bf14      	ite	ne
 8008722:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008726:	4623      	moveq	r3, r4
 8008728:	9304      	str	r3, [sp, #16]
 800872a:	9307      	str	r3, [sp, #28]
 800872c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008730:	9002      	str	r0, [sp, #8]
 8008732:	9006      	str	r0, [sp, #24]
 8008734:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008738:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800873a:	ab21      	add	r3, sp, #132	@ 0x84
 800873c:	a902      	add	r1, sp, #8
 800873e:	4628      	mov	r0, r5
 8008740:	9301      	str	r3, [sp, #4]
 8008742:	f000 fb41 	bl	8008dc8 <_svfiprintf_r>
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	bfbc      	itt	lt
 800874a:	238b      	movlt	r3, #139	@ 0x8b
 800874c:	602b      	strlt	r3, [r5, #0]
 800874e:	2c00      	cmp	r4, #0
 8008750:	d0dd      	beq.n	800870e <sniprintf+0x16>
 8008752:	9b02      	ldr	r3, [sp, #8]
 8008754:	2200      	movs	r2, #0
 8008756:	701a      	strb	r2, [r3, #0]
 8008758:	e7d9      	b.n	800870e <sniprintf+0x16>
 800875a:	bf00      	nop
 800875c:	20000024 	.word	0x20000024

08008760 <siprintf>:
 8008760:	b40e      	push	{r1, r2, r3}
 8008762:	b500      	push	{lr}
 8008764:	b09c      	sub	sp, #112	@ 0x70
 8008766:	ab1d      	add	r3, sp, #116	@ 0x74
 8008768:	9002      	str	r0, [sp, #8]
 800876a:	9006      	str	r0, [sp, #24]
 800876c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008770:	4809      	ldr	r0, [pc, #36]	@ (8008798 <siprintf+0x38>)
 8008772:	9107      	str	r1, [sp, #28]
 8008774:	9104      	str	r1, [sp, #16]
 8008776:	4909      	ldr	r1, [pc, #36]	@ (800879c <siprintf+0x3c>)
 8008778:	f853 2b04 	ldr.w	r2, [r3], #4
 800877c:	9105      	str	r1, [sp, #20]
 800877e:	6800      	ldr	r0, [r0, #0]
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	a902      	add	r1, sp, #8
 8008784:	f000 fb20 	bl	8008dc8 <_svfiprintf_r>
 8008788:	9b02      	ldr	r3, [sp, #8]
 800878a:	2200      	movs	r2, #0
 800878c:	701a      	strb	r2, [r3, #0]
 800878e:	b01c      	add	sp, #112	@ 0x70
 8008790:	f85d eb04 	ldr.w	lr, [sp], #4
 8008794:	b003      	add	sp, #12
 8008796:	4770      	bx	lr
 8008798:	20000024 	.word	0x20000024
 800879c:	ffff0208 	.word	0xffff0208

080087a0 <__sread>:
 80087a0:	b510      	push	{r4, lr}
 80087a2:	460c      	mov	r4, r1
 80087a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a8:	f000 f952 	bl	8008a50 <_read_r>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	bfab      	itete	ge
 80087b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80087b2:	89a3      	ldrhlt	r3, [r4, #12]
 80087b4:	181b      	addge	r3, r3, r0
 80087b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80087ba:	bfac      	ite	ge
 80087bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80087be:	81a3      	strhlt	r3, [r4, #12]
 80087c0:	bd10      	pop	{r4, pc}

080087c2 <__swrite>:
 80087c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c6:	461f      	mov	r7, r3
 80087c8:	898b      	ldrh	r3, [r1, #12]
 80087ca:	05db      	lsls	r3, r3, #23
 80087cc:	4605      	mov	r5, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	4616      	mov	r6, r2
 80087d2:	d505      	bpl.n	80087e0 <__swrite+0x1e>
 80087d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d8:	2302      	movs	r3, #2
 80087da:	2200      	movs	r2, #0
 80087dc:	f000 f926 	bl	8008a2c <_lseek_r>
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087ea:	81a3      	strh	r3, [r4, #12]
 80087ec:	4632      	mov	r2, r6
 80087ee:	463b      	mov	r3, r7
 80087f0:	4628      	mov	r0, r5
 80087f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087f6:	f000 b93d 	b.w	8008a74 <_write_r>

080087fa <__sseek>:
 80087fa:	b510      	push	{r4, lr}
 80087fc:	460c      	mov	r4, r1
 80087fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008802:	f000 f913 	bl	8008a2c <_lseek_r>
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	bf15      	itete	ne
 800880c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800880e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008812:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008816:	81a3      	strheq	r3, [r4, #12]
 8008818:	bf18      	it	ne
 800881a:	81a3      	strhne	r3, [r4, #12]
 800881c:	bd10      	pop	{r4, pc}

0800881e <__sclose>:
 800881e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008822:	f000 b89d 	b.w	8008960 <_close_r>

08008826 <__swbuf_r>:
 8008826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008828:	460e      	mov	r6, r1
 800882a:	4614      	mov	r4, r2
 800882c:	4605      	mov	r5, r0
 800882e:	b118      	cbz	r0, 8008838 <__swbuf_r+0x12>
 8008830:	6a03      	ldr	r3, [r0, #32]
 8008832:	b90b      	cbnz	r3, 8008838 <__swbuf_r+0x12>
 8008834:	f7ff feba 	bl	80085ac <__sinit>
 8008838:	69a3      	ldr	r3, [r4, #24]
 800883a:	60a3      	str	r3, [r4, #8]
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	071a      	lsls	r2, r3, #28
 8008840:	d501      	bpl.n	8008846 <__swbuf_r+0x20>
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	b943      	cbnz	r3, 8008858 <__swbuf_r+0x32>
 8008846:	4621      	mov	r1, r4
 8008848:	4628      	mov	r0, r5
 800884a:	f000 f82b 	bl	80088a4 <__swsetup_r>
 800884e:	b118      	cbz	r0, 8008858 <__swbuf_r+0x32>
 8008850:	f04f 37ff 	mov.w	r7, #4294967295
 8008854:	4638      	mov	r0, r7
 8008856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	6922      	ldr	r2, [r4, #16]
 800885c:	1a98      	subs	r0, r3, r2
 800885e:	6963      	ldr	r3, [r4, #20]
 8008860:	b2f6      	uxtb	r6, r6
 8008862:	4283      	cmp	r3, r0
 8008864:	4637      	mov	r7, r6
 8008866:	dc05      	bgt.n	8008874 <__swbuf_r+0x4e>
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f000 fefc 	bl	8009668 <_fflush_r>
 8008870:	2800      	cmp	r0, #0
 8008872:	d1ed      	bne.n	8008850 <__swbuf_r+0x2a>
 8008874:	68a3      	ldr	r3, [r4, #8]
 8008876:	3b01      	subs	r3, #1
 8008878:	60a3      	str	r3, [r4, #8]
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	1c5a      	adds	r2, r3, #1
 800887e:	6022      	str	r2, [r4, #0]
 8008880:	701e      	strb	r6, [r3, #0]
 8008882:	6962      	ldr	r2, [r4, #20]
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	429a      	cmp	r2, r3
 8008888:	d004      	beq.n	8008894 <__swbuf_r+0x6e>
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	07db      	lsls	r3, r3, #31
 800888e:	d5e1      	bpl.n	8008854 <__swbuf_r+0x2e>
 8008890:	2e0a      	cmp	r6, #10
 8008892:	d1df      	bne.n	8008854 <__swbuf_r+0x2e>
 8008894:	4621      	mov	r1, r4
 8008896:	4628      	mov	r0, r5
 8008898:	f000 fee6 	bl	8009668 <_fflush_r>
 800889c:	2800      	cmp	r0, #0
 800889e:	d0d9      	beq.n	8008854 <__swbuf_r+0x2e>
 80088a0:	e7d6      	b.n	8008850 <__swbuf_r+0x2a>
	...

080088a4 <__swsetup_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4b29      	ldr	r3, [pc, #164]	@ (800894c <__swsetup_r+0xa8>)
 80088a8:	4605      	mov	r5, r0
 80088aa:	6818      	ldr	r0, [r3, #0]
 80088ac:	460c      	mov	r4, r1
 80088ae:	b118      	cbz	r0, 80088b8 <__swsetup_r+0x14>
 80088b0:	6a03      	ldr	r3, [r0, #32]
 80088b2:	b90b      	cbnz	r3, 80088b8 <__swsetup_r+0x14>
 80088b4:	f7ff fe7a 	bl	80085ac <__sinit>
 80088b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088bc:	0719      	lsls	r1, r3, #28
 80088be:	d422      	bmi.n	8008906 <__swsetup_r+0x62>
 80088c0:	06da      	lsls	r2, r3, #27
 80088c2:	d407      	bmi.n	80088d4 <__swsetup_r+0x30>
 80088c4:	2209      	movs	r2, #9
 80088c6:	602a      	str	r2, [r5, #0]
 80088c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088cc:	81a3      	strh	r3, [r4, #12]
 80088ce:	f04f 30ff 	mov.w	r0, #4294967295
 80088d2:	e033      	b.n	800893c <__swsetup_r+0x98>
 80088d4:	0758      	lsls	r0, r3, #29
 80088d6:	d512      	bpl.n	80088fe <__swsetup_r+0x5a>
 80088d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088da:	b141      	cbz	r1, 80088ee <__swsetup_r+0x4a>
 80088dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80088e0:	4299      	cmp	r1, r3
 80088e2:	d002      	beq.n	80088ea <__swsetup_r+0x46>
 80088e4:	4628      	mov	r0, r5
 80088e6:	f000 f91b 	bl	8008b20 <_free_r>
 80088ea:	2300      	movs	r3, #0
 80088ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80088f4:	81a3      	strh	r3, [r4, #12]
 80088f6:	2300      	movs	r3, #0
 80088f8:	6063      	str	r3, [r4, #4]
 80088fa:	6923      	ldr	r3, [r4, #16]
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	f043 0308 	orr.w	r3, r3, #8
 8008904:	81a3      	strh	r3, [r4, #12]
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	b94b      	cbnz	r3, 800891e <__swsetup_r+0x7a>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008914:	d003      	beq.n	800891e <__swsetup_r+0x7a>
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f000 fef3 	bl	8009704 <__smakebuf_r>
 800891e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008922:	f013 0201 	ands.w	r2, r3, #1
 8008926:	d00a      	beq.n	800893e <__swsetup_r+0x9a>
 8008928:	2200      	movs	r2, #0
 800892a:	60a2      	str	r2, [r4, #8]
 800892c:	6962      	ldr	r2, [r4, #20]
 800892e:	4252      	negs	r2, r2
 8008930:	61a2      	str	r2, [r4, #24]
 8008932:	6922      	ldr	r2, [r4, #16]
 8008934:	b942      	cbnz	r2, 8008948 <__swsetup_r+0xa4>
 8008936:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800893a:	d1c5      	bne.n	80088c8 <__swsetup_r+0x24>
 800893c:	bd38      	pop	{r3, r4, r5, pc}
 800893e:	0799      	lsls	r1, r3, #30
 8008940:	bf58      	it	pl
 8008942:	6962      	ldrpl	r2, [r4, #20]
 8008944:	60a2      	str	r2, [r4, #8]
 8008946:	e7f4      	b.n	8008932 <__swsetup_r+0x8e>
 8008948:	2000      	movs	r0, #0
 800894a:	e7f7      	b.n	800893c <__swsetup_r+0x98>
 800894c:	20000024 	.word	0x20000024

08008950 <memset>:
 8008950:	4402      	add	r2, r0
 8008952:	4603      	mov	r3, r0
 8008954:	4293      	cmp	r3, r2
 8008956:	d100      	bne.n	800895a <memset+0xa>
 8008958:	4770      	bx	lr
 800895a:	f803 1b01 	strb.w	r1, [r3], #1
 800895e:	e7f9      	b.n	8008954 <memset+0x4>

08008960 <_close_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4d06      	ldr	r5, [pc, #24]	@ (800897c <_close_r+0x1c>)
 8008964:	2300      	movs	r3, #0
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	602b      	str	r3, [r5, #0]
 800896c:	f7f8 fd85 	bl	800147a <_close>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_close_r+0x1a>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_close_r+0x1a>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	20005008 	.word	0x20005008

08008980 <_reclaim_reent>:
 8008980:	4b29      	ldr	r3, [pc, #164]	@ (8008a28 <_reclaim_reent+0xa8>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4283      	cmp	r3, r0
 8008986:	b570      	push	{r4, r5, r6, lr}
 8008988:	4604      	mov	r4, r0
 800898a:	d04b      	beq.n	8008a24 <_reclaim_reent+0xa4>
 800898c:	69c3      	ldr	r3, [r0, #28]
 800898e:	b1ab      	cbz	r3, 80089bc <_reclaim_reent+0x3c>
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	b16b      	cbz	r3, 80089b0 <_reclaim_reent+0x30>
 8008994:	2500      	movs	r5, #0
 8008996:	69e3      	ldr	r3, [r4, #28]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	5959      	ldr	r1, [r3, r5]
 800899c:	2900      	cmp	r1, #0
 800899e:	d13b      	bne.n	8008a18 <_reclaim_reent+0x98>
 80089a0:	3504      	adds	r5, #4
 80089a2:	2d80      	cmp	r5, #128	@ 0x80
 80089a4:	d1f7      	bne.n	8008996 <_reclaim_reent+0x16>
 80089a6:	69e3      	ldr	r3, [r4, #28]
 80089a8:	4620      	mov	r0, r4
 80089aa:	68d9      	ldr	r1, [r3, #12]
 80089ac:	f000 f8b8 	bl	8008b20 <_free_r>
 80089b0:	69e3      	ldr	r3, [r4, #28]
 80089b2:	6819      	ldr	r1, [r3, #0]
 80089b4:	b111      	cbz	r1, 80089bc <_reclaim_reent+0x3c>
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 f8b2 	bl	8008b20 <_free_r>
 80089bc:	6961      	ldr	r1, [r4, #20]
 80089be:	b111      	cbz	r1, 80089c6 <_reclaim_reent+0x46>
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 f8ad 	bl	8008b20 <_free_r>
 80089c6:	69e1      	ldr	r1, [r4, #28]
 80089c8:	b111      	cbz	r1, 80089d0 <_reclaim_reent+0x50>
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 f8a8 	bl	8008b20 <_free_r>
 80089d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80089d2:	b111      	cbz	r1, 80089da <_reclaim_reent+0x5a>
 80089d4:	4620      	mov	r0, r4
 80089d6:	f000 f8a3 	bl	8008b20 <_free_r>
 80089da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089dc:	b111      	cbz	r1, 80089e4 <_reclaim_reent+0x64>
 80089de:	4620      	mov	r0, r4
 80089e0:	f000 f89e 	bl	8008b20 <_free_r>
 80089e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80089e6:	b111      	cbz	r1, 80089ee <_reclaim_reent+0x6e>
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 f899 	bl	8008b20 <_free_r>
 80089ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80089f0:	b111      	cbz	r1, 80089f8 <_reclaim_reent+0x78>
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 f894 	bl	8008b20 <_free_r>
 80089f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80089fa:	b111      	cbz	r1, 8008a02 <_reclaim_reent+0x82>
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 f88f 	bl	8008b20 <_free_r>
 8008a02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008a04:	b111      	cbz	r1, 8008a0c <_reclaim_reent+0x8c>
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 f88a 	bl	8008b20 <_free_r>
 8008a0c:	6a23      	ldr	r3, [r4, #32]
 8008a0e:	b14b      	cbz	r3, 8008a24 <_reclaim_reent+0xa4>
 8008a10:	4620      	mov	r0, r4
 8008a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a16:	4718      	bx	r3
 8008a18:	680e      	ldr	r6, [r1, #0]
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f000 f880 	bl	8008b20 <_free_r>
 8008a20:	4631      	mov	r1, r6
 8008a22:	e7bb      	b.n	800899c <_reclaim_reent+0x1c>
 8008a24:	bd70      	pop	{r4, r5, r6, pc}
 8008a26:	bf00      	nop
 8008a28:	20000024 	.word	0x20000024

08008a2c <_lseek_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4d07      	ldr	r5, [pc, #28]	@ (8008a4c <_lseek_r+0x20>)
 8008a30:	4604      	mov	r4, r0
 8008a32:	4608      	mov	r0, r1
 8008a34:	4611      	mov	r1, r2
 8008a36:	2200      	movs	r2, #0
 8008a38:	602a      	str	r2, [r5, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f7f8 fd44 	bl	80014c8 <_lseek>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	d102      	bne.n	8008a4a <_lseek_r+0x1e>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	b103      	cbz	r3, 8008a4a <_lseek_r+0x1e>
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	20005008 	.word	0x20005008

08008a50 <_read_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4d07      	ldr	r5, [pc, #28]	@ (8008a70 <_read_r+0x20>)
 8008a54:	4604      	mov	r4, r0
 8008a56:	4608      	mov	r0, r1
 8008a58:	4611      	mov	r1, r2
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	602a      	str	r2, [r5, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f7f8 fcd2 	bl	8001408 <_read>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_read_r+0x1e>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_read_r+0x1e>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	20005008 	.word	0x20005008

08008a74 <_write_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d07      	ldr	r5, [pc, #28]	@ (8008a94 <_write_r+0x20>)
 8008a78:	4604      	mov	r4, r0
 8008a7a:	4608      	mov	r0, r1
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	2200      	movs	r2, #0
 8008a80:	602a      	str	r2, [r5, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	f7f8 fcdd 	bl	8001442 <_write>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_write_r+0x1e>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_write_r+0x1e>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	20005008 	.word	0x20005008

08008a98 <__errno>:
 8008a98:	4b01      	ldr	r3, [pc, #4]	@ (8008aa0 <__errno+0x8>)
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	20000024 	.word	0x20000024

08008aa4 <__libc_init_array>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8008adc <__libc_init_array+0x38>)
 8008aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8008ae0 <__libc_init_array+0x3c>)
 8008aaa:	1b64      	subs	r4, r4, r5
 8008aac:	10a4      	asrs	r4, r4, #2
 8008aae:	2600      	movs	r6, #0
 8008ab0:	42a6      	cmp	r6, r4
 8008ab2:	d109      	bne.n	8008ac8 <__libc_init_array+0x24>
 8008ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8008ae4 <__libc_init_array+0x40>)
 8008ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8008ae8 <__libc_init_array+0x44>)
 8008ab8:	f000 fee2 	bl	8009880 <_init>
 8008abc:	1b64      	subs	r4, r4, r5
 8008abe:	10a4      	asrs	r4, r4, #2
 8008ac0:	2600      	movs	r6, #0
 8008ac2:	42a6      	cmp	r6, r4
 8008ac4:	d105      	bne.n	8008ad2 <__libc_init_array+0x2e>
 8008ac6:	bd70      	pop	{r4, r5, r6, pc}
 8008ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008acc:	4798      	blx	r3
 8008ace:	3601      	adds	r6, #1
 8008ad0:	e7ee      	b.n	8008ab0 <__libc_init_array+0xc>
 8008ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad6:	4798      	blx	r3
 8008ad8:	3601      	adds	r6, #1
 8008ada:	e7f2      	b.n	8008ac2 <__libc_init_array+0x1e>
 8008adc:	08009d5c 	.word	0x08009d5c
 8008ae0:	08009d5c 	.word	0x08009d5c
 8008ae4:	08009d5c 	.word	0x08009d5c
 8008ae8:	08009d60 	.word	0x08009d60

08008aec <__retarget_lock_init_recursive>:
 8008aec:	4770      	bx	lr

08008aee <__retarget_lock_acquire_recursive>:
 8008aee:	4770      	bx	lr

08008af0 <__retarget_lock_release_recursive>:
 8008af0:	4770      	bx	lr

08008af2 <strcpy>:
 8008af2:	4603      	mov	r3, r0
 8008af4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008af8:	f803 2b01 	strb.w	r2, [r3], #1
 8008afc:	2a00      	cmp	r2, #0
 8008afe:	d1f9      	bne.n	8008af4 <strcpy+0x2>
 8008b00:	4770      	bx	lr

08008b02 <memcpy>:
 8008b02:	440a      	add	r2, r1
 8008b04:	4291      	cmp	r1, r2
 8008b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b0a:	d100      	bne.n	8008b0e <memcpy+0xc>
 8008b0c:	4770      	bx	lr
 8008b0e:	b510      	push	{r4, lr}
 8008b10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b18:	4291      	cmp	r1, r2
 8008b1a:	d1f9      	bne.n	8008b10 <memcpy+0xe>
 8008b1c:	bd10      	pop	{r4, pc}
	...

08008b20 <_free_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	4605      	mov	r5, r0
 8008b24:	2900      	cmp	r1, #0
 8008b26:	d041      	beq.n	8008bac <_free_r+0x8c>
 8008b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b2c:	1f0c      	subs	r4, r1, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	bfb8      	it	lt
 8008b32:	18e4      	addlt	r4, r4, r3
 8008b34:	f000 f8e0 	bl	8008cf8 <__malloc_lock>
 8008b38:	4a1d      	ldr	r2, [pc, #116]	@ (8008bb0 <_free_r+0x90>)
 8008b3a:	6813      	ldr	r3, [r2, #0]
 8008b3c:	b933      	cbnz	r3, 8008b4c <_free_r+0x2c>
 8008b3e:	6063      	str	r3, [r4, #4]
 8008b40:	6014      	str	r4, [r2, #0]
 8008b42:	4628      	mov	r0, r5
 8008b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b48:	f000 b8dc 	b.w	8008d04 <__malloc_unlock>
 8008b4c:	42a3      	cmp	r3, r4
 8008b4e:	d908      	bls.n	8008b62 <_free_r+0x42>
 8008b50:	6820      	ldr	r0, [r4, #0]
 8008b52:	1821      	adds	r1, r4, r0
 8008b54:	428b      	cmp	r3, r1
 8008b56:	bf01      	itttt	eq
 8008b58:	6819      	ldreq	r1, [r3, #0]
 8008b5a:	685b      	ldreq	r3, [r3, #4]
 8008b5c:	1809      	addeq	r1, r1, r0
 8008b5e:	6021      	streq	r1, [r4, #0]
 8008b60:	e7ed      	b.n	8008b3e <_free_r+0x1e>
 8008b62:	461a      	mov	r2, r3
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	b10b      	cbz	r3, 8008b6c <_free_r+0x4c>
 8008b68:	42a3      	cmp	r3, r4
 8008b6a:	d9fa      	bls.n	8008b62 <_free_r+0x42>
 8008b6c:	6811      	ldr	r1, [r2, #0]
 8008b6e:	1850      	adds	r0, r2, r1
 8008b70:	42a0      	cmp	r0, r4
 8008b72:	d10b      	bne.n	8008b8c <_free_r+0x6c>
 8008b74:	6820      	ldr	r0, [r4, #0]
 8008b76:	4401      	add	r1, r0
 8008b78:	1850      	adds	r0, r2, r1
 8008b7a:	4283      	cmp	r3, r0
 8008b7c:	6011      	str	r1, [r2, #0]
 8008b7e:	d1e0      	bne.n	8008b42 <_free_r+0x22>
 8008b80:	6818      	ldr	r0, [r3, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	6053      	str	r3, [r2, #4]
 8008b86:	4408      	add	r0, r1
 8008b88:	6010      	str	r0, [r2, #0]
 8008b8a:	e7da      	b.n	8008b42 <_free_r+0x22>
 8008b8c:	d902      	bls.n	8008b94 <_free_r+0x74>
 8008b8e:	230c      	movs	r3, #12
 8008b90:	602b      	str	r3, [r5, #0]
 8008b92:	e7d6      	b.n	8008b42 <_free_r+0x22>
 8008b94:	6820      	ldr	r0, [r4, #0]
 8008b96:	1821      	adds	r1, r4, r0
 8008b98:	428b      	cmp	r3, r1
 8008b9a:	bf04      	itt	eq
 8008b9c:	6819      	ldreq	r1, [r3, #0]
 8008b9e:	685b      	ldreq	r3, [r3, #4]
 8008ba0:	6063      	str	r3, [r4, #4]
 8008ba2:	bf04      	itt	eq
 8008ba4:	1809      	addeq	r1, r1, r0
 8008ba6:	6021      	streq	r1, [r4, #0]
 8008ba8:	6054      	str	r4, [r2, #4]
 8008baa:	e7ca      	b.n	8008b42 <_free_r+0x22>
 8008bac:	bd38      	pop	{r3, r4, r5, pc}
 8008bae:	bf00      	nop
 8008bb0:	20005014 	.word	0x20005014

08008bb4 <sbrk_aligned>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8008bf4 <sbrk_aligned+0x40>)
 8008bb8:	460c      	mov	r4, r1
 8008bba:	6831      	ldr	r1, [r6, #0]
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	b911      	cbnz	r1, 8008bc6 <sbrk_aligned+0x12>
 8008bc0:	f000 fe18 	bl	80097f4 <_sbrk_r>
 8008bc4:	6030      	str	r0, [r6, #0]
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f000 fe13 	bl	80097f4 <_sbrk_r>
 8008bce:	1c43      	adds	r3, r0, #1
 8008bd0:	d103      	bne.n	8008bda <sbrk_aligned+0x26>
 8008bd2:	f04f 34ff 	mov.w	r4, #4294967295
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	bd70      	pop	{r4, r5, r6, pc}
 8008bda:	1cc4      	adds	r4, r0, #3
 8008bdc:	f024 0403 	bic.w	r4, r4, #3
 8008be0:	42a0      	cmp	r0, r4
 8008be2:	d0f8      	beq.n	8008bd6 <sbrk_aligned+0x22>
 8008be4:	1a21      	subs	r1, r4, r0
 8008be6:	4628      	mov	r0, r5
 8008be8:	f000 fe04 	bl	80097f4 <_sbrk_r>
 8008bec:	3001      	adds	r0, #1
 8008bee:	d1f2      	bne.n	8008bd6 <sbrk_aligned+0x22>
 8008bf0:	e7ef      	b.n	8008bd2 <sbrk_aligned+0x1e>
 8008bf2:	bf00      	nop
 8008bf4:	20005010 	.word	0x20005010

08008bf8 <_malloc_r>:
 8008bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	1ccd      	adds	r5, r1, #3
 8008bfe:	f025 0503 	bic.w	r5, r5, #3
 8008c02:	3508      	adds	r5, #8
 8008c04:	2d0c      	cmp	r5, #12
 8008c06:	bf38      	it	cc
 8008c08:	250c      	movcc	r5, #12
 8008c0a:	2d00      	cmp	r5, #0
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	db01      	blt.n	8008c14 <_malloc_r+0x1c>
 8008c10:	42a9      	cmp	r1, r5
 8008c12:	d904      	bls.n	8008c1e <_malloc_r+0x26>
 8008c14:	230c      	movs	r3, #12
 8008c16:	6033      	str	r3, [r6, #0]
 8008c18:	2000      	movs	r0, #0
 8008c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cf4 <_malloc_r+0xfc>
 8008c22:	f000 f869 	bl	8008cf8 <__malloc_lock>
 8008c26:	f8d8 3000 	ldr.w	r3, [r8]
 8008c2a:	461c      	mov	r4, r3
 8008c2c:	bb44      	cbnz	r4, 8008c80 <_malloc_r+0x88>
 8008c2e:	4629      	mov	r1, r5
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7ff ffbf 	bl	8008bb4 <sbrk_aligned>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	4604      	mov	r4, r0
 8008c3a:	d158      	bne.n	8008cee <_malloc_r+0xf6>
 8008c3c:	f8d8 4000 	ldr.w	r4, [r8]
 8008c40:	4627      	mov	r7, r4
 8008c42:	2f00      	cmp	r7, #0
 8008c44:	d143      	bne.n	8008cce <_malloc_r+0xd6>
 8008c46:	2c00      	cmp	r4, #0
 8008c48:	d04b      	beq.n	8008ce2 <_malloc_r+0xea>
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	4639      	mov	r1, r7
 8008c4e:	4630      	mov	r0, r6
 8008c50:	eb04 0903 	add.w	r9, r4, r3
 8008c54:	f000 fdce 	bl	80097f4 <_sbrk_r>
 8008c58:	4581      	cmp	r9, r0
 8008c5a:	d142      	bne.n	8008ce2 <_malloc_r+0xea>
 8008c5c:	6821      	ldr	r1, [r4, #0]
 8008c5e:	1a6d      	subs	r5, r5, r1
 8008c60:	4629      	mov	r1, r5
 8008c62:	4630      	mov	r0, r6
 8008c64:	f7ff ffa6 	bl	8008bb4 <sbrk_aligned>
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d03a      	beq.n	8008ce2 <_malloc_r+0xea>
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	442b      	add	r3, r5
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	f8d8 3000 	ldr.w	r3, [r8]
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	bb62      	cbnz	r2, 8008cd4 <_malloc_r+0xdc>
 8008c7a:	f8c8 7000 	str.w	r7, [r8]
 8008c7e:	e00f      	b.n	8008ca0 <_malloc_r+0xa8>
 8008c80:	6822      	ldr	r2, [r4, #0]
 8008c82:	1b52      	subs	r2, r2, r5
 8008c84:	d420      	bmi.n	8008cc8 <_malloc_r+0xd0>
 8008c86:	2a0b      	cmp	r2, #11
 8008c88:	d917      	bls.n	8008cba <_malloc_r+0xc2>
 8008c8a:	1961      	adds	r1, r4, r5
 8008c8c:	42a3      	cmp	r3, r4
 8008c8e:	6025      	str	r5, [r4, #0]
 8008c90:	bf18      	it	ne
 8008c92:	6059      	strne	r1, [r3, #4]
 8008c94:	6863      	ldr	r3, [r4, #4]
 8008c96:	bf08      	it	eq
 8008c98:	f8c8 1000 	streq.w	r1, [r8]
 8008c9c:	5162      	str	r2, [r4, r5]
 8008c9e:	604b      	str	r3, [r1, #4]
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f000 f82f 	bl	8008d04 <__malloc_unlock>
 8008ca6:	f104 000b 	add.w	r0, r4, #11
 8008caa:	1d23      	adds	r3, r4, #4
 8008cac:	f020 0007 	bic.w	r0, r0, #7
 8008cb0:	1ac2      	subs	r2, r0, r3
 8008cb2:	bf1c      	itt	ne
 8008cb4:	1a1b      	subne	r3, r3, r0
 8008cb6:	50a3      	strne	r3, [r4, r2]
 8008cb8:	e7af      	b.n	8008c1a <_malloc_r+0x22>
 8008cba:	6862      	ldr	r2, [r4, #4]
 8008cbc:	42a3      	cmp	r3, r4
 8008cbe:	bf0c      	ite	eq
 8008cc0:	f8c8 2000 	streq.w	r2, [r8]
 8008cc4:	605a      	strne	r2, [r3, #4]
 8008cc6:	e7eb      	b.n	8008ca0 <_malloc_r+0xa8>
 8008cc8:	4623      	mov	r3, r4
 8008cca:	6864      	ldr	r4, [r4, #4]
 8008ccc:	e7ae      	b.n	8008c2c <_malloc_r+0x34>
 8008cce:	463c      	mov	r4, r7
 8008cd0:	687f      	ldr	r7, [r7, #4]
 8008cd2:	e7b6      	b.n	8008c42 <_malloc_r+0x4a>
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	d1fb      	bne.n	8008cd4 <_malloc_r+0xdc>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	6053      	str	r3, [r2, #4]
 8008ce0:	e7de      	b.n	8008ca0 <_malloc_r+0xa8>
 8008ce2:	230c      	movs	r3, #12
 8008ce4:	6033      	str	r3, [r6, #0]
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f000 f80c 	bl	8008d04 <__malloc_unlock>
 8008cec:	e794      	b.n	8008c18 <_malloc_r+0x20>
 8008cee:	6005      	str	r5, [r0, #0]
 8008cf0:	e7d6      	b.n	8008ca0 <_malloc_r+0xa8>
 8008cf2:	bf00      	nop
 8008cf4:	20005014 	.word	0x20005014

08008cf8 <__malloc_lock>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	@ (8008d00 <__malloc_lock+0x8>)
 8008cfa:	f7ff bef8 	b.w	8008aee <__retarget_lock_acquire_recursive>
 8008cfe:	bf00      	nop
 8008d00:	2000500c 	.word	0x2000500c

08008d04 <__malloc_unlock>:
 8008d04:	4801      	ldr	r0, [pc, #4]	@ (8008d0c <__malloc_unlock+0x8>)
 8008d06:	f7ff bef3 	b.w	8008af0 <__retarget_lock_release_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	2000500c 	.word	0x2000500c

08008d10 <__ssputs_r>:
 8008d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d14:	688e      	ldr	r6, [r1, #8]
 8008d16:	461f      	mov	r7, r3
 8008d18:	42be      	cmp	r6, r7
 8008d1a:	680b      	ldr	r3, [r1, #0]
 8008d1c:	4682      	mov	sl, r0
 8008d1e:	460c      	mov	r4, r1
 8008d20:	4690      	mov	r8, r2
 8008d22:	d82d      	bhi.n	8008d80 <__ssputs_r+0x70>
 8008d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d2c:	d026      	beq.n	8008d7c <__ssputs_r+0x6c>
 8008d2e:	6965      	ldr	r5, [r4, #20]
 8008d30:	6909      	ldr	r1, [r1, #16]
 8008d32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d36:	eba3 0901 	sub.w	r9, r3, r1
 8008d3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d3e:	1c7b      	adds	r3, r7, #1
 8008d40:	444b      	add	r3, r9
 8008d42:	106d      	asrs	r5, r5, #1
 8008d44:	429d      	cmp	r5, r3
 8008d46:	bf38      	it	cc
 8008d48:	461d      	movcc	r5, r3
 8008d4a:	0553      	lsls	r3, r2, #21
 8008d4c:	d527      	bpl.n	8008d9e <__ssputs_r+0x8e>
 8008d4e:	4629      	mov	r1, r5
 8008d50:	f7ff ff52 	bl	8008bf8 <_malloc_r>
 8008d54:	4606      	mov	r6, r0
 8008d56:	b360      	cbz	r0, 8008db2 <__ssputs_r+0xa2>
 8008d58:	6921      	ldr	r1, [r4, #16]
 8008d5a:	464a      	mov	r2, r9
 8008d5c:	f7ff fed1 	bl	8008b02 <memcpy>
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6a:	81a3      	strh	r3, [r4, #12]
 8008d6c:	6126      	str	r6, [r4, #16]
 8008d6e:	6165      	str	r5, [r4, #20]
 8008d70:	444e      	add	r6, r9
 8008d72:	eba5 0509 	sub.w	r5, r5, r9
 8008d76:	6026      	str	r6, [r4, #0]
 8008d78:	60a5      	str	r5, [r4, #8]
 8008d7a:	463e      	mov	r6, r7
 8008d7c:	42be      	cmp	r6, r7
 8008d7e:	d900      	bls.n	8008d82 <__ssputs_r+0x72>
 8008d80:	463e      	mov	r6, r7
 8008d82:	6820      	ldr	r0, [r4, #0]
 8008d84:	4632      	mov	r2, r6
 8008d86:	4641      	mov	r1, r8
 8008d88:	f000 fcf8 	bl	800977c <memmove>
 8008d8c:	68a3      	ldr	r3, [r4, #8]
 8008d8e:	1b9b      	subs	r3, r3, r6
 8008d90:	60a3      	str	r3, [r4, #8]
 8008d92:	6823      	ldr	r3, [r4, #0]
 8008d94:	4433      	add	r3, r6
 8008d96:	6023      	str	r3, [r4, #0]
 8008d98:	2000      	movs	r0, #0
 8008d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9e:	462a      	mov	r2, r5
 8008da0:	f000 fd38 	bl	8009814 <_realloc_r>
 8008da4:	4606      	mov	r6, r0
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d1e0      	bne.n	8008d6c <__ssputs_r+0x5c>
 8008daa:	6921      	ldr	r1, [r4, #16]
 8008dac:	4650      	mov	r0, sl
 8008dae:	f7ff feb7 	bl	8008b20 <_free_r>
 8008db2:	230c      	movs	r3, #12
 8008db4:	f8ca 3000 	str.w	r3, [sl]
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dbe:	81a3      	strh	r3, [r4, #12]
 8008dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc4:	e7e9      	b.n	8008d9a <__ssputs_r+0x8a>
	...

08008dc8 <_svfiprintf_r>:
 8008dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	4698      	mov	r8, r3
 8008dce:	898b      	ldrh	r3, [r1, #12]
 8008dd0:	061b      	lsls	r3, r3, #24
 8008dd2:	b09d      	sub	sp, #116	@ 0x74
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	460d      	mov	r5, r1
 8008dd8:	4614      	mov	r4, r2
 8008dda:	d510      	bpl.n	8008dfe <_svfiprintf_r+0x36>
 8008ddc:	690b      	ldr	r3, [r1, #16]
 8008dde:	b973      	cbnz	r3, 8008dfe <_svfiprintf_r+0x36>
 8008de0:	2140      	movs	r1, #64	@ 0x40
 8008de2:	f7ff ff09 	bl	8008bf8 <_malloc_r>
 8008de6:	6028      	str	r0, [r5, #0]
 8008de8:	6128      	str	r0, [r5, #16]
 8008dea:	b930      	cbnz	r0, 8008dfa <_svfiprintf_r+0x32>
 8008dec:	230c      	movs	r3, #12
 8008dee:	603b      	str	r3, [r7, #0]
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	b01d      	add	sp, #116	@ 0x74
 8008df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfa:	2340      	movs	r3, #64	@ 0x40
 8008dfc:	616b      	str	r3, [r5, #20]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e02:	2320      	movs	r3, #32
 8008e04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e0c:	2330      	movs	r3, #48	@ 0x30
 8008e0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008fac <_svfiprintf_r+0x1e4>
 8008e12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e16:	f04f 0901 	mov.w	r9, #1
 8008e1a:	4623      	mov	r3, r4
 8008e1c:	469a      	mov	sl, r3
 8008e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e22:	b10a      	cbz	r2, 8008e28 <_svfiprintf_r+0x60>
 8008e24:	2a25      	cmp	r2, #37	@ 0x25
 8008e26:	d1f9      	bne.n	8008e1c <_svfiprintf_r+0x54>
 8008e28:	ebba 0b04 	subs.w	fp, sl, r4
 8008e2c:	d00b      	beq.n	8008e46 <_svfiprintf_r+0x7e>
 8008e2e:	465b      	mov	r3, fp
 8008e30:	4622      	mov	r2, r4
 8008e32:	4629      	mov	r1, r5
 8008e34:	4638      	mov	r0, r7
 8008e36:	f7ff ff6b 	bl	8008d10 <__ssputs_r>
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	f000 80a7 	beq.w	8008f8e <_svfiprintf_r+0x1c6>
 8008e40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e42:	445a      	add	r2, fp
 8008e44:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e46:	f89a 3000 	ldrb.w	r3, [sl]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 809f 	beq.w	8008f8e <_svfiprintf_r+0x1c6>
 8008e50:	2300      	movs	r3, #0
 8008e52:	f04f 32ff 	mov.w	r2, #4294967295
 8008e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e5a:	f10a 0a01 	add.w	sl, sl, #1
 8008e5e:	9304      	str	r3, [sp, #16]
 8008e60:	9307      	str	r3, [sp, #28]
 8008e62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e66:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e68:	4654      	mov	r4, sl
 8008e6a:	2205      	movs	r2, #5
 8008e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e70:	484e      	ldr	r0, [pc, #312]	@ (8008fac <_svfiprintf_r+0x1e4>)
 8008e72:	f7f7 f9d5 	bl	8000220 <memchr>
 8008e76:	9a04      	ldr	r2, [sp, #16]
 8008e78:	b9d8      	cbnz	r0, 8008eb2 <_svfiprintf_r+0xea>
 8008e7a:	06d0      	lsls	r0, r2, #27
 8008e7c:	bf44      	itt	mi
 8008e7e:	2320      	movmi	r3, #32
 8008e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e84:	0711      	lsls	r1, r2, #28
 8008e86:	bf44      	itt	mi
 8008e88:	232b      	movmi	r3, #43	@ 0x2b
 8008e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e94:	d015      	beq.n	8008ec2 <_svfiprintf_r+0xfa>
 8008e96:	9a07      	ldr	r2, [sp, #28]
 8008e98:	4654      	mov	r4, sl
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	f04f 0c0a 	mov.w	ip, #10
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ea6:	3b30      	subs	r3, #48	@ 0x30
 8008ea8:	2b09      	cmp	r3, #9
 8008eaa:	d94b      	bls.n	8008f44 <_svfiprintf_r+0x17c>
 8008eac:	b1b0      	cbz	r0, 8008edc <_svfiprintf_r+0x114>
 8008eae:	9207      	str	r2, [sp, #28]
 8008eb0:	e014      	b.n	8008edc <_svfiprintf_r+0x114>
 8008eb2:	eba0 0308 	sub.w	r3, r0, r8
 8008eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	9304      	str	r3, [sp, #16]
 8008ebe:	46a2      	mov	sl, r4
 8008ec0:	e7d2      	b.n	8008e68 <_svfiprintf_r+0xa0>
 8008ec2:	9b03      	ldr	r3, [sp, #12]
 8008ec4:	1d19      	adds	r1, r3, #4
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	9103      	str	r1, [sp, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	bfbb      	ittet	lt
 8008ece:	425b      	neglt	r3, r3
 8008ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ed4:	9307      	strge	r3, [sp, #28]
 8008ed6:	9307      	strlt	r3, [sp, #28]
 8008ed8:	bfb8      	it	lt
 8008eda:	9204      	strlt	r2, [sp, #16]
 8008edc:	7823      	ldrb	r3, [r4, #0]
 8008ede:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ee0:	d10a      	bne.n	8008ef8 <_svfiprintf_r+0x130>
 8008ee2:	7863      	ldrb	r3, [r4, #1]
 8008ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ee6:	d132      	bne.n	8008f4e <_svfiprintf_r+0x186>
 8008ee8:	9b03      	ldr	r3, [sp, #12]
 8008eea:	1d1a      	adds	r2, r3, #4
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	9203      	str	r2, [sp, #12]
 8008ef0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ef4:	3402      	adds	r4, #2
 8008ef6:	9305      	str	r3, [sp, #20]
 8008ef8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008fbc <_svfiprintf_r+0x1f4>
 8008efc:	7821      	ldrb	r1, [r4, #0]
 8008efe:	2203      	movs	r2, #3
 8008f00:	4650      	mov	r0, sl
 8008f02:	f7f7 f98d 	bl	8000220 <memchr>
 8008f06:	b138      	cbz	r0, 8008f18 <_svfiprintf_r+0x150>
 8008f08:	9b04      	ldr	r3, [sp, #16]
 8008f0a:	eba0 000a 	sub.w	r0, r0, sl
 8008f0e:	2240      	movs	r2, #64	@ 0x40
 8008f10:	4082      	lsls	r2, r0
 8008f12:	4313      	orrs	r3, r2
 8008f14:	3401      	adds	r4, #1
 8008f16:	9304      	str	r3, [sp, #16]
 8008f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f1c:	4824      	ldr	r0, [pc, #144]	@ (8008fb0 <_svfiprintf_r+0x1e8>)
 8008f1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f22:	2206      	movs	r2, #6
 8008f24:	f7f7 f97c 	bl	8000220 <memchr>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d036      	beq.n	8008f9a <_svfiprintf_r+0x1d2>
 8008f2c:	4b21      	ldr	r3, [pc, #132]	@ (8008fb4 <_svfiprintf_r+0x1ec>)
 8008f2e:	bb1b      	cbnz	r3, 8008f78 <_svfiprintf_r+0x1b0>
 8008f30:	9b03      	ldr	r3, [sp, #12]
 8008f32:	3307      	adds	r3, #7
 8008f34:	f023 0307 	bic.w	r3, r3, #7
 8008f38:	3308      	adds	r3, #8
 8008f3a:	9303      	str	r3, [sp, #12]
 8008f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f3e:	4433      	add	r3, r6
 8008f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f42:	e76a      	b.n	8008e1a <_svfiprintf_r+0x52>
 8008f44:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f48:	460c      	mov	r4, r1
 8008f4a:	2001      	movs	r0, #1
 8008f4c:	e7a8      	b.n	8008ea0 <_svfiprintf_r+0xd8>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	3401      	adds	r4, #1
 8008f52:	9305      	str	r3, [sp, #20]
 8008f54:	4619      	mov	r1, r3
 8008f56:	f04f 0c0a 	mov.w	ip, #10
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f60:	3a30      	subs	r2, #48	@ 0x30
 8008f62:	2a09      	cmp	r2, #9
 8008f64:	d903      	bls.n	8008f6e <_svfiprintf_r+0x1a6>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d0c6      	beq.n	8008ef8 <_svfiprintf_r+0x130>
 8008f6a:	9105      	str	r1, [sp, #20]
 8008f6c:	e7c4      	b.n	8008ef8 <_svfiprintf_r+0x130>
 8008f6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f72:	4604      	mov	r4, r0
 8008f74:	2301      	movs	r3, #1
 8008f76:	e7f0      	b.n	8008f5a <_svfiprintf_r+0x192>
 8008f78:	ab03      	add	r3, sp, #12
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	462a      	mov	r2, r5
 8008f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008fb8 <_svfiprintf_r+0x1f0>)
 8008f80:	a904      	add	r1, sp, #16
 8008f82:	4638      	mov	r0, r7
 8008f84:	f3af 8000 	nop.w
 8008f88:	1c42      	adds	r2, r0, #1
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	d1d6      	bne.n	8008f3c <_svfiprintf_r+0x174>
 8008f8e:	89ab      	ldrh	r3, [r5, #12]
 8008f90:	065b      	lsls	r3, r3, #25
 8008f92:	f53f af2d 	bmi.w	8008df0 <_svfiprintf_r+0x28>
 8008f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f98:	e72c      	b.n	8008df4 <_svfiprintf_r+0x2c>
 8008f9a:	ab03      	add	r3, sp, #12
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	462a      	mov	r2, r5
 8008fa0:	4b05      	ldr	r3, [pc, #20]	@ (8008fb8 <_svfiprintf_r+0x1f0>)
 8008fa2:	a904      	add	r1, sp, #16
 8008fa4:	4638      	mov	r0, r7
 8008fa6:	f000 f9bb 	bl	8009320 <_printf_i>
 8008faa:	e7ed      	b.n	8008f88 <_svfiprintf_r+0x1c0>
 8008fac:	08009d21 	.word	0x08009d21
 8008fb0:	08009d2b 	.word	0x08009d2b
 8008fb4:	00000000 	.word	0x00000000
 8008fb8:	08008d11 	.word	0x08008d11
 8008fbc:	08009d27 	.word	0x08009d27

08008fc0 <__sfputc_r>:
 8008fc0:	6893      	ldr	r3, [r2, #8]
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	b410      	push	{r4}
 8008fc8:	6093      	str	r3, [r2, #8]
 8008fca:	da08      	bge.n	8008fde <__sfputc_r+0x1e>
 8008fcc:	6994      	ldr	r4, [r2, #24]
 8008fce:	42a3      	cmp	r3, r4
 8008fd0:	db01      	blt.n	8008fd6 <__sfputc_r+0x16>
 8008fd2:	290a      	cmp	r1, #10
 8008fd4:	d103      	bne.n	8008fde <__sfputc_r+0x1e>
 8008fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fda:	f7ff bc24 	b.w	8008826 <__swbuf_r>
 8008fde:	6813      	ldr	r3, [r2, #0]
 8008fe0:	1c58      	adds	r0, r3, #1
 8008fe2:	6010      	str	r0, [r2, #0]
 8008fe4:	7019      	strb	r1, [r3, #0]
 8008fe6:	4608      	mov	r0, r1
 8008fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <__sfputs_r>:
 8008fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	460f      	mov	r7, r1
 8008ff4:	4614      	mov	r4, r2
 8008ff6:	18d5      	adds	r5, r2, r3
 8008ff8:	42ac      	cmp	r4, r5
 8008ffa:	d101      	bne.n	8009000 <__sfputs_r+0x12>
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	e007      	b.n	8009010 <__sfputs_r+0x22>
 8009000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009004:	463a      	mov	r2, r7
 8009006:	4630      	mov	r0, r6
 8009008:	f7ff ffda 	bl	8008fc0 <__sfputc_r>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d1f3      	bne.n	8008ff8 <__sfputs_r+0xa>
 8009010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009014 <_vfiprintf_r>:
 8009014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009018:	460d      	mov	r5, r1
 800901a:	b09d      	sub	sp, #116	@ 0x74
 800901c:	4614      	mov	r4, r2
 800901e:	4698      	mov	r8, r3
 8009020:	4606      	mov	r6, r0
 8009022:	b118      	cbz	r0, 800902c <_vfiprintf_r+0x18>
 8009024:	6a03      	ldr	r3, [r0, #32]
 8009026:	b90b      	cbnz	r3, 800902c <_vfiprintf_r+0x18>
 8009028:	f7ff fac0 	bl	80085ac <__sinit>
 800902c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800902e:	07d9      	lsls	r1, r3, #31
 8009030:	d405      	bmi.n	800903e <_vfiprintf_r+0x2a>
 8009032:	89ab      	ldrh	r3, [r5, #12]
 8009034:	059a      	lsls	r2, r3, #22
 8009036:	d402      	bmi.n	800903e <_vfiprintf_r+0x2a>
 8009038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800903a:	f7ff fd58 	bl	8008aee <__retarget_lock_acquire_recursive>
 800903e:	89ab      	ldrh	r3, [r5, #12]
 8009040:	071b      	lsls	r3, r3, #28
 8009042:	d501      	bpl.n	8009048 <_vfiprintf_r+0x34>
 8009044:	692b      	ldr	r3, [r5, #16]
 8009046:	b99b      	cbnz	r3, 8009070 <_vfiprintf_r+0x5c>
 8009048:	4629      	mov	r1, r5
 800904a:	4630      	mov	r0, r6
 800904c:	f7ff fc2a 	bl	80088a4 <__swsetup_r>
 8009050:	b170      	cbz	r0, 8009070 <_vfiprintf_r+0x5c>
 8009052:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009054:	07dc      	lsls	r4, r3, #31
 8009056:	d504      	bpl.n	8009062 <_vfiprintf_r+0x4e>
 8009058:	f04f 30ff 	mov.w	r0, #4294967295
 800905c:	b01d      	add	sp, #116	@ 0x74
 800905e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009062:	89ab      	ldrh	r3, [r5, #12]
 8009064:	0598      	lsls	r0, r3, #22
 8009066:	d4f7      	bmi.n	8009058 <_vfiprintf_r+0x44>
 8009068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800906a:	f7ff fd41 	bl	8008af0 <__retarget_lock_release_recursive>
 800906e:	e7f3      	b.n	8009058 <_vfiprintf_r+0x44>
 8009070:	2300      	movs	r3, #0
 8009072:	9309      	str	r3, [sp, #36]	@ 0x24
 8009074:	2320      	movs	r3, #32
 8009076:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800907a:	f8cd 800c 	str.w	r8, [sp, #12]
 800907e:	2330      	movs	r3, #48	@ 0x30
 8009080:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009230 <_vfiprintf_r+0x21c>
 8009084:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009088:	f04f 0901 	mov.w	r9, #1
 800908c:	4623      	mov	r3, r4
 800908e:	469a      	mov	sl, r3
 8009090:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009094:	b10a      	cbz	r2, 800909a <_vfiprintf_r+0x86>
 8009096:	2a25      	cmp	r2, #37	@ 0x25
 8009098:	d1f9      	bne.n	800908e <_vfiprintf_r+0x7a>
 800909a:	ebba 0b04 	subs.w	fp, sl, r4
 800909e:	d00b      	beq.n	80090b8 <_vfiprintf_r+0xa4>
 80090a0:	465b      	mov	r3, fp
 80090a2:	4622      	mov	r2, r4
 80090a4:	4629      	mov	r1, r5
 80090a6:	4630      	mov	r0, r6
 80090a8:	f7ff ffa1 	bl	8008fee <__sfputs_r>
 80090ac:	3001      	adds	r0, #1
 80090ae:	f000 80a7 	beq.w	8009200 <_vfiprintf_r+0x1ec>
 80090b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090b4:	445a      	add	r2, fp
 80090b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80090b8:	f89a 3000 	ldrb.w	r3, [sl]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 809f 	beq.w	8009200 <_vfiprintf_r+0x1ec>
 80090c2:	2300      	movs	r3, #0
 80090c4:	f04f 32ff 	mov.w	r2, #4294967295
 80090c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090cc:	f10a 0a01 	add.w	sl, sl, #1
 80090d0:	9304      	str	r3, [sp, #16]
 80090d2:	9307      	str	r3, [sp, #28]
 80090d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80090da:	4654      	mov	r4, sl
 80090dc:	2205      	movs	r2, #5
 80090de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e2:	4853      	ldr	r0, [pc, #332]	@ (8009230 <_vfiprintf_r+0x21c>)
 80090e4:	f7f7 f89c 	bl	8000220 <memchr>
 80090e8:	9a04      	ldr	r2, [sp, #16]
 80090ea:	b9d8      	cbnz	r0, 8009124 <_vfiprintf_r+0x110>
 80090ec:	06d1      	lsls	r1, r2, #27
 80090ee:	bf44      	itt	mi
 80090f0:	2320      	movmi	r3, #32
 80090f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090f6:	0713      	lsls	r3, r2, #28
 80090f8:	bf44      	itt	mi
 80090fa:	232b      	movmi	r3, #43	@ 0x2b
 80090fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009100:	f89a 3000 	ldrb.w	r3, [sl]
 8009104:	2b2a      	cmp	r3, #42	@ 0x2a
 8009106:	d015      	beq.n	8009134 <_vfiprintf_r+0x120>
 8009108:	9a07      	ldr	r2, [sp, #28]
 800910a:	4654      	mov	r4, sl
 800910c:	2000      	movs	r0, #0
 800910e:	f04f 0c0a 	mov.w	ip, #10
 8009112:	4621      	mov	r1, r4
 8009114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009118:	3b30      	subs	r3, #48	@ 0x30
 800911a:	2b09      	cmp	r3, #9
 800911c:	d94b      	bls.n	80091b6 <_vfiprintf_r+0x1a2>
 800911e:	b1b0      	cbz	r0, 800914e <_vfiprintf_r+0x13a>
 8009120:	9207      	str	r2, [sp, #28]
 8009122:	e014      	b.n	800914e <_vfiprintf_r+0x13a>
 8009124:	eba0 0308 	sub.w	r3, r0, r8
 8009128:	fa09 f303 	lsl.w	r3, r9, r3
 800912c:	4313      	orrs	r3, r2
 800912e:	9304      	str	r3, [sp, #16]
 8009130:	46a2      	mov	sl, r4
 8009132:	e7d2      	b.n	80090da <_vfiprintf_r+0xc6>
 8009134:	9b03      	ldr	r3, [sp, #12]
 8009136:	1d19      	adds	r1, r3, #4
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	9103      	str	r1, [sp, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	bfbb      	ittet	lt
 8009140:	425b      	neglt	r3, r3
 8009142:	f042 0202 	orrlt.w	r2, r2, #2
 8009146:	9307      	strge	r3, [sp, #28]
 8009148:	9307      	strlt	r3, [sp, #28]
 800914a:	bfb8      	it	lt
 800914c:	9204      	strlt	r2, [sp, #16]
 800914e:	7823      	ldrb	r3, [r4, #0]
 8009150:	2b2e      	cmp	r3, #46	@ 0x2e
 8009152:	d10a      	bne.n	800916a <_vfiprintf_r+0x156>
 8009154:	7863      	ldrb	r3, [r4, #1]
 8009156:	2b2a      	cmp	r3, #42	@ 0x2a
 8009158:	d132      	bne.n	80091c0 <_vfiprintf_r+0x1ac>
 800915a:	9b03      	ldr	r3, [sp, #12]
 800915c:	1d1a      	adds	r2, r3, #4
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	9203      	str	r2, [sp, #12]
 8009162:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009166:	3402      	adds	r4, #2
 8009168:	9305      	str	r3, [sp, #20]
 800916a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009240 <_vfiprintf_r+0x22c>
 800916e:	7821      	ldrb	r1, [r4, #0]
 8009170:	2203      	movs	r2, #3
 8009172:	4650      	mov	r0, sl
 8009174:	f7f7 f854 	bl	8000220 <memchr>
 8009178:	b138      	cbz	r0, 800918a <_vfiprintf_r+0x176>
 800917a:	9b04      	ldr	r3, [sp, #16]
 800917c:	eba0 000a 	sub.w	r0, r0, sl
 8009180:	2240      	movs	r2, #64	@ 0x40
 8009182:	4082      	lsls	r2, r0
 8009184:	4313      	orrs	r3, r2
 8009186:	3401      	adds	r4, #1
 8009188:	9304      	str	r3, [sp, #16]
 800918a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800918e:	4829      	ldr	r0, [pc, #164]	@ (8009234 <_vfiprintf_r+0x220>)
 8009190:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009194:	2206      	movs	r2, #6
 8009196:	f7f7 f843 	bl	8000220 <memchr>
 800919a:	2800      	cmp	r0, #0
 800919c:	d03f      	beq.n	800921e <_vfiprintf_r+0x20a>
 800919e:	4b26      	ldr	r3, [pc, #152]	@ (8009238 <_vfiprintf_r+0x224>)
 80091a0:	bb1b      	cbnz	r3, 80091ea <_vfiprintf_r+0x1d6>
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	3307      	adds	r3, #7
 80091a6:	f023 0307 	bic.w	r3, r3, #7
 80091aa:	3308      	adds	r3, #8
 80091ac:	9303      	str	r3, [sp, #12]
 80091ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091b0:	443b      	add	r3, r7
 80091b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091b4:	e76a      	b.n	800908c <_vfiprintf_r+0x78>
 80091b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ba:	460c      	mov	r4, r1
 80091bc:	2001      	movs	r0, #1
 80091be:	e7a8      	b.n	8009112 <_vfiprintf_r+0xfe>
 80091c0:	2300      	movs	r3, #0
 80091c2:	3401      	adds	r4, #1
 80091c4:	9305      	str	r3, [sp, #20]
 80091c6:	4619      	mov	r1, r3
 80091c8:	f04f 0c0a 	mov.w	ip, #10
 80091cc:	4620      	mov	r0, r4
 80091ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d2:	3a30      	subs	r2, #48	@ 0x30
 80091d4:	2a09      	cmp	r2, #9
 80091d6:	d903      	bls.n	80091e0 <_vfiprintf_r+0x1cc>
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d0c6      	beq.n	800916a <_vfiprintf_r+0x156>
 80091dc:	9105      	str	r1, [sp, #20]
 80091de:	e7c4      	b.n	800916a <_vfiprintf_r+0x156>
 80091e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80091e4:	4604      	mov	r4, r0
 80091e6:	2301      	movs	r3, #1
 80091e8:	e7f0      	b.n	80091cc <_vfiprintf_r+0x1b8>
 80091ea:	ab03      	add	r3, sp, #12
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	462a      	mov	r2, r5
 80091f0:	4b12      	ldr	r3, [pc, #72]	@ (800923c <_vfiprintf_r+0x228>)
 80091f2:	a904      	add	r1, sp, #16
 80091f4:	4630      	mov	r0, r6
 80091f6:	f3af 8000 	nop.w
 80091fa:	4607      	mov	r7, r0
 80091fc:	1c78      	adds	r0, r7, #1
 80091fe:	d1d6      	bne.n	80091ae <_vfiprintf_r+0x19a>
 8009200:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009202:	07d9      	lsls	r1, r3, #31
 8009204:	d405      	bmi.n	8009212 <_vfiprintf_r+0x1fe>
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	059a      	lsls	r2, r3, #22
 800920a:	d402      	bmi.n	8009212 <_vfiprintf_r+0x1fe>
 800920c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800920e:	f7ff fc6f 	bl	8008af0 <__retarget_lock_release_recursive>
 8009212:	89ab      	ldrh	r3, [r5, #12]
 8009214:	065b      	lsls	r3, r3, #25
 8009216:	f53f af1f 	bmi.w	8009058 <_vfiprintf_r+0x44>
 800921a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800921c:	e71e      	b.n	800905c <_vfiprintf_r+0x48>
 800921e:	ab03      	add	r3, sp, #12
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	462a      	mov	r2, r5
 8009224:	4b05      	ldr	r3, [pc, #20]	@ (800923c <_vfiprintf_r+0x228>)
 8009226:	a904      	add	r1, sp, #16
 8009228:	4630      	mov	r0, r6
 800922a:	f000 f879 	bl	8009320 <_printf_i>
 800922e:	e7e4      	b.n	80091fa <_vfiprintf_r+0x1e6>
 8009230:	08009d21 	.word	0x08009d21
 8009234:	08009d2b 	.word	0x08009d2b
 8009238:	00000000 	.word	0x00000000
 800923c:	08008fef 	.word	0x08008fef
 8009240:	08009d27 	.word	0x08009d27

08009244 <_printf_common>:
 8009244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009248:	4616      	mov	r6, r2
 800924a:	4698      	mov	r8, r3
 800924c:	688a      	ldr	r2, [r1, #8]
 800924e:	690b      	ldr	r3, [r1, #16]
 8009250:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009254:	4293      	cmp	r3, r2
 8009256:	bfb8      	it	lt
 8009258:	4613      	movlt	r3, r2
 800925a:	6033      	str	r3, [r6, #0]
 800925c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009260:	4607      	mov	r7, r0
 8009262:	460c      	mov	r4, r1
 8009264:	b10a      	cbz	r2, 800926a <_printf_common+0x26>
 8009266:	3301      	adds	r3, #1
 8009268:	6033      	str	r3, [r6, #0]
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	0699      	lsls	r1, r3, #26
 800926e:	bf42      	ittt	mi
 8009270:	6833      	ldrmi	r3, [r6, #0]
 8009272:	3302      	addmi	r3, #2
 8009274:	6033      	strmi	r3, [r6, #0]
 8009276:	6825      	ldr	r5, [r4, #0]
 8009278:	f015 0506 	ands.w	r5, r5, #6
 800927c:	d106      	bne.n	800928c <_printf_common+0x48>
 800927e:	f104 0a19 	add.w	sl, r4, #25
 8009282:	68e3      	ldr	r3, [r4, #12]
 8009284:	6832      	ldr	r2, [r6, #0]
 8009286:	1a9b      	subs	r3, r3, r2
 8009288:	42ab      	cmp	r3, r5
 800928a:	dc26      	bgt.n	80092da <_printf_common+0x96>
 800928c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009290:	6822      	ldr	r2, [r4, #0]
 8009292:	3b00      	subs	r3, #0
 8009294:	bf18      	it	ne
 8009296:	2301      	movne	r3, #1
 8009298:	0692      	lsls	r2, r2, #26
 800929a:	d42b      	bmi.n	80092f4 <_printf_common+0xb0>
 800929c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092a0:	4641      	mov	r1, r8
 80092a2:	4638      	mov	r0, r7
 80092a4:	47c8      	blx	r9
 80092a6:	3001      	adds	r0, #1
 80092a8:	d01e      	beq.n	80092e8 <_printf_common+0xa4>
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	6922      	ldr	r2, [r4, #16]
 80092ae:	f003 0306 	and.w	r3, r3, #6
 80092b2:	2b04      	cmp	r3, #4
 80092b4:	bf02      	ittt	eq
 80092b6:	68e5      	ldreq	r5, [r4, #12]
 80092b8:	6833      	ldreq	r3, [r6, #0]
 80092ba:	1aed      	subeq	r5, r5, r3
 80092bc:	68a3      	ldr	r3, [r4, #8]
 80092be:	bf0c      	ite	eq
 80092c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092c4:	2500      	movne	r5, #0
 80092c6:	4293      	cmp	r3, r2
 80092c8:	bfc4      	itt	gt
 80092ca:	1a9b      	subgt	r3, r3, r2
 80092cc:	18ed      	addgt	r5, r5, r3
 80092ce:	2600      	movs	r6, #0
 80092d0:	341a      	adds	r4, #26
 80092d2:	42b5      	cmp	r5, r6
 80092d4:	d11a      	bne.n	800930c <_printf_common+0xc8>
 80092d6:	2000      	movs	r0, #0
 80092d8:	e008      	b.n	80092ec <_printf_common+0xa8>
 80092da:	2301      	movs	r3, #1
 80092dc:	4652      	mov	r2, sl
 80092de:	4641      	mov	r1, r8
 80092e0:	4638      	mov	r0, r7
 80092e2:	47c8      	blx	r9
 80092e4:	3001      	adds	r0, #1
 80092e6:	d103      	bne.n	80092f0 <_printf_common+0xac>
 80092e8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f0:	3501      	adds	r5, #1
 80092f2:	e7c6      	b.n	8009282 <_printf_common+0x3e>
 80092f4:	18e1      	adds	r1, r4, r3
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	2030      	movs	r0, #48	@ 0x30
 80092fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092fe:	4422      	add	r2, r4
 8009300:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009304:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009308:	3302      	adds	r3, #2
 800930a:	e7c7      	b.n	800929c <_printf_common+0x58>
 800930c:	2301      	movs	r3, #1
 800930e:	4622      	mov	r2, r4
 8009310:	4641      	mov	r1, r8
 8009312:	4638      	mov	r0, r7
 8009314:	47c8      	blx	r9
 8009316:	3001      	adds	r0, #1
 8009318:	d0e6      	beq.n	80092e8 <_printf_common+0xa4>
 800931a:	3601      	adds	r6, #1
 800931c:	e7d9      	b.n	80092d2 <_printf_common+0x8e>
	...

08009320 <_printf_i>:
 8009320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009324:	7e0f      	ldrb	r7, [r1, #24]
 8009326:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009328:	2f78      	cmp	r7, #120	@ 0x78
 800932a:	4691      	mov	r9, r2
 800932c:	4680      	mov	r8, r0
 800932e:	460c      	mov	r4, r1
 8009330:	469a      	mov	sl, r3
 8009332:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009336:	d807      	bhi.n	8009348 <_printf_i+0x28>
 8009338:	2f62      	cmp	r7, #98	@ 0x62
 800933a:	d80a      	bhi.n	8009352 <_printf_i+0x32>
 800933c:	2f00      	cmp	r7, #0
 800933e:	f000 80d2 	beq.w	80094e6 <_printf_i+0x1c6>
 8009342:	2f58      	cmp	r7, #88	@ 0x58
 8009344:	f000 80b9 	beq.w	80094ba <_printf_i+0x19a>
 8009348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800934c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009350:	e03a      	b.n	80093c8 <_printf_i+0xa8>
 8009352:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009356:	2b15      	cmp	r3, #21
 8009358:	d8f6      	bhi.n	8009348 <_printf_i+0x28>
 800935a:	a101      	add	r1, pc, #4	@ (adr r1, 8009360 <_printf_i+0x40>)
 800935c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009360:	080093b9 	.word	0x080093b9
 8009364:	080093cd 	.word	0x080093cd
 8009368:	08009349 	.word	0x08009349
 800936c:	08009349 	.word	0x08009349
 8009370:	08009349 	.word	0x08009349
 8009374:	08009349 	.word	0x08009349
 8009378:	080093cd 	.word	0x080093cd
 800937c:	08009349 	.word	0x08009349
 8009380:	08009349 	.word	0x08009349
 8009384:	08009349 	.word	0x08009349
 8009388:	08009349 	.word	0x08009349
 800938c:	080094cd 	.word	0x080094cd
 8009390:	080093f7 	.word	0x080093f7
 8009394:	08009487 	.word	0x08009487
 8009398:	08009349 	.word	0x08009349
 800939c:	08009349 	.word	0x08009349
 80093a0:	080094ef 	.word	0x080094ef
 80093a4:	08009349 	.word	0x08009349
 80093a8:	080093f7 	.word	0x080093f7
 80093ac:	08009349 	.word	0x08009349
 80093b0:	08009349 	.word	0x08009349
 80093b4:	0800948f 	.word	0x0800948f
 80093b8:	6833      	ldr	r3, [r6, #0]
 80093ba:	1d1a      	adds	r2, r3, #4
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6032      	str	r2, [r6, #0]
 80093c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093c8:	2301      	movs	r3, #1
 80093ca:	e09d      	b.n	8009508 <_printf_i+0x1e8>
 80093cc:	6833      	ldr	r3, [r6, #0]
 80093ce:	6820      	ldr	r0, [r4, #0]
 80093d0:	1d19      	adds	r1, r3, #4
 80093d2:	6031      	str	r1, [r6, #0]
 80093d4:	0606      	lsls	r6, r0, #24
 80093d6:	d501      	bpl.n	80093dc <_printf_i+0xbc>
 80093d8:	681d      	ldr	r5, [r3, #0]
 80093da:	e003      	b.n	80093e4 <_printf_i+0xc4>
 80093dc:	0645      	lsls	r5, r0, #25
 80093de:	d5fb      	bpl.n	80093d8 <_printf_i+0xb8>
 80093e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093e4:	2d00      	cmp	r5, #0
 80093e6:	da03      	bge.n	80093f0 <_printf_i+0xd0>
 80093e8:	232d      	movs	r3, #45	@ 0x2d
 80093ea:	426d      	negs	r5, r5
 80093ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093f0:	4859      	ldr	r0, [pc, #356]	@ (8009558 <_printf_i+0x238>)
 80093f2:	230a      	movs	r3, #10
 80093f4:	e011      	b.n	800941a <_printf_i+0xfa>
 80093f6:	6821      	ldr	r1, [r4, #0]
 80093f8:	6833      	ldr	r3, [r6, #0]
 80093fa:	0608      	lsls	r0, r1, #24
 80093fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009400:	d402      	bmi.n	8009408 <_printf_i+0xe8>
 8009402:	0649      	lsls	r1, r1, #25
 8009404:	bf48      	it	mi
 8009406:	b2ad      	uxthmi	r5, r5
 8009408:	2f6f      	cmp	r7, #111	@ 0x6f
 800940a:	4853      	ldr	r0, [pc, #332]	@ (8009558 <_printf_i+0x238>)
 800940c:	6033      	str	r3, [r6, #0]
 800940e:	bf14      	ite	ne
 8009410:	230a      	movne	r3, #10
 8009412:	2308      	moveq	r3, #8
 8009414:	2100      	movs	r1, #0
 8009416:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800941a:	6866      	ldr	r6, [r4, #4]
 800941c:	60a6      	str	r6, [r4, #8]
 800941e:	2e00      	cmp	r6, #0
 8009420:	bfa2      	ittt	ge
 8009422:	6821      	ldrge	r1, [r4, #0]
 8009424:	f021 0104 	bicge.w	r1, r1, #4
 8009428:	6021      	strge	r1, [r4, #0]
 800942a:	b90d      	cbnz	r5, 8009430 <_printf_i+0x110>
 800942c:	2e00      	cmp	r6, #0
 800942e:	d04b      	beq.n	80094c8 <_printf_i+0x1a8>
 8009430:	4616      	mov	r6, r2
 8009432:	fbb5 f1f3 	udiv	r1, r5, r3
 8009436:	fb03 5711 	mls	r7, r3, r1, r5
 800943a:	5dc7      	ldrb	r7, [r0, r7]
 800943c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009440:	462f      	mov	r7, r5
 8009442:	42bb      	cmp	r3, r7
 8009444:	460d      	mov	r5, r1
 8009446:	d9f4      	bls.n	8009432 <_printf_i+0x112>
 8009448:	2b08      	cmp	r3, #8
 800944a:	d10b      	bne.n	8009464 <_printf_i+0x144>
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	07df      	lsls	r7, r3, #31
 8009450:	d508      	bpl.n	8009464 <_printf_i+0x144>
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	6861      	ldr	r1, [r4, #4]
 8009456:	4299      	cmp	r1, r3
 8009458:	bfde      	ittt	le
 800945a:	2330      	movle	r3, #48	@ 0x30
 800945c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009460:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009464:	1b92      	subs	r2, r2, r6
 8009466:	6122      	str	r2, [r4, #16]
 8009468:	f8cd a000 	str.w	sl, [sp]
 800946c:	464b      	mov	r3, r9
 800946e:	aa03      	add	r2, sp, #12
 8009470:	4621      	mov	r1, r4
 8009472:	4640      	mov	r0, r8
 8009474:	f7ff fee6 	bl	8009244 <_printf_common>
 8009478:	3001      	adds	r0, #1
 800947a:	d14a      	bne.n	8009512 <_printf_i+0x1f2>
 800947c:	f04f 30ff 	mov.w	r0, #4294967295
 8009480:	b004      	add	sp, #16
 8009482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	f043 0320 	orr.w	r3, r3, #32
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	4833      	ldr	r0, [pc, #204]	@ (800955c <_printf_i+0x23c>)
 8009490:	2778      	movs	r7, #120	@ 0x78
 8009492:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	6831      	ldr	r1, [r6, #0]
 800949a:	061f      	lsls	r7, r3, #24
 800949c:	f851 5b04 	ldr.w	r5, [r1], #4
 80094a0:	d402      	bmi.n	80094a8 <_printf_i+0x188>
 80094a2:	065f      	lsls	r7, r3, #25
 80094a4:	bf48      	it	mi
 80094a6:	b2ad      	uxthmi	r5, r5
 80094a8:	6031      	str	r1, [r6, #0]
 80094aa:	07d9      	lsls	r1, r3, #31
 80094ac:	bf44      	itt	mi
 80094ae:	f043 0320 	orrmi.w	r3, r3, #32
 80094b2:	6023      	strmi	r3, [r4, #0]
 80094b4:	b11d      	cbz	r5, 80094be <_printf_i+0x19e>
 80094b6:	2310      	movs	r3, #16
 80094b8:	e7ac      	b.n	8009414 <_printf_i+0xf4>
 80094ba:	4827      	ldr	r0, [pc, #156]	@ (8009558 <_printf_i+0x238>)
 80094bc:	e7e9      	b.n	8009492 <_printf_i+0x172>
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	f023 0320 	bic.w	r3, r3, #32
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	e7f6      	b.n	80094b6 <_printf_i+0x196>
 80094c8:	4616      	mov	r6, r2
 80094ca:	e7bd      	b.n	8009448 <_printf_i+0x128>
 80094cc:	6833      	ldr	r3, [r6, #0]
 80094ce:	6825      	ldr	r5, [r4, #0]
 80094d0:	6961      	ldr	r1, [r4, #20]
 80094d2:	1d18      	adds	r0, r3, #4
 80094d4:	6030      	str	r0, [r6, #0]
 80094d6:	062e      	lsls	r6, r5, #24
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	d501      	bpl.n	80094e0 <_printf_i+0x1c0>
 80094dc:	6019      	str	r1, [r3, #0]
 80094de:	e002      	b.n	80094e6 <_printf_i+0x1c6>
 80094e0:	0668      	lsls	r0, r5, #25
 80094e2:	d5fb      	bpl.n	80094dc <_printf_i+0x1bc>
 80094e4:	8019      	strh	r1, [r3, #0]
 80094e6:	2300      	movs	r3, #0
 80094e8:	6123      	str	r3, [r4, #16]
 80094ea:	4616      	mov	r6, r2
 80094ec:	e7bc      	b.n	8009468 <_printf_i+0x148>
 80094ee:	6833      	ldr	r3, [r6, #0]
 80094f0:	1d1a      	adds	r2, r3, #4
 80094f2:	6032      	str	r2, [r6, #0]
 80094f4:	681e      	ldr	r6, [r3, #0]
 80094f6:	6862      	ldr	r2, [r4, #4]
 80094f8:	2100      	movs	r1, #0
 80094fa:	4630      	mov	r0, r6
 80094fc:	f7f6 fe90 	bl	8000220 <memchr>
 8009500:	b108      	cbz	r0, 8009506 <_printf_i+0x1e6>
 8009502:	1b80      	subs	r0, r0, r6
 8009504:	6060      	str	r0, [r4, #4]
 8009506:	6863      	ldr	r3, [r4, #4]
 8009508:	6123      	str	r3, [r4, #16]
 800950a:	2300      	movs	r3, #0
 800950c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009510:	e7aa      	b.n	8009468 <_printf_i+0x148>
 8009512:	6923      	ldr	r3, [r4, #16]
 8009514:	4632      	mov	r2, r6
 8009516:	4649      	mov	r1, r9
 8009518:	4640      	mov	r0, r8
 800951a:	47d0      	blx	sl
 800951c:	3001      	adds	r0, #1
 800951e:	d0ad      	beq.n	800947c <_printf_i+0x15c>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	079b      	lsls	r3, r3, #30
 8009524:	d413      	bmi.n	800954e <_printf_i+0x22e>
 8009526:	68e0      	ldr	r0, [r4, #12]
 8009528:	9b03      	ldr	r3, [sp, #12]
 800952a:	4298      	cmp	r0, r3
 800952c:	bfb8      	it	lt
 800952e:	4618      	movlt	r0, r3
 8009530:	e7a6      	b.n	8009480 <_printf_i+0x160>
 8009532:	2301      	movs	r3, #1
 8009534:	4632      	mov	r2, r6
 8009536:	4649      	mov	r1, r9
 8009538:	4640      	mov	r0, r8
 800953a:	47d0      	blx	sl
 800953c:	3001      	adds	r0, #1
 800953e:	d09d      	beq.n	800947c <_printf_i+0x15c>
 8009540:	3501      	adds	r5, #1
 8009542:	68e3      	ldr	r3, [r4, #12]
 8009544:	9903      	ldr	r1, [sp, #12]
 8009546:	1a5b      	subs	r3, r3, r1
 8009548:	42ab      	cmp	r3, r5
 800954a:	dcf2      	bgt.n	8009532 <_printf_i+0x212>
 800954c:	e7eb      	b.n	8009526 <_printf_i+0x206>
 800954e:	2500      	movs	r5, #0
 8009550:	f104 0619 	add.w	r6, r4, #25
 8009554:	e7f5      	b.n	8009542 <_printf_i+0x222>
 8009556:	bf00      	nop
 8009558:	08009d32 	.word	0x08009d32
 800955c:	08009d43 	.word	0x08009d43

08009560 <__sflush_r>:
 8009560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009568:	0716      	lsls	r6, r2, #28
 800956a:	4605      	mov	r5, r0
 800956c:	460c      	mov	r4, r1
 800956e:	d454      	bmi.n	800961a <__sflush_r+0xba>
 8009570:	684b      	ldr	r3, [r1, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	dc02      	bgt.n	800957c <__sflush_r+0x1c>
 8009576:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009578:	2b00      	cmp	r3, #0
 800957a:	dd48      	ble.n	800960e <__sflush_r+0xae>
 800957c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800957e:	2e00      	cmp	r6, #0
 8009580:	d045      	beq.n	800960e <__sflush_r+0xae>
 8009582:	2300      	movs	r3, #0
 8009584:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009588:	682f      	ldr	r7, [r5, #0]
 800958a:	6a21      	ldr	r1, [r4, #32]
 800958c:	602b      	str	r3, [r5, #0]
 800958e:	d030      	beq.n	80095f2 <__sflush_r+0x92>
 8009590:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	0759      	lsls	r1, r3, #29
 8009596:	d505      	bpl.n	80095a4 <__sflush_r+0x44>
 8009598:	6863      	ldr	r3, [r4, #4]
 800959a:	1ad2      	subs	r2, r2, r3
 800959c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800959e:	b10b      	cbz	r3, 80095a4 <__sflush_r+0x44>
 80095a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095a2:	1ad2      	subs	r2, r2, r3
 80095a4:	2300      	movs	r3, #0
 80095a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095a8:	6a21      	ldr	r1, [r4, #32]
 80095aa:	4628      	mov	r0, r5
 80095ac:	47b0      	blx	r6
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	d106      	bne.n	80095c2 <__sflush_r+0x62>
 80095b4:	6829      	ldr	r1, [r5, #0]
 80095b6:	291d      	cmp	r1, #29
 80095b8:	d82b      	bhi.n	8009612 <__sflush_r+0xb2>
 80095ba:	4a2a      	ldr	r2, [pc, #168]	@ (8009664 <__sflush_r+0x104>)
 80095bc:	410a      	asrs	r2, r1
 80095be:	07d6      	lsls	r6, r2, #31
 80095c0:	d427      	bmi.n	8009612 <__sflush_r+0xb2>
 80095c2:	2200      	movs	r2, #0
 80095c4:	6062      	str	r2, [r4, #4]
 80095c6:	04d9      	lsls	r1, r3, #19
 80095c8:	6922      	ldr	r2, [r4, #16]
 80095ca:	6022      	str	r2, [r4, #0]
 80095cc:	d504      	bpl.n	80095d8 <__sflush_r+0x78>
 80095ce:	1c42      	adds	r2, r0, #1
 80095d0:	d101      	bne.n	80095d6 <__sflush_r+0x76>
 80095d2:	682b      	ldr	r3, [r5, #0]
 80095d4:	b903      	cbnz	r3, 80095d8 <__sflush_r+0x78>
 80095d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80095d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095da:	602f      	str	r7, [r5, #0]
 80095dc:	b1b9      	cbz	r1, 800960e <__sflush_r+0xae>
 80095de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095e2:	4299      	cmp	r1, r3
 80095e4:	d002      	beq.n	80095ec <__sflush_r+0x8c>
 80095e6:	4628      	mov	r0, r5
 80095e8:	f7ff fa9a 	bl	8008b20 <_free_r>
 80095ec:	2300      	movs	r3, #0
 80095ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80095f0:	e00d      	b.n	800960e <__sflush_r+0xae>
 80095f2:	2301      	movs	r3, #1
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b0      	blx	r6
 80095f8:	4602      	mov	r2, r0
 80095fa:	1c50      	adds	r0, r2, #1
 80095fc:	d1c9      	bne.n	8009592 <__sflush_r+0x32>
 80095fe:	682b      	ldr	r3, [r5, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d0c6      	beq.n	8009592 <__sflush_r+0x32>
 8009604:	2b1d      	cmp	r3, #29
 8009606:	d001      	beq.n	800960c <__sflush_r+0xac>
 8009608:	2b16      	cmp	r3, #22
 800960a:	d11e      	bne.n	800964a <__sflush_r+0xea>
 800960c:	602f      	str	r7, [r5, #0]
 800960e:	2000      	movs	r0, #0
 8009610:	e022      	b.n	8009658 <__sflush_r+0xf8>
 8009612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009616:	b21b      	sxth	r3, r3
 8009618:	e01b      	b.n	8009652 <__sflush_r+0xf2>
 800961a:	690f      	ldr	r7, [r1, #16]
 800961c:	2f00      	cmp	r7, #0
 800961e:	d0f6      	beq.n	800960e <__sflush_r+0xae>
 8009620:	0793      	lsls	r3, r2, #30
 8009622:	680e      	ldr	r6, [r1, #0]
 8009624:	bf08      	it	eq
 8009626:	694b      	ldreq	r3, [r1, #20]
 8009628:	600f      	str	r7, [r1, #0]
 800962a:	bf18      	it	ne
 800962c:	2300      	movne	r3, #0
 800962e:	eba6 0807 	sub.w	r8, r6, r7
 8009632:	608b      	str	r3, [r1, #8]
 8009634:	f1b8 0f00 	cmp.w	r8, #0
 8009638:	dde9      	ble.n	800960e <__sflush_r+0xae>
 800963a:	6a21      	ldr	r1, [r4, #32]
 800963c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800963e:	4643      	mov	r3, r8
 8009640:	463a      	mov	r2, r7
 8009642:	4628      	mov	r0, r5
 8009644:	47b0      	blx	r6
 8009646:	2800      	cmp	r0, #0
 8009648:	dc08      	bgt.n	800965c <__sflush_r+0xfc>
 800964a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800964e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800965c:	4407      	add	r7, r0
 800965e:	eba8 0800 	sub.w	r8, r8, r0
 8009662:	e7e7      	b.n	8009634 <__sflush_r+0xd4>
 8009664:	dfbffffe 	.word	0xdfbffffe

08009668 <_fflush_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	690b      	ldr	r3, [r1, #16]
 800966c:	4605      	mov	r5, r0
 800966e:	460c      	mov	r4, r1
 8009670:	b913      	cbnz	r3, 8009678 <_fflush_r+0x10>
 8009672:	2500      	movs	r5, #0
 8009674:	4628      	mov	r0, r5
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	b118      	cbz	r0, 8009682 <_fflush_r+0x1a>
 800967a:	6a03      	ldr	r3, [r0, #32]
 800967c:	b90b      	cbnz	r3, 8009682 <_fflush_r+0x1a>
 800967e:	f7fe ff95 	bl	80085ac <__sinit>
 8009682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d0f3      	beq.n	8009672 <_fflush_r+0xa>
 800968a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800968c:	07d0      	lsls	r0, r2, #31
 800968e:	d404      	bmi.n	800969a <_fflush_r+0x32>
 8009690:	0599      	lsls	r1, r3, #22
 8009692:	d402      	bmi.n	800969a <_fflush_r+0x32>
 8009694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009696:	f7ff fa2a 	bl	8008aee <__retarget_lock_acquire_recursive>
 800969a:	4628      	mov	r0, r5
 800969c:	4621      	mov	r1, r4
 800969e:	f7ff ff5f 	bl	8009560 <__sflush_r>
 80096a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096a4:	07da      	lsls	r2, r3, #31
 80096a6:	4605      	mov	r5, r0
 80096a8:	d4e4      	bmi.n	8009674 <_fflush_r+0xc>
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	059b      	lsls	r3, r3, #22
 80096ae:	d4e1      	bmi.n	8009674 <_fflush_r+0xc>
 80096b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096b2:	f7ff fa1d 	bl	8008af0 <__retarget_lock_release_recursive>
 80096b6:	e7dd      	b.n	8009674 <_fflush_r+0xc>

080096b8 <__swhatbuf_r>:
 80096b8:	b570      	push	{r4, r5, r6, lr}
 80096ba:	460c      	mov	r4, r1
 80096bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c0:	2900      	cmp	r1, #0
 80096c2:	b096      	sub	sp, #88	@ 0x58
 80096c4:	4615      	mov	r5, r2
 80096c6:	461e      	mov	r6, r3
 80096c8:	da0d      	bge.n	80096e6 <__swhatbuf_r+0x2e>
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80096d0:	f04f 0100 	mov.w	r1, #0
 80096d4:	bf14      	ite	ne
 80096d6:	2340      	movne	r3, #64	@ 0x40
 80096d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80096dc:	2000      	movs	r0, #0
 80096de:	6031      	str	r1, [r6, #0]
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	b016      	add	sp, #88	@ 0x58
 80096e4:	bd70      	pop	{r4, r5, r6, pc}
 80096e6:	466a      	mov	r2, sp
 80096e8:	f000 f862 	bl	80097b0 <_fstat_r>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	dbec      	blt.n	80096ca <__swhatbuf_r+0x12>
 80096f0:	9901      	ldr	r1, [sp, #4]
 80096f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096fa:	4259      	negs	r1, r3
 80096fc:	4159      	adcs	r1, r3
 80096fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009702:	e7eb      	b.n	80096dc <__swhatbuf_r+0x24>

08009704 <__smakebuf_r>:
 8009704:	898b      	ldrh	r3, [r1, #12]
 8009706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009708:	079d      	lsls	r5, r3, #30
 800970a:	4606      	mov	r6, r0
 800970c:	460c      	mov	r4, r1
 800970e:	d507      	bpl.n	8009720 <__smakebuf_r+0x1c>
 8009710:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	6123      	str	r3, [r4, #16]
 8009718:	2301      	movs	r3, #1
 800971a:	6163      	str	r3, [r4, #20]
 800971c:	b003      	add	sp, #12
 800971e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009720:	ab01      	add	r3, sp, #4
 8009722:	466a      	mov	r2, sp
 8009724:	f7ff ffc8 	bl	80096b8 <__swhatbuf_r>
 8009728:	9f00      	ldr	r7, [sp, #0]
 800972a:	4605      	mov	r5, r0
 800972c:	4639      	mov	r1, r7
 800972e:	4630      	mov	r0, r6
 8009730:	f7ff fa62 	bl	8008bf8 <_malloc_r>
 8009734:	b948      	cbnz	r0, 800974a <__smakebuf_r+0x46>
 8009736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800973a:	059a      	lsls	r2, r3, #22
 800973c:	d4ee      	bmi.n	800971c <__smakebuf_r+0x18>
 800973e:	f023 0303 	bic.w	r3, r3, #3
 8009742:	f043 0302 	orr.w	r3, r3, #2
 8009746:	81a3      	strh	r3, [r4, #12]
 8009748:	e7e2      	b.n	8009710 <__smakebuf_r+0xc>
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	6020      	str	r0, [r4, #0]
 800974e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009752:	81a3      	strh	r3, [r4, #12]
 8009754:	9b01      	ldr	r3, [sp, #4]
 8009756:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800975a:	b15b      	cbz	r3, 8009774 <__smakebuf_r+0x70>
 800975c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009760:	4630      	mov	r0, r6
 8009762:	f000 f837 	bl	80097d4 <_isatty_r>
 8009766:	b128      	cbz	r0, 8009774 <__smakebuf_r+0x70>
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	f023 0303 	bic.w	r3, r3, #3
 800976e:	f043 0301 	orr.w	r3, r3, #1
 8009772:	81a3      	strh	r3, [r4, #12]
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	431d      	orrs	r5, r3
 8009778:	81a5      	strh	r5, [r4, #12]
 800977a:	e7cf      	b.n	800971c <__smakebuf_r+0x18>

0800977c <memmove>:
 800977c:	4288      	cmp	r0, r1
 800977e:	b510      	push	{r4, lr}
 8009780:	eb01 0402 	add.w	r4, r1, r2
 8009784:	d902      	bls.n	800978c <memmove+0x10>
 8009786:	4284      	cmp	r4, r0
 8009788:	4623      	mov	r3, r4
 800978a:	d807      	bhi.n	800979c <memmove+0x20>
 800978c:	1e43      	subs	r3, r0, #1
 800978e:	42a1      	cmp	r1, r4
 8009790:	d008      	beq.n	80097a4 <memmove+0x28>
 8009792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800979a:	e7f8      	b.n	800978e <memmove+0x12>
 800979c:	4402      	add	r2, r0
 800979e:	4601      	mov	r1, r0
 80097a0:	428a      	cmp	r2, r1
 80097a2:	d100      	bne.n	80097a6 <memmove+0x2a>
 80097a4:	bd10      	pop	{r4, pc}
 80097a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097ae:	e7f7      	b.n	80097a0 <memmove+0x24>

080097b0 <_fstat_r>:
 80097b0:	b538      	push	{r3, r4, r5, lr}
 80097b2:	4d07      	ldr	r5, [pc, #28]	@ (80097d0 <_fstat_r+0x20>)
 80097b4:	2300      	movs	r3, #0
 80097b6:	4604      	mov	r4, r0
 80097b8:	4608      	mov	r0, r1
 80097ba:	4611      	mov	r1, r2
 80097bc:	602b      	str	r3, [r5, #0]
 80097be:	f7f7 fe68 	bl	8001492 <_fstat>
 80097c2:	1c43      	adds	r3, r0, #1
 80097c4:	d102      	bne.n	80097cc <_fstat_r+0x1c>
 80097c6:	682b      	ldr	r3, [r5, #0]
 80097c8:	b103      	cbz	r3, 80097cc <_fstat_r+0x1c>
 80097ca:	6023      	str	r3, [r4, #0]
 80097cc:	bd38      	pop	{r3, r4, r5, pc}
 80097ce:	bf00      	nop
 80097d0:	20005008 	.word	0x20005008

080097d4 <_isatty_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4d06      	ldr	r5, [pc, #24]	@ (80097f0 <_isatty_r+0x1c>)
 80097d8:	2300      	movs	r3, #0
 80097da:	4604      	mov	r4, r0
 80097dc:	4608      	mov	r0, r1
 80097de:	602b      	str	r3, [r5, #0]
 80097e0:	f7f7 fe67 	bl	80014b2 <_isatty>
 80097e4:	1c43      	adds	r3, r0, #1
 80097e6:	d102      	bne.n	80097ee <_isatty_r+0x1a>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	b103      	cbz	r3, 80097ee <_isatty_r+0x1a>
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	bd38      	pop	{r3, r4, r5, pc}
 80097f0:	20005008 	.word	0x20005008

080097f4 <_sbrk_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4d06      	ldr	r5, [pc, #24]	@ (8009810 <_sbrk_r+0x1c>)
 80097f8:	2300      	movs	r3, #0
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	602b      	str	r3, [r5, #0]
 8009800:	f7f7 fe70 	bl	80014e4 <_sbrk>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d102      	bne.n	800980e <_sbrk_r+0x1a>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	b103      	cbz	r3, 800980e <_sbrk_r+0x1a>
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	20005008 	.word	0x20005008

08009814 <_realloc_r>:
 8009814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009818:	4680      	mov	r8, r0
 800981a:	4615      	mov	r5, r2
 800981c:	460c      	mov	r4, r1
 800981e:	b921      	cbnz	r1, 800982a <_realloc_r+0x16>
 8009820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009824:	4611      	mov	r1, r2
 8009826:	f7ff b9e7 	b.w	8008bf8 <_malloc_r>
 800982a:	b92a      	cbnz	r2, 8009838 <_realloc_r+0x24>
 800982c:	f7ff f978 	bl	8008b20 <_free_r>
 8009830:	2400      	movs	r4, #0
 8009832:	4620      	mov	r0, r4
 8009834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009838:	f000 f81a 	bl	8009870 <_malloc_usable_size_r>
 800983c:	4285      	cmp	r5, r0
 800983e:	4606      	mov	r6, r0
 8009840:	d802      	bhi.n	8009848 <_realloc_r+0x34>
 8009842:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009846:	d8f4      	bhi.n	8009832 <_realloc_r+0x1e>
 8009848:	4629      	mov	r1, r5
 800984a:	4640      	mov	r0, r8
 800984c:	f7ff f9d4 	bl	8008bf8 <_malloc_r>
 8009850:	4607      	mov	r7, r0
 8009852:	2800      	cmp	r0, #0
 8009854:	d0ec      	beq.n	8009830 <_realloc_r+0x1c>
 8009856:	42b5      	cmp	r5, r6
 8009858:	462a      	mov	r2, r5
 800985a:	4621      	mov	r1, r4
 800985c:	bf28      	it	cs
 800985e:	4632      	movcs	r2, r6
 8009860:	f7ff f94f 	bl	8008b02 <memcpy>
 8009864:	4621      	mov	r1, r4
 8009866:	4640      	mov	r0, r8
 8009868:	f7ff f95a 	bl	8008b20 <_free_r>
 800986c:	463c      	mov	r4, r7
 800986e:	e7e0      	b.n	8009832 <_realloc_r+0x1e>

08009870 <_malloc_usable_size_r>:
 8009870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009874:	1f18      	subs	r0, r3, #4
 8009876:	2b00      	cmp	r3, #0
 8009878:	bfbc      	itt	lt
 800987a:	580b      	ldrlt	r3, [r1, r0]
 800987c:	18c0      	addlt	r0, r0, r3
 800987e:	4770      	bx	lr

08009880 <_init>:
 8009880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009882:	bf00      	nop
 8009884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009886:	bc08      	pop	{r3}
 8009888:	469e      	mov	lr, r3
 800988a:	4770      	bx	lr

0800988c <_fini>:
 800988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988e:	bf00      	nop
 8009890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009892:	bc08      	pop	{r3}
 8009894:	469e      	mov	lr, r3
 8009896:	4770      	bx	lr
